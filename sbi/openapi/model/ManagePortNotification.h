/**
 * 3gpp-nidd
 * API for non IP data delivery. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ManagePortNotification.h
 *
 * Represents a ManagePort notification of port numbers that are reserved.
 */

#ifndef ManagePortNotification_H_
#define ManagePortNotification_H_

#include "ManagePort.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a ManagePort notification of port numbers that are reserved.
/// </summary>
class ManagePortNotification {
public:
  ManagePortNotification();
  virtual ~ManagePortNotification();

  void validate();

  /////////////////////////////////////////////
  /// ManagePortNotification members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getNiddConfiguration() const;
  void setNiddConfiguration(std::string const &value);
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clause 4.6.2 of 3GPP TS 23.682 for more information.
  /// </summary>
  std::string getExternalId() const;
  void setExternalId(std::string const &value);
  bool externalIdIsSet() const;
  void unsetExternalId();
  /// <summary>
  /// string formatted according to subclause 3.3 of 3GPP TS 23.003 that
  /// describes an MSISDN.
  /// </summary>
  std::string getMsisdn() const;
  void setMsisdn(std::string const &value);
  bool msisdnIsSet() const;
  void unsetMsisdn();
  /// <summary>
  /// Indicates the reserved RDS port configuration information.
  /// </summary>
  std::vector<ManagePort> &getManagedPorts();
  void setManagedPorts(std::vector<ManagePort> const &value);
  bool managedPortsIsSet() const;
  void unsetManagedPorts();

  friend void to_json(nlohmann::json &j, const ManagePortNotification &o);
  friend void from_json(const nlohmann::json &j, ManagePortNotification &o);

protected:
  std::string m_NiddConfiguration;

  std::string m_ExternalId;
  bool m_ExternalIdIsSet;
  std::string m_Msisdn;
  bool m_MsisdnIsSet;
  std::vector<ManagePort> m_ManagedPorts;
  bool m_ManagedPortsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ManagePortNotification_H_ */
