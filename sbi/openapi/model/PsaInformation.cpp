/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PsaInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PsaInformation::PsaInformation() {
  m_PsaIndIsSet = false;
  m_DnaiListIsSet = false;
  m_UeIpv6PrefixIsSet = false;
  m_PsaUpfId = "";
  m_PsaUpfIdIsSet = false;
}

PsaInformation::~PsaInformation() {}

void PsaInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PsaInformation &o) {
  j = nlohmann::json();
  if (o.psaIndIsSet())
    j["psaInd"] = o.m_PsaInd;
  if (o.dnaiListIsSet() || !o.m_DnaiList.empty())
    j["dnaiList"] = o.m_DnaiList;
  if (o.ueIpv6PrefixIsSet())
    j["ueIpv6Prefix"] = o.m_UeIpv6Prefix;
  if (o.psaUpfIdIsSet())
    j["psaUpfId"] = o.m_PsaUpfId;
}

void from_json(const nlohmann::json &j, PsaInformation &o) {
  if (j.find("psaInd") != j.end()) {
    j.at("psaInd").get_to(o.m_PsaInd);
    o.m_PsaIndIsSet = true;
  }
  if (j.find("dnaiList") != j.end()) {
    j.at("dnaiList").get_to(o.m_DnaiList);
    o.m_DnaiListIsSet = true;
  }
  if (j.find("ueIpv6Prefix") != j.end()) {
    j.at("ueIpv6Prefix").get_to(o.m_UeIpv6Prefix);
    o.m_UeIpv6PrefixIsSet = true;
  }
  if (j.find("psaUpfId") != j.end()) {
    j.at("psaUpfId").get_to(o.m_PsaUpfId);
    o.m_PsaUpfIdIsSet = true;
  }
}

PsaIndication PsaInformation::getPsaInd() const { return m_PsaInd; }
void PsaInformation::setPsaInd(PsaIndication const &value) {
  m_PsaInd = value;
  m_PsaIndIsSet = true;
}
bool PsaInformation::psaIndIsSet() const { return m_PsaIndIsSet; }
void PsaInformation::unsetPsaInd() { m_PsaIndIsSet = false; }
std::vector<std::string> &PsaInformation::getDnaiList() { return m_DnaiList; }
void PsaInformation::setDnaiList(std::vector<std::string> const &value) {
  m_DnaiList = value;
  m_DnaiListIsSet = true;
}
bool PsaInformation::dnaiListIsSet() const { return m_DnaiListIsSet; }
void PsaInformation::unsetDnaiList() { m_DnaiListIsSet = false; }
Ipv6Prefix PsaInformation::getUeIpv6Prefix() const { return m_UeIpv6Prefix; }
void PsaInformation::setUeIpv6Prefix(Ipv6Prefix const &value) {
  m_UeIpv6Prefix = value;
  m_UeIpv6PrefixIsSet = true;
}
bool PsaInformation::ueIpv6PrefixIsSet() const { return m_UeIpv6PrefixIsSet; }
void PsaInformation::unsetUeIpv6Prefix() { m_UeIpv6PrefixIsSet = false; }
std::string PsaInformation::getPsaUpfId() const { return m_PsaUpfId; }
void PsaInformation::setPsaUpfId(std::string const &value) {
  m_PsaUpfId = value;
  m_PsaUpfIdIsSet = true;
}
bool PsaInformation::psaUpfIdIsSet() const { return m_PsaUpfIdIsSet; }
void PsaInformation::unsetPsaUpfId() { m_PsaUpfIdIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
