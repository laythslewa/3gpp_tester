/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RegistrationContextContainer.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RegistrationContextContainer::RegistrationContextContainer() {
  m_LocalTimeZone = "";
  m_LocalTimeZoneIsSet = false;
  m_AnN2ApId = 0;
  m_InitialAmfName = "";
  m_RrcEstCause = "";
  m_RrcEstCauseIsSet = false;
  m_UeContextRequest = false;
  m_UeContextRequestIsSet = false;
  m_InitialAmfN2ApId = 0;
  m_InitialAmfN2ApIdIsSet = false;
  m_AnN2IPv4Addr = "";
  m_AnN2IPv4AddrIsSet = false;
  m_AnN2IPv6AddrIsSet = false;
  m_AllowedNssaiIsSet = false;
  m_ConfiguredNssaiIsSet = false;
  m_RejectedNssaiInPlmnIsSet = false;
  m_RejectedNssaiInTaIsSet = false;
  m_SelectedPlmnIdIsSet = false;
  m_IabNodeInd = false;
  m_IabNodeIndIsSet = false;
  m_CeModeBIndIsSet = false;
  m_LteMIndIsSet = false;
  m_AuthenticatedInd = false;
  m_AuthenticatedIndIsSet = false;
  m_NpnAccessInfoIsSet = false;
}

RegistrationContextContainer::~RegistrationContextContainer() {}

void RegistrationContextContainer::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const RegistrationContextContainer &o) {
  j = nlohmann::json();
  j["ueContext"] = o.m_UeContext;
  if (o.localTimeZoneIsSet())
    j["localTimeZone"] = o.m_LocalTimeZone;
  j["anType"] = o.m_AnType;
  j["anN2ApId"] = o.m_AnN2ApId;
  j["ranNodeId"] = o.m_RanNodeId;
  j["initialAmfName"] = o.m_InitialAmfName;
  j["userLocation"] = o.m_UserLocation;
  if (o.rrcEstCauseIsSet())
    j["rrcEstCause"] = o.m_RrcEstCause;
  if (o.ueContextRequestIsSet())
    j["ueContextRequest"] = o.m_UeContextRequest;
  if (o.initialAmfN2ApIdIsSet())
    j["initialAmfN2ApId"] = o.m_InitialAmfN2ApId;
  if (o.anN2IPv4AddrIsSet())
    j["anN2IPv4Addr"] = o.m_AnN2IPv4Addr;
  if (o.anN2IPv6AddrIsSet())
    j["anN2IPv6Addr"] = o.m_AnN2IPv6Addr;
  if (o.allowedNssaiIsSet())
    j["allowedNssai"] = o.m_AllowedNssai;
  if (o.configuredNssaiIsSet() || !o.m_ConfiguredNssai.empty())
    j["configuredNssai"] = o.m_ConfiguredNssai;
  if (o.rejectedNssaiInPlmnIsSet() || !o.m_RejectedNssaiInPlmn.empty())
    j["rejectedNssaiInPlmn"] = o.m_RejectedNssaiInPlmn;
  if (o.rejectedNssaiInTaIsSet() || !o.m_RejectedNssaiInTa.empty())
    j["rejectedNssaiInTa"] = o.m_RejectedNssaiInTa;
  if (o.selectedPlmnIdIsSet())
    j["selectedPlmnId"] = o.m_SelectedPlmnId;
  if (o.iabNodeIndIsSet())
    j["iabNodeInd"] = o.m_IabNodeInd;
  if (o.ceModeBIndIsSet())
    j["ceModeBInd"] = o.m_CeModeBInd;
  if (o.lteMIndIsSet())
    j["lteMInd"] = o.m_LteMInd;
  if (o.authenticatedIndIsSet())
    j["authenticatedInd"] = o.m_AuthenticatedInd;
  if (o.npnAccessInfoIsSet())
    j["npnAccessInfo"] = o.m_NpnAccessInfo;
}

void from_json(const nlohmann::json &j, RegistrationContextContainer &o) {
  j.at("ueContext").get_to(o.m_UeContext);
  if (j.find("localTimeZone") != j.end()) {
    j.at("localTimeZone").get_to(o.m_LocalTimeZone);
    o.m_LocalTimeZoneIsSet = true;
  }
  j.at("anType").get_to(o.m_AnType);
  j.at("anN2ApId").get_to(o.m_AnN2ApId);
  j.at("ranNodeId").get_to(o.m_RanNodeId);
  j.at("initialAmfName").get_to(o.m_InitialAmfName);
  j.at("userLocation").get_to(o.m_UserLocation);
  if (j.find("rrcEstCause") != j.end()) {
    j.at("rrcEstCause").get_to(o.m_RrcEstCause);
    o.m_RrcEstCauseIsSet = true;
  }
  if (j.find("ueContextRequest") != j.end()) {
    j.at("ueContextRequest").get_to(o.m_UeContextRequest);
    o.m_UeContextRequestIsSet = true;
  }
  if (j.find("initialAmfN2ApId") != j.end()) {
    j.at("initialAmfN2ApId").get_to(o.m_InitialAmfN2ApId);
    o.m_InitialAmfN2ApIdIsSet = true;
  }
  if (j.find("anN2IPv4Addr") != j.end()) {
    j.at("anN2IPv4Addr").get_to(o.m_AnN2IPv4Addr);
    o.m_AnN2IPv4AddrIsSet = true;
  }
  if (j.find("anN2IPv6Addr") != j.end()) {
    j.at("anN2IPv6Addr").get_to(o.m_AnN2IPv6Addr);
    o.m_AnN2IPv6AddrIsSet = true;
  }
  if (j.find("allowedNssai") != j.end()) {
    j.at("allowedNssai").get_to(o.m_AllowedNssai);
    o.m_AllowedNssaiIsSet = true;
  }
  if (j.find("configuredNssai") != j.end()) {
    j.at("configuredNssai").get_to(o.m_ConfiguredNssai);
    o.m_ConfiguredNssaiIsSet = true;
  }
  if (j.find("rejectedNssaiInPlmn") != j.end()) {
    j.at("rejectedNssaiInPlmn").get_to(o.m_RejectedNssaiInPlmn);
    o.m_RejectedNssaiInPlmnIsSet = true;
  }
  if (j.find("rejectedNssaiInTa") != j.end()) {
    j.at("rejectedNssaiInTa").get_to(o.m_RejectedNssaiInTa);
    o.m_RejectedNssaiInTaIsSet = true;
  }
  if (j.find("selectedPlmnId") != j.end()) {
    j.at("selectedPlmnId").get_to(o.m_SelectedPlmnId);
    o.m_SelectedPlmnIdIsSet = true;
  }
  if (j.find("iabNodeInd") != j.end()) {
    j.at("iabNodeInd").get_to(o.m_IabNodeInd);
    o.m_IabNodeIndIsSet = true;
  }
  if (j.find("ceModeBInd") != j.end()) {
    j.at("ceModeBInd").get_to(o.m_CeModeBInd);
    o.m_CeModeBIndIsSet = true;
  }
  if (j.find("lteMInd") != j.end()) {
    j.at("lteMInd").get_to(o.m_LteMInd);
    o.m_LteMIndIsSet = true;
  }
  if (j.find("authenticatedInd") != j.end()) {
    j.at("authenticatedInd").get_to(o.m_AuthenticatedInd);
    o.m_AuthenticatedIndIsSet = true;
  }
  if (j.find("npnAccessInfo") != j.end()) {
    j.at("npnAccessInfo").get_to(o.m_NpnAccessInfo);
    o.m_NpnAccessInfoIsSet = true;
  }
}

UeContext RegistrationContextContainer::getUeContext() const {
  return m_UeContext;
}
void RegistrationContextContainer::setUeContext(UeContext const &value) {
  m_UeContext = value;
}
std::string RegistrationContextContainer::getLocalTimeZone() const {
  return m_LocalTimeZone;
}
void RegistrationContextContainer::setLocalTimeZone(std::string const &value) {
  m_LocalTimeZone = value;
  m_LocalTimeZoneIsSet = true;
}
bool RegistrationContextContainer::localTimeZoneIsSet() const {
  return m_LocalTimeZoneIsSet;
}
void RegistrationContextContainer::unsetLocalTimeZone() {
  m_LocalTimeZoneIsSet = false;
}
AccessType RegistrationContextContainer::getAnType() const { return m_AnType; }
void RegistrationContextContainer::setAnType(AccessType const &value) {
  m_AnType = value;
}
int32_t RegistrationContextContainer::getAnN2ApId() const { return m_AnN2ApId; }
void RegistrationContextContainer::setAnN2ApId(int32_t const value) {
  m_AnN2ApId = value;
}
GlobalRanNodeId RegistrationContextContainer::getRanNodeId() const {
  return m_RanNodeId;
}
void RegistrationContextContainer::setRanNodeId(GlobalRanNodeId const &value) {
  m_RanNodeId = value;
}
std::string RegistrationContextContainer::getInitialAmfName() const {
  return m_InitialAmfName;
}
void RegistrationContextContainer::setInitialAmfName(std::string const &value) {
  m_InitialAmfName = value;
}
UserLocation RegistrationContextContainer::getUserLocation() const {
  return m_UserLocation;
}
void RegistrationContextContainer::setUserLocation(UserLocation const &value) {
  m_UserLocation = value;
}
std::string RegistrationContextContainer::getRrcEstCause() const {
  return m_RrcEstCause;
}
void RegistrationContextContainer::setRrcEstCause(std::string const &value) {
  m_RrcEstCause = value;
  m_RrcEstCauseIsSet = true;
}
bool RegistrationContextContainer::rrcEstCauseIsSet() const {
  return m_RrcEstCauseIsSet;
}
void RegistrationContextContainer::unsetRrcEstCause() {
  m_RrcEstCauseIsSet = false;
}
bool RegistrationContextContainer::isUeContextRequest() const {
  return m_UeContextRequest;
}
void RegistrationContextContainer::setUeContextRequest(bool const value) {
  m_UeContextRequest = value;
  m_UeContextRequestIsSet = true;
}
bool RegistrationContextContainer::ueContextRequestIsSet() const {
  return m_UeContextRequestIsSet;
}
void RegistrationContextContainer::unsetUeContextRequest() {
  m_UeContextRequestIsSet = false;
}
int32_t RegistrationContextContainer::getInitialAmfN2ApId() const {
  return m_InitialAmfN2ApId;
}
void RegistrationContextContainer::setInitialAmfN2ApId(int32_t const value) {
  m_InitialAmfN2ApId = value;
  m_InitialAmfN2ApIdIsSet = true;
}
bool RegistrationContextContainer::initialAmfN2ApIdIsSet() const {
  return m_InitialAmfN2ApIdIsSet;
}
void RegistrationContextContainer::unsetInitialAmfN2ApId() {
  m_InitialAmfN2ApIdIsSet = false;
}
std::string RegistrationContextContainer::getAnN2IPv4Addr() const {
  return m_AnN2IPv4Addr;
}
void RegistrationContextContainer::setAnN2IPv4Addr(std::string const &value) {
  m_AnN2IPv4Addr = value;
  m_AnN2IPv4AddrIsSet = true;
}
bool RegistrationContextContainer::anN2IPv4AddrIsSet() const {
  return m_AnN2IPv4AddrIsSet;
}
void RegistrationContextContainer::unsetAnN2IPv4Addr() {
  m_AnN2IPv4AddrIsSet = false;
}
Ipv6Addr RegistrationContextContainer::getAnN2IPv6Addr() const {
  return m_AnN2IPv6Addr;
}
void RegistrationContextContainer::setAnN2IPv6Addr(Ipv6Addr const &value) {
  m_AnN2IPv6Addr = value;
  m_AnN2IPv6AddrIsSet = true;
}
bool RegistrationContextContainer::anN2IPv6AddrIsSet() const {
  return m_AnN2IPv6AddrIsSet;
}
void RegistrationContextContainer::unsetAnN2IPv6Addr() {
  m_AnN2IPv6AddrIsSet = false;
}
AllowedNssai RegistrationContextContainer::getAllowedNssai() const {
  return m_AllowedNssai;
}
void RegistrationContextContainer::setAllowedNssai(AllowedNssai const &value) {
  m_AllowedNssai = value;
  m_AllowedNssaiIsSet = true;
}
bool RegistrationContextContainer::allowedNssaiIsSet() const {
  return m_AllowedNssaiIsSet;
}
void RegistrationContextContainer::unsetAllowedNssai() {
  m_AllowedNssaiIsSet = false;
}
std::vector<ConfiguredSnssai> &
RegistrationContextContainer::getConfiguredNssai() {
  return m_ConfiguredNssai;
}
void RegistrationContextContainer::setConfiguredNssai(
    std::vector<ConfiguredSnssai> const &value) {
  m_ConfiguredNssai = value;
  m_ConfiguredNssaiIsSet = true;
}
bool RegistrationContextContainer::configuredNssaiIsSet() const {
  return m_ConfiguredNssaiIsSet;
}
void RegistrationContextContainer::unsetConfiguredNssai() {
  m_ConfiguredNssaiIsSet = false;
}
std::vector<Snssai> &RegistrationContextContainer::getRejectedNssaiInPlmn() {
  return m_RejectedNssaiInPlmn;
}
void RegistrationContextContainer::setRejectedNssaiInPlmn(
    std::vector<Snssai> const &value) {
  m_RejectedNssaiInPlmn = value;
  m_RejectedNssaiInPlmnIsSet = true;
}
bool RegistrationContextContainer::rejectedNssaiInPlmnIsSet() const {
  return m_RejectedNssaiInPlmnIsSet;
}
void RegistrationContextContainer::unsetRejectedNssaiInPlmn() {
  m_RejectedNssaiInPlmnIsSet = false;
}
std::vector<Snssai> &RegistrationContextContainer::getRejectedNssaiInTa() {
  return m_RejectedNssaiInTa;
}
void RegistrationContextContainer::setRejectedNssaiInTa(
    std::vector<Snssai> const &value) {
  m_RejectedNssaiInTa = value;
  m_RejectedNssaiInTaIsSet = true;
}
bool RegistrationContextContainer::rejectedNssaiInTaIsSet() const {
  return m_RejectedNssaiInTaIsSet;
}
void RegistrationContextContainer::unsetRejectedNssaiInTa() {
  m_RejectedNssaiInTaIsSet = false;
}
PlmnId RegistrationContextContainer::getSelectedPlmnId() const {
  return m_SelectedPlmnId;
}
void RegistrationContextContainer::setSelectedPlmnId(PlmnId const &value) {
  m_SelectedPlmnId = value;
  m_SelectedPlmnIdIsSet = true;
}
bool RegistrationContextContainer::selectedPlmnIdIsSet() const {
  return m_SelectedPlmnIdIsSet;
}
void RegistrationContextContainer::unsetSelectedPlmnId() {
  m_SelectedPlmnIdIsSet = false;
}
bool RegistrationContextContainer::isIabNodeInd() const { return m_IabNodeInd; }
void RegistrationContextContainer::setIabNodeInd(bool const value) {
  m_IabNodeInd = value;
  m_IabNodeIndIsSet = true;
}
bool RegistrationContextContainer::iabNodeIndIsSet() const {
  return m_IabNodeIndIsSet;
}
void RegistrationContextContainer::unsetIabNodeInd() {
  m_IabNodeIndIsSet = false;
}
CeModeBInd RegistrationContextContainer::getCeModeBInd() const {
  return m_CeModeBInd;
}
void RegistrationContextContainer::setCeModeBInd(CeModeBInd const &value) {
  m_CeModeBInd = value;
  m_CeModeBIndIsSet = true;
}
bool RegistrationContextContainer::ceModeBIndIsSet() const {
  return m_CeModeBIndIsSet;
}
void RegistrationContextContainer::unsetCeModeBInd() {
  m_CeModeBIndIsSet = false;
}
LteMInd RegistrationContextContainer::getLteMInd() const { return m_LteMInd; }
void RegistrationContextContainer::setLteMInd(LteMInd const &value) {
  m_LteMInd = value;
  m_LteMIndIsSet = true;
}
bool RegistrationContextContainer::lteMIndIsSet() const {
  return m_LteMIndIsSet;
}
void RegistrationContextContainer::unsetLteMInd() { m_LteMIndIsSet = false; }
bool RegistrationContextContainer::isAuthenticatedInd() const {
  return m_AuthenticatedInd;
}
void RegistrationContextContainer::setAuthenticatedInd(bool const value) {
  m_AuthenticatedInd = value;
  m_AuthenticatedIndIsSet = true;
}
bool RegistrationContextContainer::authenticatedIndIsSet() const {
  return m_AuthenticatedIndIsSet;
}
void RegistrationContextContainer::unsetAuthenticatedInd() {
  m_AuthenticatedIndIsSet = false;
}
NpnAccessInfo RegistrationContextContainer::getNpnAccessInfo() const {
  return m_NpnAccessInfo;
}
void RegistrationContextContainer::setNpnAccessInfo(
    NpnAccessInfo const &value) {
  m_NpnAccessInfo = value;
  m_NpnAccessInfoIsSet = true;
}
bool RegistrationContextContainer::npnAccessInfoIsSet() const {
  return m_NpnAccessInfoIsSet;
}
void RegistrationContextContainer::unsetNpnAccessInfo() {
  m_NpnAccessInfoIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
