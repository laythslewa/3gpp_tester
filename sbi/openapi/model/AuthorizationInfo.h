/**
 * Nudm_NIDDAU
 * Nudm NIDD Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AuthorizationInfo.h
 *
 *
 */

#ifndef AuthorizationInfo_H_
#define AuthorizationInfo_H_

#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class AuthorizationInfo {
public:
  AuthorizationInfo();
  virtual ~AuthorizationInfo();

  void validate();

  /////////////////////////////////////////////
  /// AuthorizationInfo members

  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  /// <summary>
  /// String uniquely identifying MTC provider information.
  /// </summary>
  std::string getMtcProviderInformation() const;
  void setMtcProviderInformation(std::string const &value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getAuthUpdateCallbackUri() const;
  void setAuthUpdateCallbackUri(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getAfId() const;
  void setAfId(std::string const &value);
  bool afIdIsSet() const;
  void unsetAfId();
  /// <summary>
  /// Identity of the NEF
  /// </summary>
  std::string getNefId() const;
  void setNefId(std::string const &value);
  bool nefIdIsSet() const;
  void unsetNefId();

  friend void to_json(nlohmann::json &j, const AuthorizationInfo &o);
  friend void from_json(const nlohmann::json &j, AuthorizationInfo &o);

protected:
  Snssai m_Snssai;

  std::string m_Dnn;

  std::string m_MtcProviderInformation;

  std::string m_AuthUpdateCallbackUri;

  std::string m_AfId;
  bool m_AfIdIsSet;
  std::string m_NefId;
  bool m_NefIdIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AuthorizationInfo_H_ */
