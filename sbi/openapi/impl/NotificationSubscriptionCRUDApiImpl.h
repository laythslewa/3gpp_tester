/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * NotificationSubscriptionCRUDApiImpl.h
 *
 *
 */

#ifndef NOTIFICATION_SUBSCRIPTION_CRUD_API_IMPL_H_
#define NOTIFICATION_SUBSCRIPTION_CRUD_API_IMPL_H_

#include <memory>
#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>

#include <NotificationSubscriptionCRUDApi.h>

#include <pistache/optional.h>

#include "ClientId.h"
#include "NotificationSubscription.h"
#include "PatchItem.h"
#include "PatchResult.h"
#include "ProblemDetails.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class NotificationSubscriptionCRUDApiImpl
    : public org::openapitools::server::api::NotificationSubscriptionCRUDApi {
public:
  NotificationSubscriptionCRUDApiImpl(std::shared_ptr<Pistache::Rest::Router>);
  ~NotificationSubscriptionCRUDApiImpl() {}

  void create_and_update_notification_subscription(
      const std::string &realmId, const std::string &storageId,
      const std::string &subscriptionId,
      const NotificationSubscription &notificationSubscription,
      const Pistache::Optional<std::string> &supportedFeatures,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifNoneMatch,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifMatch,
      Pistache::Http::ResponseWriter &response);
  void delete_notification_subscription(
      const std::string &realmId, const std::string &storageId,
      const std::string &subscriptionId,
      const Pistache::Optional<ClientId> &clientId,
      const Pistache::Optional<bool> &getPrevious,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifMatch,
      const Pistache::Optional<std::string> &supportedFeatures,
      Pistache::Http::ResponseWriter &response);
  void get_notification_subscription(
      const std::string &realmId, const std::string &storageId,
      const std::string &subscriptionId,
      const Pistache::Optional<std::string> &supportedFeatures,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifNoneMatch,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifModifiedSince,
      Pistache::Http::ResponseWriter &response);
  void update_notification_subscription(
      const std::string &realmId, const std::string &storageId,
      const std::string &subscriptionId,
      const std::vector<PatchItem> &patchItem,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifMatch,
      const Pistache::Optional<std::string> &supportedFeatures,
      Pistache::Http::ResponseWriter &response);
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif