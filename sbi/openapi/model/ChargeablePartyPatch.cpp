/**
 * 3gpp-chargeable-party
 * API for Chargeable Party management. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ChargeablePartyPatch.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ChargeablePartyPatch::ChargeablePartyPatch() {
  m_FlowInfoIsSet = false;
  m_ExterAppId = "";
  m_ExterAppIdIsSet = false;
  m_EthFlowInfoIsSet = false;
  m_SponsoringEnabled = false;
  m_SponsoringEnabledIsSet = false;
  m_ReferenceId = "";
  m_ReferenceIdIsSet = false;
  m_UsageThresholdIsSet = false;
  m_NotificationDestination = "";
  m_NotificationDestinationIsSet = false;
}

ChargeablePartyPatch::~ChargeablePartyPatch() {}

void ChargeablePartyPatch::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ChargeablePartyPatch &o) {
  j = nlohmann::json();
  if (o.flowInfoIsSet() || !o.m_FlowInfo.empty())
    j["flowInfo"] = o.m_FlowInfo;
  if (o.exterAppIdIsSet())
    j["exterAppId"] = o.m_ExterAppId;
  if (o.ethFlowInfoIsSet() || !o.m_EthFlowInfo.empty())
    j["ethFlowInfo"] = o.m_EthFlowInfo;
  if (o.sponsoringEnabledIsSet())
    j["sponsoringEnabled"] = o.m_SponsoringEnabled;
  if (o.referenceIdIsSet())
    j["referenceId"] = o.m_ReferenceId;
  if (o.usageThresholdIsSet())
    j["usageThreshold"] = o.m_UsageThreshold;
  if (o.notificationDestinationIsSet())
    j["notificationDestination"] = o.m_NotificationDestination;
}

void from_json(const nlohmann::json &j, ChargeablePartyPatch &o) {
  if (j.find("flowInfo") != j.end()) {
    j.at("flowInfo").get_to(o.m_FlowInfo);
    o.m_FlowInfoIsSet = true;
  }
  if (j.find("exterAppId") != j.end()) {
    j.at("exterAppId").get_to(o.m_ExterAppId);
    o.m_ExterAppIdIsSet = true;
  }
  if (j.find("ethFlowInfo") != j.end()) {
    j.at("ethFlowInfo").get_to(o.m_EthFlowInfo);
    o.m_EthFlowInfoIsSet = true;
  }
  if (j.find("sponsoringEnabled") != j.end()) {
    j.at("sponsoringEnabled").get_to(o.m_SponsoringEnabled);
    o.m_SponsoringEnabledIsSet = true;
  }
  if (j.find("referenceId") != j.end()) {
    j.at("referenceId").get_to(o.m_ReferenceId);
    o.m_ReferenceIdIsSet = true;
  }
  if (j.find("usageThreshold") != j.end()) {
    j.at("usageThreshold").get_to(o.m_UsageThreshold);
    o.m_UsageThresholdIsSet = true;
  }
  if (j.find("notificationDestination") != j.end()) {
    j.at("notificationDestination").get_to(o.m_NotificationDestination);
    o.m_NotificationDestinationIsSet = true;
  }
}

std::vector<FlowInfo> &ChargeablePartyPatch::getFlowInfo() {
  return m_FlowInfo;
}
void ChargeablePartyPatch::setFlowInfo(std::vector<FlowInfo> const &value) {
  m_FlowInfo = value;
  m_FlowInfoIsSet = true;
}
bool ChargeablePartyPatch::flowInfoIsSet() const { return m_FlowInfoIsSet; }
void ChargeablePartyPatch::unsetFlowInfo() { m_FlowInfoIsSet = false; }
std::string ChargeablePartyPatch::getExterAppId() const { return m_ExterAppId; }
void ChargeablePartyPatch::setExterAppId(std::string const &value) {
  m_ExterAppId = value;
  m_ExterAppIdIsSet = true;
}
bool ChargeablePartyPatch::exterAppIdIsSet() const { return m_ExterAppIdIsSet; }
void ChargeablePartyPatch::unsetExterAppId() { m_ExterAppIdIsSet = false; }
std::vector<EthFlowDescription> &ChargeablePartyPatch::getEthFlowInfo() {
  return m_EthFlowInfo;
}
void ChargeablePartyPatch::setEthFlowInfo(
    std::vector<EthFlowDescription> const &value) {
  m_EthFlowInfo = value;
  m_EthFlowInfoIsSet = true;
}
bool ChargeablePartyPatch::ethFlowInfoIsSet() const {
  return m_EthFlowInfoIsSet;
}
void ChargeablePartyPatch::unsetEthFlowInfo() { m_EthFlowInfoIsSet = false; }
bool ChargeablePartyPatch::isSponsoringEnabled() const {
  return m_SponsoringEnabled;
}
void ChargeablePartyPatch::setSponsoringEnabled(bool const value) {
  m_SponsoringEnabled = value;
  m_SponsoringEnabledIsSet = true;
}
bool ChargeablePartyPatch::sponsoringEnabledIsSet() const {
  return m_SponsoringEnabledIsSet;
}
void ChargeablePartyPatch::unsetSponsoringEnabled() {
  m_SponsoringEnabledIsSet = false;
}
std::string ChargeablePartyPatch::getReferenceId() const {
  return m_ReferenceId;
}
void ChargeablePartyPatch::setReferenceId(std::string const &value) {
  m_ReferenceId = value;
  m_ReferenceIdIsSet = true;
}
bool ChargeablePartyPatch::referenceIdIsSet() const {
  return m_ReferenceIdIsSet;
}
void ChargeablePartyPatch::unsetReferenceId() { m_ReferenceIdIsSet = false; }
UsageThresholdRm ChargeablePartyPatch::getUsageThreshold() const {
  return m_UsageThreshold;
}
void ChargeablePartyPatch::setUsageThreshold(UsageThresholdRm const &value) {
  m_UsageThreshold = value;
  m_UsageThresholdIsSet = true;
}
bool ChargeablePartyPatch::usageThresholdIsSet() const {
  return m_UsageThresholdIsSet;
}
void ChargeablePartyPatch::unsetUsageThreshold() {
  m_UsageThresholdIsSet = false;
}
std::string ChargeablePartyPatch::getNotificationDestination() const {
  return m_NotificationDestination;
}
void ChargeablePartyPatch::setNotificationDestination(
    std::string const &value) {
  m_NotificationDestination = value;
  m_NotificationDestinationIsSet = true;
}
bool ChargeablePartyPatch::notificationDestinationIsSet() const {
  return m_NotificationDestinationIsSet;
}
void ChargeablePartyPatch::unsetNotificationDestination() {
  m_NotificationDestinationIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
