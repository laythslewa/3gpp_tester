/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PduSessionCreateData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PduSessionCreateData::PduSessionCreateData() {
  m_Supi = "";
  m_SupiIsSet = false;
  m_UnauthenticatedSupi = false;
  m_UnauthenticatedSupiIsSet = false;
  m_Pei = "";
  m_PeiIsSet = false;
  m_PduSessionId = 0;
  m_PduSessionIdIsSet = false;
  m_Dnn = "";
  m_SelectedDnn = "";
  m_SelectedDnnIsSet = false;
  m_SNssaiIsSet = false;
  m_VsmfId = "";
  m_VsmfIdIsSet = false;
  m_IsmfId = "";
  m_IsmfIdIsSet = false;
  m_RequestTypeIsSet = false;
  m_EpsBearerIdIsSet = false;
  m_PgwS8cFteidIsSet = false;
  m_VsmfPduSessionUri = "";
  m_VsmfPduSessionUriIsSet = false;
  m_IsmfPduSessionUri = "";
  m_IsmfPduSessionUriIsSet = false;
  m_VcnTunnelInfoIsSet = false;
  m_IcnTunnelInfoIsSet = false;
  m_N9ForwardingTunnelInfoIsSet = false;
  m_AdditionalCnTunnelInfoIsSet = false;
  m_AdditionalAnTypeIsSet = false;
  m_RatTypeIsSet = false;
  m_UeLocationIsSet = false;
  m_UeTimeZone = "";
  m_UeTimeZoneIsSet = false;
  m_AddUeLocationIsSet = false;
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_N1SmInfoFromUeIsSet = false;
  m_UnknownN1SmInfoIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_HPcfId = "";
  m_HPcfIdIsSet = false;
  m_PcfId = "";
  m_PcfIdIsSet = false;
  m_PcfGroupId = "";
  m_PcfGroupIdIsSet = false;
  m_PcfSetId = "";
  m_PcfSetIdIsSet = false;
  m_HoPreparationIndication = false;
  m_HoPreparationIndicationIsSet = false;
  m_SelModeIsSet = false;
  m_AlwaysOnRequested = false;
  m_AlwaysOnRequestedIsSet = false;
  m_UdmGroupId = "";
  m_UdmGroupIdIsSet = false;
  m_RoutingIndicator = "";
  m_RoutingIndicatorIsSet = false;
  m_HNwPubKeyId = 0;
  m_HNwPubKeyIdIsSet = false;
  m_EpsInterworkingIndIsSet = false;
  m_VSmfServiceInstanceId = "";
  m_VSmfServiceInstanceIdIsSet = false;
  m_ISmfServiceInstanceId = "";
  m_ISmfServiceInstanceIdIsSet = false;
  m_RecoveryTime = "";
  m_RecoveryTimeIsSet = false;
  m_RoamingChargingProfileIsSet = false;
  m_ChargingId = "";
  m_ChargingIdIsSet = false;
  m_OldPduSessionId = 0;
  m_OldPduSessionIdIsSet = false;
  m_EpsBearerCtxStatus = "";
  m_EpsBearerCtxStatusIsSet = false;
  m_AmfNfId = "";
  m_AmfNfIdIsSet = false;
  m_GuamiIsSet = false;
  m_MaxIntegrityProtectedDataRateUlIsSet = false;
  m_MaxIntegrityProtectedDataRateDlIsSet = false;
  m_CpCiotEnabled = false;
  m_CpCiotEnabledIsSet = false;
  m_CpOnlyInd = false;
  m_CpOnlyIndIsSet = false;
  m_InvokeNef = false;
  m_InvokeNefIsSet = false;
  m_MaRequestInd = false;
  m_MaRequestIndIsSet = false;
  m_MaNwUpgradeInd = false;
  m_MaNwUpgradeIndIsSet = false;
  m_DnaiListIsSet = false;
  m_PresenceInLadnIsSet = false;
  m_SecondaryRatUsageInfoIsSet = false;
  m_SmallDataRateStatusIsSet = false;
  m_ApnRateStatusIsSet = false;
  m_DlServingPlmnRateCtl = 0;
  m_DlServingPlmnRateCtlIsSet = false;
  m_UpSecurityInfoIsSet = false;
  m_VplmnQosIsSet = false;
  m_IvSmfRestoration = false;
  m_IvSmfRestorationIsSet = false;
}

PduSessionCreateData::~PduSessionCreateData() {}

void PduSessionCreateData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PduSessionCreateData &o) {
  j = nlohmann::json();
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  if (o.unauthenticatedSupiIsSet())
    j["unauthenticatedSupi"] = o.m_UnauthenticatedSupi;
  if (o.peiIsSet())
    j["pei"] = o.m_Pei;
  if (o.pduSessionIdIsSet())
    j["pduSessionId"] = o.m_PduSessionId;
  j["dnn"] = o.m_Dnn;
  if (o.selectedDnnIsSet())
    j["selectedDnn"] = o.m_SelectedDnn;
  if (o.sNssaiIsSet())
    j["sNssai"] = o.m_SNssai;
  if (o.vsmfIdIsSet())
    j["vsmfId"] = o.m_VsmfId;
  if (o.ismfIdIsSet())
    j["ismfId"] = o.m_IsmfId;
  j["servingNetwork"] = o.m_ServingNetwork;
  if (o.requestTypeIsSet())
    j["requestType"] = o.m_RequestType;
  if (o.epsBearerIdIsSet() || !o.m_EpsBearerId.empty())
    j["epsBearerId"] = o.m_EpsBearerId;
  if (o.pgwS8cFteidIsSet())
    j["pgwS8cFteid"] = o.m_PgwS8cFteid;
  if (o.vsmfPduSessionUriIsSet())
    j["vsmfPduSessionUri"] = o.m_VsmfPduSessionUri;
  if (o.ismfPduSessionUriIsSet())
    j["ismfPduSessionUri"] = o.m_IsmfPduSessionUri;
  if (o.vcnTunnelInfoIsSet())
    j["vcnTunnelInfo"] = o.m_VcnTunnelInfo;
  if (o.icnTunnelInfoIsSet())
    j["icnTunnelInfo"] = o.m_IcnTunnelInfo;
  if (o.n9ForwardingTunnelInfoIsSet())
    j["n9ForwardingTunnelInfo"] = o.m_N9ForwardingTunnelInfo;
  if (o.additionalCnTunnelInfoIsSet())
    j["additionalCnTunnelInfo"] = o.m_AdditionalCnTunnelInfo;
  j["anType"] = o.m_AnType;
  if (o.additionalAnTypeIsSet())
    j["additionalAnType"] = o.m_AdditionalAnType;
  if (o.ratTypeIsSet())
    j["ratType"] = o.m_RatType;
  if (o.ueLocationIsSet())
    j["ueLocation"] = o.m_UeLocation;
  if (o.ueTimeZoneIsSet())
    j["ueTimeZone"] = o.m_UeTimeZone;
  if (o.addUeLocationIsSet())
    j["addUeLocation"] = o.m_AddUeLocation;
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  if (o.n1SmInfoFromUeIsSet())
    j["n1SmInfoFromUe"] = o.m_N1SmInfoFromUe;
  if (o.unknownN1SmInfoIsSet())
    j["unknownN1SmInfo"] = o.m_UnknownN1SmInfo;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.hPcfIdIsSet())
    j["hPcfId"] = o.m_HPcfId;
  if (o.pcfIdIsSet())
    j["pcfId"] = o.m_PcfId;
  if (o.pcfGroupIdIsSet())
    j["pcfGroupId"] = o.m_PcfGroupId;
  if (o.pcfSetIdIsSet())
    j["pcfSetId"] = o.m_PcfSetId;
  if (o.hoPreparationIndicationIsSet())
    j["hoPreparationIndication"] = o.m_HoPreparationIndication;
  if (o.selModeIsSet())
    j["selMode"] = o.m_SelMode;
  if (o.alwaysOnRequestedIsSet())
    j["alwaysOnRequested"] = o.m_AlwaysOnRequested;
  if (o.udmGroupIdIsSet())
    j["udmGroupId"] = o.m_UdmGroupId;
  if (o.routingIndicatorIsSet())
    j["routingIndicator"] = o.m_RoutingIndicator;
  if (o.hNwPubKeyIdIsSet())
    j["hNwPubKeyId"] = o.m_HNwPubKeyId;
  if (o.epsInterworkingIndIsSet())
    j["epsInterworkingInd"] = o.m_EpsInterworkingInd;
  if (o.vSmfServiceInstanceIdIsSet())
    j["vSmfServiceInstanceId"] = o.m_VSmfServiceInstanceId;
  if (o.iSmfServiceInstanceIdIsSet())
    j["iSmfServiceInstanceId"] = o.m_ISmfServiceInstanceId;
  if (o.recoveryTimeIsSet())
    j["recoveryTime"] = o.m_RecoveryTime;
  if (o.roamingChargingProfileIsSet())
    j["roamingChargingProfile"] = o.m_RoamingChargingProfile;
  if (o.chargingIdIsSet())
    j["chargingId"] = o.m_ChargingId;
  if (o.oldPduSessionIdIsSet())
    j["oldPduSessionId"] = o.m_OldPduSessionId;
  if (o.epsBearerCtxStatusIsSet())
    j["epsBearerCtxStatus"] = o.m_EpsBearerCtxStatus;
  if (o.amfNfIdIsSet())
    j["amfNfId"] = o.m_AmfNfId;
  if (o.guamiIsSet())
    j["guami"] = o.m_Guami;
  if (o.maxIntegrityProtectedDataRateUlIsSet())
    j["maxIntegrityProtectedDataRateUl"] = o.m_MaxIntegrityProtectedDataRateUl;
  if (o.maxIntegrityProtectedDataRateDlIsSet())
    j["maxIntegrityProtectedDataRateDl"] = o.m_MaxIntegrityProtectedDataRateDl;
  if (o.cpCiotEnabledIsSet())
    j["cpCiotEnabled"] = o.m_CpCiotEnabled;
  if (o.cpOnlyIndIsSet())
    j["cpOnlyInd"] = o.m_CpOnlyInd;
  if (o.invokeNefIsSet())
    j["invokeNef"] = o.m_InvokeNef;
  if (o.maRequestIndIsSet())
    j["maRequestInd"] = o.m_MaRequestInd;
  if (o.maNwUpgradeIndIsSet())
    j["maNwUpgradeInd"] = o.m_MaNwUpgradeInd;
  if (o.dnaiListIsSet() || !o.m_DnaiList.empty())
    j["dnaiList"] = o.m_DnaiList;
  if (o.presenceInLadnIsSet())
    j["presenceInLadn"] = o.m_PresenceInLadn;
  if (o.secondaryRatUsageInfoIsSet() || !o.m_SecondaryRatUsageInfo.empty())
    j["secondaryRatUsageInfo"] = o.m_SecondaryRatUsageInfo;
  if (o.smallDataRateStatusIsSet())
    j["smallDataRateStatus"] = o.m_SmallDataRateStatus;
  if (o.apnRateStatusIsSet())
    j["apnRateStatus"] = o.m_ApnRateStatus;
  if (o.dlServingPlmnRateCtlIsSet())
    j["dlServingPlmnRateCtl"] = o.m_DlServingPlmnRateCtl;
  if (o.upSecurityInfoIsSet())
    j["upSecurityInfo"] = o.m_UpSecurityInfo;
  if (o.vplmnQosIsSet())
    j["vplmnQos"] = o.m_VplmnQos;
  if (o.ivSmfRestorationIsSet())
    j["ivSmfRestoration"] = o.m_IvSmfRestoration;
}

void from_json(const nlohmann::json &j, PduSessionCreateData &o) {
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("unauthenticatedSupi") != j.end()) {
    j.at("unauthenticatedSupi").get_to(o.m_UnauthenticatedSupi);
    o.m_UnauthenticatedSupiIsSet = true;
  }
  if (j.find("pei") != j.end()) {
    j.at("pei").get_to(o.m_Pei);
    o.m_PeiIsSet = true;
  }
  if (j.find("pduSessionId") != j.end()) {
    j.at("pduSessionId").get_to(o.m_PduSessionId);
    o.m_PduSessionIdIsSet = true;
  }
  j.at("dnn").get_to(o.m_Dnn);
  if (j.find("selectedDnn") != j.end()) {
    j.at("selectedDnn").get_to(o.m_SelectedDnn);
    o.m_SelectedDnnIsSet = true;
  }
  if (j.find("sNssai") != j.end()) {
    j.at("sNssai").get_to(o.m_SNssai);
    o.m_SNssaiIsSet = true;
  }
  if (j.find("vsmfId") != j.end()) {
    j.at("vsmfId").get_to(o.m_VsmfId);
    o.m_VsmfIdIsSet = true;
  }
  if (j.find("ismfId") != j.end()) {
    j.at("ismfId").get_to(o.m_IsmfId);
    o.m_IsmfIdIsSet = true;
  }
  j.at("servingNetwork").get_to(o.m_ServingNetwork);
  if (j.find("requestType") != j.end()) {
    j.at("requestType").get_to(o.m_RequestType);
    o.m_RequestTypeIsSet = true;
  }
  if (j.find("epsBearerId") != j.end()) {
    j.at("epsBearerId").get_to(o.m_EpsBearerId);
    o.m_EpsBearerIdIsSet = true;
  }
  if (j.find("pgwS8cFteid") != j.end()) {
    j.at("pgwS8cFteid").get_to(o.m_PgwS8cFteid);
    o.m_PgwS8cFteidIsSet = true;
  }
  if (j.find("vsmfPduSessionUri") != j.end()) {
    j.at("vsmfPduSessionUri").get_to(o.m_VsmfPduSessionUri);
    o.m_VsmfPduSessionUriIsSet = true;
  }
  if (j.find("ismfPduSessionUri") != j.end()) {
    j.at("ismfPduSessionUri").get_to(o.m_IsmfPduSessionUri);
    o.m_IsmfPduSessionUriIsSet = true;
  }
  if (j.find("vcnTunnelInfo") != j.end()) {
    j.at("vcnTunnelInfo").get_to(o.m_VcnTunnelInfo);
    o.m_VcnTunnelInfoIsSet = true;
  }
  if (j.find("icnTunnelInfo") != j.end()) {
    j.at("icnTunnelInfo").get_to(o.m_IcnTunnelInfo);
    o.m_IcnTunnelInfoIsSet = true;
  }
  if (j.find("n9ForwardingTunnelInfo") != j.end()) {
    j.at("n9ForwardingTunnelInfo").get_to(o.m_N9ForwardingTunnelInfo);
    o.m_N9ForwardingTunnelInfoIsSet = true;
  }
  if (j.find("additionalCnTunnelInfo") != j.end()) {
    j.at("additionalCnTunnelInfo").get_to(o.m_AdditionalCnTunnelInfo);
    o.m_AdditionalCnTunnelInfoIsSet = true;
  }
  j.at("anType").get_to(o.m_AnType);
  if (j.find("additionalAnType") != j.end()) {
    j.at("additionalAnType").get_to(o.m_AdditionalAnType);
    o.m_AdditionalAnTypeIsSet = true;
  }
  if (j.find("ratType") != j.end()) {
    j.at("ratType").get_to(o.m_RatType);
    o.m_RatTypeIsSet = true;
  }
  if (j.find("ueLocation") != j.end()) {
    j.at("ueLocation").get_to(o.m_UeLocation);
    o.m_UeLocationIsSet = true;
  }
  if (j.find("ueTimeZone") != j.end()) {
    j.at("ueTimeZone").get_to(o.m_UeTimeZone);
    o.m_UeTimeZoneIsSet = true;
  }
  if (j.find("addUeLocation") != j.end()) {
    j.at("addUeLocation").get_to(o.m_AddUeLocation);
    o.m_AddUeLocationIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("n1SmInfoFromUe") != j.end()) {
    j.at("n1SmInfoFromUe").get_to(o.m_N1SmInfoFromUe);
    o.m_N1SmInfoFromUeIsSet = true;
  }
  if (j.find("unknownN1SmInfo") != j.end()) {
    j.at("unknownN1SmInfo").get_to(o.m_UnknownN1SmInfo);
    o.m_UnknownN1SmInfoIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("hPcfId") != j.end()) {
    j.at("hPcfId").get_to(o.m_HPcfId);
    o.m_HPcfIdIsSet = true;
  }
  if (j.find("pcfId") != j.end()) {
    j.at("pcfId").get_to(o.m_PcfId);
    o.m_PcfIdIsSet = true;
  }
  if (j.find("pcfGroupId") != j.end()) {
    j.at("pcfGroupId").get_to(o.m_PcfGroupId);
    o.m_PcfGroupIdIsSet = true;
  }
  if (j.find("pcfSetId") != j.end()) {
    j.at("pcfSetId").get_to(o.m_PcfSetId);
    o.m_PcfSetIdIsSet = true;
  }
  if (j.find("hoPreparationIndication") != j.end()) {
    j.at("hoPreparationIndication").get_to(o.m_HoPreparationIndication);
    o.m_HoPreparationIndicationIsSet = true;
  }
  if (j.find("selMode") != j.end()) {
    j.at("selMode").get_to(o.m_SelMode);
    o.m_SelModeIsSet = true;
  }
  if (j.find("alwaysOnRequested") != j.end()) {
    j.at("alwaysOnRequested").get_to(o.m_AlwaysOnRequested);
    o.m_AlwaysOnRequestedIsSet = true;
  }
  if (j.find("udmGroupId") != j.end()) {
    j.at("udmGroupId").get_to(o.m_UdmGroupId);
    o.m_UdmGroupIdIsSet = true;
  }
  if (j.find("routingIndicator") != j.end()) {
    j.at("routingIndicator").get_to(o.m_RoutingIndicator);
    o.m_RoutingIndicatorIsSet = true;
  }
  if (j.find("hNwPubKeyId") != j.end()) {
    j.at("hNwPubKeyId").get_to(o.m_HNwPubKeyId);
    o.m_HNwPubKeyIdIsSet = true;
  }
  if (j.find("epsInterworkingInd") != j.end()) {
    j.at("epsInterworkingInd").get_to(o.m_EpsInterworkingInd);
    o.m_EpsInterworkingIndIsSet = true;
  }
  if (j.find("vSmfServiceInstanceId") != j.end()) {
    j.at("vSmfServiceInstanceId").get_to(o.m_VSmfServiceInstanceId);
    o.m_VSmfServiceInstanceIdIsSet = true;
  }
  if (j.find("iSmfServiceInstanceId") != j.end()) {
    j.at("iSmfServiceInstanceId").get_to(o.m_ISmfServiceInstanceId);
    o.m_ISmfServiceInstanceIdIsSet = true;
  }
  if (j.find("recoveryTime") != j.end()) {
    j.at("recoveryTime").get_to(o.m_RecoveryTime);
    o.m_RecoveryTimeIsSet = true;
  }
  if (j.find("roamingChargingProfile") != j.end()) {
    j.at("roamingChargingProfile").get_to(o.m_RoamingChargingProfile);
    o.m_RoamingChargingProfileIsSet = true;
  }
  if (j.find("chargingId") != j.end()) {
    j.at("chargingId").get_to(o.m_ChargingId);
    o.m_ChargingIdIsSet = true;
  }
  if (j.find("oldPduSessionId") != j.end()) {
    j.at("oldPduSessionId").get_to(o.m_OldPduSessionId);
    o.m_OldPduSessionIdIsSet = true;
  }
  if (j.find("epsBearerCtxStatus") != j.end()) {
    j.at("epsBearerCtxStatus").get_to(o.m_EpsBearerCtxStatus);
    o.m_EpsBearerCtxStatusIsSet = true;
  }
  if (j.find("amfNfId") != j.end()) {
    j.at("amfNfId").get_to(o.m_AmfNfId);
    o.m_AmfNfIdIsSet = true;
  }
  if (j.find("guami") != j.end()) {
    j.at("guami").get_to(o.m_Guami);
    o.m_GuamiIsSet = true;
  }
  if (j.find("maxIntegrityProtectedDataRateUl") != j.end()) {
    j.at("maxIntegrityProtectedDataRateUl")
        .get_to(o.m_MaxIntegrityProtectedDataRateUl);
    o.m_MaxIntegrityProtectedDataRateUlIsSet = true;
  }
  if (j.find("maxIntegrityProtectedDataRateDl") != j.end()) {
    j.at("maxIntegrityProtectedDataRateDl")
        .get_to(o.m_MaxIntegrityProtectedDataRateDl);
    o.m_MaxIntegrityProtectedDataRateDlIsSet = true;
  }
  if (j.find("cpCiotEnabled") != j.end()) {
    j.at("cpCiotEnabled").get_to(o.m_CpCiotEnabled);
    o.m_CpCiotEnabledIsSet = true;
  }
  if (j.find("cpOnlyInd") != j.end()) {
    j.at("cpOnlyInd").get_to(o.m_CpOnlyInd);
    o.m_CpOnlyIndIsSet = true;
  }
  if (j.find("invokeNef") != j.end()) {
    j.at("invokeNef").get_to(o.m_InvokeNef);
    o.m_InvokeNefIsSet = true;
  }
  if (j.find("maRequestInd") != j.end()) {
    j.at("maRequestInd").get_to(o.m_MaRequestInd);
    o.m_MaRequestIndIsSet = true;
  }
  if (j.find("maNwUpgradeInd") != j.end()) {
    j.at("maNwUpgradeInd").get_to(o.m_MaNwUpgradeInd);
    o.m_MaNwUpgradeIndIsSet = true;
  }
  if (j.find("dnaiList") != j.end()) {
    j.at("dnaiList").get_to(o.m_DnaiList);
    o.m_DnaiListIsSet = true;
  }
  if (j.find("presenceInLadn") != j.end()) {
    j.at("presenceInLadn").get_to(o.m_PresenceInLadn);
    o.m_PresenceInLadnIsSet = true;
  }
  if (j.find("secondaryRatUsageInfo") != j.end()) {
    j.at("secondaryRatUsageInfo").get_to(o.m_SecondaryRatUsageInfo);
    o.m_SecondaryRatUsageInfoIsSet = true;
  }
  if (j.find("smallDataRateStatus") != j.end()) {
    j.at("smallDataRateStatus").get_to(o.m_SmallDataRateStatus);
    o.m_SmallDataRateStatusIsSet = true;
  }
  if (j.find("apnRateStatus") != j.end()) {
    j.at("apnRateStatus").get_to(o.m_ApnRateStatus);
    o.m_ApnRateStatusIsSet = true;
  }
  if (j.find("dlServingPlmnRateCtl") != j.end()) {
    j.at("dlServingPlmnRateCtl").get_to(o.m_DlServingPlmnRateCtl);
    o.m_DlServingPlmnRateCtlIsSet = true;
  }
  if (j.find("upSecurityInfo") != j.end()) {
    j.at("upSecurityInfo").get_to(o.m_UpSecurityInfo);
    o.m_UpSecurityInfoIsSet = true;
  }
  if (j.find("vplmnQos") != j.end()) {
    j.at("vplmnQos").get_to(o.m_VplmnQos);
    o.m_VplmnQosIsSet = true;
  }
  if (j.find("ivSmfRestoration") != j.end()) {
    j.at("ivSmfRestoration").get_to(o.m_IvSmfRestoration);
    o.m_IvSmfRestorationIsSet = true;
  }
}

std::string PduSessionCreateData::getSupi() const { return m_Supi; }
void PduSessionCreateData::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool PduSessionCreateData::supiIsSet() const { return m_SupiIsSet; }
void PduSessionCreateData::unsetSupi() { m_SupiIsSet = false; }
bool PduSessionCreateData::isUnauthenticatedSupi() const {
  return m_UnauthenticatedSupi;
}
void PduSessionCreateData::setUnauthenticatedSupi(bool const value) {
  m_UnauthenticatedSupi = value;
  m_UnauthenticatedSupiIsSet = true;
}
bool PduSessionCreateData::unauthenticatedSupiIsSet() const {
  return m_UnauthenticatedSupiIsSet;
}
void PduSessionCreateData::unsetUnauthenticatedSupi() {
  m_UnauthenticatedSupiIsSet = false;
}
std::string PduSessionCreateData::getPei() const { return m_Pei; }
void PduSessionCreateData::setPei(std::string const &value) {
  m_Pei = value;
  m_PeiIsSet = true;
}
bool PduSessionCreateData::peiIsSet() const { return m_PeiIsSet; }
void PduSessionCreateData::unsetPei() { m_PeiIsSet = false; }
int32_t PduSessionCreateData::getPduSessionId() const { return m_PduSessionId; }
void PduSessionCreateData::setPduSessionId(int32_t const value) {
  m_PduSessionId = value;
  m_PduSessionIdIsSet = true;
}
bool PduSessionCreateData::pduSessionIdIsSet() const {
  return m_PduSessionIdIsSet;
}
void PduSessionCreateData::unsetPduSessionId() { m_PduSessionIdIsSet = false; }
std::string PduSessionCreateData::getDnn() const { return m_Dnn; }
void PduSessionCreateData::setDnn(std::string const &value) { m_Dnn = value; }
std::string PduSessionCreateData::getSelectedDnn() const {
  return m_SelectedDnn;
}
void PduSessionCreateData::setSelectedDnn(std::string const &value) {
  m_SelectedDnn = value;
  m_SelectedDnnIsSet = true;
}
bool PduSessionCreateData::selectedDnnIsSet() const {
  return m_SelectedDnnIsSet;
}
void PduSessionCreateData::unsetSelectedDnn() { m_SelectedDnnIsSet = false; }
Snssai PduSessionCreateData::getSNssai() const { return m_SNssai; }
void PduSessionCreateData::setSNssai(Snssai const &value) {
  m_SNssai = value;
  m_SNssaiIsSet = true;
}
bool PduSessionCreateData::sNssaiIsSet() const { return m_SNssaiIsSet; }
void PduSessionCreateData::unsetSNssai() { m_SNssaiIsSet = false; }
std::string PduSessionCreateData::getVsmfId() const { return m_VsmfId; }
void PduSessionCreateData::setVsmfId(std::string const &value) {
  m_VsmfId = value;
  m_VsmfIdIsSet = true;
}
bool PduSessionCreateData::vsmfIdIsSet() const { return m_VsmfIdIsSet; }
void PduSessionCreateData::unsetVsmfId() { m_VsmfIdIsSet = false; }
std::string PduSessionCreateData::getIsmfId() const { return m_IsmfId; }
void PduSessionCreateData::setIsmfId(std::string const &value) {
  m_IsmfId = value;
  m_IsmfIdIsSet = true;
}
bool PduSessionCreateData::ismfIdIsSet() const { return m_IsmfIdIsSet; }
void PduSessionCreateData::unsetIsmfId() { m_IsmfIdIsSet = false; }
PlmnIdNid PduSessionCreateData::getServingNetwork() const {
  return m_ServingNetwork;
}
void PduSessionCreateData::setServingNetwork(PlmnIdNid const &value) {
  m_ServingNetwork = value;
}
RequestType PduSessionCreateData::getRequestType() const {
  return m_RequestType;
}
void PduSessionCreateData::setRequestType(RequestType const &value) {
  m_RequestType = value;
  m_RequestTypeIsSet = true;
}
bool PduSessionCreateData::requestTypeIsSet() const {
  return m_RequestTypeIsSet;
}
void PduSessionCreateData::unsetRequestType() { m_RequestTypeIsSet = false; }
std::vector<int32_t> &PduSessionCreateData::getEpsBearerId() {
  return m_EpsBearerId;
}
void PduSessionCreateData::setEpsBearerId(std::vector<int32_t> const value) {
  m_EpsBearerId = value;
  m_EpsBearerIdIsSet = true;
}
bool PduSessionCreateData::epsBearerIdIsSet() const {
  return m_EpsBearerIdIsSet;
}
void PduSessionCreateData::unsetEpsBearerId() { m_EpsBearerIdIsSet = false; }
std::string PduSessionCreateData::getPgwS8cFteid() const {
  return m_PgwS8cFteid;
}
void PduSessionCreateData::setPgwS8cFteid(std::string const &value) {
  m_PgwS8cFteid = value;
  m_PgwS8cFteidIsSet = true;
}
bool PduSessionCreateData::pgwS8cFteidIsSet() const {
  return m_PgwS8cFteidIsSet;
}
void PduSessionCreateData::unsetPgwS8cFteid() { m_PgwS8cFteidIsSet = false; }
std::string PduSessionCreateData::getVsmfPduSessionUri() const {
  return m_VsmfPduSessionUri;
}
void PduSessionCreateData::setVsmfPduSessionUri(std::string const &value) {
  m_VsmfPduSessionUri = value;
  m_VsmfPduSessionUriIsSet = true;
}
bool PduSessionCreateData::vsmfPduSessionUriIsSet() const {
  return m_VsmfPduSessionUriIsSet;
}
void PduSessionCreateData::unsetVsmfPduSessionUri() {
  m_VsmfPduSessionUriIsSet = false;
}
std::string PduSessionCreateData::getIsmfPduSessionUri() const {
  return m_IsmfPduSessionUri;
}
void PduSessionCreateData::setIsmfPduSessionUri(std::string const &value) {
  m_IsmfPduSessionUri = value;
  m_IsmfPduSessionUriIsSet = true;
}
bool PduSessionCreateData::ismfPduSessionUriIsSet() const {
  return m_IsmfPduSessionUriIsSet;
}
void PduSessionCreateData::unsetIsmfPduSessionUri() {
  m_IsmfPduSessionUriIsSet = false;
}
TunnelInfo PduSessionCreateData::getVcnTunnelInfo() const {
  return m_VcnTunnelInfo;
}
void PduSessionCreateData::setVcnTunnelInfo(TunnelInfo const &value) {
  m_VcnTunnelInfo = value;
  m_VcnTunnelInfoIsSet = true;
}
bool PduSessionCreateData::vcnTunnelInfoIsSet() const {
  return m_VcnTunnelInfoIsSet;
}
void PduSessionCreateData::unsetVcnTunnelInfo() {
  m_VcnTunnelInfoIsSet = false;
}
TunnelInfo PduSessionCreateData::getIcnTunnelInfo() const {
  return m_IcnTunnelInfo;
}
void PduSessionCreateData::setIcnTunnelInfo(TunnelInfo const &value) {
  m_IcnTunnelInfo = value;
  m_IcnTunnelInfoIsSet = true;
}
bool PduSessionCreateData::icnTunnelInfoIsSet() const {
  return m_IcnTunnelInfoIsSet;
}
void PduSessionCreateData::unsetIcnTunnelInfo() {
  m_IcnTunnelInfoIsSet = false;
}
TunnelInfo PduSessionCreateData::getN9ForwardingTunnelInfo() const {
  return m_N9ForwardingTunnelInfo;
}
void PduSessionCreateData::setN9ForwardingTunnelInfo(TunnelInfo const &value) {
  m_N9ForwardingTunnelInfo = value;
  m_N9ForwardingTunnelInfoIsSet = true;
}
bool PduSessionCreateData::n9ForwardingTunnelInfoIsSet() const {
  return m_N9ForwardingTunnelInfoIsSet;
}
void PduSessionCreateData::unsetN9ForwardingTunnelInfo() {
  m_N9ForwardingTunnelInfoIsSet = false;
}
TunnelInfo PduSessionCreateData::getAdditionalCnTunnelInfo() const {
  return m_AdditionalCnTunnelInfo;
}
void PduSessionCreateData::setAdditionalCnTunnelInfo(TunnelInfo const &value) {
  m_AdditionalCnTunnelInfo = value;
  m_AdditionalCnTunnelInfoIsSet = true;
}
bool PduSessionCreateData::additionalCnTunnelInfoIsSet() const {
  return m_AdditionalCnTunnelInfoIsSet;
}
void PduSessionCreateData::unsetAdditionalCnTunnelInfo() {
  m_AdditionalCnTunnelInfoIsSet = false;
}
AccessType PduSessionCreateData::getAnType() const { return m_AnType; }
void PduSessionCreateData::setAnType(AccessType const &value) {
  m_AnType = value;
}
AccessType PduSessionCreateData::getAdditionalAnType() const {
  return m_AdditionalAnType;
}
void PduSessionCreateData::setAdditionalAnType(AccessType const &value) {
  m_AdditionalAnType = value;
  m_AdditionalAnTypeIsSet = true;
}
bool PduSessionCreateData::additionalAnTypeIsSet() const {
  return m_AdditionalAnTypeIsSet;
}
void PduSessionCreateData::unsetAdditionalAnType() {
  m_AdditionalAnTypeIsSet = false;
}
RatType PduSessionCreateData::getRatType() const { return m_RatType; }
void PduSessionCreateData::setRatType(RatType const &value) {
  m_RatType = value;
  m_RatTypeIsSet = true;
}
bool PduSessionCreateData::ratTypeIsSet() const { return m_RatTypeIsSet; }
void PduSessionCreateData::unsetRatType() { m_RatTypeIsSet = false; }
UserLocation PduSessionCreateData::getUeLocation() const {
  return m_UeLocation;
}
void PduSessionCreateData::setUeLocation(UserLocation const &value) {
  m_UeLocation = value;
  m_UeLocationIsSet = true;
}
bool PduSessionCreateData::ueLocationIsSet() const { return m_UeLocationIsSet; }
void PduSessionCreateData::unsetUeLocation() { m_UeLocationIsSet = false; }
std::string PduSessionCreateData::getUeTimeZone() const { return m_UeTimeZone; }
void PduSessionCreateData::setUeTimeZone(std::string const &value) {
  m_UeTimeZone = value;
  m_UeTimeZoneIsSet = true;
}
bool PduSessionCreateData::ueTimeZoneIsSet() const { return m_UeTimeZoneIsSet; }
void PduSessionCreateData::unsetUeTimeZone() { m_UeTimeZoneIsSet = false; }
UserLocation PduSessionCreateData::getAddUeLocation() const {
  return m_AddUeLocation;
}
void PduSessionCreateData::setAddUeLocation(UserLocation const &value) {
  m_AddUeLocation = value;
  m_AddUeLocationIsSet = true;
}
bool PduSessionCreateData::addUeLocationIsSet() const {
  return m_AddUeLocationIsSet;
}
void PduSessionCreateData::unsetAddUeLocation() {
  m_AddUeLocationIsSet = false;
}
std::string PduSessionCreateData::getGpsi() const { return m_Gpsi; }
void PduSessionCreateData::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool PduSessionCreateData::gpsiIsSet() const { return m_GpsiIsSet; }
void PduSessionCreateData::unsetGpsi() { m_GpsiIsSet = false; }
RefToBinaryData PduSessionCreateData::getN1SmInfoFromUe() const {
  return m_N1SmInfoFromUe;
}
void PduSessionCreateData::setN1SmInfoFromUe(RefToBinaryData const &value) {
  m_N1SmInfoFromUe = value;
  m_N1SmInfoFromUeIsSet = true;
}
bool PduSessionCreateData::n1SmInfoFromUeIsSet() const {
  return m_N1SmInfoFromUeIsSet;
}
void PduSessionCreateData::unsetN1SmInfoFromUe() {
  m_N1SmInfoFromUeIsSet = false;
}
RefToBinaryData PduSessionCreateData::getUnknownN1SmInfo() const {
  return m_UnknownN1SmInfo;
}
void PduSessionCreateData::setUnknownN1SmInfo(RefToBinaryData const &value) {
  m_UnknownN1SmInfo = value;
  m_UnknownN1SmInfoIsSet = true;
}
bool PduSessionCreateData::unknownN1SmInfoIsSet() const {
  return m_UnknownN1SmInfoIsSet;
}
void PduSessionCreateData::unsetUnknownN1SmInfo() {
  m_UnknownN1SmInfoIsSet = false;
}
std::string PduSessionCreateData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void PduSessionCreateData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool PduSessionCreateData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void PduSessionCreateData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::string PduSessionCreateData::getHPcfId() const { return m_HPcfId; }
void PduSessionCreateData::setHPcfId(std::string const &value) {
  m_HPcfId = value;
  m_HPcfIdIsSet = true;
}
bool PduSessionCreateData::hPcfIdIsSet() const { return m_HPcfIdIsSet; }
void PduSessionCreateData::unsetHPcfId() { m_HPcfIdIsSet = false; }
std::string PduSessionCreateData::getPcfId() const { return m_PcfId; }
void PduSessionCreateData::setPcfId(std::string const &value) {
  m_PcfId = value;
  m_PcfIdIsSet = true;
}
bool PduSessionCreateData::pcfIdIsSet() const { return m_PcfIdIsSet; }
void PduSessionCreateData::unsetPcfId() { m_PcfIdIsSet = false; }
std::string PduSessionCreateData::getPcfGroupId() const { return m_PcfGroupId; }
void PduSessionCreateData::setPcfGroupId(std::string const &value) {
  m_PcfGroupId = value;
  m_PcfGroupIdIsSet = true;
}
bool PduSessionCreateData::pcfGroupIdIsSet() const { return m_PcfGroupIdIsSet; }
void PduSessionCreateData::unsetPcfGroupId() { m_PcfGroupIdIsSet = false; }
std::string PduSessionCreateData::getPcfSetId() const { return m_PcfSetId; }
void PduSessionCreateData::setPcfSetId(std::string const &value) {
  m_PcfSetId = value;
  m_PcfSetIdIsSet = true;
}
bool PduSessionCreateData::pcfSetIdIsSet() const { return m_PcfSetIdIsSet; }
void PduSessionCreateData::unsetPcfSetId() { m_PcfSetIdIsSet = false; }
bool PduSessionCreateData::isHoPreparationIndication() const {
  return m_HoPreparationIndication;
}
void PduSessionCreateData::setHoPreparationIndication(bool const value) {
  m_HoPreparationIndication = value;
  m_HoPreparationIndicationIsSet = true;
}
bool PduSessionCreateData::hoPreparationIndicationIsSet() const {
  return m_HoPreparationIndicationIsSet;
}
void PduSessionCreateData::unsetHoPreparationIndication() {
  m_HoPreparationIndicationIsSet = false;
}
DnnSelectionMode PduSessionCreateData::getSelMode() const { return m_SelMode; }
void PduSessionCreateData::setSelMode(DnnSelectionMode const &value) {
  m_SelMode = value;
  m_SelModeIsSet = true;
}
bool PduSessionCreateData::selModeIsSet() const { return m_SelModeIsSet; }
void PduSessionCreateData::unsetSelMode() { m_SelModeIsSet = false; }
bool PduSessionCreateData::isAlwaysOnRequested() const {
  return m_AlwaysOnRequested;
}
void PduSessionCreateData::setAlwaysOnRequested(bool const value) {
  m_AlwaysOnRequested = value;
  m_AlwaysOnRequestedIsSet = true;
}
bool PduSessionCreateData::alwaysOnRequestedIsSet() const {
  return m_AlwaysOnRequestedIsSet;
}
void PduSessionCreateData::unsetAlwaysOnRequested() {
  m_AlwaysOnRequestedIsSet = false;
}
std::string PduSessionCreateData::getUdmGroupId() const { return m_UdmGroupId; }
void PduSessionCreateData::setUdmGroupId(std::string const &value) {
  m_UdmGroupId = value;
  m_UdmGroupIdIsSet = true;
}
bool PduSessionCreateData::udmGroupIdIsSet() const { return m_UdmGroupIdIsSet; }
void PduSessionCreateData::unsetUdmGroupId() { m_UdmGroupIdIsSet = false; }
std::string PduSessionCreateData::getRoutingIndicator() const {
  return m_RoutingIndicator;
}
void PduSessionCreateData::setRoutingIndicator(std::string const &value) {
  m_RoutingIndicator = value;
  m_RoutingIndicatorIsSet = true;
}
bool PduSessionCreateData::routingIndicatorIsSet() const {
  return m_RoutingIndicatorIsSet;
}
void PduSessionCreateData::unsetRoutingIndicator() {
  m_RoutingIndicatorIsSet = false;
}
int32_t PduSessionCreateData::getHNwPubKeyId() const { return m_HNwPubKeyId; }
void PduSessionCreateData::setHNwPubKeyId(int32_t const value) {
  m_HNwPubKeyId = value;
  m_HNwPubKeyIdIsSet = true;
}
bool PduSessionCreateData::hNwPubKeyIdIsSet() const {
  return m_HNwPubKeyIdIsSet;
}
void PduSessionCreateData::unsetHNwPubKeyId() { m_HNwPubKeyIdIsSet = false; }
EpsInterworkingIndication PduSessionCreateData::getEpsInterworkingInd() const {
  return m_EpsInterworkingInd;
}
void PduSessionCreateData::setEpsInterworkingInd(
    EpsInterworkingIndication const &value) {
  m_EpsInterworkingInd = value;
  m_EpsInterworkingIndIsSet = true;
}
bool PduSessionCreateData::epsInterworkingIndIsSet() const {
  return m_EpsInterworkingIndIsSet;
}
void PduSessionCreateData::unsetEpsInterworkingInd() {
  m_EpsInterworkingIndIsSet = false;
}
std::string PduSessionCreateData::getVSmfServiceInstanceId() const {
  return m_VSmfServiceInstanceId;
}
void PduSessionCreateData::setVSmfServiceInstanceId(std::string const &value) {
  m_VSmfServiceInstanceId = value;
  m_VSmfServiceInstanceIdIsSet = true;
}
bool PduSessionCreateData::vSmfServiceInstanceIdIsSet() const {
  return m_VSmfServiceInstanceIdIsSet;
}
void PduSessionCreateData::unsetVSmfServiceInstanceId() {
  m_VSmfServiceInstanceIdIsSet = false;
}
std::string PduSessionCreateData::getISmfServiceInstanceId() const {
  return m_ISmfServiceInstanceId;
}
void PduSessionCreateData::setISmfServiceInstanceId(std::string const &value) {
  m_ISmfServiceInstanceId = value;
  m_ISmfServiceInstanceIdIsSet = true;
}
bool PduSessionCreateData::iSmfServiceInstanceIdIsSet() const {
  return m_ISmfServiceInstanceIdIsSet;
}
void PduSessionCreateData::unsetISmfServiceInstanceId() {
  m_ISmfServiceInstanceIdIsSet = false;
}
std::string PduSessionCreateData::getRecoveryTime() const {
  return m_RecoveryTime;
}
void PduSessionCreateData::setRecoveryTime(std::string const &value) {
  m_RecoveryTime = value;
  m_RecoveryTimeIsSet = true;
}
bool PduSessionCreateData::recoveryTimeIsSet() const {
  return m_RecoveryTimeIsSet;
}
void PduSessionCreateData::unsetRecoveryTime() { m_RecoveryTimeIsSet = false; }
RoamingChargingProfile PduSessionCreateData::getRoamingChargingProfile() const {
  return m_RoamingChargingProfile;
}
void PduSessionCreateData::setRoamingChargingProfile(
    RoamingChargingProfile const &value) {
  m_RoamingChargingProfile = value;
  m_RoamingChargingProfileIsSet = true;
}
bool PduSessionCreateData::roamingChargingProfileIsSet() const {
  return m_RoamingChargingProfileIsSet;
}
void PduSessionCreateData::unsetRoamingChargingProfile() {
  m_RoamingChargingProfileIsSet = false;
}
std::string PduSessionCreateData::getChargingId() const { return m_ChargingId; }
void PduSessionCreateData::setChargingId(std::string const &value) {
  m_ChargingId = value;
  m_ChargingIdIsSet = true;
}
bool PduSessionCreateData::chargingIdIsSet() const { return m_ChargingIdIsSet; }
void PduSessionCreateData::unsetChargingId() { m_ChargingIdIsSet = false; }
int32_t PduSessionCreateData::getOldPduSessionId() const {
  return m_OldPduSessionId;
}
void PduSessionCreateData::setOldPduSessionId(int32_t const value) {
  m_OldPduSessionId = value;
  m_OldPduSessionIdIsSet = true;
}
bool PduSessionCreateData::oldPduSessionIdIsSet() const {
  return m_OldPduSessionIdIsSet;
}
void PduSessionCreateData::unsetOldPduSessionId() {
  m_OldPduSessionIdIsSet = false;
}
std::string PduSessionCreateData::getEpsBearerCtxStatus() const {
  return m_EpsBearerCtxStatus;
}
void PduSessionCreateData::setEpsBearerCtxStatus(std::string const &value) {
  m_EpsBearerCtxStatus = value;
  m_EpsBearerCtxStatusIsSet = true;
}
bool PduSessionCreateData::epsBearerCtxStatusIsSet() const {
  return m_EpsBearerCtxStatusIsSet;
}
void PduSessionCreateData::unsetEpsBearerCtxStatus() {
  m_EpsBearerCtxStatusIsSet = false;
}
std::string PduSessionCreateData::getAmfNfId() const { return m_AmfNfId; }
void PduSessionCreateData::setAmfNfId(std::string const &value) {
  m_AmfNfId = value;
  m_AmfNfIdIsSet = true;
}
bool PduSessionCreateData::amfNfIdIsSet() const { return m_AmfNfIdIsSet; }
void PduSessionCreateData::unsetAmfNfId() { m_AmfNfIdIsSet = false; }
Guami PduSessionCreateData::getGuami() const { return m_Guami; }
void PduSessionCreateData::setGuami(Guami const &value) {
  m_Guami = value;
  m_GuamiIsSet = true;
}
bool PduSessionCreateData::guamiIsSet() const { return m_GuamiIsSet; }
void PduSessionCreateData::unsetGuami() { m_GuamiIsSet = false; }
MaxIntegrityProtectedDataRate
PduSessionCreateData::getMaxIntegrityProtectedDataRateUl() const {
  return m_MaxIntegrityProtectedDataRateUl;
}
void PduSessionCreateData::setMaxIntegrityProtectedDataRateUl(
    MaxIntegrityProtectedDataRate const &value) {
  m_MaxIntegrityProtectedDataRateUl = value;
  m_MaxIntegrityProtectedDataRateUlIsSet = true;
}
bool PduSessionCreateData::maxIntegrityProtectedDataRateUlIsSet() const {
  return m_MaxIntegrityProtectedDataRateUlIsSet;
}
void PduSessionCreateData::unsetMaxIntegrityProtectedDataRateUl() {
  m_MaxIntegrityProtectedDataRateUlIsSet = false;
}
MaxIntegrityProtectedDataRate
PduSessionCreateData::getMaxIntegrityProtectedDataRateDl() const {
  return m_MaxIntegrityProtectedDataRateDl;
}
void PduSessionCreateData::setMaxIntegrityProtectedDataRateDl(
    MaxIntegrityProtectedDataRate const &value) {
  m_MaxIntegrityProtectedDataRateDl = value;
  m_MaxIntegrityProtectedDataRateDlIsSet = true;
}
bool PduSessionCreateData::maxIntegrityProtectedDataRateDlIsSet() const {
  return m_MaxIntegrityProtectedDataRateDlIsSet;
}
void PduSessionCreateData::unsetMaxIntegrityProtectedDataRateDl() {
  m_MaxIntegrityProtectedDataRateDlIsSet = false;
}
bool PduSessionCreateData::isCpCiotEnabled() const { return m_CpCiotEnabled; }
void PduSessionCreateData::setCpCiotEnabled(bool const value) {
  m_CpCiotEnabled = value;
  m_CpCiotEnabledIsSet = true;
}
bool PduSessionCreateData::cpCiotEnabledIsSet() const {
  return m_CpCiotEnabledIsSet;
}
void PduSessionCreateData::unsetCpCiotEnabled() {
  m_CpCiotEnabledIsSet = false;
}
bool PduSessionCreateData::isCpOnlyInd() const { return m_CpOnlyInd; }
void PduSessionCreateData::setCpOnlyInd(bool const value) {
  m_CpOnlyInd = value;
  m_CpOnlyIndIsSet = true;
}
bool PduSessionCreateData::cpOnlyIndIsSet() const { return m_CpOnlyIndIsSet; }
void PduSessionCreateData::unsetCpOnlyInd() { m_CpOnlyIndIsSet = false; }
bool PduSessionCreateData::isInvokeNef() const { return m_InvokeNef; }
void PduSessionCreateData::setInvokeNef(bool const value) {
  m_InvokeNef = value;
  m_InvokeNefIsSet = true;
}
bool PduSessionCreateData::invokeNefIsSet() const { return m_InvokeNefIsSet; }
void PduSessionCreateData::unsetInvokeNef() { m_InvokeNefIsSet = false; }
bool PduSessionCreateData::isMaRequestInd() const { return m_MaRequestInd; }
void PduSessionCreateData::setMaRequestInd(bool const value) {
  m_MaRequestInd = value;
  m_MaRequestIndIsSet = true;
}
bool PduSessionCreateData::maRequestIndIsSet() const {
  return m_MaRequestIndIsSet;
}
void PduSessionCreateData::unsetMaRequestInd() { m_MaRequestIndIsSet = false; }
bool PduSessionCreateData::isMaNwUpgradeInd() const { return m_MaNwUpgradeInd; }
void PduSessionCreateData::setMaNwUpgradeInd(bool const value) {
  m_MaNwUpgradeInd = value;
  m_MaNwUpgradeIndIsSet = true;
}
bool PduSessionCreateData::maNwUpgradeIndIsSet() const {
  return m_MaNwUpgradeIndIsSet;
}
void PduSessionCreateData::unsetMaNwUpgradeInd() {
  m_MaNwUpgradeIndIsSet = false;
}
std::vector<std::string> &PduSessionCreateData::getDnaiList() {
  return m_DnaiList;
}
void PduSessionCreateData::setDnaiList(std::vector<std::string> const &value) {
  m_DnaiList = value;
  m_DnaiListIsSet = true;
}
bool PduSessionCreateData::dnaiListIsSet() const { return m_DnaiListIsSet; }
void PduSessionCreateData::unsetDnaiList() { m_DnaiListIsSet = false; }
PresenceState PduSessionCreateData::getPresenceInLadn() const {
  return m_PresenceInLadn;
}
void PduSessionCreateData::setPresenceInLadn(PresenceState const &value) {
  m_PresenceInLadn = value;
  m_PresenceInLadnIsSet = true;
}
bool PduSessionCreateData::presenceInLadnIsSet() const {
  return m_PresenceInLadnIsSet;
}
void PduSessionCreateData::unsetPresenceInLadn() {
  m_PresenceInLadnIsSet = false;
}
std::vector<SecondaryRatUsageInfo> &
PduSessionCreateData::getSecondaryRatUsageInfo() {
  return m_SecondaryRatUsageInfo;
}
void PduSessionCreateData::setSecondaryRatUsageInfo(
    std::vector<SecondaryRatUsageInfo> const &value) {
  m_SecondaryRatUsageInfo = value;
  m_SecondaryRatUsageInfoIsSet = true;
}
bool PduSessionCreateData::secondaryRatUsageInfoIsSet() const {
  return m_SecondaryRatUsageInfoIsSet;
}
void PduSessionCreateData::unsetSecondaryRatUsageInfo() {
  m_SecondaryRatUsageInfoIsSet = false;
}
SmallDataRateStatus PduSessionCreateData::getSmallDataRateStatus() const {
  return m_SmallDataRateStatus;
}
void PduSessionCreateData::setSmallDataRateStatus(
    SmallDataRateStatus const &value) {
  m_SmallDataRateStatus = value;
  m_SmallDataRateStatusIsSet = true;
}
bool PduSessionCreateData::smallDataRateStatusIsSet() const {
  return m_SmallDataRateStatusIsSet;
}
void PduSessionCreateData::unsetSmallDataRateStatus() {
  m_SmallDataRateStatusIsSet = false;
}
ApnRateStatus PduSessionCreateData::getApnRateStatus() const {
  return m_ApnRateStatus;
}
void PduSessionCreateData::setApnRateStatus(ApnRateStatus const &value) {
  m_ApnRateStatus = value;
  m_ApnRateStatusIsSet = true;
}
bool PduSessionCreateData::apnRateStatusIsSet() const {
  return m_ApnRateStatusIsSet;
}
void PduSessionCreateData::unsetApnRateStatus() {
  m_ApnRateStatusIsSet = false;
}
int32_t PduSessionCreateData::getDlServingPlmnRateCtl() const {
  return m_DlServingPlmnRateCtl;
}
void PduSessionCreateData::setDlServingPlmnRateCtl(int32_t const value) {
  m_DlServingPlmnRateCtl = value;
  m_DlServingPlmnRateCtlIsSet = true;
}
bool PduSessionCreateData::dlServingPlmnRateCtlIsSet() const {
  return m_DlServingPlmnRateCtlIsSet;
}
void PduSessionCreateData::unsetDlServingPlmnRateCtl() {
  m_DlServingPlmnRateCtlIsSet = false;
}
UpSecurityInfo PduSessionCreateData::getUpSecurityInfo() const {
  return m_UpSecurityInfo;
}
void PduSessionCreateData::setUpSecurityInfo(UpSecurityInfo const &value) {
  m_UpSecurityInfo = value;
  m_UpSecurityInfoIsSet = true;
}
bool PduSessionCreateData::upSecurityInfoIsSet() const {
  return m_UpSecurityInfoIsSet;
}
void PduSessionCreateData::unsetUpSecurityInfo() {
  m_UpSecurityInfoIsSet = false;
}
VplmnQos PduSessionCreateData::getVplmnQos() const { return m_VplmnQos; }
void PduSessionCreateData::setVplmnQos(VplmnQos const &value) {
  m_VplmnQos = value;
  m_VplmnQosIsSet = true;
}
bool PduSessionCreateData::vplmnQosIsSet() const { return m_VplmnQosIsSet; }
void PduSessionCreateData::unsetVplmnQos() { m_VplmnQosIsSet = false; }
bool PduSessionCreateData::isIvSmfRestoration() const {
  return m_IvSmfRestoration;
}
void PduSessionCreateData::setIvSmfRestoration(bool const value) {
  m_IvSmfRestoration = value;
  m_IvSmfRestorationIsSet = true;
}
bool PduSessionCreateData::ivSmfRestorationIsSet() const {
  return m_IvSmfRestorationIsSet;
}
void PduSessionCreateData::unsetIvSmfRestoration() {
  m_IvSmfRestorationIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
