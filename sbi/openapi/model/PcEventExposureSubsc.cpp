/**
 * Npcf_EventExposure
 * PCF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PcEventExposureSubsc.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PcEventExposureSubsc::PcEventExposureSubsc() {
  m_EventsRepInfoIsSet = false;
  m_GroupId = "";
  m_GroupIdIsSet = false;
  m_FilterDnnsIsSet = false;
  m_FilterSnssaisIsSet = false;
  m_SnssaiDnnsIsSet = false;
  m_FilterServicesIsSet = false;
  m_NotifUri = "";
  m_NotifId = "";
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
}

PcEventExposureSubsc::~PcEventExposureSubsc() {}

void PcEventExposureSubsc::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PcEventExposureSubsc &o) {
  j = nlohmann::json();
  j["eventSubs"] = o.m_EventSubs;
  if (o.eventsRepInfoIsSet())
    j["eventsRepInfo"] = o.m_EventsRepInfo;
  if (o.groupIdIsSet())
    j["groupId"] = o.m_GroupId;
  if (o.filterDnnsIsSet() || !o.m_FilterDnns.empty())
    j["filterDnns"] = o.m_FilterDnns;
  if (o.filterSnssaisIsSet() || !o.m_FilterSnssais.empty())
    j["filterSnssais"] = o.m_FilterSnssais;
  if (o.snssaiDnnsIsSet() || !o.m_SnssaiDnns.empty())
    j["snssaiDnns"] = o.m_SnssaiDnns;
  if (o.filterServicesIsSet() || !o.m_FilterServices.empty())
    j["filterServices"] = o.m_FilterServices;
  j["notifUri"] = o.m_NotifUri;
  j["notifId"] = o.m_NotifId;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, PcEventExposureSubsc &o) {
  j.at("eventSubs").get_to(o.m_EventSubs);
  if (j.find("eventsRepInfo") != j.end()) {
    j.at("eventsRepInfo").get_to(o.m_EventsRepInfo);
    o.m_EventsRepInfoIsSet = true;
  }
  if (j.find("groupId") != j.end()) {
    j.at("groupId").get_to(o.m_GroupId);
    o.m_GroupIdIsSet = true;
  }
  if (j.find("filterDnns") != j.end()) {
    j.at("filterDnns").get_to(o.m_FilterDnns);
    o.m_FilterDnnsIsSet = true;
  }
  if (j.find("filterSnssais") != j.end()) {
    j.at("filterSnssais").get_to(o.m_FilterSnssais);
    o.m_FilterSnssaisIsSet = true;
  }
  if (j.find("snssaiDnns") != j.end()) {
    j.at("snssaiDnns").get_to(o.m_SnssaiDnns);
    o.m_SnssaiDnnsIsSet = true;
  }
  if (j.find("filterServices") != j.end()) {
    j.at("filterServices").get_to(o.m_FilterServices);
    o.m_FilterServicesIsSet = true;
  }
  j.at("notifUri").get_to(o.m_NotifUri);
  j.at("notifId").get_to(o.m_NotifId);
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::vector<PcEvent> &PcEventExposureSubsc::getEventSubs() {
  return m_EventSubs;
}
void PcEventExposureSubsc::setEventSubs(std::vector<PcEvent> const &value) {
  m_EventSubs = value;
}
ReportingInformation PcEventExposureSubsc::getEventsRepInfo() const {
  return m_EventsRepInfo;
}
void PcEventExposureSubsc::setEventsRepInfo(ReportingInformation const &value) {
  m_EventsRepInfo = value;
  m_EventsRepInfoIsSet = true;
}
bool PcEventExposureSubsc::eventsRepInfoIsSet() const {
  return m_EventsRepInfoIsSet;
}
void PcEventExposureSubsc::unsetEventsRepInfo() {
  m_EventsRepInfoIsSet = false;
}
std::string PcEventExposureSubsc::getGroupId() const { return m_GroupId; }
void PcEventExposureSubsc::setGroupId(std::string const &value) {
  m_GroupId = value;
  m_GroupIdIsSet = true;
}
bool PcEventExposureSubsc::groupIdIsSet() const { return m_GroupIdIsSet; }
void PcEventExposureSubsc::unsetGroupId() { m_GroupIdIsSet = false; }
std::vector<std::string> &PcEventExposureSubsc::getFilterDnns() {
  return m_FilterDnns;
}
void PcEventExposureSubsc::setFilterDnns(
    std::vector<std::string> const &value) {
  m_FilterDnns = value;
  m_FilterDnnsIsSet = true;
}
bool PcEventExposureSubsc::filterDnnsIsSet() const { return m_FilterDnnsIsSet; }
void PcEventExposureSubsc::unsetFilterDnns() { m_FilterDnnsIsSet = false; }
std::vector<Snssai> &PcEventExposureSubsc::getFilterSnssais() {
  return m_FilterSnssais;
}
void PcEventExposureSubsc::setFilterSnssais(std::vector<Snssai> const &value) {
  m_FilterSnssais = value;
  m_FilterSnssaisIsSet = true;
}
bool PcEventExposureSubsc::filterSnssaisIsSet() const {
  return m_FilterSnssaisIsSet;
}
void PcEventExposureSubsc::unsetFilterSnssais() {
  m_FilterSnssaisIsSet = false;
}
std::vector<SnssaiDnnCombination> &PcEventExposureSubsc::getSnssaiDnns() {
  return m_SnssaiDnns;
}
void PcEventExposureSubsc::setSnssaiDnns(
    std::vector<SnssaiDnnCombination> const &value) {
  m_SnssaiDnns = value;
  m_SnssaiDnnsIsSet = true;
}
bool PcEventExposureSubsc::snssaiDnnsIsSet() const { return m_SnssaiDnnsIsSet; }
void PcEventExposureSubsc::unsetSnssaiDnns() { m_SnssaiDnnsIsSet = false; }
std::vector<ServiceIdentification> &PcEventExposureSubsc::getFilterServices() {
  return m_FilterServices;
}
void PcEventExposureSubsc::setFilterServices(
    std::vector<ServiceIdentification> const &value) {
  m_FilterServices = value;
  m_FilterServicesIsSet = true;
}
bool PcEventExposureSubsc::filterServicesIsSet() const {
  return m_FilterServicesIsSet;
}
void PcEventExposureSubsc::unsetFilterServices() {
  m_FilterServicesIsSet = false;
}
std::string PcEventExposureSubsc::getNotifUri() const { return m_NotifUri; }
void PcEventExposureSubsc::setNotifUri(std::string const &value) {
  m_NotifUri = value;
}
std::string PcEventExposureSubsc::getNotifId() const { return m_NotifId; }
void PcEventExposureSubsc::setNotifId(std::string const &value) {
  m_NotifId = value;
}
std::string PcEventExposureSubsc::getSuppFeat() const { return m_SuppFeat; }
void PcEventExposureSubsc::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool PcEventExposureSubsc::suppFeatIsSet() const { return m_SuppFeatIsSet; }
void PcEventExposureSubsc::unsetSuppFeat() { m_SuppFeatIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
