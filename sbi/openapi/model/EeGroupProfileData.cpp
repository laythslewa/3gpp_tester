/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EeGroupProfileData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EeGroupProfileData::EeGroupProfileData() {
  m_RestrictedEventTypesIsSet = false;
  m_AllowedMtcProviderIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

EeGroupProfileData::~EeGroupProfileData() {}

void EeGroupProfileData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EeGroupProfileData &o) {
  j = nlohmann::json();
  if (o.restrictedEventTypesIsSet() || !o.m_RestrictedEventTypes.empty())
    j["restrictedEventTypes"] = o.m_RestrictedEventTypes;
  if (o.allowedMtcProviderIsSet() || !o.m_AllowedMtcProvider.empty())
    j["allowedMtcProvider"] = o.m_AllowedMtcProvider;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, EeGroupProfileData &o) {
  if (j.find("restrictedEventTypes") != j.end()) {
    j.at("restrictedEventTypes").get_to(o.m_RestrictedEventTypes);
    o.m_RestrictedEventTypesIsSet = true;
  }
  if (j.find("allowedMtcProvider") != j.end()) {
    j.at("allowedMtcProvider").get_to(o.m_AllowedMtcProvider);
    o.m_AllowedMtcProviderIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

std::vector<EventType> &EeGroupProfileData::getRestrictedEventTypes() {
  return m_RestrictedEventTypes;
}
void EeGroupProfileData::setRestrictedEventTypes(
    std::vector<EventType> const &value) {
  m_RestrictedEventTypes = value;
  m_RestrictedEventTypesIsSet = true;
}
bool EeGroupProfileData::restrictedEventTypesIsSet() const {
  return m_RestrictedEventTypesIsSet;
}
void EeGroupProfileData::unsetRestrictedEventTypes() {
  m_RestrictedEventTypesIsSet = false;
}
std::map<std::string, std::vector<MtcProvider>> &
EeGroupProfileData::getAllowedMtcProvider() {
  return m_AllowedMtcProvider;
}
void EeGroupProfileData::setAllowedMtcProvider(
    std::map<std::string, std::vector<MtcProvider>> const &value) {
  m_AllowedMtcProvider = value;
  m_AllowedMtcProviderIsSet = true;
}
bool EeGroupProfileData::allowedMtcProviderIsSet() const {
  return m_AllowedMtcProviderIsSet;
}
void EeGroupProfileData::unsetAllowedMtcProvider() {
  m_AllowedMtcProviderIsSet = false;
}
std::string EeGroupProfileData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void EeGroupProfileData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool EeGroupProfileData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void EeGroupProfileData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
