/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ThresholdValue.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ThresholdValue::ThresholdValue() {
  m_RttThres = 0;
  m_RttThresIsSet = false;
  m_PlrThres = 0;
  m_PlrThresIsSet = false;
}

ThresholdValue::~ThresholdValue() {}

void ThresholdValue::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ThresholdValue &o) {
  j = nlohmann::json();
  if (o.rttThresIsSet())
    j["rttThres"] = o.m_RttThres;
  if (o.plrThresIsSet())
    j["plrThres"] = o.m_PlrThres;
}

void from_json(const nlohmann::json &j, ThresholdValue &o) {
  if (j.find("rttThres") != j.end()) {
    j.at("rttThres").get_to(o.m_RttThres);
    o.m_RttThresIsSet = true;
  }
  if (j.find("plrThres") != j.end()) {
    j.at("plrThres").get_to(o.m_PlrThres);
    o.m_PlrThresIsSet = true;
  }
}

int32_t ThresholdValue::getRttThres() const { return m_RttThres; }
void ThresholdValue::setRttThres(int32_t const value) {
  m_RttThres = value;
  m_RttThresIsSet = true;
}
bool ThresholdValue::rttThresIsSet() const { return m_RttThresIsSet; }
void ThresholdValue::unsetRttThres() { m_RttThresIsSet = false; }
int32_t ThresholdValue::getPlrThres() const { return m_PlrThres; }
void ThresholdValue::setPlrThres(int32_t const value) {
  m_PlrThres = value;
  m_PlrThresIsSet = true;
}
bool ThresholdValue::plrThresIsSet() const { return m_PlrThresIsSet; }
void ThresholdValue::unsetPlrThres() { m_PlrThresIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
