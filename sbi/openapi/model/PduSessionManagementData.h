/**
 * Unified Data Repository Service API file for structured data for exposure
 * The API version is defined in 3GPP TS 29.504 © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PduSessionManagementData.h
 *
 * Represents Session management data for a UE and a PDU session.
 */

#ifndef PduSessionManagementData_H_
#define PduSessionManagementData_H_

#include "Ipv6Addr.h"
#include "Ipv6Prefix.h"
#include "PduSessionStatus.h"
#include "PduSessionType.h"
#include "RouteToLocation.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents Session management data for a UE and a PDU session.
/// </summary>
class PduSessionManagementData {
public:
  PduSessionManagementData();
  virtual ~PduSessionManagementData();

  void validate();

  /////////////////////////////////////////////
  /// PduSessionManagementData members

  /// <summary>
  ///
  /// </summary>
  PduSessionStatus getPduSessionStatus() const;
  void setPduSessionStatus(PduSessionStatus const &value);
  bool pduSessionStatusIsSet() const;
  void unsetPduSessionStatus();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getPduSessionStatusTs() const;
  void setPduSessionStatusTs(std::string const &value);
  bool pduSessionStatusTsIsSet() const;
  void unsetPduSessionStatusTs();
  /// <summary>
  /// DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.
  /// </summary>
  std::string getDnai() const;
  void setDnai(std::string const &value);
  bool dnaiIsSet() const;
  void unsetDnai();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getDnaiTs() const;
  void setDnaiTs(std::string const &value);
  bool dnaiTsIsSet() const;
  void unsetDnaiTs();
  /// <summary>
  ///
  /// </summary>
  std::vector<RouteToLocation> &getN6TrafficRoutingInfo();
  void setN6TrafficRoutingInfo(std::vector<RouteToLocation> const &value);
  bool n6TrafficRoutingInfoIsSet() const;
  void unsetN6TrafficRoutingInfo();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getN6TrafficRoutingInfoTs() const;
  void setN6TrafficRoutingInfoTs(std::string const &value);
  bool n6TrafficRoutingInfoTsIsSet() const;
  void unsetN6TrafficRoutingInfoTs();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getIpv4Addr() const;
  void setIpv4Addr(std::string const &value);
  bool ipv4AddrIsSet() const;
  void unsetIpv4Addr();
  /// <summary>
  /// UE IPv6 prefix.
  /// </summary>
  std::vector<Ipv6Prefix> &getIpv6Prefix();
  void setIpv6Prefix(std::vector<Ipv6Prefix> const &value);
  bool ipv6PrefixIsSet() const;
  void unsetIpv6Prefix();
  /// <summary>
  ///
  /// </summary>
  std::vector<Ipv6Addr> &getIpv6Addrs();
  void setIpv6Addrs(std::vector<Ipv6Addr> const &value);
  bool ipv6AddrsIsSet() const;
  void unsetIpv6Addrs();
  /// <summary>
  ///
  /// </summary>
  PduSessionType getPduSessType() const;
  void setPduSessType(PduSessionType const &value);
  bool pduSessTypeIsSet() const;
  void unsetPduSessType();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getIpAddrTs() const;
  void setIpAddrTs(std::string const &value);
  bool ipAddrTsIsSet() const;
  void unsetIpAddrTs();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  /// Unsigned integer identifying a PDU session, within the range 0 to 255, as
  /// specified in clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU
  /// Session ID is allocated by the Core Network for UEs not supporting N1
  /// mode, reserved range 64 to 95 is used. PDU Session ID within the reserved
  /// range is only visible in the Core Network.
  /// </summary>
  int32_t getPduSessionId() const;
  void setPduSessionId(int32_t const value);
  bool pduSessionIdIsSet() const;
  void unsetPduSessionId();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();

  friend void to_json(nlohmann::json &j, const PduSessionManagementData &o);
  friend void from_json(const nlohmann::json &j, PduSessionManagementData &o);

protected:
  PduSessionStatus m_PduSessionStatus;
  bool m_PduSessionStatusIsSet;
  std::string m_PduSessionStatusTs;
  bool m_PduSessionStatusTsIsSet;
  std::string m_Dnai;
  bool m_DnaiIsSet;
  std::string m_DnaiTs;
  bool m_DnaiTsIsSet;
  std::vector<RouteToLocation> m_N6TrafficRoutingInfo;
  bool m_N6TrafficRoutingInfoIsSet;
  std::string m_N6TrafficRoutingInfoTs;
  bool m_N6TrafficRoutingInfoTsIsSet;
  std::string m_Ipv4Addr;
  bool m_Ipv4AddrIsSet;
  std::vector<Ipv6Prefix> m_Ipv6Prefix;
  bool m_Ipv6PrefixIsSet;
  std::vector<Ipv6Addr> m_Ipv6Addrs;
  bool m_Ipv6AddrsIsSet;
  PduSessionType m_PduSessType;
  bool m_PduSessTypeIsSet;
  std::string m_IpAddrTs;
  bool m_IpAddrTsIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  int32_t m_PduSessionId;
  bool m_PduSessionIdIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PduSessionManagementData_H_ */
