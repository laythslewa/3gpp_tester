/**
 * Nucmf_Provisioning
 * UCMF_Provisioning Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualUERadioCapabilityProvisioningDocumentApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

IndividualUERadioCapabilityProvisioningDocumentApiImpl::
    IndividualUERadioCapabilityProvisioningDocumentApiImpl(
        std::shared_ptr<Pistache::Rest::Router> rtr)
    : IndividualUERadioCapabilityProvisioningDocumentApi(rtr) {}

void IndividualUERadioCapabilityProvisioningDocumentApiImpl::get_provisioning(
    const std::string &provisioningId,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualUERadioCapabilityProvisioningDocumentApiImpl::
    remove_provisioning(const std::string &provisioningId,
                        Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualUERadioCapabilityProvisioningDocumentApiImpl::
    replace_provisioning(const std::string &provisioningId,
                         const RacsData &racsData,
                         Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualUERadioCapabilityProvisioningDocumentApiImpl::
    update_provisioning(const std::string &provisioningId,
                        const RacsDataPatch &racsDataPatch,
                        Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
