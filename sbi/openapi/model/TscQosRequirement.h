/**
 * 3gpp-as-session-with-qos
 * API for setting us an AS session with required QoS. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TscQosRequirement.h
 *
 * Represents QoS requirements for time sensitive communication.
 */

#ifndef TscQosRequirement_H_
#define TscQosRequirement_H_

#include "TscaiInputContainer.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents QoS requirements for time sensitive communication.
/// </summary>
class TscQosRequirement {
public:
  TscQosRequirement();
  virtual ~TscQosRequirement();

  void validate();

  /////////////////////////////////////////////
  /// TscQosRequirement members

  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getReqGbrDl() const;
  void setReqGbrDl(std::string const &value);
  bool reqGbrDlIsSet() const;
  void unsetReqGbrDl();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getReqGbrUl() const;
  void setReqGbrUl(std::string const &value);
  bool reqGbrUlIsSet() const;
  void unsetReqGbrUl();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getReqMbrDl() const;
  void setReqMbrDl(std::string const &value);
  bool reqMbrDlIsSet() const;
  void unsetReqMbrDl();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getReqMbrUl() const;
  void setReqMbrUl(std::string const &value);
  bool reqMbrUlIsSet() const;
  void unsetReqMbrUl();
  /// <summary>
  /// Unsigned integer indicating Maximum Data Burst Volume (see clauses 5.7.3.7
  /// and 5.7.4 of 3GPP TS 23.501), expressed in Bytes.
  /// </summary>
  int32_t getMaxTscBurstSize() const;
  void setMaxTscBurstSize(int32_t const value);
  bool maxTscBurstSizeIsSet() const;
  void unsetMaxTscBurstSize();
  /// <summary>
  /// Unsigned integer indicating Packet Delay Budget (see clauses 5.7.3.4
  /// and 5.7.4 of 3GPP TS 23.501), expressed in milliseconds.
  /// </summary>
  int32_t getReq5Gsdelay() const;
  void setReq5Gsdelay(int32_t const value);
  bool req5GsdelayIsSet() const;
  void unsetReq5Gsdelay();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getTscaiTimeDom() const;
  void setTscaiTimeDom(int32_t const value);
  bool tscaiTimeDomIsSet() const;
  void unsetTscaiTimeDom();
  /// <summary>
  ///
  /// </summary>
  TscaiInputContainer getTscaiInputDl() const;
  void setTscaiInputDl(TscaiInputContainer const &value);
  bool tscaiInputDlIsSet() const;
  void unsetTscaiInputDl();
  /// <summary>
  ///
  /// </summary>
  TscaiInputContainer getTscaiInputUl() const;
  void setTscaiInputUl(TscaiInputContainer const &value);
  bool tscaiInputUlIsSet() const;
  void unsetTscaiInputUl();

  friend void to_json(nlohmann::json &j, const TscQosRequirement &o);
  friend void from_json(const nlohmann::json &j, TscQosRequirement &o);

protected:
  std::string m_ReqGbrDl;
  bool m_ReqGbrDlIsSet;
  std::string m_ReqGbrUl;
  bool m_ReqGbrUlIsSet;
  std::string m_ReqMbrDl;
  bool m_ReqMbrDlIsSet;
  std::string m_ReqMbrUl;
  bool m_ReqMbrUlIsSet;
  int32_t m_MaxTscBurstSize;
  bool m_MaxTscBurstSizeIsSet;
  int32_t m_Req5Gsdelay;
  bool m_Req5GsdelayIsSet;
  int32_t m_TscaiTimeDom;
  bool m_TscaiTimeDomIsSet;
  TscaiInputContainer m_TscaiInputDl;
  bool m_TscaiInputDlIsSet;
  TscaiInputContainer m_TscaiInputUl;
  bool m_TscaiInputUlIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* TscQosRequirement_H_ */
