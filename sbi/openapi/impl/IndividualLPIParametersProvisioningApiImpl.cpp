/**
 * 3gpp-lpi-pp
 * API for Location Privacy Indication Parameters Provisioning. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualLPIParametersProvisioningApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

IndividualLPIParametersProvisioningApiImpl::
    IndividualLPIParametersProvisioningApiImpl(
        std::shared_ptr<Pistache::Rest::Router> rtr)
    : IndividualLPIParametersProvisioningApi(rtr) {}

void IndividualLPIParametersProvisioningApiImpl::
    af_id_provisioned_lpis_provisioned_lpi_id_delete(
        const std::string &afId, const std::string &provisionedLpiId,
        Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualLPIParametersProvisioningApiImpl::
    af_id_provisioned_lpis_provisioned_lpi_id_get(
        const std::string &afId, const std::string &provisionedLpiId,
        Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualLPIParametersProvisioningApiImpl::
    af_id_provisioned_lpis_provisioned_lpi_id_put(
        const std::string &afId, const std::string &provisionedLpiId,
        const LpiParametersProvision &lpiParametersProvision,
        Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
