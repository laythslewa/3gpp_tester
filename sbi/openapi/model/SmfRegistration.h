/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmfRegistration.h
 *
 *
 */

#ifndef SmfRegistration_H_
#define SmfRegistration_H_

#include "ContextInfo.h"
#include "PlmnId.h"
#include "RegistrationReason.h"
#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SmfRegistration {
public:
  SmfRegistration();
  virtual ~SmfRegistration();

  void validate();

  /////////////////////////////////////////////
  /// SmfRegistration members

  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getSmfInstanceId() const;
  void setSmfInstanceId(std::string const &value);
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getSmfSetId() const;
  void setSmfSetId(std::string const &value);
  bool smfSetIdIsSet() const;
  void unsetSmfSetId();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  /// Unsigned integer identifying a PDU session, within the range 0 to 255, as
  /// specified in clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU
  /// Session ID is allocated by the Core Network for UEs not supporting N1
  /// mode, reserved range 64 to 95 is used. PDU Session ID within the reserved
  /// range is only visible in the Core Network.
  /// </summary>
  int32_t getPduSessionId() const;
  void setPduSessionId(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  Snssai getSingleNssai() const;
  void setSingleNssai(Snssai const &value);
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  bool isEmergencyServices() const;
  void setEmergencyServices(bool const value);
  bool emergencyServicesIsSet() const;
  void unsetEmergencyServices();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getPcscfRestorationCallbackUri() const;
  void setPcscfRestorationCallbackUri(std::string const &value);
  bool pcscfRestorationCallbackUriIsSet() const;
  void unsetPcscfRestorationCallbackUri();
  /// <summary>
  ///
  /// </summary>
  PlmnId getPlmnId() const;
  void setPlmnId(PlmnId const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getPgwFqdn() const;
  void setPgwFqdn(std::string const &value);
  bool pgwFqdnIsSet() const;
  void unsetPgwFqdn();
  /// <summary>
  ///
  /// </summary>
  bool isEpdgInd() const;
  void setEpdgInd(bool const value);
  bool epdgIndIsSet() const;
  void unsetEpdgInd();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getDeregCallbackUri() const;
  void setDeregCallbackUri(std::string const &value);
  bool deregCallbackUriIsSet() const;
  void unsetDeregCallbackUri();
  /// <summary>
  ///
  /// </summary>
  RegistrationReason getRegistrationReason() const;
  void setRegistrationReason(RegistrationReason const &value);
  bool registrationReasonIsSet() const;
  void unsetRegistrationReason();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getRegistrationTime() const;
  void setRegistrationTime(std::string const &value);
  bool registrationTimeIsSet() const;
  void unsetRegistrationTime();
  /// <summary>
  ///
  /// </summary>
  ContextInfo getContextInfo() const;
  void setContextInfo(ContextInfo const &value);
  bool contextInfoIsSet() const;
  void unsetContextInfo();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getPcfId() const;
  void setPcfId(std::string const &value);
  bool pcfIdIsSet() const;
  void unsetPcfId();

  friend void to_json(nlohmann::json &j, const SmfRegistration &o);
  friend void from_json(const nlohmann::json &j, SmfRegistration &o);

protected:
  std::string m_SmfInstanceId;

  std::string m_SmfSetId;
  bool m_SmfSetIdIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  int32_t m_PduSessionId;

  Snssai m_SingleNssai;

  std::string m_Dnn;
  bool m_DnnIsSet;
  bool m_EmergencyServices;
  bool m_EmergencyServicesIsSet;
  std::string m_PcscfRestorationCallbackUri;
  bool m_PcscfRestorationCallbackUriIsSet;
  PlmnId m_PlmnId;

  std::string m_PgwFqdn;
  bool m_PgwFqdnIsSet;
  bool m_EpdgInd;
  bool m_EpdgIndIsSet;
  std::string m_DeregCallbackUri;
  bool m_DeregCallbackUriIsSet;
  RegistrationReason m_RegistrationReason;
  bool m_RegistrationReasonIsSet;
  std::string m_RegistrationTime;
  bool m_RegistrationTimeIsSet;
  ContextInfo m_ContextInfo;
  bool m_ContextInfoIsSet;
  std::string m_PcfId;
  bool m_PcfIdIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SmfRegistration_H_ */
