/**
 * JOSE Protected Message Forwarding API
 * N32-f Message Forwarding Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "FlatJwsJson.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

FlatJwsJson::FlatJwsJson() {
  m_Payload = "";
  m_r_protected = "";
  m_r_protectedIsSet = false;
  m_HeaderIsSet = false;
  m_Signature = "";
}

FlatJwsJson::~FlatJwsJson() {}

void FlatJwsJson::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const FlatJwsJson &o) {
  j = nlohmann::json();
  j["payload"] = o.m_Payload;
  if (o.rProtectedIsSet())
    j["protected"] = o.m_r_protected;
  if (o.headerIsSet())
    j["header"] = o.m_Header;
  j["signature"] = o.m_Signature;
}

void from_json(const nlohmann::json &j, FlatJwsJson &o) {
  j.at("payload").get_to(o.m_Payload);
  if (j.find("protected") != j.end()) {
    j.at("protected").get_to(o.m_r_protected);
    o.m_r_protectedIsSet = true;
  }
  if (j.find("header") != j.end()) {
    j.at("header").get_to(o.m_Header);
    o.m_HeaderIsSet = true;
  }
  j.at("signature").get_to(o.m_Signature);
}

std::string FlatJwsJson::getPayload() const { return m_Payload; }
void FlatJwsJson::setPayload(std::string const &value) { m_Payload = value; }
std::string FlatJwsJson::getRProtected() const { return m_r_protected; }
void FlatJwsJson::setRProtected(std::string const &value) {
  m_r_protected = value;
  m_r_protectedIsSet = true;
}
bool FlatJwsJson::rProtectedIsSet() const { return m_r_protectedIsSet; }
void FlatJwsJson::unsetr_protected() { m_r_protectedIsSet = false; }
Object FlatJwsJson::getHeader() const { return m_Header; }
void FlatJwsJson::setHeader(Object const &value) {
  m_Header = value;
  m_HeaderIsSet = true;
}
bool FlatJwsJson::headerIsSet() const { return m_HeaderIsSet; }
void FlatJwsJson::unsetHeader() { m_HeaderIsSet = false; }
std::string FlatJwsJson::getSignature() const { return m_Signature; }
void FlatJwsJson::setSignature(std::string const &value) {
  m_Signature = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
