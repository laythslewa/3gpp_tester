/**
 * Nbsf_Management
 * Binding Support Management Service API. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IpEndPoint.h
 *
 * IP addressing information of a given NFService; it consists on, e.g. IP
 * address, TCP port, transport protocol...
 */

#ifndef IpEndPoint_H_
#define IpEndPoint_H_

#include "Ipv6Addr.h"
#include "TransportProtocol.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// IP addressing information of a given NFService; it consists on, e.g. IP
/// address, TCP port, transport protocol...
/// </summary>
class IpEndPoint {
public:
  IpEndPoint();
  virtual ~IpEndPoint();

  void validate();

  /////////////////////////////////////////////
  /// IpEndPoint members

  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getIpv4Address() const;
  void setIpv4Address(std::string const &value);
  bool ipv4AddressIsSet() const;
  void unsetIpv4Address();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getIpv6Address() const;
  void setIpv6Address(Ipv6Addr const &value);
  bool ipv6AddressIsSet() const;
  void unsetIpv6Address();
  /// <summary>
  ///
  /// </summary>
  TransportProtocol getTransport() const;
  void setTransport(TransportProtocol const &value);
  bool transportIsSet() const;
  void unsetTransport();
  /// <summary>
  ///
  /// </summary>
  int32_t getPort() const;
  void setPort(int32_t const value);
  bool portIsSet() const;
  void unsetPort();

  friend void to_json(nlohmann::json &j, const IpEndPoint &o);
  friend void from_json(const nlohmann::json &j, IpEndPoint &o);

protected:
  std::string m_Ipv4Address;
  bool m_Ipv4AddressIsSet;
  Ipv6Addr m_Ipv6Address;
  bool m_Ipv6AddressIsSet;
  TransportProtocol m_Transport;
  bool m_TransportIsSet;
  int32_t m_Port;
  bool m_PortIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IpEndPoint_H_ */
