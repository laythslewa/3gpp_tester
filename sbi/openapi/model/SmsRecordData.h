/**
 * Nsmsf_SMService Service API
 * SMSF SMService. © 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI,
 * TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmsRecordData.h
 *
 * Represents the information sent within a request message of the UplinkSMS
 * service operation, for delivering SMS payload.
 */

#ifndef SmsRecordData_H_
#define SmsRecordData_H_

#include "AccessType.h"
#include "RefToBinaryData.h"
#include "UserLocation.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the information sent within a request message of the UplinkSMS
/// service operation, for delivering SMS payload.
/// </summary>
class SmsRecordData {
public:
  SmsRecordData();
  virtual ~SmsRecordData();

  void validate();

  /////////////////////////////////////////////
  /// SmsRecordData members

  /// <summary>
  /// Represents a record ID, used to identify a message carrying SMS payload.
  /// </summary>
  std::string getSmsRecordId() const;
  void setSmsRecordId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  RefToBinaryData getSmsPayload() const;
  void setSmsPayload(RefToBinaryData const &value);
  /// <summary>
  ///
  /// </summary>
  AccessType getAccessType() const;
  void setAccessType(AccessType const &value);
  bool accessTypeIsSet() const;
  void unsetAccessType();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  ///
  /// </summary>
  UserLocation getUeLocation() const;
  void setUeLocation(UserLocation const &value);
  bool ueLocationIsSet() const;
  void unsetUeLocation();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getUeTimeZone() const;
  void setUeTimeZone(std::string const &value);
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();

  friend void to_json(nlohmann::json &j, const SmsRecordData &o);
  friend void from_json(const nlohmann::json &j, SmsRecordData &o);

protected:
  std::string m_SmsRecordId;

  RefToBinaryData m_SmsPayload;

  AccessType m_AccessType;
  bool m_AccessTypeIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  UserLocation m_UeLocation;
  bool m_UeLocationIsSet;
  std::string m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SmsRecordData_H_ */
