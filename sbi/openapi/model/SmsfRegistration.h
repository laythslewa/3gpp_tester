/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmsfRegistration.h
 *
 *
 */

#ifndef SmsfRegistration_H_
#define SmsfRegistration_H_

#include "ContextInfo.h"
#include "NetworkNodeDiameterAddress.h"
#include "PlmnId.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SmsfRegistration {
public:
  SmsfRegistration();
  virtual ~SmsfRegistration();

  void validate();

  /////////////////////////////////////////////
  /// SmsfRegistration members

  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getSmsfInstanceId() const;
  void setSmsfInstanceId(std::string const &value);
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getSmsfSetId() const;
  void setSmsfSetId(std::string const &value);
  bool smsfSetIdIsSet() const;
  void unsetSmsfSetId();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  PlmnId getPlmnId() const;
  void setPlmnId(PlmnId const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getSmsfMAPAddress() const;
  void setSmsfMAPAddress(std::string const &value);
  bool smsfMAPAddressIsSet() const;
  void unsetSmsfMAPAddress();
  /// <summary>
  ///
  /// </summary>
  NetworkNodeDiameterAddress getSmsfDiameterAddress() const;
  void setSmsfDiameterAddress(NetworkNodeDiameterAddress const &value);
  bool smsfDiameterAddressIsSet() const;
  void unsetSmsfDiameterAddress();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getRegistrationTime() const;
  void setRegistrationTime(std::string const &value);
  bool registrationTimeIsSet() const;
  void unsetRegistrationTime();
  /// <summary>
  ///
  /// </summary>
  ContextInfo getContextInfo() const;
  void setContextInfo(ContextInfo const &value);
  bool contextInfoIsSet() const;
  void unsetContextInfo();

  friend void to_json(nlohmann::json &j, const SmsfRegistration &o);
  friend void from_json(const nlohmann::json &j, SmsfRegistration &o);

protected:
  std::string m_SmsfInstanceId;

  std::string m_SmsfSetId;
  bool m_SmsfSetIdIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  PlmnId m_PlmnId;

  std::string m_SmsfMAPAddress;
  bool m_SmsfMAPAddressIsSet;
  NetworkNodeDiameterAddress m_SmsfDiameterAddress;
  bool m_SmsfDiameterAddressIsSet;
  std::string m_RegistrationTime;
  bool m_RegistrationTimeIsSet;
  ContextInfo m_ContextInfo;
  bool m_ContextInfoIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SmsfRegistration_H_ */
