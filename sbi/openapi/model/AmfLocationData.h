/**
 * Nhss_imsSDM
 * Nhss Subscriber Data Management Service for IMS. © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AmfLocationData.h
 *
 *
 */

#ifndef AmfLocationData_H_
#define AmfLocationData_H_

#include "NrLocation.h"
#include "PlmnId.h"
#include "RatType.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class AmfLocationData {
public:
  AmfLocationData();
  virtual ~AmfLocationData();

  void validate();

  /////////////////////////////////////////////
  /// AmfLocationData members

  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getAmfAddress() const;
  void setAmfAddress(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  PlmnId getPlmnId() const;
  void setPlmnId(PlmnId const &value);
  /// <summary>
  ///
  /// </summary>
  NrLocation getAmfLocation() const;
  void setAmfLocation(NrLocation const &value);
  bool amfLocationIsSet() const;
  void unsetAmfLocation();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getSmsfAddress() const;
  void setSmsfAddress(std::string const &value);
  bool smsfAddressIsSet() const;
  void unsetSmsfAddress();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getTimeZone() const;
  void setTimeZone(std::string const &value);
  bool timeZoneIsSet() const;
  void unsetTimeZone();
  /// <summary>
  ///
  /// </summary>
  RatType getRatType() const;
  void setRatType(RatType const &value);
  bool ratTypeIsSet() const;
  void unsetRatType();

  friend void to_json(nlohmann::json &j, const AmfLocationData &o);
  friend void from_json(const nlohmann::json &j, AmfLocationData &o);

protected:
  std::string m_AmfAddress;

  PlmnId m_PlmnId;

  NrLocation m_AmfLocation;
  bool m_AmfLocationIsSet;
  std::string m_SmsfAddress;
  bool m_SmsfAddressIsSet;
  std::string m_TimeZone;
  bool m_TimeZoneIsSet;
  RatType m_RatType;
  bool m_RatTypeIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AmfLocationData_H_ */
