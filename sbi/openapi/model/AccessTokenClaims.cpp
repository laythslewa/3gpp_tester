/**
 * NRF OAuth2
 * NRF OAuth2 Authorization. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AccessTokenClaims.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AccessTokenClaims::AccessTokenClaims() {
  m_Iss = "";
  m_Sub = "";
  m_Scope = "";
  m_Exp = 0;
  m_ConsumerPlmnIdIsSet = false;
  m_ProducerPlmnIdIsSet = false;
  m_ProducerSnssaiListIsSet = false;
  m_ProducerNsiListIsSet = false;
  m_ProducerNfSetId = "";
  m_ProducerNfSetIdIsSet = false;
}

AccessTokenClaims::~AccessTokenClaims() {}

void AccessTokenClaims::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AccessTokenClaims &o) {
  j = nlohmann::json();
  j["iss"] = o.m_Iss;
  j["sub"] = o.m_Sub;
  j["aud"] = o.m_Aud;
  j["scope"] = o.m_Scope;
  j["exp"] = o.m_Exp;
  if (o.consumerPlmnIdIsSet())
    j["consumerPlmnId"] = o.m_ConsumerPlmnId;
  if (o.producerPlmnIdIsSet())
    j["producerPlmnId"] = o.m_ProducerPlmnId;
  if (o.producerSnssaiListIsSet() || !o.m_ProducerSnssaiList.empty())
    j["producerSnssaiList"] = o.m_ProducerSnssaiList;
  if (o.producerNsiListIsSet() || !o.m_ProducerNsiList.empty())
    j["producerNsiList"] = o.m_ProducerNsiList;
  if (o.producerNfSetIdIsSet())
    j["producerNfSetId"] = o.m_ProducerNfSetId;
}

void from_json(const nlohmann::json &j, AccessTokenClaims &o) {
  j.at("iss").get_to(o.m_Iss);
  j.at("sub").get_to(o.m_Sub);
  j.at("aud").get_to(o.m_Aud);
  j.at("scope").get_to(o.m_Scope);
  j.at("exp").get_to(o.m_Exp);
  if (j.find("consumerPlmnId") != j.end()) {
    j.at("consumerPlmnId").get_to(o.m_ConsumerPlmnId);
    o.m_ConsumerPlmnIdIsSet = true;
  }
  if (j.find("producerPlmnId") != j.end()) {
    j.at("producerPlmnId").get_to(o.m_ProducerPlmnId);
    o.m_ProducerPlmnIdIsSet = true;
  }
  if (j.find("producerSnssaiList") != j.end()) {
    j.at("producerSnssaiList").get_to(o.m_ProducerSnssaiList);
    o.m_ProducerSnssaiListIsSet = true;
  }
  if (j.find("producerNsiList") != j.end()) {
    j.at("producerNsiList").get_to(o.m_ProducerNsiList);
    o.m_ProducerNsiListIsSet = true;
  }
  if (j.find("producerNfSetId") != j.end()) {
    j.at("producerNfSetId").get_to(o.m_ProducerNfSetId);
    o.m_ProducerNfSetIdIsSet = true;
  }
}

std::string AccessTokenClaims::getIss() const { return m_Iss; }
void AccessTokenClaims::setIss(std::string const &value) { m_Iss = value; }
std::string AccessTokenClaims::getSub() const { return m_Sub; }
void AccessTokenClaims::setSub(std::string const &value) { m_Sub = value; }
AnyOfNFTypearray AccessTokenClaims::getAud() const { return m_Aud; }
void AccessTokenClaims::setAud(AnyOfNFTypearray const &value) { m_Aud = value; }
std::string AccessTokenClaims::getScope() const { return m_Scope; }
void AccessTokenClaims::setScope(std::string const &value) { m_Scope = value; }
int32_t AccessTokenClaims::getExp() const { return m_Exp; }
void AccessTokenClaims::setExp(int32_t const value) { m_Exp = value; }
PlmnId AccessTokenClaims::getConsumerPlmnId() const { return m_ConsumerPlmnId; }
void AccessTokenClaims::setConsumerPlmnId(PlmnId const &value) {
  m_ConsumerPlmnId = value;
  m_ConsumerPlmnIdIsSet = true;
}
bool AccessTokenClaims::consumerPlmnIdIsSet() const {
  return m_ConsumerPlmnIdIsSet;
}
void AccessTokenClaims::unsetConsumerPlmnId() { m_ConsumerPlmnIdIsSet = false; }
PlmnId AccessTokenClaims::getProducerPlmnId() const { return m_ProducerPlmnId; }
void AccessTokenClaims::setProducerPlmnId(PlmnId const &value) {
  m_ProducerPlmnId = value;
  m_ProducerPlmnIdIsSet = true;
}
bool AccessTokenClaims::producerPlmnIdIsSet() const {
  return m_ProducerPlmnIdIsSet;
}
void AccessTokenClaims::unsetProducerPlmnId() { m_ProducerPlmnIdIsSet = false; }
std::vector<Snssai> &AccessTokenClaims::getProducerSnssaiList() {
  return m_ProducerSnssaiList;
}
void AccessTokenClaims::setProducerSnssaiList(
    std::vector<Snssai> const &value) {
  m_ProducerSnssaiList = value;
  m_ProducerSnssaiListIsSet = true;
}
bool AccessTokenClaims::producerSnssaiListIsSet() const {
  return m_ProducerSnssaiListIsSet;
}
void AccessTokenClaims::unsetProducerSnssaiList() {
  m_ProducerSnssaiListIsSet = false;
}
std::vector<std::string> &AccessTokenClaims::getProducerNsiList() {
  return m_ProducerNsiList;
}
void AccessTokenClaims::setProducerNsiList(
    std::vector<std::string> const &value) {
  m_ProducerNsiList = value;
  m_ProducerNsiListIsSet = true;
}
bool AccessTokenClaims::producerNsiListIsSet() const {
  return m_ProducerNsiListIsSet;
}
void AccessTokenClaims::unsetProducerNsiList() {
  m_ProducerNsiListIsSet = false;
}
std::string AccessTokenClaims::getProducerNfSetId() const {
  return m_ProducerNfSetId;
}
void AccessTokenClaims::setProducerNfSetId(std::string const &value) {
  m_ProducerNfSetId = value;
  m_ProducerNfSetIdIsSet = true;
}
bool AccessTokenClaims::producerNfSetIdIsSet() const {
  return m_ProducerNfSetIdIsSet;
}
void AccessTokenClaims::unsetProducerNfSetId() {
  m_ProducerNfSetIdIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
