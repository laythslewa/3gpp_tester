/**
 * Namf_Location
 * AMF Location Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NotifiedPosInfo.h
 *
 * Data within EventNotify notification
 */

#ifndef NotifiedPosInfo_H_
#define NotifiedPosInfo_H_

#include "CivicAddress.h"
#include "Ecgi.h"
#include "GeographicArea.h"
#include "GnssPositioningMethodAndUsage.h"
#include "LocalArea.h"
#include "LocationEvent.h"
#include "Ncgi.h"
#include "PositioningMethodAndUsage.h"
#include "TerminationCause.h"
#include "VelocityEstimate.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within EventNotify notification
/// </summary>
class NotifiedPosInfo {
public:
  NotifiedPosInfo();
  virtual ~NotifiedPosInfo();

  void validate();

  /////////////////////////////////////////////
  /// NotifiedPosInfo members

  /// <summary>
  ///
  /// </summary>
  LocationEvent getLocationEvent() const;
  void setLocationEvent(LocationEvent const &value);
  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  ///
  /// </summary>
  GeographicArea getLocationEstimate() const;
  void setLocationEstimate(GeographicArea const &value);
  bool locationEstimateIsSet() const;
  void unsetLocationEstimate();
  /// <summary>
  ///
  /// </summary>
  LocalArea getLocalLocationEstimate() const;
  void setLocalLocationEstimate(LocalArea const &value);
  bool localLocationEstimateIsSet() const;
  void unsetLocalLocationEstimate();
  /// <summary>
  /// Indicates value of the age of the location estimate.
  /// </summary>
  int32_t getAgeOfLocationEstimate() const;
  void setAgeOfLocationEstimate(int32_t const value);
  bool ageOfLocationEstimateIsSet() const;
  void unsetAgeOfLocationEstimate();
  /// <summary>
  ///
  /// </summary>
  VelocityEstimate getVelocityEstimate() const;
  void setVelocityEstimate(VelocityEstimate const &value);
  bool velocityEstimateIsSet() const;
  void unsetVelocityEstimate();
  /// <summary>
  ///
  /// </summary>
  std::vector<PositioningMethodAndUsage> &getPositioningDataList();
  void
  setPositioningDataList(std::vector<PositioningMethodAndUsage> const &value);
  bool positioningDataListIsSet() const;
  void unsetPositioningDataList();
  /// <summary>
  ///
  /// </summary>
  std::vector<GnssPositioningMethodAndUsage> &getGnssPositioningDataList();
  void setGnssPositioningDataList(
      std::vector<GnssPositioningMethodAndUsage> const &value);
  bool gnssPositioningDataListIsSet() const;
  void unsetGnssPositioningDataList();
  /// <summary>
  ///
  /// </summary>
  Ecgi getEcgi() const;
  void setEcgi(Ecgi const &value);
  bool ecgiIsSet() const;
  void unsetEcgi();
  /// <summary>
  ///
  /// </summary>
  Ncgi getNcgi() const;
  void setNcgi(Ncgi const &value);
  bool ncgiIsSet() const;
  void unsetNcgi();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getServingNode() const;
  void setServingNode(std::string const &value);
  bool servingNodeIsSet() const;
  void unsetServingNode();
  /// <summary>
  /// string containing an FQDN or realm as defined in RFC 6733.
  /// </summary>
  std::string getTargetMmeName() const;
  void setTargetMmeName(std::string const &value);
  bool targetMmeNameIsSet() const;
  void unsetTargetMmeName();
  /// <summary>
  /// string containing an FQDN or realm as defined in RFC 6733.
  /// </summary>
  std::string getTargetMmeRealm() const;
  void setTargetMmeRealm(std::string const &value);
  bool targetMmeRealmIsSet() const;
  void unsetTargetMmeRealm();
  /// <summary>
  ///
  /// </summary>
  bool isUtranSrvccInd() const;
  void setUtranSrvccInd(bool const value);
  bool utranSrvccIndIsSet() const;
  void unsetUtranSrvccInd();
  /// <summary>
  ///
  /// </summary>
  CivicAddress getCivicAddress() const;
  void setCivicAddress(CivicAddress const &value);
  bool civicAddressIsSet() const;
  void unsetCivicAddress();
  /// <summary>
  /// Specifies the measured uncompensated atmospheric pressure.
  /// </summary>
  int32_t getBarometricPressure() const;
  void setBarometricPressure(int32_t const value);
  bool barometricPressureIsSet() const;
  void unsetBarometricPressure();
  /// <summary>
  /// Indicates value of altitude.
  /// </summary>
  double getAltitude() const;
  void setAltitude(double const value);
  bool altitudeIsSet() const;
  void unsetAltitude();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getHgmlcCallBackURI() const;
  void setHgmlcCallBackURI(std::string const &value);
  bool hgmlcCallBackURIIsSet() const;
  void unsetHgmlcCallBackURI();
  /// <summary>
  /// LDR Reference.
  /// </summary>
  std::string getLdrReference() const;
  void setLdrReference(std::string const &value);
  bool ldrReferenceIsSet() const;
  void unsetLdrReference();
  /// <summary>
  /// LMF identification.
  /// </summary>
  std::string getServingLMFIdentification() const;
  void setServingLMFIdentification(std::string const &value);
  bool servingLMFIdentificationIsSet() const;
  void unsetServingLMFIdentification();
  /// <summary>
  ///
  /// </summary>
  TerminationCause getTerminationCause() const;
  void setTerminationCause(TerminationCause const &value);
  bool terminationCauseIsSet() const;
  void unsetTerminationCause();

  friend void to_json(nlohmann::json &j, const NotifiedPosInfo &o);
  friend void from_json(const nlohmann::json &j, NotifiedPosInfo &o);

protected:
  LocationEvent m_LocationEvent;

  std::string m_Supi;
  bool m_SupiIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  GeographicArea m_LocationEstimate;
  bool m_LocationEstimateIsSet;
  LocalArea m_LocalLocationEstimate;
  bool m_LocalLocationEstimateIsSet;
  int32_t m_AgeOfLocationEstimate;
  bool m_AgeOfLocationEstimateIsSet;
  VelocityEstimate m_VelocityEstimate;
  bool m_VelocityEstimateIsSet;
  std::vector<PositioningMethodAndUsage> m_PositioningDataList;
  bool m_PositioningDataListIsSet;
  std::vector<GnssPositioningMethodAndUsage> m_GnssPositioningDataList;
  bool m_GnssPositioningDataListIsSet;
  Ecgi m_Ecgi;
  bool m_EcgiIsSet;
  Ncgi m_Ncgi;
  bool m_NcgiIsSet;
  std::string m_ServingNode;
  bool m_ServingNodeIsSet;
  std::string m_TargetMmeName;
  bool m_TargetMmeNameIsSet;
  std::string m_TargetMmeRealm;
  bool m_TargetMmeRealmIsSet;
  bool m_UtranSrvccInd;
  bool m_UtranSrvccIndIsSet;
  CivicAddress m_CivicAddress;
  bool m_CivicAddressIsSet;
  int32_t m_BarometricPressure;
  bool m_BarometricPressureIsSet;
  double m_Altitude;
  bool m_AltitudeIsSet;
  std::string m_HgmlcCallBackURI;
  bool m_HgmlcCallBackURIIsSet;
  std::string m_LdrReference;
  bool m_LdrReferenceIsSet;
  std::string m_ServingLMFIdentification;
  bool m_ServingLMFIdentificationIsSet;
  TerminationCause m_TerminationCause;
  bool m_TerminationCauseIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NotifiedPosInfo_H_ */
