/**
 * NRF NFDiscovery Service
 * NRF NFDiscovery Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ScpDomainRoutingInfoSubscription.h
 *
 * SCP Domain Routing Information Subscription
 */

#ifndef ScpDomainRoutingInfoSubscription_H_
#define ScpDomainRoutingInfoSubscription_H_

#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// SCP Domain Routing Information Subscription
/// </summary>
class ScpDomainRoutingInfoSubscription {
public:
  ScpDomainRoutingInfoSubscription();
  virtual ~ScpDomainRoutingInfoSubscription();

  void validate();

  /////////////////////////////////////////////
  /// ScpDomainRoutingInfoSubscription members

  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getCallbackUri() const;
  void setCallbackUri(std::string const &value);
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getValidityTime() const;
  void setValidityTime(std::string const &value);
  bool validityTimeIsSet() const;
  void unsetValidityTime();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getReqInstanceId() const;
  void setReqInstanceId(std::string const &value);
  bool reqInstanceIdIsSet() const;
  void unsetReqInstanceId();
  /// <summary>
  ///
  /// </summary>
  bool isLocalInd() const;
  void setLocalInd(bool const value);
  bool localIndIsSet() const;
  void unsetLocalInd();

  friend void to_json(nlohmann::json &j,
                      const ScpDomainRoutingInfoSubscription &o);
  friend void from_json(const nlohmann::json &j,
                        ScpDomainRoutingInfoSubscription &o);

protected:
  std::string m_CallbackUri;

  std::string m_ValidityTime;
  bool m_ValidityTimeIsSet;
  std::string m_ReqInstanceId;
  bool m_ReqInstanceIdIsSet;
  bool m_LocalInd;
  bool m_LocalIndIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ScpDomainRoutingInfoSubscription_H_ */
