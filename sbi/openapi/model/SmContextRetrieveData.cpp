/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SmContextRetrieveData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SmContextRetrieveData::SmContextRetrieveData() {
  m_TargetMmeCapIsSet = false;
  m_SmContextTypeIsSet = false;
  m_ServingNetworkIsSet = false;
  m_NotToTransferEbiListIsSet = false;
  m_RanUnchangedInd = false;
  m_RanUnchangedIndIsSet = false;
}

SmContextRetrieveData::~SmContextRetrieveData() {}

void SmContextRetrieveData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SmContextRetrieveData &o) {
  j = nlohmann::json();
  if (o.targetMmeCapIsSet())
    j["targetMmeCap"] = o.m_TargetMmeCap;
  if (o.smContextTypeIsSet())
    j["smContextType"] = o.m_SmContextType;
  if (o.servingNetworkIsSet())
    j["servingNetwork"] = o.m_ServingNetwork;
  if (o.notToTransferEbiListIsSet() || !o.m_NotToTransferEbiList.empty())
    j["notToTransferEbiList"] = o.m_NotToTransferEbiList;
  if (o.ranUnchangedIndIsSet())
    j["ranUnchangedInd"] = o.m_RanUnchangedInd;
}

void from_json(const nlohmann::json &j, SmContextRetrieveData &o) {
  if (j.find("targetMmeCap") != j.end()) {
    j.at("targetMmeCap").get_to(o.m_TargetMmeCap);
    o.m_TargetMmeCapIsSet = true;
  }
  if (j.find("smContextType") != j.end()) {
    j.at("smContextType").get_to(o.m_SmContextType);
    o.m_SmContextTypeIsSet = true;
  }
  if (j.find("servingNetwork") != j.end()) {
    j.at("servingNetwork").get_to(o.m_ServingNetwork);
    o.m_ServingNetworkIsSet = true;
  }
  if (j.find("notToTransferEbiList") != j.end()) {
    j.at("notToTransferEbiList").get_to(o.m_NotToTransferEbiList);
    o.m_NotToTransferEbiListIsSet = true;
  }
  if (j.find("ranUnchangedInd") != j.end()) {
    j.at("ranUnchangedInd").get_to(o.m_RanUnchangedInd);
    o.m_RanUnchangedIndIsSet = true;
  }
}

MmeCapabilities SmContextRetrieveData::getTargetMmeCap() const {
  return m_TargetMmeCap;
}
void SmContextRetrieveData::setTargetMmeCap(MmeCapabilities const &value) {
  m_TargetMmeCap = value;
  m_TargetMmeCapIsSet = true;
}
bool SmContextRetrieveData::targetMmeCapIsSet() const {
  return m_TargetMmeCapIsSet;
}
void SmContextRetrieveData::unsetTargetMmeCap() { m_TargetMmeCapIsSet = false; }
SmContextType SmContextRetrieveData::getSmContextType() const {
  return m_SmContextType;
}
void SmContextRetrieveData::setSmContextType(SmContextType const &value) {
  m_SmContextType = value;
  m_SmContextTypeIsSet = true;
}
bool SmContextRetrieveData::smContextTypeIsSet() const {
  return m_SmContextTypeIsSet;
}
void SmContextRetrieveData::unsetSmContextType() {
  m_SmContextTypeIsSet = false;
}
PlmnId SmContextRetrieveData::getServingNetwork() const {
  return m_ServingNetwork;
}
void SmContextRetrieveData::setServingNetwork(PlmnId const &value) {
  m_ServingNetwork = value;
  m_ServingNetworkIsSet = true;
}
bool SmContextRetrieveData::servingNetworkIsSet() const {
  return m_ServingNetworkIsSet;
}
void SmContextRetrieveData::unsetServingNetwork() {
  m_ServingNetworkIsSet = false;
}
std::vector<int32_t> &SmContextRetrieveData::getNotToTransferEbiList() {
  return m_NotToTransferEbiList;
}
void SmContextRetrieveData::setNotToTransferEbiList(
    std::vector<int32_t> const value) {
  m_NotToTransferEbiList = value;
  m_NotToTransferEbiListIsSet = true;
}
bool SmContextRetrieveData::notToTransferEbiListIsSet() const {
  return m_NotToTransferEbiListIsSet;
}
void SmContextRetrieveData::unsetNotToTransferEbiList() {
  m_NotToTransferEbiListIsSet = false;
}
bool SmContextRetrieveData::isRanUnchangedInd() const {
  return m_RanUnchangedInd;
}
void SmContextRetrieveData::setRanUnchangedInd(bool const value) {
  m_RanUnchangedInd = value;
  m_RanUnchangedIndIsSet = true;
}
bool SmContextRetrieveData::ranUnchangedIndIsSet() const {
  return m_RanUnchangedIndIsSet;
}
void SmContextRetrieveData::unsetRanUnchangedInd() {
  m_RanUnchangedIndIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
