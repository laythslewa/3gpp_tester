/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NEFChargingInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NEFChargingInformation::NEFChargingInformation() {
  m_ExternalIndividualIdentifier = "";
  m_ExternalIndividualIdentifierIsSet = false;
  m_ExternalGroupIdentifier = "";
  m_ExternalGroupIdentifierIsSet = false;
  m_GroupIdentifier = "";
  m_GroupIdentifierIsSet = false;
  m_APIDirectionIsSet = false;
  m_APITargetNetworkFunctionIsSet = false;
  m_APIResultCode = 0;
  m_APIResultCodeIsSet = false;
  m_APIName = "";
  m_APIReference = "";
  m_APIReferenceIsSet = false;
  m_APIContent = "";
  m_APIContentIsSet = false;
}

NEFChargingInformation::~NEFChargingInformation() {}

void NEFChargingInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NEFChargingInformation &o) {
  j = nlohmann::json();
  if (o.externalIndividualIdentifierIsSet())
    j["externalIndividualIdentifier"] = o.m_ExternalIndividualIdentifier;
  if (o.externalGroupIdentifierIsSet())
    j["externalGroupIdentifier"] = o.m_ExternalGroupIdentifier;
  if (o.groupIdentifierIsSet())
    j["groupIdentifier"] = o.m_GroupIdentifier;
  if (o.aPIDirectionIsSet())
    j["aPIDirection"] = o.m_APIDirection;
  if (o.aPITargetNetworkFunctionIsSet())
    j["aPITargetNetworkFunction"] = o.m_APITargetNetworkFunction;
  if (o.aPIResultCodeIsSet())
    j["aPIResultCode"] = o.m_APIResultCode;
  j["aPIName"] = o.m_APIName;
  if (o.aPIReferenceIsSet())
    j["aPIReference"] = o.m_APIReference;
  if (o.aPIContentIsSet())
    j["aPIContent"] = o.m_APIContent;
}

void from_json(const nlohmann::json &j, NEFChargingInformation &o) {
  if (j.find("externalIndividualIdentifier") != j.end()) {
    j.at("externalIndividualIdentifier")
        .get_to(o.m_ExternalIndividualIdentifier);
    o.m_ExternalIndividualIdentifierIsSet = true;
  }
  if (j.find("externalGroupIdentifier") != j.end()) {
    j.at("externalGroupIdentifier").get_to(o.m_ExternalGroupIdentifier);
    o.m_ExternalGroupIdentifierIsSet = true;
  }
  if (j.find("groupIdentifier") != j.end()) {
    j.at("groupIdentifier").get_to(o.m_GroupIdentifier);
    o.m_GroupIdentifierIsSet = true;
  }
  if (j.find("aPIDirection") != j.end()) {
    j.at("aPIDirection").get_to(o.m_APIDirection);
    o.m_APIDirectionIsSet = true;
  }
  if (j.find("aPITargetNetworkFunction") != j.end()) {
    j.at("aPITargetNetworkFunction").get_to(o.m_APITargetNetworkFunction);
    o.m_APITargetNetworkFunctionIsSet = true;
  }
  if (j.find("aPIResultCode") != j.end()) {
    j.at("aPIResultCode").get_to(o.m_APIResultCode);
    o.m_APIResultCodeIsSet = true;
  }
  j.at("aPIName").get_to(o.m_APIName);
  if (j.find("aPIReference") != j.end()) {
    j.at("aPIReference").get_to(o.m_APIReference);
    o.m_APIReferenceIsSet = true;
  }
  if (j.find("aPIContent") != j.end()) {
    j.at("aPIContent").get_to(o.m_APIContent);
    o.m_APIContentIsSet = true;
  }
}

std::string NEFChargingInformation::getExternalIndividualIdentifier() const {
  return m_ExternalIndividualIdentifier;
}
void NEFChargingInformation::setExternalIndividualIdentifier(
    std::string const &value) {
  m_ExternalIndividualIdentifier = value;
  m_ExternalIndividualIdentifierIsSet = true;
}
bool NEFChargingInformation::externalIndividualIdentifierIsSet() const {
  return m_ExternalIndividualIdentifierIsSet;
}
void NEFChargingInformation::unsetExternalIndividualIdentifier() {
  m_ExternalIndividualIdentifierIsSet = false;
}
std::string NEFChargingInformation::getExternalGroupIdentifier() const {
  return m_ExternalGroupIdentifier;
}
void NEFChargingInformation::setExternalGroupIdentifier(
    std::string const &value) {
  m_ExternalGroupIdentifier = value;
  m_ExternalGroupIdentifierIsSet = true;
}
bool NEFChargingInformation::externalGroupIdentifierIsSet() const {
  return m_ExternalGroupIdentifierIsSet;
}
void NEFChargingInformation::unsetExternalGroupIdentifier() {
  m_ExternalGroupIdentifierIsSet = false;
}
std::string NEFChargingInformation::getGroupIdentifier() const {
  return m_GroupIdentifier;
}
void NEFChargingInformation::setGroupIdentifier(std::string const &value) {
  m_GroupIdentifier = value;
  m_GroupIdentifierIsSet = true;
}
bool NEFChargingInformation::groupIdentifierIsSet() const {
  return m_GroupIdentifierIsSet;
}
void NEFChargingInformation::unsetGroupIdentifier() {
  m_GroupIdentifierIsSet = false;
}
APIDirection NEFChargingInformation::getAPIDirection() const {
  return m_APIDirection;
}
void NEFChargingInformation::setAPIDirection(APIDirection const &value) {
  m_APIDirection = value;
  m_APIDirectionIsSet = true;
}
bool NEFChargingInformation::aPIDirectionIsSet() const {
  return m_APIDirectionIsSet;
}
void NEFChargingInformation::unsetAPIDirection() {
  m_APIDirectionIsSet = false;
}
NFIdentification NEFChargingInformation::getAPITargetNetworkFunction() const {
  return m_APITargetNetworkFunction;
}
void NEFChargingInformation::setAPITargetNetworkFunction(
    NFIdentification const &value) {
  m_APITargetNetworkFunction = value;
  m_APITargetNetworkFunctionIsSet = true;
}
bool NEFChargingInformation::aPITargetNetworkFunctionIsSet() const {
  return m_APITargetNetworkFunctionIsSet;
}
void NEFChargingInformation::unsetAPITargetNetworkFunction() {
  m_APITargetNetworkFunctionIsSet = false;
}
int32_t NEFChargingInformation::getAPIResultCode() const {
  return m_APIResultCode;
}
void NEFChargingInformation::setAPIResultCode(int32_t const value) {
  m_APIResultCode = value;
  m_APIResultCodeIsSet = true;
}
bool NEFChargingInformation::aPIResultCodeIsSet() const {
  return m_APIResultCodeIsSet;
}
void NEFChargingInformation::unsetAPIResultCode() {
  m_APIResultCodeIsSet = false;
}
std::string NEFChargingInformation::getAPIName() const { return m_APIName; }
void NEFChargingInformation::setAPIName(std::string const &value) {
  m_APIName = value;
}
std::string NEFChargingInformation::getAPIReference() const {
  return m_APIReference;
}
void NEFChargingInformation::setAPIReference(std::string const &value) {
  m_APIReference = value;
  m_APIReferenceIsSet = true;
}
bool NEFChargingInformation::aPIReferenceIsSet() const {
  return m_APIReferenceIsSet;
}
void NEFChargingInformation::unsetAPIReference() {
  m_APIReferenceIsSet = false;
}
std::string NEFChargingInformation::getAPIContent() const {
  return m_APIContent;
}
void NEFChargingInformation::setAPIContent(std::string const &value) {
  m_APIContent = value;
  m_APIContentIsSet = true;
}
bool NEFChargingInformation::aPIContentIsSet() const {
  return m_APIContentIsSet;
}
void NEFChargingInformation::unsetAPIContent() { m_APIContentIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
