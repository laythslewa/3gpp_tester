/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UsedUnitContainer.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UsedUnitContainer::UsedUnitContainer() {
  m_ServiceId = 0;
  m_ServiceIdIsSet = false;
  m_TriggersIsSet = false;
  m_TriggerTimestamp = "";
  m_TriggerTimestampIsSet = false;
  m_Time = 0;
  m_TimeIsSet = false;
  m_TotalVolume = 0;
  m_TotalVolumeIsSet = false;
  m_UplinkVolume = 0;
  m_UplinkVolumeIsSet = false;
  m_DownlinkVolume = 0;
  m_DownlinkVolumeIsSet = false;
  m_ServiceSpecificUnits = 0;
  m_ServiceSpecificUnitsIsSet = false;
  m_EventTimeStampsIsSet = false;
  m_LocalSequenceNumber = 0;
  m_PDUContainerInformationIsSet = false;
}

UsedUnitContainer::~UsedUnitContainer() {}

void UsedUnitContainer::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UsedUnitContainer &o) {
  j = nlohmann::json();
  if (o.serviceIdIsSet())
    j["serviceId"] = o.m_ServiceId;
  if (o.triggersIsSet() || !o.m_Triggers.empty())
    j["triggers"] = o.m_Triggers;
  if (o.triggerTimestampIsSet())
    j["triggerTimestamp"] = o.m_TriggerTimestamp;
  if (o.timeIsSet())
    j["time"] = o.m_Time;
  if (o.totalVolumeIsSet())
    j["totalVolume"] = o.m_TotalVolume;
  if (o.uplinkVolumeIsSet())
    j["uplinkVolume"] = o.m_UplinkVolume;
  if (o.downlinkVolumeIsSet())
    j["downlinkVolume"] = o.m_DownlinkVolume;
  if (o.serviceSpecificUnitsIsSet())
    j["serviceSpecificUnits"] = o.m_ServiceSpecificUnits;
  if (o.eventTimeStampsIsSet() || !o.m_EventTimeStamps.empty())
    j["eventTimeStamps"] = o.m_EventTimeStamps;
  j["localSequenceNumber"] = o.m_LocalSequenceNumber;
  if (o.pDUContainerInformationIsSet())
    j["pDUContainerInformation"] = o.m_PDUContainerInformation;
}

void from_json(const nlohmann::json &j, UsedUnitContainer &o) {
  if (j.find("serviceId") != j.end()) {
    j.at("serviceId").get_to(o.m_ServiceId);
    o.m_ServiceIdIsSet = true;
  }
  if (j.find("triggers") != j.end()) {
    j.at("triggers").get_to(o.m_Triggers);
    o.m_TriggersIsSet = true;
  }
  if (j.find("triggerTimestamp") != j.end()) {
    j.at("triggerTimestamp").get_to(o.m_TriggerTimestamp);
    o.m_TriggerTimestampIsSet = true;
  }
  if (j.find("time") != j.end()) {
    j.at("time").get_to(o.m_Time);
    o.m_TimeIsSet = true;
  }
  if (j.find("totalVolume") != j.end()) {
    j.at("totalVolume").get_to(o.m_TotalVolume);
    o.m_TotalVolumeIsSet = true;
  }
  if (j.find("uplinkVolume") != j.end()) {
    j.at("uplinkVolume").get_to(o.m_UplinkVolume);
    o.m_UplinkVolumeIsSet = true;
  }
  if (j.find("downlinkVolume") != j.end()) {
    j.at("downlinkVolume").get_to(o.m_DownlinkVolume);
    o.m_DownlinkVolumeIsSet = true;
  }
  if (j.find("serviceSpecificUnits") != j.end()) {
    j.at("serviceSpecificUnits").get_to(o.m_ServiceSpecificUnits);
    o.m_ServiceSpecificUnitsIsSet = true;
  }
  if (j.find("eventTimeStamps") != j.end()) {
    j.at("eventTimeStamps").get_to(o.m_EventTimeStamps);
    o.m_EventTimeStampsIsSet = true;
  }
  j.at("localSequenceNumber").get_to(o.m_LocalSequenceNumber);
  if (j.find("pDUContainerInformation") != j.end()) {
    j.at("pDUContainerInformation").get_to(o.m_PDUContainerInformation);
    o.m_PDUContainerInformationIsSet = true;
  }
}

int32_t UsedUnitContainer::getServiceId() const { return m_ServiceId; }
void UsedUnitContainer::setServiceId(int32_t const value) {
  m_ServiceId = value;
  m_ServiceIdIsSet = true;
}
bool UsedUnitContainer::serviceIdIsSet() const { return m_ServiceIdIsSet; }
void UsedUnitContainer::unsetServiceId() { m_ServiceIdIsSet = false; }
std::vector<Trigger> &UsedUnitContainer::getTriggers() { return m_Triggers; }
void UsedUnitContainer::setTriggers(std::vector<Trigger> const &value) {
  m_Triggers = value;
  m_TriggersIsSet = true;
}
bool UsedUnitContainer::triggersIsSet() const { return m_TriggersIsSet; }
void UsedUnitContainer::unsetTriggers() { m_TriggersIsSet = false; }
std::string UsedUnitContainer::getTriggerTimestamp() const {
  return m_TriggerTimestamp;
}
void UsedUnitContainer::setTriggerTimestamp(std::string const &value) {
  m_TriggerTimestamp = value;
  m_TriggerTimestampIsSet = true;
}
bool UsedUnitContainer::triggerTimestampIsSet() const {
  return m_TriggerTimestampIsSet;
}
void UsedUnitContainer::unsetTriggerTimestamp() {
  m_TriggerTimestampIsSet = false;
}
int32_t UsedUnitContainer::getTime() const { return m_Time; }
void UsedUnitContainer::setTime(int32_t const value) {
  m_Time = value;
  m_TimeIsSet = true;
}
bool UsedUnitContainer::timeIsSet() const { return m_TimeIsSet; }
void UsedUnitContainer::unsetTime() { m_TimeIsSet = false; }
int32_t UsedUnitContainer::getTotalVolume() const { return m_TotalVolume; }
void UsedUnitContainer::setTotalVolume(int32_t const value) {
  m_TotalVolume = value;
  m_TotalVolumeIsSet = true;
}
bool UsedUnitContainer::totalVolumeIsSet() const { return m_TotalVolumeIsSet; }
void UsedUnitContainer::unsetTotalVolume() { m_TotalVolumeIsSet = false; }
int32_t UsedUnitContainer::getUplinkVolume() const { return m_UplinkVolume; }
void UsedUnitContainer::setUplinkVolume(int32_t const value) {
  m_UplinkVolume = value;
  m_UplinkVolumeIsSet = true;
}
bool UsedUnitContainer::uplinkVolumeIsSet() const {
  return m_UplinkVolumeIsSet;
}
void UsedUnitContainer::unsetUplinkVolume() { m_UplinkVolumeIsSet = false; }
int32_t UsedUnitContainer::getDownlinkVolume() const {
  return m_DownlinkVolume;
}
void UsedUnitContainer::setDownlinkVolume(int32_t const value) {
  m_DownlinkVolume = value;
  m_DownlinkVolumeIsSet = true;
}
bool UsedUnitContainer::downlinkVolumeIsSet() const {
  return m_DownlinkVolumeIsSet;
}
void UsedUnitContainer::unsetDownlinkVolume() { m_DownlinkVolumeIsSet = false; }
int32_t UsedUnitContainer::getServiceSpecificUnits() const {
  return m_ServiceSpecificUnits;
}
void UsedUnitContainer::setServiceSpecificUnits(int32_t const value) {
  m_ServiceSpecificUnits = value;
  m_ServiceSpecificUnitsIsSet = true;
}
bool UsedUnitContainer::serviceSpecificUnitsIsSet() const {
  return m_ServiceSpecificUnitsIsSet;
}
void UsedUnitContainer::unsetServiceSpecificUnits() {
  m_ServiceSpecificUnitsIsSet = false;
}
std::vector<std::string> &UsedUnitContainer::getEventTimeStamps() {
  return m_EventTimeStamps;
}
void UsedUnitContainer::setEventTimeStamps(
    std::vector<std::string> const &value) {
  m_EventTimeStamps = value;
  m_EventTimeStampsIsSet = true;
}
bool UsedUnitContainer::eventTimeStampsIsSet() const {
  return m_EventTimeStampsIsSet;
}
void UsedUnitContainer::unsetEventTimeStamps() {
  m_EventTimeStampsIsSet = false;
}
int32_t UsedUnitContainer::getLocalSequenceNumber() const {
  return m_LocalSequenceNumber;
}
void UsedUnitContainer::setLocalSequenceNumber(int32_t const value) {
  m_LocalSequenceNumber = value;
}
PDUContainerInformation UsedUnitContainer::getPDUContainerInformation() const {
  return m_PDUContainerInformation;
}
void UsedUnitContainer::setPDUContainerInformation(
    PDUContainerInformation const &value) {
  m_PDUContainerInformation = value;
  m_PDUContainerInformationIsSet = true;
}
bool UsedUnitContainer::pDUContainerInformationIsSet() const {
  return m_PDUContainerInformationIsSet;
}
void UsedUnitContainer::unsetPDUContainerInformation() {
  m_PDUContainerInformationIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
