/**
 * Namf_Location
 * AMF Location Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "CancelPosInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

CancelPosInfo::CancelPosInfo() {
  m_Supi = "";
  m_HgmlcCallBackURI = "";
  m_LdrReference = "";
  m_ServingLMFIdentification = "";
  m_ServingLMFIdentificationIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

CancelPosInfo::~CancelPosInfo() {}

void CancelPosInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const CancelPosInfo &o) {
  j = nlohmann::json();
  j["supi"] = o.m_Supi;
  j["hgmlcCallBackURI"] = o.m_HgmlcCallBackURI;
  j["ldrReference"] = o.m_LdrReference;
  if (o.servingLMFIdentificationIsSet())
    j["servingLMFIdentification"] = o.m_ServingLMFIdentification;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, CancelPosInfo &o) {
  j.at("supi").get_to(o.m_Supi);
  j.at("hgmlcCallBackURI").get_to(o.m_HgmlcCallBackURI);
  j.at("ldrReference").get_to(o.m_LdrReference);
  if (j.find("servingLMFIdentification") != j.end()) {
    j.at("servingLMFIdentification").get_to(o.m_ServingLMFIdentification);
    o.m_ServingLMFIdentificationIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

std::string CancelPosInfo::getSupi() const { return m_Supi; }
void CancelPosInfo::setSupi(std::string const &value) { m_Supi = value; }
std::string CancelPosInfo::getHgmlcCallBackURI() const {
  return m_HgmlcCallBackURI;
}
void CancelPosInfo::setHgmlcCallBackURI(std::string const &value) {
  m_HgmlcCallBackURI = value;
}
std::string CancelPosInfo::getLdrReference() const { return m_LdrReference; }
void CancelPosInfo::setLdrReference(std::string const &value) {
  m_LdrReference = value;
}
std::string CancelPosInfo::getServingLMFIdentification() const {
  return m_ServingLMFIdentification;
}
void CancelPosInfo::setServingLMFIdentification(std::string const &value) {
  m_ServingLMFIdentification = value;
  m_ServingLMFIdentificationIsSet = true;
}
bool CancelPosInfo::servingLMFIdentificationIsSet() const {
  return m_ServingLMFIdentificationIsSet;
}
void CancelPosInfo::unsetServingLMFIdentification() {
  m_ServingLMFIdentificationIsSet = false;
}
std::string CancelPosInfo::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void CancelPosInfo::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool CancelPosInfo::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void CancelPosInfo::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
