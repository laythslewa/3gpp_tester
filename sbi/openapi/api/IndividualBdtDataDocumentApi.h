/**
 * Unified Data Repository Service API file for policy data
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualBdtDataDocumentApi.h
 *
 *
 */

#ifndef IndividualBdtDataDocumentApi_H_
#define IndividualBdtDataDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "BdtData.h"
#include "BdtDataPatch.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class IndividualBdtDataDocumentApi {
public:
  IndividualBdtDataDocumentApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~IndividualBdtDataDocumentApi() {}
  void init();

  const std::string base = "";

private:
  void setupRoutes();

  void
  create_individual_bdt_data_handler(const Pistache::Rest::Request &request,
                                     Pistache::Http::ResponseWriter response);
  void
  delete_individual_bdt_data_handler(const Pistache::Rest::Request &request,
                                     Pistache::Http::ResponseWriter response);
  void
  read_individual_bdt_data_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response);
  void
  update_individual_bdt_data_handler(const Pistache::Rest::Request &request,
                                     Pistache::Http::ResponseWriter response);
  void individual_bdt_data_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Creates an BDT data resource associated with an BDT reference Id
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="bdtReferenceId"></param>
  /// <param name="bdtData"></param>
  virtual void
  create_individual_bdt_data(const std::string &bdtReferenceId,
                             const BdtData &bdtData,
                             Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Deletes an BDT data resource associated with an BDT reference Id
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="bdtReferenceId"></param>
  virtual void
  delete_individual_bdt_data(const std::string &bdtReferenceId,
                             Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Retrieves the BDT data information associated with a BDT reference Id
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="bdtReferenceId"></param>
  /// <param name="suppFeat">Supported Features (optional, default to
  /// &quot;&quot;)</param>
  virtual void
  read_individual_bdt_data(const std::string &bdtReferenceId,
                           const Pistache::Optional<std::string> &suppFeat,
                           Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Modifies an BDT data resource associated with an BDT reference Id
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="bdtReferenceId"></param>
  /// <param name="bdtDataPatch"></param>
  virtual void
  update_individual_bdt_data(const std::string &bdtReferenceId,
                             const BdtDataPatch &bdtDataPatch,
                             Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IndividualBdtDataDocumentApi_H_ */
