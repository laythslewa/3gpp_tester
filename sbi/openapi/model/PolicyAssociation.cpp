/**
 * Npcf_UEPolicyControl
 * UE Policy Control Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PolicyAssociation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PolicyAssociation::PolicyAssociation() {
  m_RequestIsSet = false;
  m_UePolicyIsSet = false;
  m_N2Pc5PolIsSet = false;
  m_N2Pc5ProSePolIsSet = false;
  m_TriggersIsSet = false;
  m_PrasIsSet = false;
  m_SuppFeat = "";
}

PolicyAssociation::~PolicyAssociation() {}

void PolicyAssociation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PolicyAssociation &o) {
  j = nlohmann::json();
  if (o.requestIsSet())
    j["request"] = o.m_Request;
  if (o.uePolicyIsSet())
    j["uePolicy"] = o.m_UePolicy;
  if (o.n2Pc5PolIsSet())
    j["n2Pc5Pol"] = o.m_N2Pc5Pol;
  if (o.n2Pc5ProSePolIsSet())
    j["n2Pc5ProSePol"] = o.m_N2Pc5ProSePol;
  if (o.triggersIsSet() || !o.m_Triggers.empty())
    j["triggers"] = o.m_Triggers;
  if (o.prasIsSet() || !o.m_Pras.empty())
    j["pras"] = o.m_Pras;
  j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, PolicyAssociation &o) {
  if (j.find("request") != j.end()) {
    j.at("request").get_to(o.m_Request);
    o.m_RequestIsSet = true;
  }
  if (j.find("uePolicy") != j.end()) {
    j.at("uePolicy").get_to(o.m_UePolicy);
    o.m_UePolicyIsSet = true;
  }
  if (j.find("n2Pc5Pol") != j.end()) {
    j.at("n2Pc5Pol").get_to(o.m_N2Pc5Pol);
    o.m_N2Pc5PolIsSet = true;
  }
  if (j.find("n2Pc5ProSePol") != j.end()) {
    j.at("n2Pc5ProSePol").get_to(o.m_N2Pc5ProSePol);
    o.m_N2Pc5ProSePolIsSet = true;
  }
  if (j.find("triggers") != j.end()) {
    j.at("triggers").get_to(o.m_Triggers);
    o.m_TriggersIsSet = true;
  }
  if (j.find("pras") != j.end()) {
    j.at("pras").get_to(o.m_Pras);
    o.m_PrasIsSet = true;
  }
  j.at("suppFeat").get_to(o.m_SuppFeat);
}

PolicyAssociationRequest PolicyAssociation::getRequest() const {
  return m_Request;
}
void PolicyAssociation::setRequest(PolicyAssociationRequest const &value) {
  m_Request = value;
  m_RequestIsSet = true;
}
bool PolicyAssociation::requestIsSet() const { return m_RequestIsSet; }
void PolicyAssociation::unsetRequest() { m_RequestIsSet = false; }
std::string PolicyAssociation::getUePolicy() const { return m_UePolicy; }
void PolicyAssociation::setUePolicy(std::string const &value) {
  m_UePolicy = value;
  m_UePolicyIsSet = true;
}
bool PolicyAssociation::uePolicyIsSet() const { return m_UePolicyIsSet; }
void PolicyAssociation::unsetUePolicy() { m_UePolicyIsSet = false; }
N2InfoContent PolicyAssociation::getN2Pc5Pol() const { return m_N2Pc5Pol; }
void PolicyAssociation::setN2Pc5Pol(N2InfoContent const &value) {
  m_N2Pc5Pol = value;
  m_N2Pc5PolIsSet = true;
}
bool PolicyAssociation::n2Pc5PolIsSet() const { return m_N2Pc5PolIsSet; }
void PolicyAssociation::unsetN2Pc5Pol() { m_N2Pc5PolIsSet = false; }
N2InfoContent PolicyAssociation::getN2Pc5ProSePol() const {
  return m_N2Pc5ProSePol;
}
void PolicyAssociation::setN2Pc5ProSePol(N2InfoContent const &value) {
  m_N2Pc5ProSePol = value;
  m_N2Pc5ProSePolIsSet = true;
}
bool PolicyAssociation::n2Pc5ProSePolIsSet() const {
  return m_N2Pc5ProSePolIsSet;
}
void PolicyAssociation::unsetN2Pc5ProSePol() { m_N2Pc5ProSePolIsSet = false; }
std::vector<RequestTrigger> &PolicyAssociation::getTriggers() {
  return m_Triggers;
}
void PolicyAssociation::setTriggers(std::vector<RequestTrigger> const &value) {
  m_Triggers = value;
  m_TriggersIsSet = true;
}
bool PolicyAssociation::triggersIsSet() const { return m_TriggersIsSet; }
void PolicyAssociation::unsetTriggers() { m_TriggersIsSet = false; }
std::map<std::string, PresenceInfo> &PolicyAssociation::getPras() {
  return m_Pras;
}
void PolicyAssociation::setPras(
    std::map<std::string, PresenceInfo> const &value) {
  m_Pras = value;
  m_PrasIsSet = true;
}
bool PolicyAssociation::prasIsSet() const { return m_PrasIsSet; }
void PolicyAssociation::unsetPras() { m_PrasIsSet = false; }
std::string PolicyAssociation::getSuppFeat() const { return m_SuppFeat; }
void PolicyAssociation::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
