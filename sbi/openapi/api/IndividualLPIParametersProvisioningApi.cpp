/**
 * 3gpp-lpi-pp
 * API for Location Privacy Indication Parameters Provisioning. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualLPIParametersProvisioningApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

IndividualLPIParametersProvisioningApi::IndividualLPIParametersProvisioningApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void IndividualLPIParametersProvisioningApi::init() { setupRoutes(); }

void IndividualLPIParametersProvisioningApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Delete(
      *router, base + "/:afId/provisionedLpis/:provisionedLpiId",
      Routes::bind(&IndividualLPIParametersProvisioningApi::
                       af_id_provisioned_lpis_provisioned_lpi_id_delete_handler,
                   this));
  Routes::Get(
      *router, base + "/:afId/provisionedLpis/:provisionedLpiId",
      Routes::bind(&IndividualLPIParametersProvisioningApi::
                       af_id_provisioned_lpis_provisioned_lpi_id_get_handler,
                   this));
  Routes::Put(
      *router, base + "/:afId/provisionedLpis/:provisionedLpiId",
      Routes::bind(&IndividualLPIParametersProvisioningApi::
                       af_id_provisioned_lpis_provisioned_lpi_id_put_handler,
                   this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &IndividualLPIParametersProvisioningApi::
          individual_lpi_parameters_provisioning_api_default_handler,
      this));
}

void IndividualLPIParametersProvisioningApi::
    af_id_provisioned_lpis_provisioned_lpi_id_delete_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto afId = request.param(":afId").as<std::string>();
  auto provisionedLpiId = request.param(":provisionedLpiId").as<std::string>();

  try {
    this->af_id_provisioned_lpis_provisioned_lpi_id_delete(
        afId, provisionedLpiId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualLPIParametersProvisioningApi::
    af_id_provisioned_lpis_provisioned_lpi_id_get_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto afId = request.param(":afId").as<std::string>();
  auto provisionedLpiId = request.param(":provisionedLpiId").as<std::string>();

  try {
    this->af_id_provisioned_lpis_provisioned_lpi_id_get(afId, provisionedLpiId,
                                                        response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualLPIParametersProvisioningApi::
    af_id_provisioned_lpis_provisioned_lpi_id_put_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto afId = request.param(":afId").as<std::string>();
  auto provisionedLpiId = request.param(":provisionedLpiId").as<std::string>();

  // Getting the body param

  LpiParametersProvision lpiParametersProvision;

  try {
    nlohmann::json::parse(request.body()).get_to(lpiParametersProvision);
    this->af_id_provisioned_lpis_provisioned_lpi_id_put(
        afId, provisionedLpiId, lpiParametersProvision, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void IndividualLPIParametersProvisioningApi::
    individual_lpi_parameters_provisioning_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
