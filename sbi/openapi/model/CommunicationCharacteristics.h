/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CommunicationCharacteristics.h
 *
 *
 */

#ifndef CommunicationCharacteristics_H_
#define CommunicationCharacteristics_H_

#include "PpActiveTime.h"
#include "PpDlPacketCountExt.h"
#include "PpMaximumLatency.h"
#include "PpMaximumResponseTime.h"
#include "PpSubsRegTimer.h"
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class CommunicationCharacteristics {
public:
  CommunicationCharacteristics();
  virtual ~CommunicationCharacteristics();

  void validate();

  /////////////////////////////////////////////
  /// CommunicationCharacteristics members

  /// <summary>
  ///
  /// </summary>
  PpSubsRegTimer getPpSubsRegTimer() const;
  void setPpSubsRegTimer(PpSubsRegTimer const &value);
  bool ppSubsRegTimerIsSet() const;
  void unsetPpSubsRegTimer();
  /// <summary>
  ///
  /// </summary>
  PpActiveTime getPpActiveTime() const;
  void setPpActiveTime(PpActiveTime const &value);
  bool ppActiveTimeIsSet() const;
  void unsetPpActiveTime();
  /// <summary>
  ///
  /// </summary>
  int32_t getPpDlPacketCount() const;
  void setPpDlPacketCount(int32_t const value);
  bool ppDlPacketCountIsSet() const;
  void unsetPpDlPacketCount();
  /// <summary>
  ///
  /// </summary>
  PpDlPacketCountExt getPpDlPacketCountExt() const;
  void setPpDlPacketCountExt(PpDlPacketCountExt const &value);
  bool ppDlPacketCountExtIsSet() const;
  void unsetPpDlPacketCountExt();
  /// <summary>
  ///
  /// </summary>
  PpMaximumResponseTime getPpMaximumResponseTime() const;
  void setPpMaximumResponseTime(PpMaximumResponseTime const &value);
  bool ppMaximumResponseTimeIsSet() const;
  void unsetPpMaximumResponseTime();
  /// <summary>
  ///
  /// </summary>
  PpMaximumLatency getPpMaximumLatency() const;
  void setPpMaximumLatency(PpMaximumLatency const &value);
  bool ppMaximumLatencyIsSet() const;
  void unsetPpMaximumLatency();

  friend void to_json(nlohmann::json &j, const CommunicationCharacteristics &o);
  friend void from_json(const nlohmann::json &j,
                        CommunicationCharacteristics &o);

protected:
  PpSubsRegTimer m_PpSubsRegTimer;
  bool m_PpSubsRegTimerIsSet;
  PpActiveTime m_PpActiveTime;
  bool m_PpActiveTimeIsSet;
  int32_t m_PpDlPacketCount;
  bool m_PpDlPacketCountIsSet;
  PpDlPacketCountExt m_PpDlPacketCountExt;
  bool m_PpDlPacketCountExtIsSet;
  PpMaximumResponseTime m_PpMaximumResponseTime;
  bool m_PpMaximumResponseTimeIsSet;
  PpMaximumLatency m_PpMaximumLatency;
  bool m_PpMaximumLatencyIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* CommunicationCharacteristics_H_ */
