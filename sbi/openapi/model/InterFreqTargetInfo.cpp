/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.3.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "InterFreqTargetInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

InterFreqTargetInfo::InterFreqTargetInfo() {
  m_DlCarrierFreq = 0;
  m_CellIdListIsSet = false;
}

InterFreqTargetInfo::~InterFreqTargetInfo() {}

void InterFreqTargetInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const InterFreqTargetInfo &o) {
  j = nlohmann::json();
  j["dlCarrierFreq"] = o.m_DlCarrierFreq;
  if (o.cellIdListIsSet() || !o.m_CellIdList.empty())
    j["cellIdList"] = o.m_CellIdList;
}

void from_json(const nlohmann::json &j, InterFreqTargetInfo &o) {
  j.at("dlCarrierFreq").get_to(o.m_DlCarrierFreq);
  if (j.find("cellIdList") != j.end()) {
    j.at("cellIdList").get_to(o.m_CellIdList);
    o.m_CellIdListIsSet = true;
  }
}

int32_t InterFreqTargetInfo::getDlCarrierFreq() const {
  return m_DlCarrierFreq;
}
void InterFreqTargetInfo::setDlCarrierFreq(int32_t const value) {
  m_DlCarrierFreq = value;
}
std::vector<int32_t> &InterFreqTargetInfo::getCellIdList() {
  return m_CellIdList;
}
void InterFreqTargetInfo::setCellIdList(std::vector<int32_t> const value) {
  m_CellIdList = value;
  m_CellIdListIsSet = true;
}
bool InterFreqTargetInfo::cellIdListIsSet() const { return m_CellIdListIsSet; }
void InterFreqTargetInfo::unsetCellIdList() { m_CellIdListIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
