/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.3.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AcsInfo.h
 *
 *
 */

#ifndef AcsInfo_H_
#define AcsInfo_H_

#include "Ipv6Addr.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class AcsInfo {
public:
  AcsInfo();
  virtual ~AcsInfo();

  void validate();

  /////////////////////////////////////////////
  /// AcsInfo members

  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getAcsUrl() const;
  void setAcsUrl(std::string const &value);
  bool acsUrlIsSet() const;
  void unsetAcsUrl();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getAcsIpv4Addr() const;
  void setAcsIpv4Addr(std::string const &value);
  bool acsIpv4AddrIsSet() const;
  void unsetAcsIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getAcsIpv6Addr() const;
  void setAcsIpv6Addr(Ipv6Addr const &value);
  bool acsIpv6AddrIsSet() const;
  void unsetAcsIpv6Addr();

  friend void to_json(nlohmann::json &j, const AcsInfo &o);
  friend void from_json(const nlohmann::json &j, AcsInfo &o);

protected:
  std::string m_AcsUrl;
  bool m_AcsUrlIsSet;
  std::string m_AcsIpv4Addr;
  bool m_AcsIpv4AddrIsSet;
  Ipv6Addr m_AcsIpv6Addr;
  bool m_AcsIpv6AddrIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AcsInfo_H_ */
