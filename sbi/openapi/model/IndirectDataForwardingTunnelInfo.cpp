/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndirectDataForwardingTunnelInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

IndirectDataForwardingTunnelInfo::IndirectDataForwardingTunnelInfo() {
  m_Ipv4Addr = "";
  m_Ipv4AddrIsSet = false;
  m_Ipv6AddrIsSet = false;
  m_GtpTeid = "";
  m_DrbId = 0;
  m_DrbIdIsSet = false;
  m_AdditionalTnlNb = 0;
  m_AdditionalTnlNbIsSet = false;
}

IndirectDataForwardingTunnelInfo::~IndirectDataForwardingTunnelInfo() {}

void IndirectDataForwardingTunnelInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const IndirectDataForwardingTunnelInfo &o) {
  j = nlohmann::json();
  if (o.ipv4AddrIsSet())
    j["ipv4Addr"] = o.m_Ipv4Addr;
  if (o.ipv6AddrIsSet())
    j["ipv6Addr"] = o.m_Ipv6Addr;
  j["gtpTeid"] = o.m_GtpTeid;
  if (o.drbIdIsSet())
    j["drbId"] = o.m_DrbId;
  if (o.additionalTnlNbIsSet())
    j["additionalTnlNb"] = o.m_AdditionalTnlNb;
}

void from_json(const nlohmann::json &j, IndirectDataForwardingTunnelInfo &o) {
  if (j.find("ipv4Addr") != j.end()) {
    j.at("ipv4Addr").get_to(o.m_Ipv4Addr);
    o.m_Ipv4AddrIsSet = true;
  }
  if (j.find("ipv6Addr") != j.end()) {
    j.at("ipv6Addr").get_to(o.m_Ipv6Addr);
    o.m_Ipv6AddrIsSet = true;
  }
  j.at("gtpTeid").get_to(o.m_GtpTeid);
  if (j.find("drbId") != j.end()) {
    j.at("drbId").get_to(o.m_DrbId);
    o.m_DrbIdIsSet = true;
  }
  if (j.find("additionalTnlNb") != j.end()) {
    j.at("additionalTnlNb").get_to(o.m_AdditionalTnlNb);
    o.m_AdditionalTnlNbIsSet = true;
  }
}

std::string IndirectDataForwardingTunnelInfo::getIpv4Addr() const {
  return m_Ipv4Addr;
}
void IndirectDataForwardingTunnelInfo::setIpv4Addr(std::string const &value) {
  m_Ipv4Addr = value;
  m_Ipv4AddrIsSet = true;
}
bool IndirectDataForwardingTunnelInfo::ipv4AddrIsSet() const {
  return m_Ipv4AddrIsSet;
}
void IndirectDataForwardingTunnelInfo::unsetIpv4Addr() {
  m_Ipv4AddrIsSet = false;
}
Ipv6Addr IndirectDataForwardingTunnelInfo::getIpv6Addr() const {
  return m_Ipv6Addr;
}
void IndirectDataForwardingTunnelInfo::setIpv6Addr(Ipv6Addr const &value) {
  m_Ipv6Addr = value;
  m_Ipv6AddrIsSet = true;
}
bool IndirectDataForwardingTunnelInfo::ipv6AddrIsSet() const {
  return m_Ipv6AddrIsSet;
}
void IndirectDataForwardingTunnelInfo::unsetIpv6Addr() {
  m_Ipv6AddrIsSet = false;
}
std::string IndirectDataForwardingTunnelInfo::getGtpTeid() const {
  return m_GtpTeid;
}
void IndirectDataForwardingTunnelInfo::setGtpTeid(std::string const &value) {
  m_GtpTeid = value;
}
int32_t IndirectDataForwardingTunnelInfo::getDrbId() const { return m_DrbId; }
void IndirectDataForwardingTunnelInfo::setDrbId(int32_t const value) {
  m_DrbId = value;
  m_DrbIdIsSet = true;
}
bool IndirectDataForwardingTunnelInfo::drbIdIsSet() const {
  return m_DrbIdIsSet;
}
void IndirectDataForwardingTunnelInfo::unsetDrbId() { m_DrbIdIsSet = false; }
int32_t IndirectDataForwardingTunnelInfo::getAdditionalTnlNb() const {
  return m_AdditionalTnlNb;
}
void IndirectDataForwardingTunnelInfo::setAdditionalTnlNb(int32_t const value) {
  m_AdditionalTnlNb = value;
  m_AdditionalTnlNbIsSet = true;
}
bool IndirectDataForwardingTunnelInfo::additionalTnlNbIsSet() const {
  return m_AdditionalTnlNbIsSet;
}
void IndirectDataForwardingTunnelInfo::unsetAdditionalTnlNb() {
  m_AdditionalTnlNbIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
