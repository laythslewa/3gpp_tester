/**
 * Npcf_EventExposure
 * PCF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PduSessionInformation.h
 *
 * Represents PDU session identification information.
 */

#ifndef PduSessionInformation_H_
#define PduSessionInformation_H_

#include "Ipv6Prefix.h"
#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents PDU session identification information.
/// </summary>
class PduSessionInformation {
public:
  PduSessionInformation();
  virtual ~PduSessionInformation();

  void validate();

  /////////////////////////////////////////////
  /// PduSessionInformation members

  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getUeIpv4() const;
  void setUeIpv4(std::string const &value);
  bool ueIpv4IsSet() const;
  void unsetUeIpv4();
  /// <summary>
  ///
  /// </summary>
  Ipv6Prefix getUeIpv6() const;
  void setUeIpv6(Ipv6Prefix const &value);
  bool ueIpv6IsSet() const;
  void unsetUeIpv6();
  /// <summary>
  ///
  /// </summary>
  std::string getIpDomain() const;
  void setIpDomain(std::string const &value);
  bool ipDomainIsSet() const;
  void unsetIpDomain();
  /// <summary>
  /// String identifying a MAC address formatted in the hexadecimal notation
  /// according to clause 1.1 and clause 2.1 of RFC 7042
  /// </summary>
  std::string getUeMac() const;
  void setUeMac(std::string const &value);
  bool ueMacIsSet() const;
  void unsetUeMac();

  friend void to_json(nlohmann::json &j, const PduSessionInformation &o);
  friend void from_json(const nlohmann::json &j, PduSessionInformation &o);

protected:
  Snssai m_Snssai;

  std::string m_Dnn;

  std::string m_UeIpv4;
  bool m_UeIpv4IsSet;
  Ipv6Prefix m_UeIpv6;
  bool m_UeIpv6IsSet;
  std::string m_IpDomain;
  bool m_IpDomainIsSet;
  std::string m_UeMac;
  bool m_UeMacIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PduSessionInformation_H_ */
