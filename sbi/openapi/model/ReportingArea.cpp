/**
 * LMF Location
 * LMF Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ReportingArea.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ReportingArea::ReportingArea() {
  m_TaiIsSet = false;
  m_EcgiIsSet = false;
  m_NcgiIsSet = false;
}

ReportingArea::~ReportingArea() {}

void ReportingArea::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ReportingArea &o) {
  j = nlohmann::json();
  j["areaType"] = o.m_AreaType;
  if (o.taiIsSet())
    j["tai"] = o.m_Tai;
  if (o.ecgiIsSet())
    j["ecgi"] = o.m_Ecgi;
  if (o.ncgiIsSet())
    j["ncgi"] = o.m_Ncgi;
}

void from_json(const nlohmann::json &j, ReportingArea &o) {
  j.at("areaType").get_to(o.m_AreaType);
  if (j.find("tai") != j.end()) {
    j.at("tai").get_to(o.m_Tai);
    o.m_TaiIsSet = true;
  }
  if (j.find("ecgi") != j.end()) {
    j.at("ecgi").get_to(o.m_Ecgi);
    o.m_EcgiIsSet = true;
  }
  if (j.find("ncgi") != j.end()) {
    j.at("ncgi").get_to(o.m_Ncgi);
    o.m_NcgiIsSet = true;
  }
}

ReportingAreaType ReportingArea::getAreaType() const { return m_AreaType; }
void ReportingArea::setAreaType(ReportingAreaType const &value) {
  m_AreaType = value;
}
Tai ReportingArea::getTai() const { return m_Tai; }
void ReportingArea::setTai(Tai const &value) {
  m_Tai = value;
  m_TaiIsSet = true;
}
bool ReportingArea::taiIsSet() const { return m_TaiIsSet; }
void ReportingArea::unsetTai() { m_TaiIsSet = false; }
Ecgi ReportingArea::getEcgi() const { return m_Ecgi; }
void ReportingArea::setEcgi(Ecgi const &value) {
  m_Ecgi = value;
  m_EcgiIsSet = true;
}
bool ReportingArea::ecgiIsSet() const { return m_EcgiIsSet; }
void ReportingArea::unsetEcgi() { m_EcgiIsSet = false; }
Ncgi ReportingArea::getNcgi() const { return m_Ncgi; }
void ReportingArea::setNcgi(Ncgi const &value) {
  m_Ncgi = value;
  m_NcgiIsSet = true;
}
bool ReportingArea::ncgiIsSet() const { return m_NcgiIsSet; }
void ReportingArea::unsetNcgi() { m_NcgiIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
