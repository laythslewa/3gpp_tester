/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AfEventSubscription.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AfEventSubscription::AfEventSubscription() {
  m_NotifMethodIsSet = false;
  m_RepPeriod = 0;
  m_RepPeriodIsSet = false;
  m_WaitTime = 0;
  m_WaitTimeIsSet = false;
}

AfEventSubscription::~AfEventSubscription() {}

void AfEventSubscription::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AfEventSubscription &o) {
  j = nlohmann::json();
  j["event"] = o.m_Event;
  if (o.notifMethodIsSet())
    j["notifMethod"] = o.m_NotifMethod;
  if (o.repPeriodIsSet())
    j["repPeriod"] = o.m_RepPeriod;
  if (o.waitTimeIsSet())
    j["waitTime"] = o.m_WaitTime;
}

void from_json(const nlohmann::json &j, AfEventSubscription &o) {
  j.at("event").get_to(o.m_Event);
  if (j.find("notifMethod") != j.end()) {
    j.at("notifMethod").get_to(o.m_NotifMethod);
    o.m_NotifMethodIsSet = true;
  }
  if (j.find("repPeriod") != j.end()) {
    j.at("repPeriod").get_to(o.m_RepPeriod);
    o.m_RepPeriodIsSet = true;
  }
  if (j.find("waitTime") != j.end()) {
    j.at("waitTime").get_to(o.m_WaitTime);
    o.m_WaitTimeIsSet = true;
  }
}

AfEvent AfEventSubscription::getEvent() const { return m_Event; }
void AfEventSubscription::setEvent(AfEvent const &value) { m_Event = value; }
AfNotifMethod AfEventSubscription::getNotifMethod() const {
  return m_NotifMethod;
}
void AfEventSubscription::setNotifMethod(AfNotifMethod const &value) {
  m_NotifMethod = value;
  m_NotifMethodIsSet = true;
}
bool AfEventSubscription::notifMethodIsSet() const {
  return m_NotifMethodIsSet;
}
void AfEventSubscription::unsetNotifMethod() { m_NotifMethodIsSet = false; }
int32_t AfEventSubscription::getRepPeriod() const { return m_RepPeriod; }
void AfEventSubscription::setRepPeriod(int32_t const value) {
  m_RepPeriod = value;
  m_RepPeriodIsSet = true;
}
bool AfEventSubscription::repPeriodIsSet() const { return m_RepPeriodIsSet; }
void AfEventSubscription::unsetRepPeriod() { m_RepPeriodIsSet = false; }
int32_t AfEventSubscription::getWaitTime() const { return m_WaitTime; }
void AfEventSubscription::setWaitTime(int32_t const value) {
  m_WaitTime = value;
  m_WaitTimeIsSet = true;
}
bool AfEventSubscription::waitTimeIsSet() const { return m_WaitTimeIsSet; }
void AfEventSubscription::unsetWaitTime() { m_WaitTimeIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
