/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AnalyticsEventNotif.h
 *
 * Represents an analytics event to be reported.
 */

#ifndef AnalyticsEventNotif_H_
#define AnalyticsEventNotif_H_

#include "AbnormalExposure.h"
#include "AnalyticsEvent.h"
#include "CongestInfo.h"
#include "NetworkPerfExposure.h"
#include "QosSustainabilityExposure.h"
#include "UeCommunication.h"
#include "UeMobilityExposure.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an analytics event to be reported.
/// </summary>
class AnalyticsEventNotif {
public:
  AnalyticsEventNotif();
  virtual ~AnalyticsEventNotif();

  void validate();

  /////////////////////////////////////////////
  /// AnalyticsEventNotif members

  /// <summary>
  ///
  /// </summary>
  AnalyticsEvent getAnalyEvent() const;
  void setAnalyEvent(AnalyticsEvent const &value);
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getExpiry() const;
  void setExpiry(std::string const &value);
  bool expiryIsSet() const;
  void unsetExpiry();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getTimeStamp() const;
  void setTimeStamp(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<UeMobilityExposure> &getUeMobilityInfos();
  void setUeMobilityInfos(std::vector<UeMobilityExposure> const &value);
  bool ueMobilityInfosIsSet() const;
  void unsetUeMobilityInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<UeCommunication> &getUeCommInfos();
  void setUeCommInfos(std::vector<UeCommunication> const &value);
  bool ueCommInfosIsSet() const;
  void unsetUeCommInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<AbnormalExposure> &getAbnormalInfos();
  void setAbnormalInfos(std::vector<AbnormalExposure> const &value);
  bool abnormalInfosIsSet() const;
  void unsetAbnormalInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<CongestInfo> &getCongestInfos();
  void setCongestInfos(std::vector<CongestInfo> const &value);
  bool congestInfosIsSet() const;
  void unsetCongestInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<NetworkPerfExposure> &getNwPerfInfos();
  void setNwPerfInfos(std::vector<NetworkPerfExposure> const &value);
  bool nwPerfInfosIsSet() const;
  void unsetNwPerfInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosSustainabilityExposure> &getQosSustainInfos();
  void setQosSustainInfos(std::vector<QosSustainabilityExposure> const &value);
  bool qosSustainInfosIsSet() const;
  void unsetQosSustainInfos();

  friend void to_json(nlohmann::json &j, const AnalyticsEventNotif &o);
  friend void from_json(const nlohmann::json &j, AnalyticsEventNotif &o);

protected:
  AnalyticsEvent m_AnalyEvent;

  std::string m_Expiry;
  bool m_ExpiryIsSet;
  std::string m_TimeStamp;

  std::vector<UeMobilityExposure> m_UeMobilityInfos;
  bool m_UeMobilityInfosIsSet;
  std::vector<UeCommunication> m_UeCommInfos;
  bool m_UeCommInfosIsSet;
  std::vector<AbnormalExposure> m_AbnormalInfos;
  bool m_AbnormalInfosIsSet;
  std::vector<CongestInfo> m_CongestInfos;
  bool m_CongestInfosIsSet;
  std::vector<NetworkPerfExposure> m_NwPerfInfos;
  bool m_NwPerfInfosIsSet;
  std::vector<QosSustainabilityExposure> m_QosSustainInfos;
  bool m_QosSustainInfosIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AnalyticsEventNotif_H_ */
