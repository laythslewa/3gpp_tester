/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PartialSuccessReport.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PartialSuccessReport::PartialSuccessReport() {
  m_RuleReportsIsSet = false;
  m_SessRuleReportsIsSet = false;
  m_UeCampingRepIsSet = false;
  m_PolicyDecFailureReportsIsSet = false;
  m_InvalidPolicyDecsIsSet = false;
}

PartialSuccessReport::~PartialSuccessReport() {}

void PartialSuccessReport::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PartialSuccessReport &o) {
  j = nlohmann::json();
  j["failureCause"] = o.m_FailureCause;
  if (o.ruleReportsIsSet() || !o.m_RuleReports.empty())
    j["ruleReports"] = o.m_RuleReports;
  if (o.sessRuleReportsIsSet() || !o.m_SessRuleReports.empty())
    j["sessRuleReports"] = o.m_SessRuleReports;
  if (o.ueCampingRepIsSet())
    j["ueCampingRep"] = o.m_UeCampingRep;
  if (o.policyDecFailureReportsIsSet() || !o.m_PolicyDecFailureReports.empty())
    j["policyDecFailureReports"] = o.m_PolicyDecFailureReports;
  if (o.invalidPolicyDecsIsSet() || !o.m_InvalidPolicyDecs.empty())
    j["invalidPolicyDecs"] = o.m_InvalidPolicyDecs;
}

void from_json(const nlohmann::json &j, PartialSuccessReport &o) {
  j.at("failureCause").get_to(o.m_FailureCause);
  if (j.find("ruleReports") != j.end()) {
    j.at("ruleReports").get_to(o.m_RuleReports);
    o.m_RuleReportsIsSet = true;
  }
  if (j.find("sessRuleReports") != j.end()) {
    j.at("sessRuleReports").get_to(o.m_SessRuleReports);
    o.m_SessRuleReportsIsSet = true;
  }
  if (j.find("ueCampingRep") != j.end()) {
    j.at("ueCampingRep").get_to(o.m_UeCampingRep);
    o.m_UeCampingRepIsSet = true;
  }
  if (j.find("policyDecFailureReports") != j.end()) {
    j.at("policyDecFailureReports").get_to(o.m_PolicyDecFailureReports);
    o.m_PolicyDecFailureReportsIsSet = true;
  }
  if (j.find("invalidPolicyDecs") != j.end()) {
    j.at("invalidPolicyDecs").get_to(o.m_InvalidPolicyDecs);
    o.m_InvalidPolicyDecsIsSet = true;
  }
}

FailureCause PartialSuccessReport::getFailureCause() const {
  return m_FailureCause;
}
void PartialSuccessReport::setFailureCause(FailureCause const &value) {
  m_FailureCause = value;
}
std::vector<RuleReport> &PartialSuccessReport::getRuleReports() {
  return m_RuleReports;
}
void PartialSuccessReport::setRuleReports(
    std::vector<RuleReport> const &value) {
  m_RuleReports = value;
  m_RuleReportsIsSet = true;
}
bool PartialSuccessReport::ruleReportsIsSet() const {
  return m_RuleReportsIsSet;
}
void PartialSuccessReport::unsetRuleReports() { m_RuleReportsIsSet = false; }
std::vector<SessionRuleReport> &PartialSuccessReport::getSessRuleReports() {
  return m_SessRuleReports;
}
void PartialSuccessReport::setSessRuleReports(
    std::vector<SessionRuleReport> const &value) {
  m_SessRuleReports = value;
  m_SessRuleReportsIsSet = true;
}
bool PartialSuccessReport::sessRuleReportsIsSet() const {
  return m_SessRuleReportsIsSet;
}
void PartialSuccessReport::unsetSessRuleReports() {
  m_SessRuleReportsIsSet = false;
}
UeCampingRep PartialSuccessReport::getUeCampingRep() const {
  return m_UeCampingRep;
}
void PartialSuccessReport::setUeCampingRep(UeCampingRep const &value) {
  m_UeCampingRep = value;
  m_UeCampingRepIsSet = true;
}
bool PartialSuccessReport::ueCampingRepIsSet() const {
  return m_UeCampingRepIsSet;
}
void PartialSuccessReport::unsetUeCampingRep() { m_UeCampingRepIsSet = false; }
std::vector<PolicyDecisionFailureCode> &
PartialSuccessReport::getPolicyDecFailureReports() {
  return m_PolicyDecFailureReports;
}
void PartialSuccessReport::setPolicyDecFailureReports(
    std::vector<PolicyDecisionFailureCode> const &value) {
  m_PolicyDecFailureReports = value;
  m_PolicyDecFailureReportsIsSet = true;
}
bool PartialSuccessReport::policyDecFailureReportsIsSet() const {
  return m_PolicyDecFailureReportsIsSet;
}
void PartialSuccessReport::unsetPolicyDecFailureReports() {
  m_PolicyDecFailureReportsIsSet = false;
}
std::vector<InvalidParam> &PartialSuccessReport::getInvalidPolicyDecs() {
  return m_InvalidPolicyDecs;
}
void PartialSuccessReport::setInvalidPolicyDecs(
    std::vector<InvalidParam> const &value) {
  m_InvalidPolicyDecs = value;
  m_InvalidPolicyDecsIsSet = true;
}
bool PartialSuccessReport::invalidPolicyDecsIsSet() const {
  return m_InvalidPolicyDecsIsSet;
}
void PartialSuccessReport::unsetInvalidPolicyDecs() {
  m_InvalidPolicyDecsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
