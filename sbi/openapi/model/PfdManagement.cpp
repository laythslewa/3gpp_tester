/**
 * 3gpp-pfd-management
 * API for PFD management. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PfdManagement.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PfdManagement::PfdManagement() {
  m_Self = "";
  m_SelfIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_PfdReportsIsSet = false;
  m_NotificationDestination = "";
  m_NotificationDestinationIsSet = false;
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
}

PfdManagement::~PfdManagement() {}

void PfdManagement::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PfdManagement &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  j["pfdDatas"] = o.m_PfdDatas;
  if (o.pfdReportsIsSet() || !o.m_PfdReports.empty())
    j["pfdReports"] = o.m_PfdReports;
  if (o.notificationDestinationIsSet())
    j["notificationDestination"] = o.m_NotificationDestination;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
}

void from_json(const nlohmann::json &j, PfdManagement &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  j.at("pfdDatas").get_to(o.m_PfdDatas);
  if (j.find("pfdReports") != j.end()) {
    j.at("pfdReports").get_to(o.m_PfdReports);
    o.m_PfdReportsIsSet = true;
  }
  if (j.find("notificationDestination") != j.end()) {
    j.at("notificationDestination").get_to(o.m_NotificationDestination);
    o.m_NotificationDestinationIsSet = true;
  }
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
}

std::string PfdManagement::getSelf() const { return m_Self; }
void PfdManagement::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool PfdManagement::selfIsSet() const { return m_SelfIsSet; }
void PfdManagement::unsetSelf() { m_SelfIsSet = false; }
std::string PfdManagement::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void PfdManagement::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool PfdManagement::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void PfdManagement::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::map<std::string, PfdData> &PfdManagement::getPfdDatas() {
  return m_PfdDatas;
}
void PfdManagement::setPfdDatas(std::map<std::string, PfdData> const &value) {
  m_PfdDatas = value;
}
std::map<std::string, PfdReport> &PfdManagement::getPfdReports() {
  return m_PfdReports;
}
void PfdManagement::setPfdReports(
    std::map<std::string, PfdReport> const &value) {
  m_PfdReports = value;
  m_PfdReportsIsSet = true;
}
bool PfdManagement::pfdReportsIsSet() const { return m_PfdReportsIsSet; }
void PfdManagement::unsetPfdReports() { m_PfdReportsIsSet = false; }
std::string PfdManagement::getNotificationDestination() const {
  return m_NotificationDestination;
}
void PfdManagement::setNotificationDestination(std::string const &value) {
  m_NotificationDestination = value;
  m_NotificationDestinationIsSet = true;
}
bool PfdManagement::notificationDestinationIsSet() const {
  return m_NotificationDestinationIsSet;
}
void PfdManagement::unsetNotificationDestination() {
  m_NotificationDestinationIsSet = false;
}
bool PfdManagement::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void PfdManagement::setRequestTestNotification(bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool PfdManagement::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void PfdManagement::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig PfdManagement::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void PfdManagement::setWebsockNotifConfig(WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool PfdManagement::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void PfdManagement::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
