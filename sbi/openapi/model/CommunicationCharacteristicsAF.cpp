/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "CommunicationCharacteristicsAF.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

CommunicationCharacteristicsAF::CommunicationCharacteristicsAF() {
  m_PpDlPacketCount = 0;
  m_PpDlPacketCountIsSet = false;
  m_MaximumResponseTime = 0;
  m_MaximumResponseTimeIsSet = false;
  m_MaximumLatency = 0;
  m_MaximumLatencyIsSet = false;
}

CommunicationCharacteristicsAF::~CommunicationCharacteristicsAF() {}

void CommunicationCharacteristicsAF::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const CommunicationCharacteristicsAF &o) {
  j = nlohmann::json();
  if (o.ppDlPacketCountIsSet())
    j["ppDlPacketCount"] = o.m_PpDlPacketCount;
  if (o.maximumResponseTimeIsSet())
    j["maximumResponseTime"] = o.m_MaximumResponseTime;
  if (o.maximumLatencyIsSet())
    j["maximumLatency"] = o.m_MaximumLatency;
}

void from_json(const nlohmann::json &j, CommunicationCharacteristicsAF &o) {
  if (j.find("ppDlPacketCount") != j.end()) {
    j.at("ppDlPacketCount").get_to(o.m_PpDlPacketCount);
    o.m_PpDlPacketCountIsSet = true;
  }
  if (j.find("maximumResponseTime") != j.end()) {
    j.at("maximumResponseTime").get_to(o.m_MaximumResponseTime);
    o.m_MaximumResponseTimeIsSet = true;
  }
  if (j.find("maximumLatency") != j.end()) {
    j.at("maximumLatency").get_to(o.m_MaximumLatency);
    o.m_MaximumLatencyIsSet = true;
  }
}

int32_t CommunicationCharacteristicsAF::getPpDlPacketCount() const {
  return m_PpDlPacketCount;
}
void CommunicationCharacteristicsAF::setPpDlPacketCount(int32_t const value) {
  m_PpDlPacketCount = value;
  m_PpDlPacketCountIsSet = true;
}
bool CommunicationCharacteristicsAF::ppDlPacketCountIsSet() const {
  return m_PpDlPacketCountIsSet;
}
void CommunicationCharacteristicsAF::unsetPpDlPacketCount() {
  m_PpDlPacketCountIsSet = false;
}
int32_t CommunicationCharacteristicsAF::getMaximumResponseTime() const {
  return m_MaximumResponseTime;
}
void CommunicationCharacteristicsAF::setMaximumResponseTime(
    int32_t const value) {
  m_MaximumResponseTime = value;
  m_MaximumResponseTimeIsSet = true;
}
bool CommunicationCharacteristicsAF::maximumResponseTimeIsSet() const {
  return m_MaximumResponseTimeIsSet;
}
void CommunicationCharacteristicsAF::unsetMaximumResponseTime() {
  m_MaximumResponseTimeIsSet = false;
}
int32_t CommunicationCharacteristicsAF::getMaximumLatency() const {
  return m_MaximumLatency;
}
void CommunicationCharacteristicsAF::setMaximumLatency(int32_t const value) {
  m_MaximumLatency = value;
  m_MaximumLatencyIsSet = true;
}
bool CommunicationCharacteristicsAF::maximumLatencyIsSet() const {
  return m_MaximumLatencyIsSet;
}
void CommunicationCharacteristicsAF::unsetMaximumLatency() {
  m_MaximumLatencyIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
