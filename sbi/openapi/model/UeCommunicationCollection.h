/**
 * Naf_EventExposure
 * AF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UeCommunicationCollection.h
 *
 * Contains UE communication information associated with an application.
 */

#ifndef UeCommunicationCollection_H_
#define UeCommunicationCollection_H_

#include "CommunicationCollection.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains UE communication information associated with an application.
/// </summary>
class UeCommunicationCollection {
public:
  UeCommunicationCollection();
  virtual ~UeCommunicationCollection();

  void validate();

  /////////////////////////////////////////////
  /// UeCommunicationCollection members

  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  ///
  /// </summary>
  std::string getExterGroupId() const;
  void setExterGroupId(std::string const &value);
  bool exterGroupIdIsSet() const;
  void unsetExterGroupId();
  /// <summary>
  /// String identifying a group of devices network internal globally unique ID
  /// which identifies a set of IMSIs, as specified in clause 19.9 of 3GPP
  /// TS 23.003.
  /// </summary>
  std::string getInterGroupId() const;
  void setInterGroupId(std::string const &value);
  bool interGroupIdIsSet() const;
  void unsetInterGroupId();
  /// <summary>
  /// String providing an application identifier.
  /// </summary>
  std::string getAppId() const;
  void setAppId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<CommunicationCollection> &getComms();
  void setComms(std::vector<CommunicationCollection> const &value);

  friend void to_json(nlohmann::json &j, const UeCommunicationCollection &o);
  friend void from_json(const nlohmann::json &j, UeCommunicationCollection &o);

protected:
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_Supi;
  bool m_SupiIsSet;
  std::string m_ExterGroupId;
  bool m_ExterGroupIdIsSet;
  std::string m_InterGroupId;
  bool m_InterGroupIdIsSet;
  std::string m_AppId;

  std::vector<CommunicationCollection> m_Comms;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UeCommunicationCollection_H_ */
