/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NefCond.h
 *
 * Subscription to a set of NF Instances (NEFs), identified by Event ID(s)
 * provided by AF, S-NSSAI(s), AF Instance ID, Application Identifier, External
 * Identifier, External Group Identifier, or domain name.
 */

#ifndef NefCond_H_
#define NefCond_H_

#include "AfEvent.h"
#include "IdentityRange.h"
#include "PfdData.h"
#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Subscription to a set of NF Instances (NEFs), identified by Event ID(s)
/// provided by AF, S-NSSAI(s), AF Instance ID, Application Identifier, External
/// Identifier, External Group Identifier, or domain name.
/// </summary>
class NefCond {
public:
  NefCond();
  virtual ~NefCond();

  void validate();

  /////////////////////////////////////////////
  /// NefCond members

  /// <summary>
  ///
  /// </summary>
  std::string getConditionType() const;
  void setConditionType(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<AfEvent> &getAfEvents();
  void setAfEvents(std::vector<AfEvent> const &value);
  bool afEventsIsSet() const;
  void unsetAfEvents();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getSnssaiList();
  void setSnssaiList(std::vector<Snssai> const &value);
  bool snssaiListIsSet() const;
  void unsetSnssaiList();
  /// <summary>
  ///
  /// </summary>
  PfdData getPfdData() const;
  void setPfdData(PfdData const &value);
  bool pfdDataIsSet() const;
  void unsetPfdData();
  /// <summary>
  ///
  /// </summary>
  std::vector<IdentityRange> &getGpsiRanges();
  void setGpsiRanges(std::vector<IdentityRange> const &value);
  bool gpsiRangesIsSet() const;
  void unsetGpsiRanges();
  /// <summary>
  ///
  /// </summary>
  std::vector<IdentityRange> &getExternalGroupIdentifiersRanges();
  void
  setExternalGroupIdentifiersRanges(std::vector<IdentityRange> const &value);
  bool externalGroupIdentifiersRangesIsSet() const;
  void unsetExternalGroupIdentifiersRanges();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getServedFqdnList();
  void setServedFqdnList(std::vector<std::string> const &value);
  bool servedFqdnListIsSet() const;
  void unsetServedFqdnList();

  friend void to_json(nlohmann::json &j, const NefCond &o);
  friend void from_json(const nlohmann::json &j, NefCond &o);

protected:
  std::string m_ConditionType;

  std::vector<AfEvent> m_AfEvents;
  bool m_AfEventsIsSet;
  std::vector<Snssai> m_SnssaiList;
  bool m_SnssaiListIsSet;
  PfdData m_PfdData;
  bool m_PfdDataIsSet;
  std::vector<IdentityRange> m_GpsiRanges;
  bool m_GpsiRangesIsSet;
  std::vector<IdentityRange> m_ExternalGroupIdentifiersRanges;
  bool m_ExternalGroupIdentifiersRangesIsSet;
  std::vector<std::string> m_ServedFqdnList;
  bool m_ServedFqdnListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NefCond_H_ */
