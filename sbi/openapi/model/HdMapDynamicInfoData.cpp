/**
 * VAE_HDMapDynamicInfo
 * API for VAE HDMapDynamicInfo Service Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "HdMapDynamicInfoData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

HdMapDynamicInfoData::HdMapDynamicInfoData() {
  m_UeId = "";
  m_NotifUri = "";
  m_Range = 0;
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
}

HdMapDynamicInfoData::~HdMapDynamicInfoData() {}

void HdMapDynamicInfoData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const HdMapDynamicInfoData &o) {
  j = nlohmann::json();
  j["ueId"] = o.m_UeId;
  j["notifUri"] = o.m_NotifUri;
  j["range"] = o.m_Range;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, HdMapDynamicInfoData &o) {
  j.at("ueId").get_to(o.m_UeId);
  j.at("notifUri").get_to(o.m_NotifUri);
  j.at("range").get_to(o.m_Range);
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::string HdMapDynamicInfoData::getUeId() const { return m_UeId; }
void HdMapDynamicInfoData::setUeId(std::string const &value) { m_UeId = value; }
std::string HdMapDynamicInfoData::getNotifUri() const { return m_NotifUri; }
void HdMapDynamicInfoData::setNotifUri(std::string const &value) {
  m_NotifUri = value;
}
int32_t HdMapDynamicInfoData::getRange() const { return m_Range; }
void HdMapDynamicInfoData::setRange(int32_t const value) { m_Range = value; }
bool HdMapDynamicInfoData::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void HdMapDynamicInfoData::setRequestTestNotification(bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool HdMapDynamicInfoData::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void HdMapDynamicInfoData::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig HdMapDynamicInfoData::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void HdMapDynamicInfoData::setWebsockNotifConfig(
    WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool HdMapDynamicInfoData::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void HdMapDynamicInfoData::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
std::string HdMapDynamicInfoData::getSuppFeat() const { return m_SuppFeat; }
void HdMapDynamicInfoData::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool HdMapDynamicInfoData::suppFeatIsSet() const { return m_SuppFeatIsSet; }
void HdMapDynamicInfoData::unsetSuppFeat() { m_SuppFeatIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
