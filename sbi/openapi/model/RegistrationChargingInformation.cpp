/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RegistrationChargingInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RegistrationChargingInformation::RegistrationChargingInformation() {
  m_UserInformationIsSet = false;
  m_UserLocationinfoIsSet = false;
  m_PSCellInformationIsSet = false;
  m_UetimeZone = "";
  m_UetimeZoneIsSet = false;
  m_RATTypeIsSet = false;
  m_r_5GMMCapabilityIsSet = false;
  m_MICOModeIndicationIsSet = false;
  m_SmsIndicationIsSet = false;
  m_TaiListIsSet = false;
  m_ServiceAreaRestrictionIsSet = false;
  m_RequestedNSSAIIsSet = false;
  m_AllowedNSSAIIsSet = false;
  m_RejectedNSSAIIsSet = false;
  m_NSSAIMapListIsSet = false;
  m_AmfUeNgapId = 0;
  m_AmfUeNgapIdIsSet = false;
  m_RanUeNgapId = 0;
  m_RanUeNgapIdIsSet = false;
  m_RanNodeIdIsSet = false;
}

RegistrationChargingInformation::~RegistrationChargingInformation() {}

void RegistrationChargingInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const RegistrationChargingInformation &o) {
  j = nlohmann::json();
  j["registrationMessagetype"] = o.m_RegistrationMessagetype;
  if (o.userInformationIsSet())
    j["userInformation"] = o.m_UserInformation;
  if (o.userLocationinfoIsSet())
    j["userLocationinfo"] = o.m_UserLocationinfo;
  if (o.pSCellInformationIsSet())
    j["pSCellInformation"] = o.m_PSCellInformation;
  if (o.uetimeZoneIsSet())
    j["uetimeZone"] = o.m_UetimeZone;
  if (o.rATTypeIsSet())
    j["rATType"] = o.m_RATType;
  if (o.r5GMMCapabilityIsSet())
    j["5GMMCapability"] = o.m_r_5GMMCapability;
  if (o.mICOModeIndicationIsSet())
    j["mICOModeIndication"] = o.m_MICOModeIndication;
  if (o.smsIndicationIsSet())
    j["smsIndication"] = o.m_SmsIndication;
  if (o.taiListIsSet() || !o.m_TaiList.empty())
    j["taiList"] = o.m_TaiList;
  if (o.serviceAreaRestrictionIsSet() || !o.m_ServiceAreaRestriction.empty())
    j["serviceAreaRestriction"] = o.m_ServiceAreaRestriction;
  if (o.requestedNSSAIIsSet() || !o.m_RequestedNSSAI.empty())
    j["requestedNSSAI"] = o.m_RequestedNSSAI;
  if (o.allowedNSSAIIsSet() || !o.m_AllowedNSSAI.empty())
    j["allowedNSSAI"] = o.m_AllowedNSSAI;
  if (o.rejectedNSSAIIsSet() || !o.m_RejectedNSSAI.empty())
    j["rejectedNSSAI"] = o.m_RejectedNSSAI;
  if (o.nSSAIMapListIsSet() || !o.m_NSSAIMapList.empty())
    j["nSSAIMapList"] = o.m_NSSAIMapList;
  if (o.amfUeNgapIdIsSet())
    j["amfUeNgapId"] = o.m_AmfUeNgapId;
  if (o.ranUeNgapIdIsSet())
    j["ranUeNgapId"] = o.m_RanUeNgapId;
  if (o.ranNodeIdIsSet())
    j["ranNodeId"] = o.m_RanNodeId;
}

void from_json(const nlohmann::json &j, RegistrationChargingInformation &o) {
  j.at("registrationMessagetype").get_to(o.m_RegistrationMessagetype);
  if (j.find("userInformation") != j.end()) {
    j.at("userInformation").get_to(o.m_UserInformation);
    o.m_UserInformationIsSet = true;
  }
  if (j.find("userLocationinfo") != j.end()) {
    j.at("userLocationinfo").get_to(o.m_UserLocationinfo);
    o.m_UserLocationinfoIsSet = true;
  }
  if (j.find("pSCellInformation") != j.end()) {
    j.at("pSCellInformation").get_to(o.m_PSCellInformation);
    o.m_PSCellInformationIsSet = true;
  }
  if (j.find("uetimeZone") != j.end()) {
    j.at("uetimeZone").get_to(o.m_UetimeZone);
    o.m_UetimeZoneIsSet = true;
  }
  if (j.find("rATType") != j.end()) {
    j.at("rATType").get_to(o.m_RATType);
    o.m_RATTypeIsSet = true;
  }
  if (j.find("5GMMCapability") != j.end()) {
    j.at("5GMMCapability").get_to(o.m_r_5GMMCapability);
    o.m_r_5GMMCapabilityIsSet = true;
  }
  if (j.find("mICOModeIndication") != j.end()) {
    j.at("mICOModeIndication").get_to(o.m_MICOModeIndication);
    o.m_MICOModeIndicationIsSet = true;
  }
  if (j.find("smsIndication") != j.end()) {
    j.at("smsIndication").get_to(o.m_SmsIndication);
    o.m_SmsIndicationIsSet = true;
  }
  if (j.find("taiList") != j.end()) {
    j.at("taiList").get_to(o.m_TaiList);
    o.m_TaiListIsSet = true;
  }
  if (j.find("serviceAreaRestriction") != j.end()) {
    j.at("serviceAreaRestriction").get_to(o.m_ServiceAreaRestriction);
    o.m_ServiceAreaRestrictionIsSet = true;
  }
  if (j.find("requestedNSSAI") != j.end()) {
    j.at("requestedNSSAI").get_to(o.m_RequestedNSSAI);
    o.m_RequestedNSSAIIsSet = true;
  }
  if (j.find("allowedNSSAI") != j.end()) {
    j.at("allowedNSSAI").get_to(o.m_AllowedNSSAI);
    o.m_AllowedNSSAIIsSet = true;
  }
  if (j.find("rejectedNSSAI") != j.end()) {
    j.at("rejectedNSSAI").get_to(o.m_RejectedNSSAI);
    o.m_RejectedNSSAIIsSet = true;
  }
  if (j.find("nSSAIMapList") != j.end()) {
    j.at("nSSAIMapList").get_to(o.m_NSSAIMapList);
    o.m_NSSAIMapListIsSet = true;
  }
  if (j.find("amfUeNgapId") != j.end()) {
    j.at("amfUeNgapId").get_to(o.m_AmfUeNgapId);
    o.m_AmfUeNgapIdIsSet = true;
  }
  if (j.find("ranUeNgapId") != j.end()) {
    j.at("ranUeNgapId").get_to(o.m_RanUeNgapId);
    o.m_RanUeNgapIdIsSet = true;
  }
  if (j.find("ranNodeId") != j.end()) {
    j.at("ranNodeId").get_to(o.m_RanNodeId);
    o.m_RanNodeIdIsSet = true;
  }
}

RegistrationMessageType
RegistrationChargingInformation::getRegistrationMessagetype() const {
  return m_RegistrationMessagetype;
}
void RegistrationChargingInformation::setRegistrationMessagetype(
    RegistrationMessageType const &value) {
  m_RegistrationMessagetype = value;
}
UserInformation RegistrationChargingInformation::getUserInformation() const {
  return m_UserInformation;
}
void RegistrationChargingInformation::setUserInformation(
    UserInformation const &value) {
  m_UserInformation = value;
  m_UserInformationIsSet = true;
}
bool RegistrationChargingInformation::userInformationIsSet() const {
  return m_UserInformationIsSet;
}
void RegistrationChargingInformation::unsetUserInformation() {
  m_UserInformationIsSet = false;
}
UserLocation RegistrationChargingInformation::getUserLocationinfo() const {
  return m_UserLocationinfo;
}
void RegistrationChargingInformation::setUserLocationinfo(
    UserLocation const &value) {
  m_UserLocationinfo = value;
  m_UserLocationinfoIsSet = true;
}
bool RegistrationChargingInformation::userLocationinfoIsSet() const {
  return m_UserLocationinfoIsSet;
}
void RegistrationChargingInformation::unsetUserLocationinfo() {
  m_UserLocationinfoIsSet = false;
}
PSCellInformation
RegistrationChargingInformation::getPSCellInformation() const {
  return m_PSCellInformation;
}
void RegistrationChargingInformation::setPSCellInformation(
    PSCellInformation const &value) {
  m_PSCellInformation = value;
  m_PSCellInformationIsSet = true;
}
bool RegistrationChargingInformation::pSCellInformationIsSet() const {
  return m_PSCellInformationIsSet;
}
void RegistrationChargingInformation::unsetPSCellInformation() {
  m_PSCellInformationIsSet = false;
}
std::string RegistrationChargingInformation::getUetimeZone() const {
  return m_UetimeZone;
}
void RegistrationChargingInformation::setUetimeZone(std::string const &value) {
  m_UetimeZone = value;
  m_UetimeZoneIsSet = true;
}
bool RegistrationChargingInformation::uetimeZoneIsSet() const {
  return m_UetimeZoneIsSet;
}
void RegistrationChargingInformation::unsetUetimeZone() {
  m_UetimeZoneIsSet = false;
}
RatType RegistrationChargingInformation::getRATType() const {
  return m_RATType;
}
void RegistrationChargingInformation::setRATType(RatType const &value) {
  m_RATType = value;
  m_RATTypeIsSet = true;
}
bool RegistrationChargingInformation::rATTypeIsSet() const {
  return m_RATTypeIsSet;
}
void RegistrationChargingInformation::unsetRATType() { m_RATTypeIsSet = false; }
std::string RegistrationChargingInformation::getR5GMMCapability() const {
  return m_r_5GMMCapability;
}
void RegistrationChargingInformation::setR5GMMCapability(
    std::string const &value) {
  m_r_5GMMCapability = value;
  m_r_5GMMCapabilityIsSet = true;
}
bool RegistrationChargingInformation::r5GMMCapabilityIsSet() const {
  return m_r_5GMMCapabilityIsSet;
}
void RegistrationChargingInformation::unsetr_5GMMCapability() {
  m_r_5GMMCapabilityIsSet = false;
}
MICOModeIndication
RegistrationChargingInformation::getMICOModeIndication() const {
  return m_MICOModeIndication;
}
void RegistrationChargingInformation::setMICOModeIndication(
    MICOModeIndication const &value) {
  m_MICOModeIndication = value;
  m_MICOModeIndicationIsSet = true;
}
bool RegistrationChargingInformation::mICOModeIndicationIsSet() const {
  return m_MICOModeIndicationIsSet;
}
void RegistrationChargingInformation::unsetMICOModeIndication() {
  m_MICOModeIndicationIsSet = false;
}
SmsIndication RegistrationChargingInformation::getSmsIndication() const {
  return m_SmsIndication;
}
void RegistrationChargingInformation::setSmsIndication(
    SmsIndication const &value) {
  m_SmsIndication = value;
  m_SmsIndicationIsSet = true;
}
bool RegistrationChargingInformation::smsIndicationIsSet() const {
  return m_SmsIndicationIsSet;
}
void RegistrationChargingInformation::unsetSmsIndication() {
  m_SmsIndicationIsSet = false;
}
std::vector<Tai> &RegistrationChargingInformation::getTaiList() {
  return m_TaiList;
}
void RegistrationChargingInformation::setTaiList(
    std::vector<Tai> const &value) {
  m_TaiList = value;
  m_TaiListIsSet = true;
}
bool RegistrationChargingInformation::taiListIsSet() const {
  return m_TaiListIsSet;
}
void RegistrationChargingInformation::unsetTaiList() { m_TaiListIsSet = false; }
std::vector<ServiceAreaRestriction> &
RegistrationChargingInformation::getServiceAreaRestriction() {
  return m_ServiceAreaRestriction;
}
void RegistrationChargingInformation::setServiceAreaRestriction(
    std::vector<ServiceAreaRestriction> const &value) {
  m_ServiceAreaRestriction = value;
  m_ServiceAreaRestrictionIsSet = true;
}
bool RegistrationChargingInformation::serviceAreaRestrictionIsSet() const {
  return m_ServiceAreaRestrictionIsSet;
}
void RegistrationChargingInformation::unsetServiceAreaRestriction() {
  m_ServiceAreaRestrictionIsSet = false;
}
std::vector<Snssai> &RegistrationChargingInformation::getRequestedNSSAI() {
  return m_RequestedNSSAI;
}
void RegistrationChargingInformation::setRequestedNSSAI(
    std::vector<Snssai> const &value) {
  m_RequestedNSSAI = value;
  m_RequestedNSSAIIsSet = true;
}
bool RegistrationChargingInformation::requestedNSSAIIsSet() const {
  return m_RequestedNSSAIIsSet;
}
void RegistrationChargingInformation::unsetRequestedNSSAI() {
  m_RequestedNSSAIIsSet = false;
}
std::vector<Snssai> &RegistrationChargingInformation::getAllowedNSSAI() {
  return m_AllowedNSSAI;
}
void RegistrationChargingInformation::setAllowedNSSAI(
    std::vector<Snssai> const &value) {
  m_AllowedNSSAI = value;
  m_AllowedNSSAIIsSet = true;
}
bool RegistrationChargingInformation::allowedNSSAIIsSet() const {
  return m_AllowedNSSAIIsSet;
}
void RegistrationChargingInformation::unsetAllowedNSSAI() {
  m_AllowedNSSAIIsSet = false;
}
std::vector<Snssai> &RegistrationChargingInformation::getRejectedNSSAI() {
  return m_RejectedNSSAI;
}
void RegistrationChargingInformation::setRejectedNSSAI(
    std::vector<Snssai> const &value) {
  m_RejectedNSSAI = value;
  m_RejectedNSSAIIsSet = true;
}
bool RegistrationChargingInformation::rejectedNSSAIIsSet() const {
  return m_RejectedNSSAIIsSet;
}
void RegistrationChargingInformation::unsetRejectedNSSAI() {
  m_RejectedNSSAIIsSet = false;
}
std::vector<NSSAIMap> &RegistrationChargingInformation::getNSSAIMapList() {
  return m_NSSAIMapList;
}
void RegistrationChargingInformation::setNSSAIMapList(
    std::vector<NSSAIMap> const &value) {
  m_NSSAIMapList = value;
  m_NSSAIMapListIsSet = true;
}
bool RegistrationChargingInformation::nSSAIMapListIsSet() const {
  return m_NSSAIMapListIsSet;
}
void RegistrationChargingInformation::unsetNSSAIMapList() {
  m_NSSAIMapListIsSet = false;
}
int32_t RegistrationChargingInformation::getAmfUeNgapId() const {
  return m_AmfUeNgapId;
}
void RegistrationChargingInformation::setAmfUeNgapId(int32_t const value) {
  m_AmfUeNgapId = value;
  m_AmfUeNgapIdIsSet = true;
}
bool RegistrationChargingInformation::amfUeNgapIdIsSet() const {
  return m_AmfUeNgapIdIsSet;
}
void RegistrationChargingInformation::unsetAmfUeNgapId() {
  m_AmfUeNgapIdIsSet = false;
}
int32_t RegistrationChargingInformation::getRanUeNgapId() const {
  return m_RanUeNgapId;
}
void RegistrationChargingInformation::setRanUeNgapId(int32_t const value) {
  m_RanUeNgapId = value;
  m_RanUeNgapIdIsSet = true;
}
bool RegistrationChargingInformation::ranUeNgapIdIsSet() const {
  return m_RanUeNgapIdIsSet;
}
void RegistrationChargingInformation::unsetRanUeNgapId() {
  m_RanUeNgapIdIsSet = false;
}
GlobalRanNodeId RegistrationChargingInformation::getRanNodeId() const {
  return m_RanNodeId;
}
void RegistrationChargingInformation::setRanNodeId(
    GlobalRanNodeId const &value) {
  m_RanNodeId = value;
  m_RanNodeIdIsSet = true;
}
bool RegistrationChargingInformation::ranNodeIdIsSet() const {
  return m_RanNodeIdIsSet;
}
void RegistrationChargingInformation::unsetRanNodeId() {
  m_RanNodeIdIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
