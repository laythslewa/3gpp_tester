/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EeProfileData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EeProfileData::EeProfileData() {
  m_RestrictedEventTypesIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_AllowedMtcProviderIsSet = false;
  m_IwkEpcRestricted = false;
  m_IwkEpcRestrictedIsSet = false;
  m_Imsi = "";
  m_ImsiIsSet = false;
  m_HssGroupId = "";
  m_HssGroupIdIsSet = false;
}

EeProfileData::~EeProfileData() {}

void EeProfileData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EeProfileData &o) {
  j = nlohmann::json();
  if (o.restrictedEventTypesIsSet() || !o.m_RestrictedEventTypes.empty())
    j["restrictedEventTypes"] = o.m_RestrictedEventTypes;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.allowedMtcProviderIsSet() || !o.m_AllowedMtcProvider.empty())
    j["allowedMtcProvider"] = o.m_AllowedMtcProvider;
  if (o.iwkEpcRestrictedIsSet())
    j["iwkEpcRestricted"] = o.m_IwkEpcRestricted;
  if (o.imsiIsSet())
    j["imsi"] = o.m_Imsi;
  if (o.hssGroupIdIsSet())
    j["hssGroupId"] = o.m_HssGroupId;
}

void from_json(const nlohmann::json &j, EeProfileData &o) {
  if (j.find("restrictedEventTypes") != j.end()) {
    j.at("restrictedEventTypes").get_to(o.m_RestrictedEventTypes);
    o.m_RestrictedEventTypesIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("allowedMtcProvider") != j.end()) {
    j.at("allowedMtcProvider").get_to(o.m_AllowedMtcProvider);
    o.m_AllowedMtcProviderIsSet = true;
  }
  if (j.find("iwkEpcRestricted") != j.end()) {
    j.at("iwkEpcRestricted").get_to(o.m_IwkEpcRestricted);
    o.m_IwkEpcRestrictedIsSet = true;
  }
  if (j.find("imsi") != j.end()) {
    j.at("imsi").get_to(o.m_Imsi);
    o.m_ImsiIsSet = true;
  }
  if (j.find("hssGroupId") != j.end()) {
    j.at("hssGroupId").get_to(o.m_HssGroupId);
    o.m_HssGroupIdIsSet = true;
  }
}

std::vector<EventType> &EeProfileData::getRestrictedEventTypes() {
  return m_RestrictedEventTypes;
}
void EeProfileData::setRestrictedEventTypes(
    std::vector<EventType> const &value) {
  m_RestrictedEventTypes = value;
  m_RestrictedEventTypesIsSet = true;
}
bool EeProfileData::restrictedEventTypesIsSet() const {
  return m_RestrictedEventTypesIsSet;
}
void EeProfileData::unsetRestrictedEventTypes() {
  m_RestrictedEventTypesIsSet = false;
}
std::string EeProfileData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void EeProfileData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool EeProfileData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void EeProfileData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::map<std::string, std::vector<MtcProvider>> &
EeProfileData::getAllowedMtcProvider() {
  return m_AllowedMtcProvider;
}
void EeProfileData::setAllowedMtcProvider(
    std::map<std::string, std::vector<MtcProvider>> const &value) {
  m_AllowedMtcProvider = value;
  m_AllowedMtcProviderIsSet = true;
}
bool EeProfileData::allowedMtcProviderIsSet() const {
  return m_AllowedMtcProviderIsSet;
}
void EeProfileData::unsetAllowedMtcProvider() {
  m_AllowedMtcProviderIsSet = false;
}
bool EeProfileData::isIwkEpcRestricted() const { return m_IwkEpcRestricted; }
void EeProfileData::setIwkEpcRestricted(bool const value) {
  m_IwkEpcRestricted = value;
  m_IwkEpcRestrictedIsSet = true;
}
bool EeProfileData::iwkEpcRestrictedIsSet() const {
  return m_IwkEpcRestrictedIsSet;
}
void EeProfileData::unsetIwkEpcRestricted() { m_IwkEpcRestrictedIsSet = false; }
std::string EeProfileData::getImsi() const { return m_Imsi; }
void EeProfileData::setImsi(std::string const &value) {
  m_Imsi = value;
  m_ImsiIsSet = true;
}
bool EeProfileData::imsiIsSet() const { return m_ImsiIsSet; }
void EeProfileData::unsetImsi() { m_ImsiIsSet = false; }
std::string EeProfileData::getHssGroupId() const { return m_HssGroupId; }
void EeProfileData::setHssGroupId(std::string const &value) {
  m_HssGroupId = value;
  m_HssGroupIdIsSet = true;
}
bool EeProfileData::hssGroupIdIsSet() const { return m_HssGroupIdIsSet; }
void EeProfileData::unsetHssGroupId() { m_HssGroupIdIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
