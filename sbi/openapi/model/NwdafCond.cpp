/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NwdafCond.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NwdafCond::NwdafCond() {
  m_ConditionType = "";
  m_AnalyticsIdsIsSet = false;
  m_SnssaiListIsSet = false;
  m_TaiListIsSet = false;
  m_TaiRangeListIsSet = false;
}

NwdafCond::~NwdafCond() {}

void NwdafCond::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NwdafCond &o) {
  j = nlohmann::json();
  j["conditionType"] = o.m_ConditionType;
  if (o.analyticsIdsIsSet() || !o.m_AnalyticsIds.empty())
    j["analyticsIds"] = o.m_AnalyticsIds;
  if (o.snssaiListIsSet() || !o.m_SnssaiList.empty())
    j["snssaiList"] = o.m_SnssaiList;
  if (o.taiListIsSet() || !o.m_TaiList.empty())
    j["taiList"] = o.m_TaiList;
  if (o.taiRangeListIsSet() || !o.m_TaiRangeList.empty())
    j["taiRangeList"] = o.m_TaiRangeList;
}

void from_json(const nlohmann::json &j, NwdafCond &o) {
  j.at("conditionType").get_to(o.m_ConditionType);
  if (j.find("analyticsIds") != j.end()) {
    j.at("analyticsIds").get_to(o.m_AnalyticsIds);
    o.m_AnalyticsIdsIsSet = true;
  }
  if (j.find("snssaiList") != j.end()) {
    j.at("snssaiList").get_to(o.m_SnssaiList);
    o.m_SnssaiListIsSet = true;
  }
  if (j.find("taiList") != j.end()) {
    j.at("taiList").get_to(o.m_TaiList);
    o.m_TaiListIsSet = true;
  }
  if (j.find("taiRangeList") != j.end()) {
    j.at("taiRangeList").get_to(o.m_TaiRangeList);
    o.m_TaiRangeListIsSet = true;
  }
}

std::string NwdafCond::getConditionType() const { return m_ConditionType; }
void NwdafCond::setConditionType(std::string const &value) {
  m_ConditionType = value;
}
std::vector<std::string> &NwdafCond::getAnalyticsIds() {
  return m_AnalyticsIds;
}
void NwdafCond::setAnalyticsIds(std::vector<std::string> const &value) {
  m_AnalyticsIds = value;
  m_AnalyticsIdsIsSet = true;
}
bool NwdafCond::analyticsIdsIsSet() const { return m_AnalyticsIdsIsSet; }
void NwdafCond::unsetAnalyticsIds() { m_AnalyticsIdsIsSet = false; }
std::vector<Snssai> &NwdafCond::getSnssaiList() { return m_SnssaiList; }
void NwdafCond::setSnssaiList(std::vector<Snssai> const &value) {
  m_SnssaiList = value;
  m_SnssaiListIsSet = true;
}
bool NwdafCond::snssaiListIsSet() const { return m_SnssaiListIsSet; }
void NwdafCond::unsetSnssaiList() { m_SnssaiListIsSet = false; }
std::vector<Tai> &NwdafCond::getTaiList() { return m_TaiList; }
void NwdafCond::setTaiList(std::vector<Tai> const &value) {
  m_TaiList = value;
  m_TaiListIsSet = true;
}
bool NwdafCond::taiListIsSet() const { return m_TaiListIsSet; }
void NwdafCond::unsetTaiList() { m_TaiListIsSet = false; }
std::vector<TaiRange> &NwdafCond::getTaiRangeList() { return m_TaiRangeList; }
void NwdafCond::setTaiRangeList(std::vector<TaiRange> const &value) {
  m_TaiRangeList = value;
  m_TaiRangeListIsSet = true;
}
bool NwdafCond::taiRangeListIsSet() const { return m_TaiRangeListIsSet; }
void NwdafCond::unsetTaiRangeList() { m_TaiRangeListIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
