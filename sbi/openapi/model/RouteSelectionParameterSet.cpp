/**
 * 3gpp-service-parameter
 * API for AF service paramter Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RouteSelectionParameterSet.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RouteSelectionParameterSet::RouteSelectionParameterSet() {
  m_Dnn = "";
  m_DnnIsSet = false;
  m_SnssaiIsSet = false;
  m_Precedence = 0;
  m_PrecedenceIsSet = false;
  m_SpatialValidityIsSet = false;
}

RouteSelectionParameterSet::~RouteSelectionParameterSet() {}

void RouteSelectionParameterSet::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const RouteSelectionParameterSet &o) {
  j = nlohmann::json();
  if (o.dnnIsSet())
    j["dnn"] = o.m_Dnn;
  if (o.snssaiIsSet())
    j["snssai"] = o.m_Snssai;
  if (o.precedenceIsSet())
    j["precedence"] = o.m_Precedence;
  if (o.spatialValidityIsSet() || !o.m_SpatialValidity.empty())
    j["spatialValidity"] = o.m_SpatialValidity;
}

void from_json(const nlohmann::json &j, RouteSelectionParameterSet &o) {
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
  if (j.find("snssai") != j.end()) {
    j.at("snssai").get_to(o.m_Snssai);
    o.m_SnssaiIsSet = true;
  }
  if (j.find("precedence") != j.end()) {
    j.at("precedence").get_to(o.m_Precedence);
    o.m_PrecedenceIsSet = true;
  }
  if (j.find("spatialValidity") != j.end()) {
    j.at("spatialValidity").get_to(o.m_SpatialValidity);
    o.m_SpatialValidityIsSet = true;
  }
}

std::string RouteSelectionParameterSet::getDnn() const { return m_Dnn; }
void RouteSelectionParameterSet::setDnn(std::string const &value) {
  m_Dnn = value;
  m_DnnIsSet = true;
}
bool RouteSelectionParameterSet::dnnIsSet() const { return m_DnnIsSet; }
void RouteSelectionParameterSet::unsetDnn() { m_DnnIsSet = false; }
Snssai RouteSelectionParameterSet::getSnssai() const { return m_Snssai; }
void RouteSelectionParameterSet::setSnssai(Snssai const &value) {
  m_Snssai = value;
  m_SnssaiIsSet = true;
}
bool RouteSelectionParameterSet::snssaiIsSet() const { return m_SnssaiIsSet; }
void RouteSelectionParameterSet::unsetSnssai() { m_SnssaiIsSet = false; }
int32_t RouteSelectionParameterSet::getPrecedence() const {
  return m_Precedence;
}
void RouteSelectionParameterSet::setPrecedence(int32_t const value) {
  m_Precedence = value;
  m_PrecedenceIsSet = true;
}
bool RouteSelectionParameterSet::precedenceIsSet() const {
  return m_PrecedenceIsSet;
}
void RouteSelectionParameterSet::unsetPrecedence() {
  m_PrecedenceIsSet = false;
}
std::vector<std::string> &RouteSelectionParameterSet::getSpatialValidity() {
  return m_SpatialValidity;
}
void RouteSelectionParameterSet::setSpatialValidity(
    std::vector<std::string> const &value) {
  m_SpatialValidity = value;
  m_SpatialValidityIsSet = true;
}
bool RouteSelectionParameterSet::spatialValidityIsSet() const {
  return m_SpatialValidityIsSet;
}
void RouteSelectionParameterSet::unsetSpatialValidity() {
  m_SpatialValidityIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
