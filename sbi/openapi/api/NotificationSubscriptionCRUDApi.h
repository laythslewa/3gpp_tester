/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NotificationSubscriptionCRUDApi.h
 *
 *
 */

#ifndef NotificationSubscriptionCRUDApi_H_
#define NotificationSubscriptionCRUDApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "ClientId.h"
#include "NotificationSubscription.h"
#include "PatchItem.h"
#include "PatchResult.h"
#include "ProblemDetails.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class NotificationSubscriptionCRUDApi {
public:
  NotificationSubscriptionCRUDApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~NotificationSubscriptionCRUDApi() {}
  void init();

  const std::string base = "/nudsf-dr/v1";

private:
  void setupRoutes();

  void create_and_update_notification_subscription_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void delete_notification_subscription_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void get_notification_subscription_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void update_notification_subscription_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void notification_subscription_crud_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// NotificationSubscription Create/Update
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="realmId">Identifier of the Realm</param>
  /// <param name="storageId">Identifier of the Storage</param>
  /// <param name="subscriptionId">Identifier of the
  /// NotificationSubscription</param> <param
  /// name="notificationSubscription"></param> <param
  /// name="supportedFeatures">Features required to be supported by the target
  /// NF (optional, default to &quot;&quot;)</param> <param
  /// name="ifNoneMatch">Validator for conditional requests, as described in RFC
  /// 7232, 3.2 (optional, default to &quot;&quot;)</param> <param
  /// name="ifMatch">Record validator for conditional requests, as described in
  /// RFC 7232, 3.2 (optional, default to &quot;&quot;)</param>
  virtual void create_and_update_notification_subscription(
      const std::string &realmId, const std::string &storageId,
      const std::string &subscriptionId,
      const NotificationSubscription &notificationSubscription,
      const Pistache::Optional<std::string> &supportedFeatures,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifNoneMatch,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifMatch,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Delete a Notification Subscription of the storage
  /// </summary>
  /// <remarks>
  /// delete a single subscriptions of the storage
  /// </remarks>
  /// <param name="realmId">Identifier of the Realm</param>
  /// <param name="storageId">Identifier of the Storage</param>
  /// <param name="subscriptionId">Identifier of the
  /// NotificationSubscription</param> <param name="clientId">Identifies the NF
  /// or NFSet</param> <param name="getPrevious">Retrieve the
  /// NotificationSubscription before delete (optional, default to
  /// false)</param> <param name="ifMatch">Record validator for conditional
  /// requests, as described in RFC 7232, 3.2 (optional, default to
  /// &quot;&quot;)</param> <param name="supportedFeatures">Features required to
  /// be supported by the target NF (optional, default to &quot;&quot;)</param>
  virtual void delete_notification_subscription(
      const std::string &realmId, const std::string &storageId,
      const std::string &subscriptionId,
      const Pistache::Optional<ClientId> &clientId,
      const Pistache::Optional<bool> &getPrevious,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifMatch,
      const Pistache::Optional<std::string> &supportedFeatures,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Notification subscription retrieval
  /// </summary>
  /// <remarks>
  /// retrieve a single notification subscription of the storage
  /// </remarks>
  /// <param name="realmId">Identifier of the Realm</param>
  /// <param name="storageId">Identifier of the Storage</param>
  /// <param name="subscriptionId">Identifier of the
  /// NotificationSubscription</param> <param name="supportedFeatures">Features
  /// required to be supported by the target NF (optional, default to
  /// &quot;&quot;)</param> <param name="ifNoneMatch">Validator for conditional
  /// requests, as described in RFC 7232, 3.2 (optional, default to
  /// &quot;&quot;)</param> <param name="ifModifiedSince">Validator for
  /// conditional requests, as described in RFC 7232, 3.3 (optional, default to
  /// &quot;&quot;)</param>
  virtual void get_notification_subscription(
      const std::string &realmId, const std::string &storageId,
      const std::string &subscriptionId,
      const Pistache::Optional<std::string> &supportedFeatures,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifNoneMatch,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifModifiedSince,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// NotificationSubscription update
  /// </summary>
  /// <remarks>
  /// update a specific NotificationSubscription
  /// </remarks>
  /// <param name="realmId">Identifier of the Realm</param>
  /// <param name="storageId">Identifier of the Storage</param>
  /// <param name="subscriptionId">Identifier of the
  /// NotificationSubscription</param> <param name="patchItem">data to
  /// patch</param> <param name="ifMatch">Validator for conditional requests, as
  /// described in RFC 7232, 3.2 (optional, default to &quot;&quot;)</param>
  /// <param name="supportedFeatures">Features required to be supported by the
  /// target NF (optional, default to &quot;&quot;)</param>
  virtual void update_notification_subscription(
      const std::string &realmId, const std::string &storageId,
      const std::string &subscriptionId,
      const std::vector<PatchItem> &patchItem,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifMatch,
      const Pistache::Optional<std::string> &supportedFeatures,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NotificationSubscriptionCRUDApi_H_ */
