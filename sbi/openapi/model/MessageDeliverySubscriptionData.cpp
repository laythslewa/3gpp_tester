/**
 * VAE_MessageDelivery
 * API for VAE Message Delivery Service Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MessageDeliverySubscriptionData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

MessageDeliverySubscriptionData::MessageDeliverySubscriptionData() {
  m_AppSerId = "";
  m_ServiceId = "";
  m_GeoId = "";
  m_GeoIdIsSet = false;
  m_NotifUri = "";
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
}

MessageDeliverySubscriptionData::~MessageDeliverySubscriptionData() {}

void MessageDeliverySubscriptionData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const MessageDeliverySubscriptionData &o) {
  j = nlohmann::json();
  j["appSerId"] = o.m_AppSerId;
  j["serviceId"] = o.m_ServiceId;
  if (o.geoIdIsSet())
    j["geoId"] = o.m_GeoId;
  j["notifUri"] = o.m_NotifUri;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, MessageDeliverySubscriptionData &o) {
  j.at("appSerId").get_to(o.m_AppSerId);
  j.at("serviceId").get_to(o.m_ServiceId);
  if (j.find("geoId") != j.end()) {
    j.at("geoId").get_to(o.m_GeoId);
    o.m_GeoIdIsSet = true;
  }
  j.at("notifUri").get_to(o.m_NotifUri);
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::string MessageDeliverySubscriptionData::getAppSerId() const {
  return m_AppSerId;
}
void MessageDeliverySubscriptionData::setAppSerId(std::string const &value) {
  m_AppSerId = value;
}
std::string MessageDeliverySubscriptionData::getServiceId() const {
  return m_ServiceId;
}
void MessageDeliverySubscriptionData::setServiceId(std::string const &value) {
  m_ServiceId = value;
}
std::string MessageDeliverySubscriptionData::getGeoId() const {
  return m_GeoId;
}
void MessageDeliverySubscriptionData::setGeoId(std::string const &value) {
  m_GeoId = value;
  m_GeoIdIsSet = true;
}
bool MessageDeliverySubscriptionData::geoIdIsSet() const {
  return m_GeoIdIsSet;
}
void MessageDeliverySubscriptionData::unsetGeoId() { m_GeoIdIsSet = false; }
std::string MessageDeliverySubscriptionData::getNotifUri() const {
  return m_NotifUri;
}
void MessageDeliverySubscriptionData::setNotifUri(std::string const &value) {
  m_NotifUri = value;
}
bool MessageDeliverySubscriptionData::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void MessageDeliverySubscriptionData::setRequestTestNotification(
    bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool MessageDeliverySubscriptionData::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void MessageDeliverySubscriptionData::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig
MessageDeliverySubscriptionData::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void MessageDeliverySubscriptionData::setWebsockNotifConfig(
    WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool MessageDeliverySubscriptionData::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void MessageDeliverySubscriptionData::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
std::string MessageDeliverySubscriptionData::getSuppFeat() const {
  return m_SuppFeat;
}
void MessageDeliverySubscriptionData::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool MessageDeliverySubscriptionData::suppFeatIsSet() const {
  return m_SuppFeatIsSet;
}
void MessageDeliverySubscriptionData::unsetSuppFeat() {
  m_SuppFeatIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
