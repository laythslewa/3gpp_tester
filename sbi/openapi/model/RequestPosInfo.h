/**
 * Namf_Location
 * AMF Location Service © 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RequestPosInfo.h
 *
 * Data within Provide Positioning Information Request
 */

#ifndef RequestPosInfo_H_
#define RequestPosInfo_H_

#include "AreaEventInfo.h"
#include "ExternalClientType.h"
#include "Guami.h"
#include "LcsPriority.h"
#include "LdrType.h"
#include "LocationQoS.h"
#include "LocationType.h"
#include "MotionEventInfo.h"
#include "PeriodicEventInfo.h"
#include "SupportedGADShapes.h"
#include "UePrivacyRequirements.h"
#include "VelocityRequested.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within Provide Positioning Information Request
/// </summary>
class RequestPosInfo {
public:
  RequestPosInfo();
  virtual ~RequestPosInfo();

  void validate();

  /////////////////////////////////////////////
  /// RequestPosInfo members

  /// <summary>
  ///
  /// </summary>
  ExternalClientType getLcsClientType() const;
  void setLcsClientType(ExternalClientType const &value);
  /// <summary>
  ///
  /// </summary>
  LocationType getLcsLocation() const;
  void setLcsLocation(LocationType const &value);
  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  ///
  /// </summary>
  LcsPriority getPriority() const;
  void setPriority(LcsPriority const &value);
  bool priorityIsSet() const;
  void unsetPriority();
  /// <summary>
  ///
  /// </summary>
  LocationQoS getLcsQoS() const;
  void setLcsQoS(LocationQoS const &value);
  bool lcsQoSIsSet() const;
  void unsetLcsQoS();
  /// <summary>
  ///
  /// </summary>
  VelocityRequested getVelocityRequested() const;
  void setVelocityRequested(VelocityRequested const &value);
  bool velocityRequestedIsSet() const;
  void unsetVelocityRequested();
  /// <summary>
  ///
  /// </summary>
  SupportedGADShapes getLcsSupportedGADShapes() const;
  void setLcsSupportedGADShapes(SupportedGADShapes const &value);
  bool lcsSupportedGADShapesIsSet() const;
  void unsetLcsSupportedGADShapes();
  /// <summary>
  ///
  /// </summary>
  std::vector<SupportedGADShapes> &getAdditionalLcsSuppGADShapes();
  void
  setAdditionalLcsSuppGADShapes(std::vector<SupportedGADShapes> const &value);
  bool additionalLcsSuppGADShapesIsSet() const;
  void unsetAdditionalLcsSuppGADShapes();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getLocationNotificationUri() const;
  void setLocationNotificationUri(std::string const &value);
  bool locationNotificationUriIsSet() const;
  void unsetLocationNotificationUri();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  Guami getOldGuami() const;
  void setOldGuami(Guami const &value);
  bool oldGuamiIsSet() const;
  void unsetOldGuami();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  /// LCS service type.
  /// </summary>
  int32_t getLcsServiceType() const;
  void setLcsServiceType(int32_t const value);
  bool lcsServiceTypeIsSet() const;
  void unsetLcsServiceType();
  /// <summary>
  ///
  /// </summary>
  LdrType getLdrType() const;
  void setLdrType(LdrType const &value);
  bool ldrTypeIsSet() const;
  void unsetLdrType();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getHgmlcCallBackURI() const;
  void setHgmlcCallBackURI(std::string const &value);
  bool hgmlcCallBackURIIsSet() const;
  void unsetHgmlcCallBackURI();
  /// <summary>
  /// LDR Reference.
  /// </summary>
  std::string getLdrReference() const;
  void setLdrReference(std::string const &value);
  bool ldrReferenceIsSet() const;
  void unsetLdrReference();
  /// <summary>
  ///
  /// </summary>
  PeriodicEventInfo getPeriodicEventInfo() const;
  void setPeriodicEventInfo(PeriodicEventInfo const &value);
  bool periodicEventInfoIsSet() const;
  void unsetPeriodicEventInfo();
  /// <summary>
  ///
  /// </summary>
  AreaEventInfo getAreaEventInfo() const;
  void setAreaEventInfo(AreaEventInfo const &value);
  bool areaEventInfoIsSet() const;
  void unsetAreaEventInfo();
  /// <summary>
  ///
  /// </summary>
  MotionEventInfo getMotionEventInfo() const;
  void setMotionEventInfo(MotionEventInfo const &value);
  bool motionEventInfoIsSet() const;
  void unsetMotionEventInfo();
  /// <summary>
  /// Contains the external client identification
  /// </summary>
  std::string getExternalClientIdentification() const;
  void setExternalClientIdentification(std::string const &value);
  bool externalClientIdentificationIsSet() const;
  void unsetExternalClientIdentification();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getAfID() const;
  void setAfID(std::string const &value);
  bool afIDIsSet() const;
  void unsetAfID();
  /// <summary>
  /// Contains the codeword
  /// </summary>
  std::string getCodeWord() const;
  void setCodeWord(std::string const &value);
  bool codeWordIsSet() const;
  void unsetCodeWord();
  /// <summary>
  ///
  /// </summary>
  UePrivacyRequirements getUePrivacyRequirements() const;
  void setUePrivacyRequirements(UePrivacyRequirements const &value);
  bool uePrivacyRequirementsIsSet() const;
  void unsetUePrivacyRequirements();

  friend void to_json(nlohmann::json &j, const RequestPosInfo &o);
  friend void from_json(const nlohmann::json &j, RequestPosInfo &o);

protected:
  ExternalClientType m_LcsClientType;

  LocationType m_LcsLocation;

  std::string m_Supi;
  bool m_SupiIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  LcsPriority m_Priority;
  bool m_PriorityIsSet;
  LocationQoS m_LcsQoS;
  bool m_LcsQoSIsSet;
  VelocityRequested m_VelocityRequested;
  bool m_VelocityRequestedIsSet;
  SupportedGADShapes m_LcsSupportedGADShapes;
  bool m_LcsSupportedGADShapesIsSet;
  std::vector<SupportedGADShapes> m_AdditionalLcsSuppGADShapes;
  bool m_AdditionalLcsSuppGADShapesIsSet;
  std::string m_LocationNotificationUri;
  bool m_LocationNotificationUriIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  Guami m_OldGuami;
  bool m_OldGuamiIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  int32_t m_LcsServiceType;
  bool m_LcsServiceTypeIsSet;
  LdrType m_LdrType;
  bool m_LdrTypeIsSet;
  std::string m_HgmlcCallBackURI;
  bool m_HgmlcCallBackURIIsSet;
  std::string m_LdrReference;
  bool m_LdrReferenceIsSet;
  PeriodicEventInfo m_PeriodicEventInfo;
  bool m_PeriodicEventInfoIsSet;
  AreaEventInfo m_AreaEventInfo;
  bool m_AreaEventInfoIsSet;
  MotionEventInfo m_MotionEventInfo;
  bool m_MotionEventInfoIsSet;
  std::string m_ExternalClientIdentification;
  bool m_ExternalClientIdentificationIsSet;
  std::string m_AfID;
  bool m_AfIDIsSet;
  std::string m_CodeWord;
  bool m_CodeWordIsSet;
  UePrivacyRequirements m_UePrivacyRequirements;
  bool m_UePrivacyRequirementsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* RequestPosInfo_H_ */
