/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SubsToNotifyCollectionApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

SubsToNotifyCollectionApi::SubsToNotifyCollectionApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void SubsToNotifyCollectionApi::init() { setupRoutes(); }

void SubsToNotifyCollectionApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Get(
      *router, base + "/subscription-data/subs-to-notify",
      Routes::bind(&SubsToNotifyCollectionApi::query_subs_to_notify_handler,
                   this));
  Routes::Delete(
      *router, base + "/subscription-data/subs-to-notify",
      Routes::bind(&SubsToNotifyCollectionApi::
                       remove_multiple_subscription_data_subscriptions_handler,
                   this));
  Routes::Post(
      *router, base + "/subscription-data/subs-to-notify",
      Routes::bind(
          &SubsToNotifyCollectionApi::subscription_data_subscriptions_handler,
          this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &SubsToNotifyCollectionApi::subs_to_notify_collection_api_default_handler,
      this));
}

void SubsToNotifyCollectionApi::query_subs_to_notify_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {

  // Getting the query params
  auto ueIdQuery = request.query().get("ue-id");
  Pistache::Optional<std::string> ueId;
  if (!ueIdQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(ueIdQuery.get(), valueQuery_instance)) {
      ueId = Pistache::Some(valueQuery_instance);
    }
  }
  auto supportedFeaturesQuery = request.query().get("supported-features");
  Pistache::Optional<std::string> supportedFeatures;
  if (!supportedFeaturesQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(supportedFeaturesQuery.get(), valueQuery_instance)) {
      supportedFeatures = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->query_subs_to_notify(ueId, supportedFeatures, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void SubsToNotifyCollectionApi::
    remove_multiple_subscription_data_subscriptions_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {

  // Getting the query params
  auto ueIdQuery = request.query().get("ue-id");
  Pistache::Optional<std::string> ueId;
  if (!ueIdQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(ueIdQuery.get(), valueQuery_instance)) {
      ueId = Pistache::Some(valueQuery_instance);
    }
  }
  auto nfInstanceIdQuery = request.query().get("nf-instance-id");
  Pistache::Optional<std::string> nfInstanceId;
  if (!nfInstanceIdQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(nfInstanceIdQuery.get(), valueQuery_instance)) {
      nfInstanceId = Pistache::Some(valueQuery_instance);
    }
  }
  auto deleteAllNfsQuery = request.query().get("delete-all-nfs");
  Pistache::Optional<bool> deleteAllNfs;
  if (!deleteAllNfsQuery.isEmpty()) {
    bool valueQuery_instance;
    if (fromStringValue(deleteAllNfsQuery.get(), valueQuery_instance)) {
      deleteAllNfs = Pistache::Some(valueQuery_instance);
    }
  }
  auto implicitUnsubscribeIndicationQuery =
      request.query().get("implicit-unsubscribe-indication");
  Pistache::Optional<bool> implicitUnsubscribeIndication;
  if (!implicitUnsubscribeIndicationQuery.isEmpty()) {
    bool valueQuery_instance;
    if (fromStringValue(implicitUnsubscribeIndicationQuery.get(),
                        valueQuery_instance)) {
      implicitUnsubscribeIndication = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->remove_multiple_subscription_data_subscriptions(
        ueId, nfInstanceId, deleteAllNfs, implicitUnsubscribeIndication,
        response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void SubsToNotifyCollectionApi::subscription_data_subscriptions_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {

  // Getting the body param

  SubscriptionDataSubscriptions subscriptionDataSubscriptions;

  try {
    nlohmann::json::parse(request.body()).get_to(subscriptionDataSubscriptions);
    this->subscription_data_subscriptions(subscriptionDataSubscriptions,
                                          response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void SubsToNotifyCollectionApi::subs_to_notify_collection_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
