/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DccfInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

DccfInfo::DccfInfo() {
  m_ServingNfTypeListIsSet = false;
  m_ServingNfSetIdListIsSet = false;
  m_TaiListIsSet = false;
  m_TaiRangeListIsSet = false;
}

DccfInfo::~DccfInfo() {}

void DccfInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const DccfInfo &o) {
  j = nlohmann::json();
  if (o.servingNfTypeListIsSet() || !o.m_ServingNfTypeList.empty())
    j["servingNfTypeList"] = o.m_ServingNfTypeList;
  if (o.servingNfSetIdListIsSet() || !o.m_ServingNfSetIdList.empty())
    j["servingNfSetIdList"] = o.m_ServingNfSetIdList;
  if (o.taiListIsSet() || !o.m_TaiList.empty())
    j["taiList"] = o.m_TaiList;
  if (o.taiRangeListIsSet() || !o.m_TaiRangeList.empty())
    j["taiRangeList"] = o.m_TaiRangeList;
}

void from_json(const nlohmann::json &j, DccfInfo &o) {
  if (j.find("servingNfTypeList") != j.end()) {
    j.at("servingNfTypeList").get_to(o.m_ServingNfTypeList);
    o.m_ServingNfTypeListIsSet = true;
  }
  if (j.find("servingNfSetIdList") != j.end()) {
    j.at("servingNfSetIdList").get_to(o.m_ServingNfSetIdList);
    o.m_ServingNfSetIdListIsSet = true;
  }
  if (j.find("taiList") != j.end()) {
    j.at("taiList").get_to(o.m_TaiList);
    o.m_TaiListIsSet = true;
  }
  if (j.find("taiRangeList") != j.end()) {
    j.at("taiRangeList").get_to(o.m_TaiRangeList);
    o.m_TaiRangeListIsSet = true;
  }
}

std::vector<NFType> &DccfInfo::getServingNfTypeList() {
  return m_ServingNfTypeList;
}
void DccfInfo::setServingNfTypeList(std::vector<NFType> const &value) {
  m_ServingNfTypeList = value;
  m_ServingNfTypeListIsSet = true;
}
bool DccfInfo::servingNfTypeListIsSet() const {
  return m_ServingNfTypeListIsSet;
}
void DccfInfo::unsetServingNfTypeList() { m_ServingNfTypeListIsSet = false; }
std::vector<std::string> &DccfInfo::getServingNfSetIdList() {
  return m_ServingNfSetIdList;
}
void DccfInfo::setServingNfSetIdList(std::vector<std::string> const &value) {
  m_ServingNfSetIdList = value;
  m_ServingNfSetIdListIsSet = true;
}
bool DccfInfo::servingNfSetIdListIsSet() const {
  return m_ServingNfSetIdListIsSet;
}
void DccfInfo::unsetServingNfSetIdList() { m_ServingNfSetIdListIsSet = false; }
std::vector<Tai> &DccfInfo::getTaiList() { return m_TaiList; }
void DccfInfo::setTaiList(std::vector<Tai> const &value) {
  m_TaiList = value;
  m_TaiListIsSet = true;
}
bool DccfInfo::taiListIsSet() const { return m_TaiListIsSet; }
void DccfInfo::unsetTaiList() { m_TaiListIsSet = false; }
std::vector<TaiRange> &DccfInfo::getTaiRangeList() { return m_TaiRangeList; }
void DccfInfo::setTaiRangeList(std::vector<TaiRange> const &value) {
  m_TaiRangeList = value;
  m_TaiRangeListIsSet = true;
}
bool DccfInfo::taiRangeListIsSet() const { return m_TaiRangeListIsSet; }
void DccfInfo::unsetTaiRangeList() { m_TaiRangeListIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
