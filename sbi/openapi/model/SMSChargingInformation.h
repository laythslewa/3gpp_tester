/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    © 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SMSChargingInformation.h
 *
 *
 */

#ifndef SMSChargingInformation_H_
#define SMSChargingInformation_H_

#include "DeliveryReportRequested.h"
#include "MessageClass.h"
#include "OriginatorInfo.h"
#include "RatType.h"
#include "RecipientInfo.h"
#include "ReplyPathRequested.h"
#include "RoamerInOut.h"
#include "SMMessageType.h"
#include "SMPriority.h"
#include "SMServiceType.h"
#include "UserLocation.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SMSChargingInformation {
public:
  SMSChargingInformation();
  virtual ~SMSChargingInformation();

  void validate();

  /////////////////////////////////////////////
  /// SMSChargingInformation members

  /// <summary>
  ///
  /// </summary>
  OriginatorInfo getOriginatorInfo() const;
  void setOriginatorInfo(OriginatorInfo const &value);
  bool originatorInfoIsSet() const;
  void unsetOriginatorInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<RecipientInfo> &getRecipientInfo();
  void setRecipientInfo(std::vector<RecipientInfo> const &value);
  bool recipientInfoIsSet() const;
  void unsetRecipientInfo();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getUserEquipmentInfo() const;
  void setUserEquipmentInfo(std::string const &value);
  bool userEquipmentInfoIsSet() const;
  void unsetUserEquipmentInfo();
  /// <summary>
  ///
  /// </summary>
  RoamerInOut getRoamerInOut() const;
  void setRoamerInOut(RoamerInOut const &value);
  bool roamerInOutIsSet() const;
  void unsetRoamerInOut();
  /// <summary>
  ///
  /// </summary>
  UserLocation getUserLocationinfo() const;
  void setUserLocationinfo(UserLocation const &value);
  bool userLocationinfoIsSet() const;
  void unsetUserLocationinfo();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getUetimeZone() const;
  void setUetimeZone(std::string const &value);
  bool uetimeZoneIsSet() const;
  void unsetUetimeZone();
  /// <summary>
  ///
  /// </summary>
  RatType getRATType() const;
  void setRATType(RatType const &value);
  bool rATTypeIsSet() const;
  void unsetRATType();
  /// <summary>
  ///
  /// </summary>
  std::string getSMSCAddress() const;
  void setSMSCAddress(std::string const &value);
  bool sMSCAddressIsSet() const;
  void unsetSMSCAddress();
  /// <summary>
  ///
  /// </summary>
  int32_t getSMDataCodingScheme() const;
  void setSMDataCodingScheme(int32_t const value);
  bool sMDataCodingSchemeIsSet() const;
  void unsetSMDataCodingScheme();
  /// <summary>
  ///
  /// </summary>
  SMMessageType getSMMessageType() const;
  void setSMMessageType(SMMessageType const &value);
  bool sMMessageTypeIsSet() const;
  void unsetSMMessageType();
  /// <summary>
  ///
  /// </summary>
  ReplyPathRequested getSMReplyPathRequested() const;
  void setSMReplyPathRequested(ReplyPathRequested const &value);
  bool sMReplyPathRequestedIsSet() const;
  void unsetSMReplyPathRequested();
  /// <summary>
  ///
  /// </summary>
  std::string getSMUserDataHeader() const;
  void setSMUserDataHeader(std::string const &value);
  bool sMUserDataHeaderIsSet() const;
  void unsetSMUserDataHeader();
  /// <summary>
  ///
  /// </summary>
  std::string getSMStatus() const;
  void setSMStatus(std::string const &value);
  bool sMStatusIsSet() const;
  void unsetSMStatus();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getSMDischargeTime() const;
  void setSMDischargeTime(std::string const &value);
  bool sMDischargeTimeIsSet() const;
  void unsetSMDischargeTime();
  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 32-bit integer.
  /// </summary>
  int32_t getNumberofMessagesSent() const;
  void setNumberofMessagesSent(int32_t const value);
  bool numberofMessagesSentIsSet() const;
  void unsetNumberofMessagesSent();
  /// <summary>
  ///
  /// </summary>
  SMServiceType getSMServiceType() const;
  void setSMServiceType(SMServiceType const &value);
  bool sMServiceTypeIsSet() const;
  void unsetSMServiceType();
  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 32-bit integer.
  /// </summary>
  int32_t getSMSequenceNumber() const;
  void setSMSequenceNumber(int32_t const value);
  bool sMSequenceNumberIsSet() const;
  void unsetSMSequenceNumber();
  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 32-bit integer.
  /// </summary>
  int32_t getSMSresult() const;
  void setSMSresult(int32_t const value);
  bool sMSresultIsSet() const;
  void unsetSMSresult();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getSubmissionTime() const;
  void setSubmissionTime(std::string const &value);
  bool submissionTimeIsSet() const;
  void unsetSubmissionTime();
  /// <summary>
  ///
  /// </summary>
  SMPriority getSMPriority() const;
  void setSMPriority(SMPriority const &value);
  bool sMPriorityIsSet() const;
  void unsetSMPriority();
  /// <summary>
  ///
  /// </summary>
  std::string getMessageReference() const;
  void setMessageReference(std::string const &value);
  bool messageReferenceIsSet() const;
  void unsetMessageReference();
  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 32-bit integer.
  /// </summary>
  int32_t getMessageSize() const;
  void setMessageSize(int32_t const value);
  bool messageSizeIsSet() const;
  void unsetMessageSize();
  /// <summary>
  ///
  /// </summary>
  MessageClass getMessageClass() const;
  void setMessageClass(MessageClass const &value);
  bool messageClassIsSet() const;
  void unsetMessageClass();
  /// <summary>
  ///
  /// </summary>
  DeliveryReportRequested getDeliveryReportRequested() const;
  void setDeliveryReportRequested(DeliveryReportRequested const &value);
  bool deliveryReportRequestedIsSet() const;
  void unsetDeliveryReportRequested();

  friend void to_json(nlohmann::json &j, const SMSChargingInformation &o);
  friend void from_json(const nlohmann::json &j, SMSChargingInformation &o);

protected:
  OriginatorInfo m_OriginatorInfo;
  bool m_OriginatorInfoIsSet;
  std::vector<RecipientInfo> m_RecipientInfo;
  bool m_RecipientInfoIsSet;
  std::string m_UserEquipmentInfo;
  bool m_UserEquipmentInfoIsSet;
  RoamerInOut m_RoamerInOut;
  bool m_RoamerInOutIsSet;
  UserLocation m_UserLocationinfo;
  bool m_UserLocationinfoIsSet;
  std::string m_UetimeZone;
  bool m_UetimeZoneIsSet;
  RatType m_RATType;
  bool m_RATTypeIsSet;
  std::string m_SMSCAddress;
  bool m_SMSCAddressIsSet;
  int32_t m_SMDataCodingScheme;
  bool m_SMDataCodingSchemeIsSet;
  SMMessageType m_SMMessageType;
  bool m_SMMessageTypeIsSet;
  ReplyPathRequested m_SMReplyPathRequested;
  bool m_SMReplyPathRequestedIsSet;
  std::string m_SMUserDataHeader;
  bool m_SMUserDataHeaderIsSet;
  std::string m_SMStatus;
  bool m_SMStatusIsSet;
  std::string m_SMDischargeTime;
  bool m_SMDischargeTimeIsSet;
  int32_t m_NumberofMessagesSent;
  bool m_NumberofMessagesSentIsSet;
  SMServiceType m_SMServiceType;
  bool m_SMServiceTypeIsSet;
  int32_t m_SMSequenceNumber;
  bool m_SMSequenceNumberIsSet;
  int32_t m_SMSresult;
  bool m_SMSresultIsSet;
  std::string m_SubmissionTime;
  bool m_SubmissionTimeIsSet;
  SMPriority m_SMPriority;
  bool m_SMPriorityIsSet;
  std::string m_MessageReference;
  bool m_MessageReferenceIsSet;
  int32_t m_MessageSize;
  bool m_MessageSizeIsSet;
  MessageClass m_MessageClass;
  bool m_MessageClassIsSet;
  DeliveryReportRequested m_DeliveryReportRequested;
  bool m_DeliveryReportRequestedIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SMSChargingInformation_H_ */
