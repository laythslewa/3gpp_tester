/**
 * CAPIF_Events_API
 * API for event subscription management. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CAPIFEventDetail.h
 *
 * Represents a CAPIF event details.
 */

#ifndef CAPIFEventDetail_H_
#define CAPIFEventDetail_H_

#include "AccessControlPolicyListExt.h"
#include "InvocationLog.h"
#include "ServiceAPIDescription.h"
#include "TopologyHiding.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a CAPIF event details.
/// </summary>
class CAPIFEventDetail {
public:
  CAPIFEventDetail();
  virtual ~CAPIFEventDetail();

  void validate();

  /////////////////////////////////////////////
  /// CAPIFEventDetail members

  /// <summary>
  /// Description of the service API as published by the APF.
  /// </summary>
  std::vector<ServiceAPIDescription> &getServiceAPIDescriptions();
  void
  setServiceAPIDescriptions(std::vector<ServiceAPIDescription> const &value);
  bool serviceAPIDescriptionsIsSet() const;
  void unsetServiceAPIDescriptions();
  /// <summary>
  /// Identifier of the service API
  /// </summary>
  std::vector<std::string> &getApiIds();
  void setApiIds(std::vector<std::string> const &value);
  bool apiIdsIsSet() const;
  void unsetApiIds();
  /// <summary>
  /// Identity of the API invoker
  /// </summary>
  std::vector<std::string> &getApiInvokerIds();
  void setApiInvokerIds(std::vector<std::string> const &value);
  bool apiInvokerIdsIsSet() const;
  void unsetApiInvokerIds();
  /// <summary>
  ///
  /// </summary>
  AccessControlPolicyListExt getAccCtrlPolList() const;
  void setAccCtrlPolList(AccessControlPolicyListExt const &value);
  bool accCtrlPolListIsSet() const;
  void unsetAccCtrlPolList();
  /// <summary>
  /// Invocation logs.
  /// </summary>
  std::vector<InvocationLog> &getInvocationLogs();
  void setInvocationLogs(std::vector<InvocationLog> const &value);
  bool invocationLogsIsSet() const;
  void unsetInvocationLogs();
  /// <summary>
  ///
  /// </summary>
  TopologyHiding getApiTopoHide() const;
  void setApiTopoHide(TopologyHiding const &value);
  bool apiTopoHideIsSet() const;
  void unsetApiTopoHide();

  friend void to_json(nlohmann::json &j, const CAPIFEventDetail &o);
  friend void from_json(const nlohmann::json &j, CAPIFEventDetail &o);

protected:
  std::vector<ServiceAPIDescription> m_ServiceAPIDescriptions;
  bool m_ServiceAPIDescriptionsIsSet;
  std::vector<std::string> m_ApiIds;
  bool m_ApiIdsIsSet;
  std::vector<std::string> m_ApiInvokerIds;
  bool m_ApiInvokerIdsIsSet;
  AccessControlPolicyListExt m_AccCtrlPolList;
  bool m_AccCtrlPolListIsSet;
  std::vector<InvocationLog> m_InvocationLogs;
  bool m_InvocationLogsIsSet;
  TopologyHiding m_ApiTopoHide;
  bool m_ApiTopoHideIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* CAPIFEventDetail_H_ */
