/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ReportingInformation.h
 *
 * Represents the type of reporting that the subscription requires.
 */

#ifndef ReportingInformation_H_
#define ReportingInformation_H_

#include "NotificationFlag.h"
#include "NotificationMethod.h"
#include "PartitioningCriteria.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the type of reporting that the subscription requires.
/// </summary>
class ReportingInformation {
public:
  ReportingInformation();
  virtual ~ReportingInformation();

  void validate();

  /////////////////////////////////////////////
  /// ReportingInformation members

  /// <summary>
  ///
  /// </summary>
  bool isImmRep() const;
  void setImmRep(bool const value);
  bool immRepIsSet() const;
  void unsetImmRep();
  /// <summary>
  ///
  /// </summary>
  NotificationMethod getNotifMethod() const;
  void setNotifMethod(NotificationMethod const &value);
  bool notifMethodIsSet() const;
  void unsetNotifMethod();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getMaxReportNbr() const;
  void setMaxReportNbr(int32_t const value);
  bool maxReportNbrIsSet() const;
  void unsetMaxReportNbr();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getMonDur() const;
  void setMonDur(std::string const &value);
  bool monDurIsSet() const;
  void unsetMonDur();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getRepPeriod() const;
  void setRepPeriod(int32_t const value);
  bool repPeriodIsSet() const;
  void unsetRepPeriod();
  /// <summary>
  /// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP
  /// TS 23.502), expressed in percent.
  /// </summary>
  int32_t getSampRatio() const;
  void setSampRatio(int32_t const value);
  bool sampRatioIsSet() const;
  void unsetSampRatio();
  /// <summary>
  /// Criteria for partitioning the UEs before applying the sampling ratio.
  /// </summary>
  std::vector<PartitioningCriteria> &getPartitionCriteria();
  void setPartitionCriteria(std::vector<PartitioningCriteria> const &value);
  bool partitionCriteriaIsSet() const;
  void unsetPartitionCriteria();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getGrpRepTime() const;
  void setGrpRepTime(int32_t const value);
  bool grpRepTimeIsSet() const;
  void unsetGrpRepTime();
  /// <summary>
  ///
  /// </summary>
  NotificationFlag getNotifFlag() const;
  void setNotifFlag(NotificationFlag const &value);
  bool notifFlagIsSet() const;
  void unsetNotifFlag();

  friend void to_json(nlohmann::json &j, const ReportingInformation &o);
  friend void from_json(const nlohmann::json &j, ReportingInformation &o);

protected:
  bool m_ImmRep;
  bool m_ImmRepIsSet;
  NotificationMethod m_NotifMethod;
  bool m_NotifMethodIsSet;
  int32_t m_MaxReportNbr;
  bool m_MaxReportNbrIsSet;
  std::string m_MonDur;
  bool m_MonDurIsSet;
  int32_t m_RepPeriod;
  bool m_RepPeriodIsSet;
  int32_t m_SampRatio;
  bool m_SampRatioIsSet;
  std::vector<PartitioningCriteria> m_PartitionCriteria;
  bool m_PartitionCriteriaIsSet;
  int32_t m_GrpRepTime;
  bool m_GrpRepTimeIsSet;
  NotificationFlag m_NotifFlag;
  bool m_NotifFlagIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ReportingInformation_H_ */
