/**
 * CAPIF_Discover_Service_API
 * API for discovering service APIs. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DiscoveredAPIs.h
 *
 * Represents a list of APIs currently registered in the CAPIF core function and
 * satisfying a number of filter criteria provided by the API consumer.
 */

#ifndef DiscoveredAPIs_H_
#define DiscoveredAPIs_H_

#include "ServiceAPIDescription.h"
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a list of APIs currently registered in the CAPIF core function
/// and satisfying a number of filter criteria provided by the API consumer.
/// </summary>
class DiscoveredAPIs {
public:
  DiscoveredAPIs();
  virtual ~DiscoveredAPIs();

  void validate();

  /////////////////////////////////////////////
  /// DiscoveredAPIs members

  /// <summary>
  /// Description of the service API as published by the service. Each service
  /// API description shall include AEF profiles matching the filter criteria.
  /// </summary>
  std::vector<ServiceAPIDescription> &getServiceAPIDescriptions();
  void
  setServiceAPIDescriptions(std::vector<ServiceAPIDescription> const &value);
  bool serviceAPIDescriptionsIsSet() const;
  void unsetServiceAPIDescriptions();

  friend void to_json(nlohmann::json &j, const DiscoveredAPIs &o);
  friend void from_json(const nlohmann::json &j, DiscoveredAPIs &o);

protected:
  std::vector<ServiceAPIDescription> m_ServiceAPIDescriptions;
  bool m_ServiceAPIDescriptionsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* DiscoveredAPIs_H_ */
