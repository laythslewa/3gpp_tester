/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.3.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ComplexQuery.h
 *
 * The ComplexQuery data type is either a conjunctive normal form or a
 * disjunctive normal form. The attribute names \&quot;cnfUnits\&quot; and
 * \&quot;dnfUnits\&quot; (see clause 5.2.4.11 and clause 5.2.4.12) serve as
 * discriminator.
 */

#ifndef ComplexQuery_H_
#define ComplexQuery_H_

#include "Cnf.h"
#include "CnfUnit.h"
#include "Dnf.h"
#include "DnfUnit.h"
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The ComplexQuery data type is either a conjunctive normal form or a
/// disjunctive normal form. The attribute names \&quot;cnfUnits\&quot; and
/// \&quot;dnfUnits\&quot; (see clause 5.2.4.11 and clause 5.2.4.12) serve as
/// discriminator.
/// </summary>
class ComplexQuery {
public:
  ComplexQuery();
  virtual ~ComplexQuery();

  void validate();

  /////////////////////////////////////////////
  /// ComplexQuery members

  /// <summary>
  ///
  /// </summary>
  std::vector<CnfUnit> &getCnfUnits();
  void setCnfUnits(std::vector<CnfUnit> const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<DnfUnit> &getDnfUnits();
  void setDnfUnits(std::vector<DnfUnit> const &value);

  friend void to_json(nlohmann::json &j, const ComplexQuery &o);
  friend void from_json(const nlohmann::json &j, ComplexQuery &o);

protected:
  std::vector<CnfUnit> m_CnfUnits;

  std::vector<DnfUnit> m_DnfUnits;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ComplexQuery_H_ */
