/**
 * Nnwdaf_EventsSubscription
 * Nnwdaf_EventsSubscription Service API. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "CongestionInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

CongestionInfo::CongestionInfo() {
  m_Confidence = 0;
  m_ConfidenceIsSet = false;
}

CongestionInfo::~CongestionInfo() {}

void CongestionInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const CongestionInfo &o) {
  j = nlohmann::json();
  j["congType"] = o.m_CongType;
  j["timeIntev"] = o.m_TimeIntev;
  j["nsi"] = o.m_Nsi;
  if (o.confidenceIsSet())
    j["confidence"] = o.m_Confidence;
}

void from_json(const nlohmann::json &j, CongestionInfo &o) {
  j.at("congType").get_to(o.m_CongType);
  j.at("timeIntev").get_to(o.m_TimeIntev);
  j.at("nsi").get_to(o.m_Nsi);
  if (j.find("confidence") != j.end()) {
    j.at("confidence").get_to(o.m_Confidence);
    o.m_ConfidenceIsSet = true;
  }
}

CongestionType CongestionInfo::getCongType() const { return m_CongType; }
void CongestionInfo::setCongType(CongestionType const &value) {
  m_CongType = value;
}
TimeWindow CongestionInfo::getTimeIntev() const { return m_TimeIntev; }
void CongestionInfo::setTimeIntev(TimeWindow const &value) {
  m_TimeIntev = value;
}
ThresholdLevel CongestionInfo::getNsi() const { return m_Nsi; }
void CongestionInfo::setNsi(ThresholdLevel const &value) { m_Nsi = value; }
int32_t CongestionInfo::getConfidence() const { return m_Confidence; }
void CongestionInfo::setConfidence(int32_t const value) {
  m_Confidence = value;
  m_ConfidenceIsSet = true;
}
bool CongestionInfo::confidenceIsSet() const { return m_ConfidenceIsSet; }
void CongestionInfo::unsetConfidence() { m_ConfidenceIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
