/**
 * N32 Handshake API
 * N32-c Handshake Service.  Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC).  All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ParameterExchangeApi.h
 *
 *
 */

#ifndef ParameterExchangeApi_H_
#define ParameterExchangeApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "ProblemDetails.h"
#include "SecParamExchReqData.h"
#include "SecParamExchRspData.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class ParameterExchangeApi {
public:
  ParameterExchangeApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~ParameterExchangeApi() {}
  void init();

  const std::string base = "/n32c-handshake/v1";

private:
  void setupRoutes();

  void post_exchange_params_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);
  void parameter_exchange_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Parameter Exchange
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="secParamExchReqData">Custom operation for parameter
  /// exchange</param>
  virtual void
  post_exchange_params(const SecParamExchReqData &secParamExchReqData,
                       Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ParameterExchangeApi_H_ */
