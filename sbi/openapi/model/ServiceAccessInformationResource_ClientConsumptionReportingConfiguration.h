/**
 * M5_ServiceAccessInformation
 * 5GMS AF M5 Service Access Information API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ServiceAccessInformationResource_ClientConsumptionReportingConfiguration.h
 *
 *
 */

#ifndef ServiceAccessInformationResource_ClientConsumptionReportingConfiguration_H_
#define ServiceAccessInformationResource_ClientConsumptionReportingConfiguration_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class ServiceAccessInformationResource_ClientConsumptionReportingConfiguration {
public:
  ServiceAccessInformationResource_ClientConsumptionReportingConfiguration();
  virtual ~ServiceAccessInformationResource_ClientConsumptionReportingConfiguration();

  void validate();

  /////////////////////////////////////////////
  /// ServiceAccessInformationResource_ClientConsumptionReportingConfiguration
  /// members

  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getReportingInterval() const;
  void setReportingInterval(int32_t const value);
  bool reportingIntervalIsSet() const;
  void unsetReportingInterval();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getServerAddresses();
  void setServerAddresses(std::vector<std::string> const &value);
  /// <summary>
  ///
  /// </summary>
  bool isLocationReporting() const;
  void setLocationReporting(bool const value);
  /// <summary>
  ///
  /// </summary>
  double getSamplePercentage() const;
  void setSamplePercentage(double const value);

  friend void to_json(
      nlohmann::json &j,
      const ServiceAccessInformationResource_ClientConsumptionReportingConfiguration
          &o);
  friend void from_json(
      const nlohmann::json &j,
      ServiceAccessInformationResource_ClientConsumptionReportingConfiguration
          &o);

protected:
  int32_t m_ReportingInterval;
  bool m_ReportingIntervalIsSet;
  std::vector<std::string> m_ServerAddresses;

  bool m_LocationReporting;

  double m_SamplePercentage;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ServiceAccessInformationResource_ClientConsumptionReportingConfiguration_H_ \
        */
