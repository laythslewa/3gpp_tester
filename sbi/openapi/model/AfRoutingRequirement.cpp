/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AfRoutingRequirement.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AfRoutingRequirement::AfRoutingRequirement() {
  m_AppReloc = false;
  m_AppRelocIsSet = false;
  m_RouteToLocsIsSet = false;
  m_SpValIsSet = false;
  m_TempValsIsSet = false;
  m_UpPathChgSubIsSet = false;
  m_AddrPreserInd = false;
  m_AddrPreserIndIsSet = false;
}

AfRoutingRequirement::~AfRoutingRequirement() {}

void AfRoutingRequirement::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AfRoutingRequirement &o) {
  j = nlohmann::json();
  if (o.appRelocIsSet())
    j["appReloc"] = o.m_AppReloc;
  if (o.routeToLocsIsSet() || !o.m_RouteToLocs.empty())
    j["routeToLocs"] = o.m_RouteToLocs;
  if (o.spValIsSet())
    j["spVal"] = o.m_SpVal;
  if (o.tempValsIsSet() || !o.m_TempVals.empty())
    j["tempVals"] = o.m_TempVals;
  if (o.upPathChgSubIsSet())
    j["upPathChgSub"] = o.m_UpPathChgSub;
  if (o.addrPreserIndIsSet())
    j["addrPreserInd"] = o.m_AddrPreserInd;
}

void from_json(const nlohmann::json &j, AfRoutingRequirement &o) {
  if (j.find("appReloc") != j.end()) {
    j.at("appReloc").get_to(o.m_AppReloc);
    o.m_AppRelocIsSet = true;
  }
  if (j.find("routeToLocs") != j.end()) {
    j.at("routeToLocs").get_to(o.m_RouteToLocs);
    o.m_RouteToLocsIsSet = true;
  }
  if (j.find("spVal") != j.end()) {
    j.at("spVal").get_to(o.m_SpVal);
    o.m_SpValIsSet = true;
  }
  if (j.find("tempVals") != j.end()) {
    j.at("tempVals").get_to(o.m_TempVals);
    o.m_TempValsIsSet = true;
  }
  if (j.find("upPathChgSub") != j.end()) {
    j.at("upPathChgSub").get_to(o.m_UpPathChgSub);
    o.m_UpPathChgSubIsSet = true;
  }
  if (j.find("addrPreserInd") != j.end()) {
    j.at("addrPreserInd").get_to(o.m_AddrPreserInd);
    o.m_AddrPreserIndIsSet = true;
  }
}

bool AfRoutingRequirement::isAppReloc() const { return m_AppReloc; }
void AfRoutingRequirement::setAppReloc(bool const value) {
  m_AppReloc = value;
  m_AppRelocIsSet = true;
}
bool AfRoutingRequirement::appRelocIsSet() const { return m_AppRelocIsSet; }
void AfRoutingRequirement::unsetAppReloc() { m_AppRelocIsSet = false; }
std::vector<RouteToLocation> &AfRoutingRequirement::getRouteToLocs() {
  return m_RouteToLocs;
}
void AfRoutingRequirement::setRouteToLocs(
    std::vector<RouteToLocation> const &value) {
  m_RouteToLocs = value;
  m_RouteToLocsIsSet = true;
}
bool AfRoutingRequirement::routeToLocsIsSet() const {
  return m_RouteToLocsIsSet;
}
void AfRoutingRequirement::unsetRouteToLocs() { m_RouteToLocsIsSet = false; }
SpatialValidity AfRoutingRequirement::getSpVal() const { return m_SpVal; }
void AfRoutingRequirement::setSpVal(SpatialValidity const &value) {
  m_SpVal = value;
  m_SpValIsSet = true;
}
bool AfRoutingRequirement::spValIsSet() const { return m_SpValIsSet; }
void AfRoutingRequirement::unsetSpVal() { m_SpValIsSet = false; }
std::vector<TemporalValidity> &AfRoutingRequirement::getTempVals() {
  return m_TempVals;
}
void AfRoutingRequirement::setTempVals(
    std::vector<TemporalValidity> const &value) {
  m_TempVals = value;
  m_TempValsIsSet = true;
}
bool AfRoutingRequirement::tempValsIsSet() const { return m_TempValsIsSet; }
void AfRoutingRequirement::unsetTempVals() { m_TempValsIsSet = false; }
UpPathChgEvent AfRoutingRequirement::getUpPathChgSub() const {
  return m_UpPathChgSub;
}
void AfRoutingRequirement::setUpPathChgSub(UpPathChgEvent const &value) {
  m_UpPathChgSub = value;
  m_UpPathChgSubIsSet = true;
}
bool AfRoutingRequirement::upPathChgSubIsSet() const {
  return m_UpPathChgSubIsSet;
}
void AfRoutingRequirement::unsetUpPathChgSub() { m_UpPathChgSubIsSet = false; }
bool AfRoutingRequirement::isAddrPreserInd() const { return m_AddrPreserInd; }
void AfRoutingRequirement::setAddrPreserInd(bool const value) {
  m_AddrPreserInd = value;
  m_AddrPreserIndIsSet = true;
}
bool AfRoutingRequirement::addrPreserIndIsSet() const {
  return m_AddrPreserIndIsSet;
}
void AfRoutingRequirement::unsetAddrPreserInd() {
  m_AddrPreserIndIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
