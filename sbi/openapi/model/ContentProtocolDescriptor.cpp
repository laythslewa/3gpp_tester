/**
 * M1_ContentProtocolsDiscovery
 * 5GMS AF M1 Content Protocols Discovery API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ContentProtocolDescriptor.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ContentProtocolDescriptor::ContentProtocolDescriptor() {
  m_TermIdentifier = "";
  m_DescriptionLocator = "";
  m_DescriptionLocatorIsSet = false;
}

ContentProtocolDescriptor::~ContentProtocolDescriptor() {}

void ContentProtocolDescriptor::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ContentProtocolDescriptor &o) {
  j = nlohmann::json();
  j["termIdentifier"] = o.m_TermIdentifier;
  if (o.descriptionLocatorIsSet())
    j["descriptionLocator"] = o.m_DescriptionLocator;
}

void from_json(const nlohmann::json &j, ContentProtocolDescriptor &o) {
  j.at("termIdentifier").get_to(o.m_TermIdentifier);
  if (j.find("descriptionLocator") != j.end()) {
    j.at("descriptionLocator").get_to(o.m_DescriptionLocator);
    o.m_DescriptionLocatorIsSet = true;
  }
}

std::string ContentProtocolDescriptor::getTermIdentifier() const {
  return m_TermIdentifier;
}
void ContentProtocolDescriptor::setTermIdentifier(std::string const &value) {
  m_TermIdentifier = value;
}
std::string ContentProtocolDescriptor::getDescriptionLocator() const {
  return m_DescriptionLocator;
}
void ContentProtocolDescriptor::setDescriptionLocator(
    std::string const &value) {
  m_DescriptionLocator = value;
  m_DescriptionLocatorIsSet = true;
}
bool ContentProtocolDescriptor::descriptionLocatorIsSet() const {
  return m_DescriptionLocatorIsSet;
}
void ContentProtocolDescriptor::unsetDescriptionLocator() {
  m_DescriptionLocatorIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
