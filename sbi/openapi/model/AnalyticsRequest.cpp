/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AnalyticsRequest.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AnalyticsRequest::AnalyticsRequest() {
  m_AnalyEventFilterIsSet = false;
  m_AnalyRepIsSet = false;
  m_TgtUeIsSet = false;
  m_SuppFeat = "";
}

AnalyticsRequest::~AnalyticsRequest() {}

void AnalyticsRequest::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AnalyticsRequest &o) {
  j = nlohmann::json();
  j["analyEvent"] = o.m_AnalyEvent;
  if (o.analyEventFilterIsSet())
    j["analyEventFilter"] = o.m_AnalyEventFilter;
  if (o.analyRepIsSet())
    j["analyRep"] = o.m_AnalyRep;
  if (o.tgtUeIsSet())
    j["tgtUe"] = o.m_TgtUe;
  j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, AnalyticsRequest &o) {
  j.at("analyEvent").get_to(o.m_AnalyEvent);
  if (j.find("analyEventFilter") != j.end()) {
    j.at("analyEventFilter").get_to(o.m_AnalyEventFilter);
    o.m_AnalyEventFilterIsSet = true;
  }
  if (j.find("analyRep") != j.end()) {
    j.at("analyRep").get_to(o.m_AnalyRep);
    o.m_AnalyRepIsSet = true;
  }
  if (j.find("tgtUe") != j.end()) {
    j.at("tgtUe").get_to(o.m_TgtUe);
    o.m_TgtUeIsSet = true;
  }
  j.at("suppFeat").get_to(o.m_SuppFeat);
}

AnalyticsEvent AnalyticsRequest::getAnalyEvent() const { return m_AnalyEvent; }
void AnalyticsRequest::setAnalyEvent(AnalyticsEvent const &value) {
  m_AnalyEvent = value;
}
AnalyticsEventFilter AnalyticsRequest::getAnalyEventFilter() const {
  return m_AnalyEventFilter;
}
void AnalyticsRequest::setAnalyEventFilter(AnalyticsEventFilter const &value) {
  m_AnalyEventFilter = value;
  m_AnalyEventFilterIsSet = true;
}
bool AnalyticsRequest::analyEventFilterIsSet() const {
  return m_AnalyEventFilterIsSet;
}
void AnalyticsRequest::unsetAnalyEventFilter() {
  m_AnalyEventFilterIsSet = false;
}
EventReportingRequirement AnalyticsRequest::getAnalyRep() const {
  return m_AnalyRep;
}
void AnalyticsRequest::setAnalyRep(EventReportingRequirement const &value) {
  m_AnalyRep = value;
  m_AnalyRepIsSet = true;
}
bool AnalyticsRequest::analyRepIsSet() const { return m_AnalyRepIsSet; }
void AnalyticsRequest::unsetAnalyRep() { m_AnalyRepIsSet = false; }
TargetUeId AnalyticsRequest::getTgtUe() const { return m_TgtUe; }
void AnalyticsRequest::setTgtUe(TargetUeId const &value) {
  m_TgtUe = value;
  m_TgtUeIsSet = true;
}
bool AnalyticsRequest::tgtUeIsSet() const { return m_TgtUeIsSet; }
void AnalyticsRequest::unsetTgtUe() { m_TgtUeIsSet = false; }
std::string AnalyticsRequest::getSuppFeat() const { return m_SuppFeat; }
void AnalyticsRequest::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
