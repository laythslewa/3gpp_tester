/**
 * Nudm_UECM
 * Nudm Context Management Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Amf3GppAccessRegistrationModification.h
 *
 *
 */

#ifndef Amf3GppAccessRegistrationModification_H_
#define Amf3GppAccessRegistrationModification_H_

#include "BackupAmfInfo.h"
#include "EpsInterworkingInfo.h"
#include "Guami.h"
#include "ImsVoPs.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class Amf3GppAccessRegistrationModification {
public:
  Amf3GppAccessRegistrationModification();
  virtual ~Amf3GppAccessRegistrationModification();

  void validate();

  /////////////////////////////////////////////
  /// Amf3GppAccessRegistrationModification members

  /// <summary>
  ///
  /// </summary>
  Guami getGuami() const;
  void setGuami(Guami const &value);
  /// <summary>
  ///
  /// </summary>
  bool isPurgeFlag() const;
  void setPurgeFlag(bool const value);
  bool purgeFlagIsSet() const;
  void unsetPurgeFlag();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  ///
  /// </summary>
  ImsVoPs getImsVoPs() const;
  void setImsVoPs(ImsVoPs const &value);
  bool imsVoPsIsSet() const;
  void unsetImsVoPs();
  /// <summary>
  ///
  /// </summary>
  std::vector<BackupAmfInfo> &getBackupAmfInfo();
  void setBackupAmfInfo(std::vector<BackupAmfInfo> const &value);
  bool backupAmfInfoIsSet() const;
  void unsetBackupAmfInfo();
  /// <summary>
  ///
  /// </summary>
  EpsInterworkingInfo getEpsInterworkingInfo() const;
  void setEpsInterworkingInfo(EpsInterworkingInfo const &value);
  bool epsInterworkingInfoIsSet() const;
  void unsetEpsInterworkingInfo();
  /// <summary>
  ///
  /// </summary>
  bool isUeSrvccCapability() const;
  void setUeSrvccCapability(bool const value);
  bool ueSrvccCapabilityIsSet() const;
  void unsetUeSrvccCapability();

  friend void to_json(nlohmann::json &j,
                      const Amf3GppAccessRegistrationModification &o);
  friend void from_json(const nlohmann::json &j,
                        Amf3GppAccessRegistrationModification &o);

protected:
  Guami m_Guami;

  bool m_PurgeFlag;
  bool m_PurgeFlagIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  ImsVoPs m_ImsVoPs;
  bool m_ImsVoPsIsSet;
  std::vector<BackupAmfInfo> m_BackupAmfInfo;
  bool m_BackupAmfInfoIsSet;
  EpsInterworkingInfo m_EpsInterworkingInfo;
  bool m_EpsInterworkingInfoIsSet;
  bool m_UeSrvccCapability;
  bool m_UeSrvccCapabilityIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* Amf3GppAccessRegistrationModification_H_ */
