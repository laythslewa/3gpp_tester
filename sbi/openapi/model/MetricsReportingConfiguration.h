/**
 * M1_MetricsReportingProvisioning
 * 5GMS AF M1 Metrics Reporting Provisioning API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MetricsReportingConfiguration.h
 *
 *
 */

#ifndef MetricsReportingConfiguration_H_
#define MetricsReportingConfiguration_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class MetricsReportingConfiguration {
public:
  MetricsReportingConfiguration();
  virtual ~MetricsReportingConfiguration();

  void validate();

  /////////////////////////////////////////////
  /// MetricsReportingConfiguration members

  /// <summary>
  /// String chosen by the 5GMS AF to serve as an identifier in a resource URI.
  /// </summary>
  std::string getMetricsReportingConfigurationId() const;
  void setMetricsReportingConfigurationId(std::string const &value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getScheme() const;
  void setScheme(std::string const &value);
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDataNetworkName() const;
  void setDataNetworkName(std::string const &value);
  bool dataNetworkNameIsSet() const;
  void unsetDataNetworkName();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getReportingInterval() const;
  void setReportingInterval(int32_t const value);
  bool reportingIntervalIsSet() const;
  void unsetReportingInterval();
  /// <summary>
  ///
  /// </summary>
  double getSamplePercentage() const;
  void setSamplePercentage(double const value);
  bool samplePercentageIsSet() const;
  void unsetSamplePercentage();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getUrlFilters();
  void setUrlFilters(std::vector<std::string> const &value);
  bool urlFiltersIsSet() const;
  void unsetUrlFilters();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getMetrics();
  void setMetrics(std::vector<std::string> const &value);
  bool metricsIsSet() const;
  void unsetMetrics();

  friend void to_json(nlohmann::json &j,
                      const MetricsReportingConfiguration &o);
  friend void from_json(const nlohmann::json &j,
                        MetricsReportingConfiguration &o);

protected:
  std::string m_MetricsReportingConfigurationId;

  std::string m_Scheme;

  std::string m_DataNetworkName;
  bool m_DataNetworkNameIsSet;
  int32_t m_ReportingInterval;
  bool m_ReportingIntervalIsSet;
  double m_SamplePercentage;
  bool m_SamplePercentageIsSet;
  std::vector<std::string> m_UrlFilters;
  bool m_UrlFiltersIsSet;
  std::vector<std::string> m_Metrics;
  bool m_MetricsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* MetricsReportingConfiguration_H_ */
