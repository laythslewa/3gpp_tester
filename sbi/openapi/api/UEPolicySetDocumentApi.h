/**
 * Unified Data Repository Service API file for policy data
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UEPolicySetDocumentApi.h
 *
 *
 */

#ifndef UEPolicySetDocumentApi_H_
#define UEPolicySetDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "ProblemDetails.h"
#include "UePolicySet.h"
#include "UePolicySetPatch.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class UEPolicySetDocumentApi {
public:
  UEPolicySetDocumentApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~UEPolicySetDocumentApi() {}
  void init();

  const std::string base = "";

private:
  void setupRoutes();

  void create_or_replace_ue_policy_set_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void read_ue_policy_set_handler(const Pistache::Rest::Request &request,
                                  Pistache::Http::ResponseWriter response);
  void update_ue_policy_set_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);
  void ue_policy_set_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Create or modify the UE policy set data for a subscriber
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId"></param>
  /// <param name="uePolicySet"></param>
  virtual void
  create_or_replace_ue_policy_set(const std::string &ueId,
                                  const UePolicySet &uePolicySet,
                                  Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Retrieves the UE policy set data for a subscriber
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId"></param>
  /// <param name="suppFeat">Supported Features (optional, default to
  /// &quot;&quot;)</param>
  virtual void
  read_ue_policy_set(const std::string &ueId,
                     const Pistache::Optional<std::string> &suppFeat,
                     Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Modify the UE policy set data for a subscriber
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId"></param>
  /// <param name="uePolicySetPatch"></param>
  virtual void
  update_ue_policy_set(const std::string &ueId,
                       const UePolicySetPatch &uePolicySetPatch,
                       Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UEPolicySetDocumentApi_H_ */
