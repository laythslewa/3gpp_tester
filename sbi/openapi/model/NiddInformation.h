/**
 * Nnef_SMContext
 * Nnef SMContext Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NiddInformation.h
 *
 * Informaiton related to NIDD used for the SM Context.
 */

#ifndef NiddInformation_H_
#define NiddInformation_H_

#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Informaiton related to NIDD used for the SM Context.
/// </summary>
class NiddInformation {
public:
  NiddInformation();
  virtual ~NiddInformation();

  void validate();

  /////////////////////////////////////////////
  /// NiddInformation members

  /// <summary>
  /// String identifying External Group Identifier that identifies a group made
  /// up of one or more subscriptions associated to a group of IMSIs, as
  /// specified in clause 19.7.3 of 3GPP TS 23.003.
  /// </summary>
  std::string getExtGroupId() const;
  void setExtGroupId(std::string const &value);
  bool extGroupIdIsSet() const;
  void unsetExtGroupId();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// When present, this IE shall contain the AF Id used for the SM Context.
  /// </summary>
  std::string getAfId() const;
  void setAfId(std::string const &value);
  bool afIdIsSet() const;
  void unsetAfId();

  friend void to_json(nlohmann::json &j, const NiddInformation &o);
  friend void from_json(const nlohmann::json &j, NiddInformation &o);

protected:
  std::string m_ExtGroupId;
  bool m_ExtGroupIdIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_AfId;
  bool m_AfIdIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NiddInformation_H_ */
