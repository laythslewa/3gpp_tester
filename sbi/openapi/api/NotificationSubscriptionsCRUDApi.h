/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NotificationSubscriptionsCRUDApi.h
 *
 *
 */

#ifndef NotificationSubscriptionsCRUDApi_H_
#define NotificationSubscriptionsCRUDApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "NotificationSubscription.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class NotificationSubscriptionsCRUDApi {
public:
  NotificationSubscriptionsCRUDApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~NotificationSubscriptionsCRUDApi() {}
  void init();

  const std::string base = "/nudsf-dr/v1";

private:
  void setupRoutes();

  void get_notification_subscriptions_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void notification_subscriptions_crud_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Notification subscription retrieval
  /// </summary>
  /// <remarks>
  /// retrieve all notification subscriptions of the storage
  /// </remarks>
  /// <param name="realmId">Identifier of the Realm</param>
  /// <param name="storageId">Identifier of the Storage</param>
  /// <param name="limitRange">The maximum number of NotificationSubscriptions
  /// to fetch (optional, default to 0)</param> <param
  /// name="supportedFeatures">Features required to be supported by the target
  /// NF (optional, default to &quot;&quot;)</param>
  virtual void get_notification_subscriptions(
      const std::string &realmId, const std::string &storageId,
      const Pistache::Optional<int32_t> &limitRange,
      const Pistache::Optional<std::string> &supportedFeatures,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NotificationSubscriptionsCRUDApi_H_ */
