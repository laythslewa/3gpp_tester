/**
 * Namf_Location
 * AMF Location Service © 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ProvideLocInfo.h
 *
 * Data within Provide Location Information Response
 */

#ifndef ProvideLocInfo_H_
#define ProvideLocInfo_H_

#include "GeographicArea.h"
#include "Guami.h"
#include "RatType.h"
#include "UserLocation.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within Provide Location Information Response
/// </summary>
class ProvideLocInfo {
public:
  ProvideLocInfo();
  virtual ~ProvideLocInfo();

  void validate();

  /////////////////////////////////////////////
  /// ProvideLocInfo members

  /// <summary>
  ///
  /// </summary>
  bool isCurrentLoc() const;
  void setCurrentLoc(bool const value);
  bool currentLocIsSet() const;
  void unsetCurrentLoc();
  /// <summary>
  ///
  /// </summary>
  UserLocation getLocation() const;
  void setLocation(UserLocation const &value);
  bool locationIsSet() const;
  void unsetLocation();
  /// <summary>
  ///
  /// </summary>
  UserLocation getAdditionalLocation() const;
  void setAdditionalLocation(UserLocation const &value);
  bool additionalLocationIsSet() const;
  void unsetAdditionalLocation();
  /// <summary>
  ///
  /// </summary>
  GeographicArea getGeoInfo() const;
  void setGeoInfo(GeographicArea const &value);
  bool geoInfoIsSet() const;
  void unsetGeoInfo();
  /// <summary>
  /// Indicates value of the age of the location estimate.
  /// </summary>
  int32_t getLocationAge() const;
  void setLocationAge(int32_t const value);
  bool locationAgeIsSet() const;
  void unsetLocationAge();
  /// <summary>
  ///
  /// </summary>
  RatType getRatType() const;
  void setRatType(RatType const &value);
  bool ratTypeIsSet() const;
  void unsetRatType();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getTimezone() const;
  void setTimezone(std::string const &value);
  bool timezoneIsSet() const;
  void unsetTimezone();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  Guami getOldGuami() const;
  void setOldGuami(Guami const &value);
  bool oldGuamiIsSet() const;
  void unsetOldGuami();

  friend void to_json(nlohmann::json &j, const ProvideLocInfo &o);
  friend void from_json(const nlohmann::json &j, ProvideLocInfo &o);

protected:
  bool m_CurrentLoc;
  bool m_CurrentLocIsSet;
  UserLocation m_Location;
  bool m_LocationIsSet;
  UserLocation m_AdditionalLocation;
  bool m_AdditionalLocationIsSet;
  GeographicArea m_GeoInfo;
  bool m_GeoInfoIsSet;
  int32_t m_LocationAge;
  bool m_LocationAgeIsSet;
  RatType m_RatType;
  bool m_RatTypeIsSet;
  std::string m_Timezone;
  bool m_TimezoneIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  Guami m_OldGuami;
  bool m_OldGuamiIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ProvideLocInfo_H_ */
