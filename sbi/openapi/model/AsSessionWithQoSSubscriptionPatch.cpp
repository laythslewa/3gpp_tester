/**
 * 3gpp-as-session-with-qos
 * API for setting us an AS session with required QoS. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AsSessionWithQoSSubscriptionPatch.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AsSessionWithQoSSubscriptionPatch::AsSessionWithQoSSubscriptionPatch() {
  m_ExterAppId = "";
  m_ExterAppIdIsSet = false;
  m_FlowInfoIsSet = false;
  m_EthFlowInfoIsSet = false;
  m_QosReference = "";
  m_QosReferenceIsSet = false;
  m_AltQoSReferencesIsSet = false;
  m_DisUeNotif = false;
  m_DisUeNotifIsSet = false;
  m_UsageThresholdIsSet = false;
  m_QosMonInfoIsSet = false;
  m_LocalNotifInd = false;
  m_LocalNotifIndIsSet = false;
  m_NotificationDestination = "";
  m_NotificationDestinationIsSet = false;
  m_TscQosReqIsSet = false;
}

AsSessionWithQoSSubscriptionPatch::~AsSessionWithQoSSubscriptionPatch() {}

void AsSessionWithQoSSubscriptionPatch::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AsSessionWithQoSSubscriptionPatch &o) {
  j = nlohmann::json();
  if (o.exterAppIdIsSet())
    j["exterAppId"] = o.m_ExterAppId;
  if (o.flowInfoIsSet() || !o.m_FlowInfo.empty())
    j["flowInfo"] = o.m_FlowInfo;
  if (o.ethFlowInfoIsSet() || !o.m_EthFlowInfo.empty())
    j["ethFlowInfo"] = o.m_EthFlowInfo;
  if (o.qosReferenceIsSet())
    j["qosReference"] = o.m_QosReference;
  if (o.altQoSReferencesIsSet() || !o.m_AltQoSReferences.empty())
    j["altQoSReferences"] = o.m_AltQoSReferences;
  if (o.disUeNotifIsSet())
    j["disUeNotif"] = o.m_DisUeNotif;
  if (o.usageThresholdIsSet())
    j["usageThreshold"] = o.m_UsageThreshold;
  if (o.qosMonInfoIsSet())
    j["qosMonInfo"] = o.m_QosMonInfo;
  if (o.localNotifIndIsSet())
    j["localNotifInd"] = o.m_LocalNotifInd;
  if (o.notificationDestinationIsSet())
    j["notificationDestination"] = o.m_NotificationDestination;
  if (o.tscQosReqIsSet())
    j["tscQosReq"] = o.m_TscQosReq;
}

void from_json(const nlohmann::json &j, AsSessionWithQoSSubscriptionPatch &o) {
  if (j.find("exterAppId") != j.end()) {
    j.at("exterAppId").get_to(o.m_ExterAppId);
    o.m_ExterAppIdIsSet = true;
  }
  if (j.find("flowInfo") != j.end()) {
    j.at("flowInfo").get_to(o.m_FlowInfo);
    o.m_FlowInfoIsSet = true;
  }
  if (j.find("ethFlowInfo") != j.end()) {
    j.at("ethFlowInfo").get_to(o.m_EthFlowInfo);
    o.m_EthFlowInfoIsSet = true;
  }
  if (j.find("qosReference") != j.end()) {
    j.at("qosReference").get_to(o.m_QosReference);
    o.m_QosReferenceIsSet = true;
  }
  if (j.find("altQoSReferences") != j.end()) {
    j.at("altQoSReferences").get_to(o.m_AltQoSReferences);
    o.m_AltQoSReferencesIsSet = true;
  }
  if (j.find("disUeNotif") != j.end()) {
    j.at("disUeNotif").get_to(o.m_DisUeNotif);
    o.m_DisUeNotifIsSet = true;
  }
  if (j.find("usageThreshold") != j.end()) {
    j.at("usageThreshold").get_to(o.m_UsageThreshold);
    o.m_UsageThresholdIsSet = true;
  }
  if (j.find("qosMonInfo") != j.end()) {
    j.at("qosMonInfo").get_to(o.m_QosMonInfo);
    o.m_QosMonInfoIsSet = true;
  }
  if (j.find("localNotifInd") != j.end()) {
    j.at("localNotifInd").get_to(o.m_LocalNotifInd);
    o.m_LocalNotifIndIsSet = true;
  }
  if (j.find("notificationDestination") != j.end()) {
    j.at("notificationDestination").get_to(o.m_NotificationDestination);
    o.m_NotificationDestinationIsSet = true;
  }
  if (j.find("tscQosReq") != j.end()) {
    j.at("tscQosReq").get_to(o.m_TscQosReq);
    o.m_TscQosReqIsSet = true;
  }
}

std::string AsSessionWithQoSSubscriptionPatch::getExterAppId() const {
  return m_ExterAppId;
}
void AsSessionWithQoSSubscriptionPatch::setExterAppId(
    std::string const &value) {
  m_ExterAppId = value;
  m_ExterAppIdIsSet = true;
}
bool AsSessionWithQoSSubscriptionPatch::exterAppIdIsSet() const {
  return m_ExterAppIdIsSet;
}
void AsSessionWithQoSSubscriptionPatch::unsetExterAppId() {
  m_ExterAppIdIsSet = false;
}
std::vector<FlowInfo> &AsSessionWithQoSSubscriptionPatch::getFlowInfo() {
  return m_FlowInfo;
}
void AsSessionWithQoSSubscriptionPatch::setFlowInfo(
    std::vector<FlowInfo> const &value) {
  m_FlowInfo = value;
  m_FlowInfoIsSet = true;
}
bool AsSessionWithQoSSubscriptionPatch::flowInfoIsSet() const {
  return m_FlowInfoIsSet;
}
void AsSessionWithQoSSubscriptionPatch::unsetFlowInfo() {
  m_FlowInfoIsSet = false;
}
std::vector<EthFlowDescription> &
AsSessionWithQoSSubscriptionPatch::getEthFlowInfo() {
  return m_EthFlowInfo;
}
void AsSessionWithQoSSubscriptionPatch::setEthFlowInfo(
    std::vector<EthFlowDescription> const &value) {
  m_EthFlowInfo = value;
  m_EthFlowInfoIsSet = true;
}
bool AsSessionWithQoSSubscriptionPatch::ethFlowInfoIsSet() const {
  return m_EthFlowInfoIsSet;
}
void AsSessionWithQoSSubscriptionPatch::unsetEthFlowInfo() {
  m_EthFlowInfoIsSet = false;
}
std::string AsSessionWithQoSSubscriptionPatch::getQosReference() const {
  return m_QosReference;
}
void AsSessionWithQoSSubscriptionPatch::setQosReference(
    std::string const &value) {
  m_QosReference = value;
  m_QosReferenceIsSet = true;
}
bool AsSessionWithQoSSubscriptionPatch::qosReferenceIsSet() const {
  return m_QosReferenceIsSet;
}
void AsSessionWithQoSSubscriptionPatch::unsetQosReference() {
  m_QosReferenceIsSet = false;
}
std::vector<std::string> &
AsSessionWithQoSSubscriptionPatch::getAltQoSReferences() {
  return m_AltQoSReferences;
}
void AsSessionWithQoSSubscriptionPatch::setAltQoSReferences(
    std::vector<std::string> const &value) {
  m_AltQoSReferences = value;
  m_AltQoSReferencesIsSet = true;
}
bool AsSessionWithQoSSubscriptionPatch::altQoSReferencesIsSet() const {
  return m_AltQoSReferencesIsSet;
}
void AsSessionWithQoSSubscriptionPatch::unsetAltQoSReferences() {
  m_AltQoSReferencesIsSet = false;
}
bool AsSessionWithQoSSubscriptionPatch::isDisUeNotif() const {
  return m_DisUeNotif;
}
void AsSessionWithQoSSubscriptionPatch::setDisUeNotif(bool const value) {
  m_DisUeNotif = value;
  m_DisUeNotifIsSet = true;
}
bool AsSessionWithQoSSubscriptionPatch::disUeNotifIsSet() const {
  return m_DisUeNotifIsSet;
}
void AsSessionWithQoSSubscriptionPatch::unsetDisUeNotif() {
  m_DisUeNotifIsSet = false;
}
UsageThresholdRm AsSessionWithQoSSubscriptionPatch::getUsageThreshold() const {
  return m_UsageThreshold;
}
void AsSessionWithQoSSubscriptionPatch::setUsageThreshold(
    UsageThresholdRm const &value) {
  m_UsageThreshold = value;
  m_UsageThresholdIsSet = true;
}
bool AsSessionWithQoSSubscriptionPatch::usageThresholdIsSet() const {
  return m_UsageThresholdIsSet;
}
void AsSessionWithQoSSubscriptionPatch::unsetUsageThreshold() {
  m_UsageThresholdIsSet = false;
}
QosMonitoringInformationRm
AsSessionWithQoSSubscriptionPatch::getQosMonInfo() const {
  return m_QosMonInfo;
}
void AsSessionWithQoSSubscriptionPatch::setQosMonInfo(
    QosMonitoringInformationRm const &value) {
  m_QosMonInfo = value;
  m_QosMonInfoIsSet = true;
}
bool AsSessionWithQoSSubscriptionPatch::qosMonInfoIsSet() const {
  return m_QosMonInfoIsSet;
}
void AsSessionWithQoSSubscriptionPatch::unsetQosMonInfo() {
  m_QosMonInfoIsSet = false;
}
bool AsSessionWithQoSSubscriptionPatch::isLocalNotifInd() const {
  return m_LocalNotifInd;
}
void AsSessionWithQoSSubscriptionPatch::setLocalNotifInd(bool const value) {
  m_LocalNotifInd = value;
  m_LocalNotifIndIsSet = true;
}
bool AsSessionWithQoSSubscriptionPatch::localNotifIndIsSet() const {
  return m_LocalNotifIndIsSet;
}
void AsSessionWithQoSSubscriptionPatch::unsetLocalNotifInd() {
  m_LocalNotifIndIsSet = false;
}
std::string
AsSessionWithQoSSubscriptionPatch::getNotificationDestination() const {
  return m_NotificationDestination;
}
void AsSessionWithQoSSubscriptionPatch::setNotificationDestination(
    std::string const &value) {
  m_NotificationDestination = value;
  m_NotificationDestinationIsSet = true;
}
bool AsSessionWithQoSSubscriptionPatch::notificationDestinationIsSet() const {
  return m_NotificationDestinationIsSet;
}
void AsSessionWithQoSSubscriptionPatch::unsetNotificationDestination() {
  m_NotificationDestinationIsSet = false;
}
TscQosRequirementRm AsSessionWithQoSSubscriptionPatch::getTscQosReq() const {
  return m_TscQosReq;
}
void AsSessionWithQoSSubscriptionPatch::setTscQosReq(
    TscQosRequirementRm const &value) {
  m_TscQosReq = value;
  m_TscQosReqIsSet = true;
}
bool AsSessionWithQoSSubscriptionPatch::tscQosReqIsSet() const {
  return m_TscQosReqIsSet;
}
void AsSessionWithQoSSubscriptionPatch::unsetTscQosReq() {
  m_TscQosReqIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
