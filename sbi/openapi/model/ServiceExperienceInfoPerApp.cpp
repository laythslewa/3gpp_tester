/**
 * Naf_EventExposure
 * AF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ServiceExperienceInfoPerApp.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ServiceExperienceInfoPerApp::ServiceExperienceInfoPerApp() {
  m_AppId = "";
  m_AppIdIsSet = false;
  m_GpsisIsSet = false;
  m_SupisIsSet = false;
}

ServiceExperienceInfoPerApp::~ServiceExperienceInfoPerApp() {}

void ServiceExperienceInfoPerApp::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ServiceExperienceInfoPerApp &o) {
  j = nlohmann::json();
  if (o.appIdIsSet())
    j["appId"] = o.m_AppId;
  j["svcExpPerFlows"] = o.m_SvcExpPerFlows;
  if (o.gpsisIsSet() || !o.m_Gpsis.empty())
    j["gpsis"] = o.m_Gpsis;
  if (o.supisIsSet() || !o.m_Supis.empty())
    j["supis"] = o.m_Supis;
}

void from_json(const nlohmann::json &j, ServiceExperienceInfoPerApp &o) {
  if (j.find("appId") != j.end()) {
    j.at("appId").get_to(o.m_AppId);
    o.m_AppIdIsSet = true;
  }
  j.at("svcExpPerFlows").get_to(o.m_SvcExpPerFlows);
  if (j.find("gpsis") != j.end()) {
    j.at("gpsis").get_to(o.m_Gpsis);
    o.m_GpsisIsSet = true;
  }
  if (j.find("supis") != j.end()) {
    j.at("supis").get_to(o.m_Supis);
    o.m_SupisIsSet = true;
  }
}

std::string ServiceExperienceInfoPerApp::getAppId() const { return m_AppId; }
void ServiceExperienceInfoPerApp::setAppId(std::string const &value) {
  m_AppId = value;
  m_AppIdIsSet = true;
}
bool ServiceExperienceInfoPerApp::appIdIsSet() const { return m_AppIdIsSet; }
void ServiceExperienceInfoPerApp::unsetAppId() { m_AppIdIsSet = false; }
std::vector<ServiceExperienceInfoPerFlow> &
ServiceExperienceInfoPerApp::getSvcExpPerFlows() {
  return m_SvcExpPerFlows;
}
void ServiceExperienceInfoPerApp::setSvcExpPerFlows(
    std::vector<ServiceExperienceInfoPerFlow> const &value) {
  m_SvcExpPerFlows = value;
}
std::vector<std::string> &ServiceExperienceInfoPerApp::getGpsis() {
  return m_Gpsis;
}
void ServiceExperienceInfoPerApp::setGpsis(
    std::vector<std::string> const &value) {
  m_Gpsis = value;
  m_GpsisIsSet = true;
}
bool ServiceExperienceInfoPerApp::gpsisIsSet() const { return m_GpsisIsSet; }
void ServiceExperienceInfoPerApp::unsetGpsis() { m_GpsisIsSet = false; }
std::vector<std::string> &ServiceExperienceInfoPerApp::getSupis() {
  return m_Supis;
}
void ServiceExperienceInfoPerApp::setSupis(
    std::vector<std::string> const &value) {
  m_Supis = value;
  m_SupisIsSet = true;
}
bool ServiceExperienceInfoPerApp::supisIsSet() const { return m_SupisIsSet; }
void ServiceExperienceInfoPerApp::unsetSupis() { m_SupisIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
