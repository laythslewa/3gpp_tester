/**
 * N32 Handshake API
 * N32-c Handshake Service.  Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC).  All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SecNegotiateReqData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SecNegotiateReqData::SecNegotiateReqData() {
  m_Sender = "";
  m_r_3GppSbiTargetApiRootSupported = false;
  m_r_3GppSbiTargetApiRootSupportedIsSet = false;
  m_PlmnIdListIsSet = false;
}

SecNegotiateReqData::~SecNegotiateReqData() {}

void SecNegotiateReqData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SecNegotiateReqData &o) {
  j = nlohmann::json();
  j["sender"] = o.m_Sender;
  j["supportedSecCapabilityList"] = o.m_SupportedSecCapabilityList;
  if (o.r3GppSbiTargetApiRootSupportedIsSet())
    j["3GppSbiTargetApiRootSupported"] = o.m_r_3GppSbiTargetApiRootSupported;
  if (o.plmnIdListIsSet() || !o.m_PlmnIdList.empty())
    j["plmnIdList"] = o.m_PlmnIdList;
}

void from_json(const nlohmann::json &j, SecNegotiateReqData &o) {
  j.at("sender").get_to(o.m_Sender);
  j.at("supportedSecCapabilityList").get_to(o.m_SupportedSecCapabilityList);
  if (j.find("3GppSbiTargetApiRootSupported") != j.end()) {
    j.at("3GppSbiTargetApiRootSupported")
        .get_to(o.m_r_3GppSbiTargetApiRootSupported);
    o.m_r_3GppSbiTargetApiRootSupportedIsSet = true;
  }
  if (j.find("plmnIdList") != j.end()) {
    j.at("plmnIdList").get_to(o.m_PlmnIdList);
    o.m_PlmnIdListIsSet = true;
  }
}

std::string SecNegotiateReqData::getSender() const { return m_Sender; }
void SecNegotiateReqData::setSender(std::string const &value) {
  m_Sender = value;
}
std::vector<SecurityCapability> &
SecNegotiateReqData::getSupportedSecCapabilityList() {
  return m_SupportedSecCapabilityList;
}
void SecNegotiateReqData::setSupportedSecCapabilityList(
    std::vector<SecurityCapability> const &value) {
  m_SupportedSecCapabilityList = value;
}
bool SecNegotiateReqData::isR3GppSbiTargetApiRootSupported() const {
  return m_r_3GppSbiTargetApiRootSupported;
}
void SecNegotiateReqData::setR3GppSbiTargetApiRootSupported(bool const value) {
  m_r_3GppSbiTargetApiRootSupported = value;
  m_r_3GppSbiTargetApiRootSupportedIsSet = true;
}
bool SecNegotiateReqData::r3GppSbiTargetApiRootSupportedIsSet() const {
  return m_r_3GppSbiTargetApiRootSupportedIsSet;
}
void SecNegotiateReqData::unsetr_3GppSbiTargetApiRootSupported() {
  m_r_3GppSbiTargetApiRootSupportedIsSet = false;
}
std::vector<PlmnId> &SecNegotiateReqData::getPlmnIdList() {
  return m_PlmnIdList;
}
void SecNegotiateReqData::setPlmnIdList(std::vector<PlmnId> const &value) {
  m_PlmnIdList = value;
  m_PlmnIdListIsSet = true;
}
bool SecNegotiateReqData::plmnIdListIsSet() const { return m_PlmnIdListIsSet; }
void SecNegotiateReqData::unsetPlmnIdList() { m_PlmnIdListIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
