/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeCommunicationInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeCommunicationInfo::UeCommunicationInfo() {
  m_Supi = "";
  m_SupiIsSet = false;
  m_InterGroupId = "";
  m_InterGroupIdIsSet = false;
  m_AppId = "";
  m_AppIdIsSet = false;
}

UeCommunicationInfo::~UeCommunicationInfo() {}

void UeCommunicationInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UeCommunicationInfo &o) {
  j = nlohmann::json();
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  if (o.interGroupIdIsSet())
    j["interGroupId"] = o.m_InterGroupId;
  if (o.appIdIsSet())
    j["appId"] = o.m_AppId;
  j["comms"] = o.m_Comms;
}

void from_json(const nlohmann::json &j, UeCommunicationInfo &o) {
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("interGroupId") != j.end()) {
    j.at("interGroupId").get_to(o.m_InterGroupId);
    o.m_InterGroupIdIsSet = true;
  }
  if (j.find("appId") != j.end()) {
    j.at("appId").get_to(o.m_AppId);
    o.m_AppIdIsSet = true;
  }
  j.at("comms").get_to(o.m_Comms);
}

std::string UeCommunicationInfo::getSupi() const { return m_Supi; }
void UeCommunicationInfo::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool UeCommunicationInfo::supiIsSet() const { return m_SupiIsSet; }
void UeCommunicationInfo::unsetSupi() { m_SupiIsSet = false; }
std::string UeCommunicationInfo::getInterGroupId() const {
  return m_InterGroupId;
}
void UeCommunicationInfo::setInterGroupId(std::string const &value) {
  m_InterGroupId = value;
  m_InterGroupIdIsSet = true;
}
bool UeCommunicationInfo::interGroupIdIsSet() const {
  return m_InterGroupIdIsSet;
}
void UeCommunicationInfo::unsetInterGroupId() { m_InterGroupIdIsSet = false; }
std::string UeCommunicationInfo::getAppId() const { return m_AppId; }
void UeCommunicationInfo::setAppId(std::string const &value) {
  m_AppId = value;
  m_AppIdIsSet = true;
}
bool UeCommunicationInfo::appIdIsSet() const { return m_AppIdIsSet; }
void UeCommunicationInfo::unsetAppId() { m_AppIdIsSet = false; }
std::vector<CommunicationCollection> &UeCommunicationInfo::getComms() {
  return m_Comms;
}
void UeCommunicationInfo::setComms(
    std::vector<CommunicationCollection> const &value) {
  m_Comms = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
