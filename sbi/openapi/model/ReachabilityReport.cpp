/**
 * Nudm_EE
 * Nudm Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ReachabilityReport.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ReachabilityReport::ReachabilityReport() {
  m_AmfInstanceId = "";
  m_AmfInstanceIdIsSet = false;
  m_AccessTypeListIsSet = false;
  m_ReachabilityIsSet = false;
  m_MaxAvailabilityTime = "";
  m_MaxAvailabilityTimeIsSet = false;
}

ReachabilityReport::~ReachabilityReport() {}

void ReachabilityReport::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ReachabilityReport &o) {
  j = nlohmann::json();
  if (o.amfInstanceIdIsSet())
    j["amfInstanceId"] = o.m_AmfInstanceId;
  if (o.accessTypeListIsSet() || !o.m_AccessTypeList.empty())
    j["accessTypeList"] = o.m_AccessTypeList;
  if (o.reachabilityIsSet())
    j["reachability"] = o.m_Reachability;
  if (o.maxAvailabilityTimeIsSet())
    j["maxAvailabilityTime"] = o.m_MaxAvailabilityTime;
}

void from_json(const nlohmann::json &j, ReachabilityReport &o) {
  if (j.find("amfInstanceId") != j.end()) {
    j.at("amfInstanceId").get_to(o.m_AmfInstanceId);
    o.m_AmfInstanceIdIsSet = true;
  }
  if (j.find("accessTypeList") != j.end()) {
    j.at("accessTypeList").get_to(o.m_AccessTypeList);
    o.m_AccessTypeListIsSet = true;
  }
  if (j.find("reachability") != j.end()) {
    j.at("reachability").get_to(o.m_Reachability);
    o.m_ReachabilityIsSet = true;
  }
  if (j.find("maxAvailabilityTime") != j.end()) {
    j.at("maxAvailabilityTime").get_to(o.m_MaxAvailabilityTime);
    o.m_MaxAvailabilityTimeIsSet = true;
  }
}

std::string ReachabilityReport::getAmfInstanceId() const {
  return m_AmfInstanceId;
}
void ReachabilityReport::setAmfInstanceId(std::string const &value) {
  m_AmfInstanceId = value;
  m_AmfInstanceIdIsSet = true;
}
bool ReachabilityReport::amfInstanceIdIsSet() const {
  return m_AmfInstanceIdIsSet;
}
void ReachabilityReport::unsetAmfInstanceId() { m_AmfInstanceIdIsSet = false; }
std::vector<AccessType> &ReachabilityReport::getAccessTypeList() {
  return m_AccessTypeList;
}
void ReachabilityReport::setAccessTypeList(
    std::vector<AccessType> const &value) {
  m_AccessTypeList = value;
  m_AccessTypeListIsSet = true;
}
bool ReachabilityReport::accessTypeListIsSet() const {
  return m_AccessTypeListIsSet;
}
void ReachabilityReport::unsetAccessTypeList() {
  m_AccessTypeListIsSet = false;
}
UeReachability ReachabilityReport::getReachability() const {
  return m_Reachability;
}
void ReachabilityReport::setReachability(UeReachability const &value) {
  m_Reachability = value;
  m_ReachabilityIsSet = true;
}
bool ReachabilityReport::reachabilityIsSet() const {
  return m_ReachabilityIsSet;
}
void ReachabilityReport::unsetReachability() { m_ReachabilityIsSet = false; }
std::string ReachabilityReport::getMaxAvailabilityTime() const {
  return m_MaxAvailabilityTime;
}
void ReachabilityReport::setMaxAvailabilityTime(std::string const &value) {
  m_MaxAvailabilityTime = value;
  m_MaxAvailabilityTimeIsSet = true;
}
bool ReachabilityReport::maxAvailabilityTimeIsSet() const {
  return m_MaxAvailabilityTimeIsSet;
}
void ReachabilityReport::unsetMaxAvailabilityTime() {
  m_MaxAvailabilityTimeIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
