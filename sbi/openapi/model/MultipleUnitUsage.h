/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MultipleUnitUsage.h
 *
 *
 */

#ifndef MultipleUnitUsage_H_
#define MultipleUnitUsage_H_

#include "PDUAddress.h"
#include "UsedUnitContainer.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class MultipleUnitUsage {
public:
  MultipleUnitUsage();
  virtual ~MultipleUnitUsage();

  void validate();

  /////////////////////////////////////////////
  /// MultipleUnitUsage members

  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 32-bit integer.
  /// </summary>
  int32_t getRatingGroup() const;
  void setRatingGroup(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  std::vector<UsedUnitContainer> &getUsedUnitContainer();
  void setUsedUnitContainer(std::vector<UsedUnitContainer> const &value);
  bool usedUnitContainerIsSet() const;
  void unsetUsedUnitContainer();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getUPFID() const;
  void setUPFID(std::string const &value);
  bool uPFIDIsSet() const;
  void unsetUPFID();
  /// <summary>
  ///
  /// </summary>
  PDUAddress getMultihomedPDUAddress() const;
  void setMultihomedPDUAddress(PDUAddress const &value);
  bool multihomedPDUAddressIsSet() const;
  void unsetMultihomedPDUAddress();

  friend void to_json(nlohmann::json &j, const MultipleUnitUsage &o);
  friend void from_json(const nlohmann::json &j, MultipleUnitUsage &o);

protected:
  int32_t m_RatingGroup;

  std::vector<UsedUnitContainer> m_UsedUnitContainer;
  bool m_UsedUnitContainerIsSet;
  std::string m_UPFID;
  bool m_UPFIDIsSet;
  PDUAddress m_MultihomedPDUAddress;
  bool m_MultihomedPDUAddressIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* MultipleUnitUsage_H_ */
