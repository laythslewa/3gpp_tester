/**
 * Unified Data Repository Service API file for structured data for exposure
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PduSessionManagementDataApi.h
 *
 *
 */

#ifndef PduSessionManagementDataApi_H_
#define PduSessionManagementDataApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "Ipv6Prefix.h"
#include "PduSessionManagementData.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class PduSessionManagementDataApi {
public:
  PduSessionManagementDataApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~PduSessionManagementDataApi() {}
  void init();

  const std::string base = "";

private:
  void setupRoutes();

  void create_or_replace_session_management_data_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void delete_session_management_data_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void query_session_management_data_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void pdu_session_management_data_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Creates and updates the session management data for a UE and for an
  /// individual PDU session
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId">UE id</param>
  /// <param name="pduSessionId">PDU session id</param>
  /// <param name="pduSessionManagementData"></param>
  virtual void create_or_replace_session_management_data(
      const std::string &ueId, const int32_t &pduSessionId,
      const PduSessionManagementData &pduSessionManagementData,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Deletes the session management data for a UE and for an individual PDU
  /// session
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId">UE id</param>
  /// <param name="pduSessionId">PDU session id</param>
  virtual void
  delete_session_management_data(const std::string &ueId,
                                 const int32_t &pduSessionId,
                                 Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Retrieves the session management data for a UE and for an individual PDU
  /// session
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId">UE id</param>
  /// <param name="pduSessionId">PDU session id</param>
  /// <param name="ipv4Addr">IPv4 Address of the UE (optional, default to
  /// &quot;&quot;)</param> <param name="ipv6Prefix">IPv6 Address Prefix of the
  /// UE (optional, default to Ipv6Prefix())</param> <param name="dnn">DNN of
  /// the UE (optional, default to &quot;&quot;)</param> <param
  /// name="fields">attributes to be retrieved (optional, default to
  /// std::vector&lt;std::string&gt;())</param> <param name="suppFeat">Supported
  /// Features (optional, default to &quot;&quot;)</param>
  virtual void query_session_management_data(
      const std::string &ueId, const int32_t &pduSessionId,
      const Pistache::Optional<std::string> &ipv4Addr,
      const Pistache::Optional<Ipv6Prefix> &ipv6Prefix,
      const Pistache::Optional<std::string> &dnn,
      const Pistache::Optional<std::vector<std::string>> &fields,
      const Pistache::Optional<std::string> &suppFeat,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PduSessionManagementDataApi_H_ */
