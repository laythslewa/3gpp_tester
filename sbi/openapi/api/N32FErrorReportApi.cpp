/**
 * N32 Handshake API
 * N32-c Handshake Service.  Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC).  All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "N32FErrorReportApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

N32FErrorReportApi::N32FErrorReportApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void N32FErrorReportApi::init() { setupRoutes(); }

void N32FErrorReportApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Post(
      *router, base + "/n32f-error",
      Routes::bind(&N32FErrorReportApi::post_n32f_error_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &N32FErrorReportApi::n32_f_error_report_api_default_handler, this));
}

void N32FErrorReportApi::post_n32f_error_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {

  // Getting the body param

  N32fErrorInfo n32fErrorInfo;

  try {
    nlohmann::json::parse(request.body()).get_to(n32fErrorInfo);
    this->post_n32f_error(n32fErrorInfo, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void N32FErrorReportApi::n32_f_error_report_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
