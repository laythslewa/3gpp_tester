/**
 * Nbsf_Management
 * Binding Support Management Service API. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PcfBindingPatch.h
 *
 * Identifies an Individual PCF binding used in an HTTP Patch method.
 */

#ifndef PcfBindingPatch_H_
#define PcfBindingPatch_H_

#include "IpEndPoint.h"
#include "Ipv6Prefix.h"
#include "Ipv6PrefixRm.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Identifies an Individual PCF binding used in an HTTP Patch method.
/// </summary>
class PcfBindingPatch {
public:
  PcfBindingPatch();
  virtual ~PcfBindingPatch();

  void validate();

  /////////////////////////////////////////////
  /// PcfBindingPatch members

  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166 with the OpenAPI defined
  /// \&quot;nullable&#x3D;true\&quot; property.
  /// </summary>
  std::string getIpv4Addr() const;
  void setIpv4Addr(std::string const &value);
  bool ipv4AddrIsSet() const;
  void unsetIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  std::string getIpDomain() const;
  void setIpDomain(std::string const &value);
  bool ipDomainIsSet() const;
  void unsetIpDomain();
  /// <summary>
  ///
  /// </summary>
  Ipv6PrefixRm getIpv6Prefix() const;
  void setIpv6Prefix(Ipv6PrefixRm const &value);
  bool ipv6PrefixIsSet() const;
  void unsetIpv6Prefix();
  /// <summary>
  /// The additional IPv6 Address Prefixes of the served UE.
  /// </summary>
  std::vector<Ipv6Prefix> &getAddIpv6Prefixes();
  void setAddIpv6Prefixes(std::vector<Ipv6Prefix> const &value);
  bool addIpv6PrefixesIsSet() const;
  void unsetAddIpv6Prefixes();
  /// <summary>
  /// String identifying a MAC address formatted in the hexadecimal notation
  /// according to clause 1.1 and clause 2.1 of RFC 7042 with the OpenAPI
  /// \&quot;nullable&#x3D; true\&quot; property.
  /// </summary>
  std::string getMacAddr48() const;
  void setMacAddr48(std::string const &value);
  bool macAddr48IsSet() const;
  void unsetMacAddr48();
  /// <summary>
  /// The additional MAC Addresses of the served UE.
  /// </summary>
  std::vector<std::string> &getAddMacAddrs();
  void setAddMacAddrs(std::vector<std::string> const &value);
  bool addMacAddrsIsSet() const;
  void unsetAddMacAddrs();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getPcfId() const;
  void setPcfId(std::string const &value);
  bool pcfIdIsSet() const;
  void unsetPcfId();
  /// <summary>
  /// Fully Qualified Domain Name
  /// </summary>
  std::string getPcfFqdn() const;
  void setPcfFqdn(std::string const &value);
  bool pcfFqdnIsSet() const;
  void unsetPcfFqdn();
  /// <summary>
  /// IP end points of the PCF hosting the Npcf_PolicyAuthorization service.
  /// </summary>
  std::vector<IpEndPoint> &getPcfIpEndPoints();
  void setPcfIpEndPoints(std::vector<IpEndPoint> const &value);
  bool pcfIpEndPointsIsSet() const;
  void unsetPcfIpEndPoints();
  /// <summary>
  /// string containing an FQDN or realm as defined in RFC 6733.
  /// </summary>
  std::string getPcfDiamHost() const;
  void setPcfDiamHost(std::string const &value);
  bool pcfDiamHostIsSet() const;
  void unsetPcfDiamHost();
  /// <summary>
  /// string containing an FQDN or realm as defined in RFC 6733.
  /// </summary>
  std::string getPcfDiamRealm() const;
  void setPcfDiamRealm(std::string const &value);
  bool pcfDiamRealmIsSet() const;
  void unsetPcfDiamRealm();

  friend void to_json(nlohmann::json &j, const PcfBindingPatch &o);
  friend void from_json(const nlohmann::json &j, PcfBindingPatch &o);

protected:
  std::string m_Ipv4Addr;
  bool m_Ipv4AddrIsSet;
  std::string m_IpDomain;
  bool m_IpDomainIsSet;
  Ipv6PrefixRm m_Ipv6Prefix;
  bool m_Ipv6PrefixIsSet;
  std::vector<Ipv6Prefix> m_AddIpv6Prefixes;
  bool m_AddIpv6PrefixesIsSet;
  std::string m_MacAddr48;
  bool m_MacAddr48IsSet;
  std::vector<std::string> m_AddMacAddrs;
  bool m_AddMacAddrsIsSet;
  std::string m_PcfId;
  bool m_PcfIdIsSet;
  std::string m_PcfFqdn;
  bool m_PcfFqdnIsSet;
  std::vector<IpEndPoint> m_PcfIpEndPoints;
  bool m_PcfIpEndPointsIsSet;
  std::string m_PcfDiamHost;
  bool m_PcfDiamHostIsSet;
  std::string m_PcfDiamRealm;
  bool m_PcfDiamRealmIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PcfBindingPatch_H_ */
