/**
 * Nnwdaf_EventsSubscription
 * Nnwdaf_EventsSubscription Service API. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "BwRequirement.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

BwRequirement::BwRequirement() {
  m_AppId = "";
  m_MarBwDl = "";
  m_MarBwDlIsSet = false;
  m_MarBwUl = "";
  m_MarBwUlIsSet = false;
  m_MirBwDl = "";
  m_MirBwDlIsSet = false;
  m_MirBwUl = "";
  m_MirBwUlIsSet = false;
}

BwRequirement::~BwRequirement() {}

void BwRequirement::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const BwRequirement &o) {
  j = nlohmann::json();
  j["appId"] = o.m_AppId;
  if (o.marBwDlIsSet())
    j["marBwDl"] = o.m_MarBwDl;
  if (o.marBwUlIsSet())
    j["marBwUl"] = o.m_MarBwUl;
  if (o.mirBwDlIsSet())
    j["mirBwDl"] = o.m_MirBwDl;
  if (o.mirBwUlIsSet())
    j["mirBwUl"] = o.m_MirBwUl;
}

void from_json(const nlohmann::json &j, BwRequirement &o) {
  j.at("appId").get_to(o.m_AppId);
  if (j.find("marBwDl") != j.end()) {
    j.at("marBwDl").get_to(o.m_MarBwDl);
    o.m_MarBwDlIsSet = true;
  }
  if (j.find("marBwUl") != j.end()) {
    j.at("marBwUl").get_to(o.m_MarBwUl);
    o.m_MarBwUlIsSet = true;
  }
  if (j.find("mirBwDl") != j.end()) {
    j.at("mirBwDl").get_to(o.m_MirBwDl);
    o.m_MirBwDlIsSet = true;
  }
  if (j.find("mirBwUl") != j.end()) {
    j.at("mirBwUl").get_to(o.m_MirBwUl);
    o.m_MirBwUlIsSet = true;
  }
}

std::string BwRequirement::getAppId() const { return m_AppId; }
void BwRequirement::setAppId(std::string const &value) { m_AppId = value; }
std::string BwRequirement::getMarBwDl() const { return m_MarBwDl; }
void BwRequirement::setMarBwDl(std::string const &value) {
  m_MarBwDl = value;
  m_MarBwDlIsSet = true;
}
bool BwRequirement::marBwDlIsSet() const { return m_MarBwDlIsSet; }
void BwRequirement::unsetMarBwDl() { m_MarBwDlIsSet = false; }
std::string BwRequirement::getMarBwUl() const { return m_MarBwUl; }
void BwRequirement::setMarBwUl(std::string const &value) {
  m_MarBwUl = value;
  m_MarBwUlIsSet = true;
}
bool BwRequirement::marBwUlIsSet() const { return m_MarBwUlIsSet; }
void BwRequirement::unsetMarBwUl() { m_MarBwUlIsSet = false; }
std::string BwRequirement::getMirBwDl() const { return m_MirBwDl; }
void BwRequirement::setMirBwDl(std::string const &value) {
  m_MirBwDl = value;
  m_MirBwDlIsSet = true;
}
bool BwRequirement::mirBwDlIsSet() const { return m_MirBwDlIsSet; }
void BwRequirement::unsetMirBwDl() { m_MirBwDlIsSet = false; }
std::string BwRequirement::getMirBwUl() const { return m_MirBwUl; }
void BwRequirement::setMirBwUl(std::string const &value) {
  m_MirBwUl = value;
  m_MirBwUlIsSet = true;
}
bool BwRequirement::mirBwUlIsSet() const { return m_MirBwUlIsSet; }
void BwRequirement::unsetMirBwUl() { m_MirBwUlIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
