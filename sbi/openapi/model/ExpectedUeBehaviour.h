/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ExpectedUeBehaviour.h
 *
 *
 */

#ifndef ExpectedUeBehaviour_H_
#define ExpectedUeBehaviour_H_

#include "BatteryIndicationRm.h"
#include "LocationArea.h"
#include "ScheduledCommunicationTimeRm.h"
#include "ScheduledCommunicationTypeRm.h"
#include "StationaryIndicationRm.h"
#include "TrafficProfileRm.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class ExpectedUeBehaviour {
public:
  ExpectedUeBehaviour();
  virtual ~ExpectedUeBehaviour();

  void validate();

  /////////////////////////////////////////////
  /// ExpectedUeBehaviour members

  /// <summary>
  ///
  /// </summary>
  std::string getAfInstanceId() const;
  void setAfInstanceId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  int32_t getReferenceId() const;
  void setReferenceId(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  StationaryIndicationRm getStationaryIndication() const;
  void setStationaryIndication(StationaryIndicationRm const &value);
  bool stationaryIndicationIsSet() const;
  void unsetStationaryIndication();
  /// <summary>
  /// indicating a time in seconds with OpenAPI defined
  /// \&quot;nullable&#x3D;true\&quot; property.
  /// </summary>
  int32_t getCommunicationDurationTime() const;
  void setCommunicationDurationTime(int32_t const value);
  bool communicationDurationTimeIsSet() const;
  void unsetCommunicationDurationTime();
  /// <summary>
  ///
  /// </summary>
  ScheduledCommunicationTypeRm getScheduledCommunicationType() const;
  void setScheduledCommunicationType(ScheduledCommunicationTypeRm const &value);
  bool scheduledCommunicationTypeIsSet() const;
  void unsetScheduledCommunicationType();
  /// <summary>
  /// indicating a time in seconds with OpenAPI defined
  /// \&quot;nullable&#x3D;true\&quot; property.
  /// </summary>
  int32_t getPeriodicTime() const;
  void setPeriodicTime(int32_t const value);
  bool periodicTimeIsSet() const;
  void unsetPeriodicTime();
  /// <summary>
  ///
  /// </summary>
  ScheduledCommunicationTimeRm getScheduledCommunicationTime() const;
  void setScheduledCommunicationTime(ScheduledCommunicationTimeRm const &value);
  bool scheduledCommunicationTimeIsSet() const;
  void unsetScheduledCommunicationTime();
  /// <summary>
  /// Identifies the UE&#39;s expected geographical movement. The attribute is
  /// only applicable in 5G.
  /// </summary>
  std::vector<LocationArea> &getExpectedUmts();
  void setExpectedUmts(std::vector<LocationArea> const &value);
  bool expectedUmtsIsSet() const;
  void unsetExpectedUmts();
  /// <summary>
  ///
  /// </summary>
  TrafficProfileRm getTrafficProfile() const;
  void setTrafficProfile(TrafficProfileRm const &value);
  bool trafficProfileIsSet() const;
  void unsetTrafficProfile();
  /// <summary>
  ///
  /// </summary>
  BatteryIndicationRm getBatteryIndication() const;
  void setBatteryIndication(BatteryIndicationRm const &value);
  bool batteryIndicationIsSet() const;
  void unsetBatteryIndication();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getValidityTime() const;
  void setValidityTime(std::string const &value);
  bool validityTimeIsSet() const;
  void unsetValidityTime();
  /// <summary>
  /// String uniquely identifying MTC provider information.
  /// </summary>
  std::string getMtcProviderInformation() const;
  void setMtcProviderInformation(std::string const &value);
  bool mtcProviderInformationIsSet() const;
  void unsetMtcProviderInformation();

  friend void to_json(nlohmann::json &j, const ExpectedUeBehaviour &o);
  friend void from_json(const nlohmann::json &j, ExpectedUeBehaviour &o);

protected:
  std::string m_AfInstanceId;

  int32_t m_ReferenceId;

  StationaryIndicationRm m_StationaryIndication;
  bool m_StationaryIndicationIsSet;
  int32_t m_CommunicationDurationTime;
  bool m_CommunicationDurationTimeIsSet;
  ScheduledCommunicationTypeRm m_ScheduledCommunicationType;
  bool m_ScheduledCommunicationTypeIsSet;
  int32_t m_PeriodicTime;
  bool m_PeriodicTimeIsSet;
  ScheduledCommunicationTimeRm m_ScheduledCommunicationTime;
  bool m_ScheduledCommunicationTimeIsSet;
  std::vector<LocationArea> m_ExpectedUmts;
  bool m_ExpectedUmtsIsSet;
  TrafficProfileRm m_TrafficProfile;
  bool m_TrafficProfileIsSet;
  BatteryIndicationRm m_BatteryIndication;
  bool m_BatteryIndicationIsSet;
  std::string m_ValidityTime;
  bool m_ValidityTimeIsSet;
  std::string m_MtcProviderInformation;
  bool m_MtcProviderInformationIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ExpectedUeBehaviour_H_ */
