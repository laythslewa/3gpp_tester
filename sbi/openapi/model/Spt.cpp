/**
 * Nhss_imsSDM
 * Nhss Subscriber Data Management Service for IMS. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "Spt.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Spt::Spt() {
  m_ConditionNegated = false;
  m_RegTypeIsSet = false;
  m_RequestUri = "";
  m_RequestUriIsSet = false;
  m_SipMethod = "";
  m_SipMethodIsSet = false;
  m_SipHeaderIsSet = false;
  m_SessionCaseIsSet = false;
  m_SessionDescriptionIsSet = false;
}

Spt::~Spt() {}

void Spt::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const Spt &o) {
  j = nlohmann::json();
  j["conditionNegated"] = o.m_ConditionNegated;
  j["sptGroup"] = o.m_SptGroup;
  if (o.regTypeIsSet() || !o.m_RegType.empty())
    j["regType"] = o.m_RegType;
  if (o.requestUriIsSet())
    j["requestUri"] = o.m_RequestUri;
  if (o.sipMethodIsSet())
    j["sipMethod"] = o.m_SipMethod;
  if (o.sipHeaderIsSet())
    j["sipHeader"] = o.m_SipHeader;
  if (o.sessionCaseIsSet())
    j["sessionCase"] = o.m_SessionCase;
  if (o.sessionDescriptionIsSet())
    j["sessionDescription"] = o.m_SessionDescription;
}

void from_json(const nlohmann::json &j, Spt &o) {
  j.at("conditionNegated").get_to(o.m_ConditionNegated);
  j.at("sptGroup").get_to(o.m_SptGroup);
  if (j.find("regType") != j.end()) {
    j.at("regType").get_to(o.m_RegType);
    o.m_RegTypeIsSet = true;
  }
  if (j.find("requestUri") != j.end()) {
    j.at("requestUri").get_to(o.m_RequestUri);
    o.m_RequestUriIsSet = true;
  }
  if (j.find("sipMethod") != j.end()) {
    j.at("sipMethod").get_to(o.m_SipMethod);
    o.m_SipMethodIsSet = true;
  }
  if (j.find("sipHeader") != j.end()) {
    j.at("sipHeader").get_to(o.m_SipHeader);
    o.m_SipHeaderIsSet = true;
  }
  if (j.find("sessionCase") != j.end()) {
    j.at("sessionCase").get_to(o.m_SessionCase);
    o.m_SessionCaseIsSet = true;
  }
  if (j.find("sessionDescription") != j.end()) {
    j.at("sessionDescription").get_to(o.m_SessionDescription);
    o.m_SessionDescriptionIsSet = true;
  }
}

bool Spt::isConditionNegated() const { return m_ConditionNegated; }
void Spt::setConditionNegated(bool const value) { m_ConditionNegated = value; }
std::vector<int32_t> &Spt::getSptGroup() { return m_SptGroup; }
void Spt::setSptGroup(std::vector<int32_t> const value) { m_SptGroup = value; }
std::vector<RegistrationType> &Spt::getRegType() { return m_RegType; }
void Spt::setRegType(std::vector<RegistrationType> const &value) {
  m_RegType = value;
  m_RegTypeIsSet = true;
}
bool Spt::regTypeIsSet() const { return m_RegTypeIsSet; }
void Spt::unsetRegType() { m_RegTypeIsSet = false; }
std::string Spt::getRequestUri() const { return m_RequestUri; }
void Spt::setRequestUri(std::string const &value) {
  m_RequestUri = value;
  m_RequestUriIsSet = true;
}
bool Spt::requestUriIsSet() const { return m_RequestUriIsSet; }
void Spt::unsetRequestUri() { m_RequestUriIsSet = false; }
std::string Spt::getSipMethod() const { return m_SipMethod; }
void Spt::setSipMethod(std::string const &value) {
  m_SipMethod = value;
  m_SipMethodIsSet = true;
}
bool Spt::sipMethodIsSet() const { return m_SipMethodIsSet; }
void Spt::unsetSipMethod() { m_SipMethodIsSet = false; }
HeaderSipRequest Spt::getSipHeader() const { return m_SipHeader; }
void Spt::setSipHeader(HeaderSipRequest const &value) {
  m_SipHeader = value;
  m_SipHeaderIsSet = true;
}
bool Spt::sipHeaderIsSet() const { return m_SipHeaderIsSet; }
void Spt::unsetSipHeader() { m_SipHeaderIsSet = false; }
RequestDirection Spt::getSessionCase() const { return m_SessionCase; }
void Spt::setSessionCase(RequestDirection const &value) {
  m_SessionCase = value;
  m_SessionCaseIsSet = true;
}
bool Spt::sessionCaseIsSet() const { return m_SessionCaseIsSet; }
void Spt::unsetSessionCase() { m_SessionCaseIsSet = false; }
SdpDescription Spt::getSessionDescription() const {
  return m_SessionDescription;
}
void Spt::setSessionDescription(SdpDescription const &value) {
  m_SessionDescription = value;
  m_SessionDescriptionIsSet = true;
}
bool Spt::sessionDescriptionIsSet() const { return m_SessionDescriptionIsSet; }
void Spt::unsetSessionDescription() { m_SessionDescriptionIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
