/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "GrantedUnit.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

GrantedUnit::GrantedUnit() {
  m_TariffTimeChange = "";
  m_TariffTimeChangeIsSet = false;
  m_Time = 0;
  m_TimeIsSet = false;
  m_TotalVolume = 0;
  m_TotalVolumeIsSet = false;
  m_UplinkVolume = 0;
  m_UplinkVolumeIsSet = false;
  m_DownlinkVolume = 0;
  m_DownlinkVolumeIsSet = false;
  m_ServiceSpecificUnits = 0;
  m_ServiceSpecificUnitsIsSet = false;
}

GrantedUnit::~GrantedUnit() {}

void GrantedUnit::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const GrantedUnit &o) {
  j = nlohmann::json();
  if (o.tariffTimeChangeIsSet())
    j["tariffTimeChange"] = o.m_TariffTimeChange;
  if (o.timeIsSet())
    j["time"] = o.m_Time;
  if (o.totalVolumeIsSet())
    j["totalVolume"] = o.m_TotalVolume;
  if (o.uplinkVolumeIsSet())
    j["uplinkVolume"] = o.m_UplinkVolume;
  if (o.downlinkVolumeIsSet())
    j["downlinkVolume"] = o.m_DownlinkVolume;
  if (o.serviceSpecificUnitsIsSet())
    j["serviceSpecificUnits"] = o.m_ServiceSpecificUnits;
}

void from_json(const nlohmann::json &j, GrantedUnit &o) {
  if (j.find("tariffTimeChange") != j.end()) {
    j.at("tariffTimeChange").get_to(o.m_TariffTimeChange);
    o.m_TariffTimeChangeIsSet = true;
  }
  if (j.find("time") != j.end()) {
    j.at("time").get_to(o.m_Time);
    o.m_TimeIsSet = true;
  }
  if (j.find("totalVolume") != j.end()) {
    j.at("totalVolume").get_to(o.m_TotalVolume);
    o.m_TotalVolumeIsSet = true;
  }
  if (j.find("uplinkVolume") != j.end()) {
    j.at("uplinkVolume").get_to(o.m_UplinkVolume);
    o.m_UplinkVolumeIsSet = true;
  }
  if (j.find("downlinkVolume") != j.end()) {
    j.at("downlinkVolume").get_to(o.m_DownlinkVolume);
    o.m_DownlinkVolumeIsSet = true;
  }
  if (j.find("serviceSpecificUnits") != j.end()) {
    j.at("serviceSpecificUnits").get_to(o.m_ServiceSpecificUnits);
    o.m_ServiceSpecificUnitsIsSet = true;
  }
}

std::string GrantedUnit::getTariffTimeChange() const {
  return m_TariffTimeChange;
}
void GrantedUnit::setTariffTimeChange(std::string const &value) {
  m_TariffTimeChange = value;
  m_TariffTimeChangeIsSet = true;
}
bool GrantedUnit::tariffTimeChangeIsSet() const {
  return m_TariffTimeChangeIsSet;
}
void GrantedUnit::unsetTariffTimeChange() { m_TariffTimeChangeIsSet = false; }
int32_t GrantedUnit::getTime() const { return m_Time; }
void GrantedUnit::setTime(int32_t const value) {
  m_Time = value;
  m_TimeIsSet = true;
}
bool GrantedUnit::timeIsSet() const { return m_TimeIsSet; }
void GrantedUnit::unsetTime() { m_TimeIsSet = false; }
int32_t GrantedUnit::getTotalVolume() const { return m_TotalVolume; }
void GrantedUnit::setTotalVolume(int32_t const value) {
  m_TotalVolume = value;
  m_TotalVolumeIsSet = true;
}
bool GrantedUnit::totalVolumeIsSet() const { return m_TotalVolumeIsSet; }
void GrantedUnit::unsetTotalVolume() { m_TotalVolumeIsSet = false; }
int32_t GrantedUnit::getUplinkVolume() const { return m_UplinkVolume; }
void GrantedUnit::setUplinkVolume(int32_t const value) {
  m_UplinkVolume = value;
  m_UplinkVolumeIsSet = true;
}
bool GrantedUnit::uplinkVolumeIsSet() const { return m_UplinkVolumeIsSet; }
void GrantedUnit::unsetUplinkVolume() { m_UplinkVolumeIsSet = false; }
int32_t GrantedUnit::getDownlinkVolume() const { return m_DownlinkVolume; }
void GrantedUnit::setDownlinkVolume(int32_t const value) {
  m_DownlinkVolume = value;
  m_DownlinkVolumeIsSet = true;
}
bool GrantedUnit::downlinkVolumeIsSet() const { return m_DownlinkVolumeIsSet; }
void GrantedUnit::unsetDownlinkVolume() { m_DownlinkVolumeIsSet = false; }
int32_t GrantedUnit::getServiceSpecificUnits() const {
  return m_ServiceSpecificUnits;
}
void GrantedUnit::setServiceSpecificUnits(int32_t const value) {
  m_ServiceSpecificUnits = value;
  m_ServiceSpecificUnitsIsSet = true;
}
bool GrantedUnit::serviceSpecificUnitsIsSet() const {
  return m_ServiceSpecificUnitsIsSet;
}
void GrantedUnit::unsetServiceSpecificUnits() {
  m_ServiceSpecificUnitsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
