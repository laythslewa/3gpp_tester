/**
 * Nhss_imsUECM
 * Nhss UE Context Management Service for IMS. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DeregistrationData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

DeregistrationData::DeregistrationData() {
  m_Impi = "";
  m_AssociatedImpisIsSet = false;
  m_EmergencyRegisteredIdentitiesIsSet = false;
}

DeregistrationData::~DeregistrationData() {}

void DeregistrationData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const DeregistrationData &o) {
  j = nlohmann::json();
  j["deregReason"] = o.m_DeregReason;
  j["impi"] = o.m_Impi;
  if (o.associatedImpisIsSet() || !o.m_AssociatedImpis.empty())
    j["associatedImpis"] = o.m_AssociatedImpis;
  if (o.emergencyRegisteredIdentitiesIsSet() ||
      !o.m_EmergencyRegisteredIdentities.empty())
    j["emergencyRegisteredIdentities"] = o.m_EmergencyRegisteredIdentities;
}

void from_json(const nlohmann::json &j, DeregistrationData &o) {
  j.at("deregReason").get_to(o.m_DeregReason);
  j.at("impi").get_to(o.m_Impi);
  if (j.find("associatedImpis") != j.end()) {
    j.at("associatedImpis").get_to(o.m_AssociatedImpis);
    o.m_AssociatedImpisIsSet = true;
  }
  if (j.find("emergencyRegisteredIdentities") != j.end()) {
    j.at("emergencyRegisteredIdentities")
        .get_to(o.m_EmergencyRegisteredIdentities);
    o.m_EmergencyRegisteredIdentitiesIsSet = true;
  }
}

DeregistrationReason DeregistrationData::getDeregReason() const {
  return m_DeregReason;
}
void DeregistrationData::setDeregReason(DeregistrationReason const &value) {
  m_DeregReason = value;
}
std::string DeregistrationData::getImpi() const { return m_Impi; }
void DeregistrationData::setImpi(std::string const &value) { m_Impi = value; }
std::vector<std::string> &DeregistrationData::getAssociatedImpis() {
  return m_AssociatedImpis;
}
void DeregistrationData::setAssociatedImpis(
    std::vector<std::string> const &value) {
  m_AssociatedImpis = value;
  m_AssociatedImpisIsSet = true;
}
bool DeregistrationData::associatedImpisIsSet() const {
  return m_AssociatedImpisIsSet;
}
void DeregistrationData::unsetAssociatedImpis() {
  m_AssociatedImpisIsSet = false;
}
std::vector<EmergencyRegisteredIdentity> &
DeregistrationData::getEmergencyRegisteredIdentities() {
  return m_EmergencyRegisteredIdentities;
}
void DeregistrationData::setEmergencyRegisteredIdentities(
    std::vector<EmergencyRegisteredIdentity> const &value) {
  m_EmergencyRegisteredIdentities = value;
  m_EmergencyRegisteredIdentitiesIsSet = true;
}
bool DeregistrationData::emergencyRegisteredIdentitiesIsSet() const {
  return m_EmergencyRegisteredIdentitiesIsSet;
}
void DeregistrationData::unsetEmergencyRegisteredIdentities() {
  m_EmergencyRegisteredIdentitiesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
