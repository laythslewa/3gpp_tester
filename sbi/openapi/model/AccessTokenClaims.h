/**
 * NRF OAuth2
 * NRF OAuth2 Authorization. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AccessTokenClaims.h
 *
 * The claims data structure for the access token
 */

#ifndef AccessTokenClaims_H_
#define AccessTokenClaims_H_

#include "AnyOfNFTypearray.h"
#include "PlmnId.h"
#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The claims data structure for the access token
/// </summary>
class AccessTokenClaims {
public:
  AccessTokenClaims();
  virtual ~AccessTokenClaims();

  void validate();

  /////////////////////////////////////////////
  /// AccessTokenClaims members

  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getIss() const;
  void setIss(std::string const &value);
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getSub() const;
  void setSub(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  AnyOfNFTypearray getAud() const;
  void setAud(AnyOfNFTypearray const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getScope() const;
  void setScope(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  int32_t getExp() const;
  void setExp(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  PlmnId getConsumerPlmnId() const;
  void setConsumerPlmnId(PlmnId const &value);
  bool consumerPlmnIdIsSet() const;
  void unsetConsumerPlmnId();
  /// <summary>
  ///
  /// </summary>
  PlmnId getProducerPlmnId() const;
  void setProducerPlmnId(PlmnId const &value);
  bool producerPlmnIdIsSet() const;
  void unsetProducerPlmnId();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getProducerSnssaiList();
  void setProducerSnssaiList(std::vector<Snssai> const &value);
  bool producerSnssaiListIsSet() const;
  void unsetProducerSnssaiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getProducerNsiList();
  void setProducerNsiList(std::vector<std::string> const &value);
  bool producerNsiListIsSet() const;
  void unsetProducerNsiList();
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getProducerNfSetId() const;
  void setProducerNfSetId(std::string const &value);
  bool producerNfSetIdIsSet() const;
  void unsetProducerNfSetId();

  friend void to_json(nlohmann::json &j, const AccessTokenClaims &o);
  friend void from_json(const nlohmann::json &j, AccessTokenClaims &o);

protected:
  std::string m_Iss;

  std::string m_Sub;

  AnyOfNFTypearray m_Aud;

  std::string m_Scope;

  int32_t m_Exp;

  PlmnId m_ConsumerPlmnId;
  bool m_ConsumerPlmnIdIsSet;
  PlmnId m_ProducerPlmnId;
  bool m_ProducerPlmnIdIsSet;
  std::vector<Snssai> m_ProducerSnssaiList;
  bool m_ProducerSnssaiListIsSet;
  std::vector<std::string> m_ProducerNsiList;
  bool m_ProducerNsiListIsSet;
  std::string m_ProducerNfSetId;
  bool m_ProducerNfSetIdIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AccessTokenClaims_H_ */
