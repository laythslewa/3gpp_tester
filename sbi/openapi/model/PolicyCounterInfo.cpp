/**
 * Nchf_SpendingLimitControl
 * Nchf Spending Limit Control Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PolicyCounterInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PolicyCounterInfo::PolicyCounterInfo() {
  m_PolicyCounterId = "";
  m_CurrentStatus = "";
  m_PenPolCounterStatusesIsSet = false;
}

PolicyCounterInfo::~PolicyCounterInfo() {}

void PolicyCounterInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PolicyCounterInfo &o) {
  j = nlohmann::json();
  j["policyCounterId"] = o.m_PolicyCounterId;
  j["currentStatus"] = o.m_CurrentStatus;
  if (o.penPolCounterStatusesIsSet() || !o.m_PenPolCounterStatuses.empty())
    j["penPolCounterStatuses"] = o.m_PenPolCounterStatuses;
}

void from_json(const nlohmann::json &j, PolicyCounterInfo &o) {
  j.at("policyCounterId").get_to(o.m_PolicyCounterId);
  j.at("currentStatus").get_to(o.m_CurrentStatus);
  if (j.find("penPolCounterStatuses") != j.end()) {
    j.at("penPolCounterStatuses").get_to(o.m_PenPolCounterStatuses);
    o.m_PenPolCounterStatusesIsSet = true;
  }
}

std::string PolicyCounterInfo::getPolicyCounterId() const {
  return m_PolicyCounterId;
}
void PolicyCounterInfo::setPolicyCounterId(std::string const &value) {
  m_PolicyCounterId = value;
}
std::string PolicyCounterInfo::getCurrentStatus() const {
  return m_CurrentStatus;
}
void PolicyCounterInfo::setCurrentStatus(std::string const &value) {
  m_CurrentStatus = value;
}
std::vector<PendingPolicyCounterStatus> &
PolicyCounterInfo::getPenPolCounterStatuses() {
  return m_PenPolCounterStatuses;
}
void PolicyCounterInfo::setPenPolCounterStatuses(
    std::vector<PendingPolicyCounterStatus> const &value) {
  m_PenPolCounterStatuses = value;
  m_PenPolCounterStatusesIsSet = true;
}
bool PolicyCounterInfo::penPolCounterStatusesIsSet() const {
  return m_PenPolCounterStatusesIsSet;
}
void PolicyCounterInfo::unsetPenPolCounterStatuses() {
  m_PenPolCounterStatusesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
