/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeCommunication.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeCommunication::UeCommunication() {
  m_CommDur = 0;
  m_CommDurVariance = 0.0f;
  m_CommDurVarianceIsSet = false;
  m_PerioTime = 0;
  m_PerioTimeIsSet = false;
  m_PerioTimeVariance = 0.0f;
  m_PerioTimeVarianceIsSet = false;
  m_Ts = "";
  m_TsIsSet = false;
  m_TsVariance = 0.0f;
  m_TsVarianceIsSet = false;
  m_RecurringTimeIsSet = false;
  m_Ratio = 0;
  m_RatioIsSet = false;
  m_Confidence = 0;
  m_ConfidenceIsSet = false;
}

UeCommunication::~UeCommunication() {}

void UeCommunication::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UeCommunication &o) {
  j = nlohmann::json();
  j["commDur"] = o.m_CommDur;
  if (o.commDurVarianceIsSet())
    j["commDurVariance"] = o.m_CommDurVariance;
  if (o.perioTimeIsSet())
    j["perioTime"] = o.m_PerioTime;
  if (o.perioTimeVarianceIsSet())
    j["perioTimeVariance"] = o.m_PerioTimeVariance;
  if (o.tsIsSet())
    j["ts"] = o.m_Ts;
  if (o.tsVarianceIsSet())
    j["tsVariance"] = o.m_TsVariance;
  if (o.recurringTimeIsSet())
    j["recurringTime"] = o.m_RecurringTime;
  j["trafChar"] = o.m_TrafChar;
  if (o.ratioIsSet())
    j["ratio"] = o.m_Ratio;
  if (o.confidenceIsSet())
    j["confidence"] = o.m_Confidence;
}

void from_json(const nlohmann::json &j, UeCommunication &o) {
  j.at("commDur").get_to(o.m_CommDur);
  if (j.find("commDurVariance") != j.end()) {
    j.at("commDurVariance").get_to(o.m_CommDurVariance);
    o.m_CommDurVarianceIsSet = true;
  }
  if (j.find("perioTime") != j.end()) {
    j.at("perioTime").get_to(o.m_PerioTime);
    o.m_PerioTimeIsSet = true;
  }
  if (j.find("perioTimeVariance") != j.end()) {
    j.at("perioTimeVariance").get_to(o.m_PerioTimeVariance);
    o.m_PerioTimeVarianceIsSet = true;
  }
  if (j.find("ts") != j.end()) {
    j.at("ts").get_to(o.m_Ts);
    o.m_TsIsSet = true;
  }
  if (j.find("tsVariance") != j.end()) {
    j.at("tsVariance").get_to(o.m_TsVariance);
    o.m_TsVarianceIsSet = true;
  }
  if (j.find("recurringTime") != j.end()) {
    j.at("recurringTime").get_to(o.m_RecurringTime);
    o.m_RecurringTimeIsSet = true;
  }
  j.at("trafChar").get_to(o.m_TrafChar);
  if (j.find("ratio") != j.end()) {
    j.at("ratio").get_to(o.m_Ratio);
    o.m_RatioIsSet = true;
  }
  if (j.find("confidence") != j.end()) {
    j.at("confidence").get_to(o.m_Confidence);
    o.m_ConfidenceIsSet = true;
  }
}

int32_t UeCommunication::getCommDur() const { return m_CommDur; }
void UeCommunication::setCommDur(int32_t const value) { m_CommDur = value; }
float UeCommunication::getCommDurVariance() const { return m_CommDurVariance; }
void UeCommunication::setCommDurVariance(float const value) {
  m_CommDurVariance = value;
  m_CommDurVarianceIsSet = true;
}
bool UeCommunication::commDurVarianceIsSet() const {
  return m_CommDurVarianceIsSet;
}
void UeCommunication::unsetCommDurVariance() { m_CommDurVarianceIsSet = false; }
int32_t UeCommunication::getPerioTime() const { return m_PerioTime; }
void UeCommunication::setPerioTime(int32_t const value) {
  m_PerioTime = value;
  m_PerioTimeIsSet = true;
}
bool UeCommunication::perioTimeIsSet() const { return m_PerioTimeIsSet; }
void UeCommunication::unsetPerioTime() { m_PerioTimeIsSet = false; }
float UeCommunication::getPerioTimeVariance() const {
  return m_PerioTimeVariance;
}
void UeCommunication::setPerioTimeVariance(float const value) {
  m_PerioTimeVariance = value;
  m_PerioTimeVarianceIsSet = true;
}
bool UeCommunication::perioTimeVarianceIsSet() const {
  return m_PerioTimeVarianceIsSet;
}
void UeCommunication::unsetPerioTimeVariance() {
  m_PerioTimeVarianceIsSet = false;
}
std::string UeCommunication::getTs() const { return m_Ts; }
void UeCommunication::setTs(std::string const &value) {
  m_Ts = value;
  m_TsIsSet = true;
}
bool UeCommunication::tsIsSet() const { return m_TsIsSet; }
void UeCommunication::unsetTs() { m_TsIsSet = false; }
float UeCommunication::getTsVariance() const { return m_TsVariance; }
void UeCommunication::setTsVariance(float const value) {
  m_TsVariance = value;
  m_TsVarianceIsSet = true;
}
bool UeCommunication::tsVarianceIsSet() const { return m_TsVarianceIsSet; }
void UeCommunication::unsetTsVariance() { m_TsVarianceIsSet = false; }
ScheduledCommunicationTime UeCommunication::getRecurringTime() const {
  return m_RecurringTime;
}
void UeCommunication::setRecurringTime(
    ScheduledCommunicationTime const &value) {
  m_RecurringTime = value;
  m_RecurringTimeIsSet = true;
}
bool UeCommunication::recurringTimeIsSet() const {
  return m_RecurringTimeIsSet;
}
void UeCommunication::unsetRecurringTime() { m_RecurringTimeIsSet = false; }
TrafficCharacterization UeCommunication::getTrafChar() const {
  return m_TrafChar;
}
void UeCommunication::setTrafChar(TrafficCharacterization const &value) {
  m_TrafChar = value;
}
int32_t UeCommunication::getRatio() const { return m_Ratio; }
void UeCommunication::setRatio(int32_t const value) {
  m_Ratio = value;
  m_RatioIsSet = true;
}
bool UeCommunication::ratioIsSet() const { return m_RatioIsSet; }
void UeCommunication::unsetRatio() { m_RatioIsSet = false; }
int32_t UeCommunication::getConfidence() const { return m_Confidence; }
void UeCommunication::setConfidence(int32_t const value) {
  m_Confidence = value;
  m_ConfidenceIsSet = true;
}
bool UeCommunication::confidenceIsSet() const { return m_ConfidenceIsSet; }
void UeCommunication::unsetConfidence() { m_ConfidenceIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
