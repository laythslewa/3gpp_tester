/**
 * N5g-ddnmf_Discovery API
 * N5g-ddnmf_Discovery Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AnnounceDiscDataForRestricted.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AnnounceDiscDataForRestricted::AnnounceDiscDataForRestricted() {
  m_Rpauid = "";
  m_AppId = "";
  m_ProseRestrictedCode = "";
  m_ProseRestrictedCodeIsSet = false;
  m_ProseRestrictedPrefix = "";
  m_ProseRestrictedPrefixIsSet = false;
  m_MetaData = "";
  m_MetaDataIsSet = false;
  m_CodeSuffixPool = "";
  m_CodeSuffixPoolIsSet = false;
}

AnnounceDiscDataForRestricted::~AnnounceDiscDataForRestricted() {}

void AnnounceDiscDataForRestricted::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AnnounceDiscDataForRestricted &o) {
  j = nlohmann::json();
  j["rpauid"] = o.m_Rpauid;
  j["appId"] = o.m_AppId;
  if (o.proseRestrictedCodeIsSet())
    j["proseRestrictedCode"] = o.m_ProseRestrictedCode;
  if (o.proseRestrictedPrefixIsSet())
    j["proseRestrictedPrefix"] = o.m_ProseRestrictedPrefix;
  if (o.metaDataIsSet())
    j["metaData"] = o.m_MetaData;
  if (o.codeSuffixPoolIsSet())
    j["codeSuffixPool"] = o.m_CodeSuffixPool;
}

void from_json(const nlohmann::json &j, AnnounceDiscDataForRestricted &o) {
  j.at("rpauid").get_to(o.m_Rpauid);
  j.at("appId").get_to(o.m_AppId);
  if (j.find("proseRestrictedCode") != j.end()) {
    j.at("proseRestrictedCode").get_to(o.m_ProseRestrictedCode);
    o.m_ProseRestrictedCodeIsSet = true;
  }
  if (j.find("proseRestrictedPrefix") != j.end()) {
    j.at("proseRestrictedPrefix").get_to(o.m_ProseRestrictedPrefix);
    o.m_ProseRestrictedPrefixIsSet = true;
  }
  if (j.find("metaData") != j.end()) {
    j.at("metaData").get_to(o.m_MetaData);
    o.m_MetaDataIsSet = true;
  }
  if (j.find("codeSuffixPool") != j.end()) {
    j.at("codeSuffixPool").get_to(o.m_CodeSuffixPool);
    o.m_CodeSuffixPoolIsSet = true;
  }
}

std::string AnnounceDiscDataForRestricted::getRpauid() const {
  return m_Rpauid;
}
void AnnounceDiscDataForRestricted::setRpauid(std::string const &value) {
  m_Rpauid = value;
}
std::string AnnounceDiscDataForRestricted::getAppId() const { return m_AppId; }
void AnnounceDiscDataForRestricted::setAppId(std::string const &value) {
  m_AppId = value;
}
std::string AnnounceDiscDataForRestricted::getProseRestrictedCode() const {
  return m_ProseRestrictedCode;
}
void AnnounceDiscDataForRestricted::setProseRestrictedCode(
    std::string const &value) {
  m_ProseRestrictedCode = value;
  m_ProseRestrictedCodeIsSet = true;
}
bool AnnounceDiscDataForRestricted::proseRestrictedCodeIsSet() const {
  return m_ProseRestrictedCodeIsSet;
}
void AnnounceDiscDataForRestricted::unsetProseRestrictedCode() {
  m_ProseRestrictedCodeIsSet = false;
}
std::string AnnounceDiscDataForRestricted::getProseRestrictedPrefix() const {
  return m_ProseRestrictedPrefix;
}
void AnnounceDiscDataForRestricted::setProseRestrictedPrefix(
    std::string const &value) {
  m_ProseRestrictedPrefix = value;
  m_ProseRestrictedPrefixIsSet = true;
}
bool AnnounceDiscDataForRestricted::proseRestrictedPrefixIsSet() const {
  return m_ProseRestrictedPrefixIsSet;
}
void AnnounceDiscDataForRestricted::unsetProseRestrictedPrefix() {
  m_ProseRestrictedPrefixIsSet = false;
}
std::string AnnounceDiscDataForRestricted::getMetaData() const {
  return m_MetaData;
}
void AnnounceDiscDataForRestricted::setMetaData(std::string const &value) {
  m_MetaData = value;
  m_MetaDataIsSet = true;
}
bool AnnounceDiscDataForRestricted::metaDataIsSet() const {
  return m_MetaDataIsSet;
}
void AnnounceDiscDataForRestricted::unsetMetaData() { m_MetaDataIsSet = false; }
std::string AnnounceDiscDataForRestricted::getCodeSuffixPool() const {
  return m_CodeSuffixPool;
}
void AnnounceDiscDataForRestricted::setCodeSuffixPool(
    std::string const &value) {
  m_CodeSuffixPool = value;
  m_CodeSuffixPoolIsSet = true;
}
bool AnnounceDiscDataForRestricted::codeSuffixPoolIsSet() const {
  return m_CodeSuffixPoolIsSet;
}
void AnnounceDiscDataForRestricted::unsetCodeSuffixPool() {
  m_CodeSuffixPoolIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
