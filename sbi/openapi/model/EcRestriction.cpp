/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EcRestriction.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EcRestriction::EcRestriction() {
  m_AfInstanceId = "";
  m_ReferenceId = 0;
  m_PlmnEcInfosIsSet = false;
  m_MtcProviderInformation = "";
  m_MtcProviderInformationIsSet = false;
}

EcRestriction::~EcRestriction() {}

void EcRestriction::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EcRestriction &o) {
  j = nlohmann::json();
  j["afInstanceId"] = o.m_AfInstanceId;
  j["referenceId"] = o.m_ReferenceId;
  if (o.plmnEcInfosIsSet() || !o.m_PlmnEcInfos.empty())
    j["plmnEcInfos"] = o.m_PlmnEcInfos;
  if (o.mtcProviderInformationIsSet())
    j["mtcProviderInformation"] = o.m_MtcProviderInformation;
}

void from_json(const nlohmann::json &j, EcRestriction &o) {
  j.at("afInstanceId").get_to(o.m_AfInstanceId);
  j.at("referenceId").get_to(o.m_ReferenceId);
  if (j.find("plmnEcInfos") != j.end()) {
    j.at("plmnEcInfos").get_to(o.m_PlmnEcInfos);
    o.m_PlmnEcInfosIsSet = true;
  }
  if (j.find("mtcProviderInformation") != j.end()) {
    j.at("mtcProviderInformation").get_to(o.m_MtcProviderInformation);
    o.m_MtcProviderInformationIsSet = true;
  }
}

std::string EcRestriction::getAfInstanceId() const { return m_AfInstanceId; }
void EcRestriction::setAfInstanceId(std::string const &value) {
  m_AfInstanceId = value;
}
int32_t EcRestriction::getReferenceId() const { return m_ReferenceId; }
void EcRestriction::setReferenceId(int32_t const value) {
  m_ReferenceId = value;
}
std::vector<PlmnEcInfo> &EcRestriction::getPlmnEcInfos() {
  return m_PlmnEcInfos;
}
void EcRestriction::setPlmnEcInfos(std::vector<PlmnEcInfo> const &value) {
  m_PlmnEcInfos = value;
  m_PlmnEcInfosIsSet = true;
}
bool EcRestriction::plmnEcInfosIsSet() const { return m_PlmnEcInfosIsSet; }
void EcRestriction::unsetPlmnEcInfos() { m_PlmnEcInfosIsSet = false; }
std::string EcRestriction::getMtcProviderInformation() const {
  return m_MtcProviderInformation;
}
void EcRestriction::setMtcProviderInformation(std::string const &value) {
  m_MtcProviderInformation = value;
  m_MtcProviderInformationIsSet = true;
}
bool EcRestriction::mtcProviderInformationIsSet() const {
  return m_MtcProviderInformationIsSet;
}
void EcRestriction::unsetMtcProviderInformation() {
  m_MtcProviderInformationIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
