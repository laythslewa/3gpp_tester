/**
 * Npcf_AMPolicyControl
 * Access and Mobility Policy Control Service. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AmRequestedValueRep.h
 *
 * Represents the current applicable values corresponding to the policy control
 * request triggers.
 */

#ifndef AmRequestedValueRep_H_
#define AmRequestedValueRep_H_

#include "AccessType.h"
#include "PresenceInfo.h"
#include "RatType.h"
#include "UserLocation.h"
#include <map>
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the current applicable values corresponding to the policy control
/// request triggers.
/// </summary>
class AmRequestedValueRep {
public:
  AmRequestedValueRep();
  virtual ~AmRequestedValueRep();

  void validate();

  /////////////////////////////////////////////
  /// AmRequestedValueRep members

  /// <summary>
  ///
  /// </summary>
  UserLocation getUserLoc() const;
  void setUserLoc(UserLocation const &value);
  bool userLocIsSet() const;
  void unsetUserLoc();
  /// <summary>
  /// Contains the UE presence statuses for tracking areas. The praId attribute
  /// within the PresenceInfo data type is the key of the map.
  /// </summary>
  std::map<std::string, PresenceInfo> &getPraStatuses();
  void setPraStatuses(std::map<std::string, PresenceInfo> const &value);
  bool praStatusesIsSet() const;
  void unsetPraStatuses();
  /// <summary>
  ///
  /// </summary>
  std::vector<AccessType> &getAccessTypes();
  void setAccessTypes(std::vector<AccessType> const &value);
  bool accessTypesIsSet() const;
  void unsetAccessTypes();
  /// <summary>
  ///
  /// </summary>
  std::vector<RatType> &getRatTypes();
  void setRatTypes(std::vector<RatType> const &value);
  bool ratTypesIsSet() const;
  void unsetRatTypes();

  friend void to_json(nlohmann::json &j, const AmRequestedValueRep &o);
  friend void from_json(const nlohmann::json &j, AmRequestedValueRep &o);

protected:
  UserLocation m_UserLoc;
  bool m_UserLocIsSet;
  std::map<std::string, PresenceInfo> m_PraStatuses;
  bool m_PraStatusesIsSet;
  std::vector<AccessType> m_AccessTypes;
  bool m_AccessTypesIsSet;
  std::vector<RatType> m_RatTypes;
  bool m_RatTypesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AmRequestedValueRep_H_ */
