/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MediaSubComponent.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

MediaSubComponent::MediaSubComponent() {
  m_AfSigProtocolIsSet = false;
  m_EthfDescsIsSet = false;
  m_FNum = 0;
  m_FDescsIsSet = false;
  m_FStatusIsSet = false;
  m_MarBwDl = "";
  m_MarBwDlIsSet = false;
  m_MarBwUl = "";
  m_MarBwUlIsSet = false;
  m_TosTrCl = "";
  m_TosTrClIsSet = false;
  m_FlowUsageIsSet = false;
}

MediaSubComponent::~MediaSubComponent() {}

void MediaSubComponent::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const MediaSubComponent &o) {
  j = nlohmann::json();
  if (o.afSigProtocolIsSet())
    j["afSigProtocol"] = o.m_AfSigProtocol;
  if (o.ethfDescsIsSet() || !o.m_EthfDescs.empty())
    j["ethfDescs"] = o.m_EthfDescs;
  j["fNum"] = o.m_FNum;
  if (o.fDescsIsSet() || !o.m_FDescs.empty())
    j["fDescs"] = o.m_FDescs;
  if (o.fStatusIsSet())
    j["fStatus"] = o.m_FStatus;
  if (o.marBwDlIsSet())
    j["marBwDl"] = o.m_MarBwDl;
  if (o.marBwUlIsSet())
    j["marBwUl"] = o.m_MarBwUl;
  if (o.tosTrClIsSet())
    j["tosTrCl"] = o.m_TosTrCl;
  if (o.flowUsageIsSet())
    j["flowUsage"] = o.m_FlowUsage;
}

void from_json(const nlohmann::json &j, MediaSubComponent &o) {
  if (j.find("afSigProtocol") != j.end()) {
    j.at("afSigProtocol").get_to(o.m_AfSigProtocol);
    o.m_AfSigProtocolIsSet = true;
  }
  if (j.find("ethfDescs") != j.end()) {
    j.at("ethfDescs").get_to(o.m_EthfDescs);
    o.m_EthfDescsIsSet = true;
  }
  j.at("fNum").get_to(o.m_FNum);
  if (j.find("fDescs") != j.end()) {
    j.at("fDescs").get_to(o.m_FDescs);
    o.m_FDescsIsSet = true;
  }
  if (j.find("fStatus") != j.end()) {
    j.at("fStatus").get_to(o.m_FStatus);
    o.m_FStatusIsSet = true;
  }
  if (j.find("marBwDl") != j.end()) {
    j.at("marBwDl").get_to(o.m_MarBwDl);
    o.m_MarBwDlIsSet = true;
  }
  if (j.find("marBwUl") != j.end()) {
    j.at("marBwUl").get_to(o.m_MarBwUl);
    o.m_MarBwUlIsSet = true;
  }
  if (j.find("tosTrCl") != j.end()) {
    j.at("tosTrCl").get_to(o.m_TosTrCl);
    o.m_TosTrClIsSet = true;
  }
  if (j.find("flowUsage") != j.end()) {
    j.at("flowUsage").get_to(o.m_FlowUsage);
    o.m_FlowUsageIsSet = true;
  }
}

AfSigProtocol MediaSubComponent::getAfSigProtocol() const {
  return m_AfSigProtocol;
}
void MediaSubComponent::setAfSigProtocol(AfSigProtocol const &value) {
  m_AfSigProtocol = value;
  m_AfSigProtocolIsSet = true;
}
bool MediaSubComponent::afSigProtocolIsSet() const {
  return m_AfSigProtocolIsSet;
}
void MediaSubComponent::unsetAfSigProtocol() { m_AfSigProtocolIsSet = false; }
std::vector<EthFlowDescription> &MediaSubComponent::getEthfDescs() {
  return m_EthfDescs;
}
void MediaSubComponent::setEthfDescs(
    std::vector<EthFlowDescription> const &value) {
  m_EthfDescs = value;
  m_EthfDescsIsSet = true;
}
bool MediaSubComponent::ethfDescsIsSet() const { return m_EthfDescsIsSet; }
void MediaSubComponent::unsetEthfDescs() { m_EthfDescsIsSet = false; }
int32_t MediaSubComponent::getFNum() const { return m_FNum; }
void MediaSubComponent::setFNum(int32_t const value) { m_FNum = value; }
std::vector<std::string> &MediaSubComponent::getFDescs() { return m_FDescs; }
void MediaSubComponent::setFDescs(std::vector<std::string> const &value) {
  m_FDescs = value;
  m_FDescsIsSet = true;
}
bool MediaSubComponent::fDescsIsSet() const { return m_FDescsIsSet; }
void MediaSubComponent::unsetFDescs() { m_FDescsIsSet = false; }
FlowStatus MediaSubComponent::getFStatus() const { return m_FStatus; }
void MediaSubComponent::setFStatus(FlowStatus const &value) {
  m_FStatus = value;
  m_FStatusIsSet = true;
}
bool MediaSubComponent::fStatusIsSet() const { return m_FStatusIsSet; }
void MediaSubComponent::unsetFStatus() { m_FStatusIsSet = false; }
std::string MediaSubComponent::getMarBwDl() const { return m_MarBwDl; }
void MediaSubComponent::setMarBwDl(std::string const &value) {
  m_MarBwDl = value;
  m_MarBwDlIsSet = true;
}
bool MediaSubComponent::marBwDlIsSet() const { return m_MarBwDlIsSet; }
void MediaSubComponent::unsetMarBwDl() { m_MarBwDlIsSet = false; }
std::string MediaSubComponent::getMarBwUl() const { return m_MarBwUl; }
void MediaSubComponent::setMarBwUl(std::string const &value) {
  m_MarBwUl = value;
  m_MarBwUlIsSet = true;
}
bool MediaSubComponent::marBwUlIsSet() const { return m_MarBwUlIsSet; }
void MediaSubComponent::unsetMarBwUl() { m_MarBwUlIsSet = false; }
std::string MediaSubComponent::getTosTrCl() const { return m_TosTrCl; }
void MediaSubComponent::setTosTrCl(std::string const &value) {
  m_TosTrCl = value;
  m_TosTrClIsSet = true;
}
bool MediaSubComponent::tosTrClIsSet() const { return m_TosTrClIsSet; }
void MediaSubComponent::unsetTosTrCl() { m_TosTrClIsSet = false; }
FlowUsage MediaSubComponent::getFlowUsage() const { return m_FlowUsage; }
void MediaSubComponent::setFlowUsage(FlowUsage const &value) {
  m_FlowUsage = value;
  m_FlowUsageIsSet = true;
}
bool MediaSubComponent::flowUsageIsSet() const { return m_FlowUsageIsSet; }
void MediaSubComponent::unsetFlowUsage() { m_FlowUsageIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
