/**
 * GMDviaMBMSbyMB2
 * API for Group Message Delivery via MBMS by MB2 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "TMGIAllocation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

TMGIAllocation::TMGIAllocation() {
  m_Self = "";
  m_SelfIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_ExternalGroupId = "";
  m_ExternalGroupIdIsSet = false;
  m_MbmsLocAreaIsSet = false;
  m_TmgiExpiration = "";
  m_TmgiExpirationIsSet = false;
}

TMGIAllocation::~TMGIAllocation() {}

void TMGIAllocation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const TMGIAllocation &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.externalGroupIdIsSet())
    j["externalGroupId"] = o.m_ExternalGroupId;
  if (o.mbmsLocAreaIsSet())
    j["mbmsLocArea"] = o.m_MbmsLocArea;
  if (o.tmgiExpirationIsSet())
    j["tmgiExpiration"] = o.m_TmgiExpiration;
}

void from_json(const nlohmann::json &j, TMGIAllocation &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("externalGroupId") != j.end()) {
    j.at("externalGroupId").get_to(o.m_ExternalGroupId);
    o.m_ExternalGroupIdIsSet = true;
  }
  if (j.find("mbmsLocArea") != j.end()) {
    j.at("mbmsLocArea").get_to(o.m_MbmsLocArea);
    o.m_MbmsLocAreaIsSet = true;
  }
  if (j.find("tmgiExpiration") != j.end()) {
    j.at("tmgiExpiration").get_to(o.m_TmgiExpiration);
    o.m_TmgiExpirationIsSet = true;
  }
}

std::string TMGIAllocation::getSelf() const { return m_Self; }
void TMGIAllocation::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool TMGIAllocation::selfIsSet() const { return m_SelfIsSet; }
void TMGIAllocation::unsetSelf() { m_SelfIsSet = false; }
std::string TMGIAllocation::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void TMGIAllocation::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool TMGIAllocation::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void TMGIAllocation::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::string TMGIAllocation::getExternalGroupId() const {
  return m_ExternalGroupId;
}
void TMGIAllocation::setExternalGroupId(std::string const &value) {
  m_ExternalGroupId = value;
  m_ExternalGroupIdIsSet = true;
}
bool TMGIAllocation::externalGroupIdIsSet() const {
  return m_ExternalGroupIdIsSet;
}
void TMGIAllocation::unsetExternalGroupId() { m_ExternalGroupIdIsSet = false; }
MbmsLocArea TMGIAllocation::getMbmsLocArea() const { return m_MbmsLocArea; }
void TMGIAllocation::setMbmsLocArea(MbmsLocArea const &value) {
  m_MbmsLocArea = value;
  m_MbmsLocAreaIsSet = true;
}
bool TMGIAllocation::mbmsLocAreaIsSet() const { return m_MbmsLocAreaIsSet; }
void TMGIAllocation::unsetMbmsLocArea() { m_MbmsLocAreaIsSet = false; }
std::string TMGIAllocation::getTmgiExpiration() const {
  return m_TmgiExpiration;
}
void TMGIAllocation::setTmgiExpiration(std::string const &value) {
  m_TmgiExpiration = value;
  m_TmgiExpirationIsSet = true;
}
bool TMGIAllocation::tmgiExpirationIsSet() const {
  return m_TmgiExpirationIsSet;
}
void TMGIAllocation::unsetTmgiExpiration() { m_TmgiExpirationIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
