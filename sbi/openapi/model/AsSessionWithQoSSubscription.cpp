/**
 * 3gpp-as-session-with-qos
 * API for setting us an AS session with required QoS. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AsSessionWithQoSSubscription.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AsSessionWithQoSSubscription::AsSessionWithQoSSubscription() {
  m_Self = "";
  m_SelfIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_Dnn = "";
  m_DnnIsSet = false;
  m_SnssaiIsSet = false;
  m_NotificationDestination = "";
  m_ExterAppId = "";
  m_ExterAppIdIsSet = false;
  m_FlowInfoIsSet = false;
  m_EthFlowInfoIsSet = false;
  m_QosReference = "";
  m_QosReferenceIsSet = false;
  m_AltQoSReferencesIsSet = false;
  m_DisUeNotif = false;
  m_DisUeNotifIsSet = false;
  m_UeIpv4Addr = "";
  m_UeIpv4AddrIsSet = false;
  m_IpDomain = "";
  m_IpDomainIsSet = false;
  m_UeIpv6Addr = "";
  m_UeIpv6AddrIsSet = false;
  m_MacAddr = "";
  m_MacAddrIsSet = false;
  m_UsageThresholdIsSet = false;
  m_SponsorInfoIsSet = false;
  m_QosMonInfoIsSet = false;
  m_LocalNotifInd = false;
  m_LocalNotifIndIsSet = false;
  m_TscQosReqIsSet = false;
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
}

AsSessionWithQoSSubscription::~AsSessionWithQoSSubscription() {}

void AsSessionWithQoSSubscription::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AsSessionWithQoSSubscription &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.dnnIsSet())
    j["dnn"] = o.m_Dnn;
  if (o.snssaiIsSet())
    j["snssai"] = o.m_Snssai;
  j["notificationDestination"] = o.m_NotificationDestination;
  if (o.exterAppIdIsSet())
    j["exterAppId"] = o.m_ExterAppId;
  if (o.flowInfoIsSet() || !o.m_FlowInfo.empty())
    j["flowInfo"] = o.m_FlowInfo;
  if (o.ethFlowInfoIsSet() || !o.m_EthFlowInfo.empty())
    j["ethFlowInfo"] = o.m_EthFlowInfo;
  if (o.qosReferenceIsSet())
    j["qosReference"] = o.m_QosReference;
  if (o.altQoSReferencesIsSet() || !o.m_AltQoSReferences.empty())
    j["altQoSReferences"] = o.m_AltQoSReferences;
  if (o.disUeNotifIsSet())
    j["disUeNotif"] = o.m_DisUeNotif;
  if (o.ueIpv4AddrIsSet())
    j["ueIpv4Addr"] = o.m_UeIpv4Addr;
  if (o.ipDomainIsSet())
    j["ipDomain"] = o.m_IpDomain;
  if (o.ueIpv6AddrIsSet())
    j["ueIpv6Addr"] = o.m_UeIpv6Addr;
  if (o.macAddrIsSet())
    j["macAddr"] = o.m_MacAddr;
  if (o.usageThresholdIsSet())
    j["usageThreshold"] = o.m_UsageThreshold;
  if (o.sponsorInfoIsSet())
    j["sponsorInfo"] = o.m_SponsorInfo;
  if (o.qosMonInfoIsSet())
    j["qosMonInfo"] = o.m_QosMonInfo;
  if (o.localNotifIndIsSet())
    j["localNotifInd"] = o.m_LocalNotifInd;
  if (o.tscQosReqIsSet())
    j["tscQosReq"] = o.m_TscQosReq;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
}

void from_json(const nlohmann::json &j, AsSessionWithQoSSubscription &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
  if (j.find("snssai") != j.end()) {
    j.at("snssai").get_to(o.m_Snssai);
    o.m_SnssaiIsSet = true;
  }
  j.at("notificationDestination").get_to(o.m_NotificationDestination);
  if (j.find("exterAppId") != j.end()) {
    j.at("exterAppId").get_to(o.m_ExterAppId);
    o.m_ExterAppIdIsSet = true;
  }
  if (j.find("flowInfo") != j.end()) {
    j.at("flowInfo").get_to(o.m_FlowInfo);
    o.m_FlowInfoIsSet = true;
  }
  if (j.find("ethFlowInfo") != j.end()) {
    j.at("ethFlowInfo").get_to(o.m_EthFlowInfo);
    o.m_EthFlowInfoIsSet = true;
  }
  if (j.find("qosReference") != j.end()) {
    j.at("qosReference").get_to(o.m_QosReference);
    o.m_QosReferenceIsSet = true;
  }
  if (j.find("altQoSReferences") != j.end()) {
    j.at("altQoSReferences").get_to(o.m_AltQoSReferences);
    o.m_AltQoSReferencesIsSet = true;
  }
  if (j.find("disUeNotif") != j.end()) {
    j.at("disUeNotif").get_to(o.m_DisUeNotif);
    o.m_DisUeNotifIsSet = true;
  }
  if (j.find("ueIpv4Addr") != j.end()) {
    j.at("ueIpv4Addr").get_to(o.m_UeIpv4Addr);
    o.m_UeIpv4AddrIsSet = true;
  }
  if (j.find("ipDomain") != j.end()) {
    j.at("ipDomain").get_to(o.m_IpDomain);
    o.m_IpDomainIsSet = true;
  }
  if (j.find("ueIpv6Addr") != j.end()) {
    j.at("ueIpv6Addr").get_to(o.m_UeIpv6Addr);
    o.m_UeIpv6AddrIsSet = true;
  }
  if (j.find("macAddr") != j.end()) {
    j.at("macAddr").get_to(o.m_MacAddr);
    o.m_MacAddrIsSet = true;
  }
  if (j.find("usageThreshold") != j.end()) {
    j.at("usageThreshold").get_to(o.m_UsageThreshold);
    o.m_UsageThresholdIsSet = true;
  }
  if (j.find("sponsorInfo") != j.end()) {
    j.at("sponsorInfo").get_to(o.m_SponsorInfo);
    o.m_SponsorInfoIsSet = true;
  }
  if (j.find("qosMonInfo") != j.end()) {
    j.at("qosMonInfo").get_to(o.m_QosMonInfo);
    o.m_QosMonInfoIsSet = true;
  }
  if (j.find("localNotifInd") != j.end()) {
    j.at("localNotifInd").get_to(o.m_LocalNotifInd);
    o.m_LocalNotifIndIsSet = true;
  }
  if (j.find("tscQosReq") != j.end()) {
    j.at("tscQosReq").get_to(o.m_TscQosReq);
    o.m_TscQosReqIsSet = true;
  }
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
}

std::string AsSessionWithQoSSubscription::getSelf() const { return m_Self; }
void AsSessionWithQoSSubscription::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool AsSessionWithQoSSubscription::selfIsSet() const { return m_SelfIsSet; }
void AsSessionWithQoSSubscription::unsetSelf() { m_SelfIsSet = false; }
std::string AsSessionWithQoSSubscription::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void AsSessionWithQoSSubscription::setSupportedFeatures(
    std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool AsSessionWithQoSSubscription::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void AsSessionWithQoSSubscription::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::string AsSessionWithQoSSubscription::getDnn() const { return m_Dnn; }
void AsSessionWithQoSSubscription::setDnn(std::string const &value) {
  m_Dnn = value;
  m_DnnIsSet = true;
}
bool AsSessionWithQoSSubscription::dnnIsSet() const { return m_DnnIsSet; }
void AsSessionWithQoSSubscription::unsetDnn() { m_DnnIsSet = false; }
Snssai AsSessionWithQoSSubscription::getSnssai() const { return m_Snssai; }
void AsSessionWithQoSSubscription::setSnssai(Snssai const &value) {
  m_Snssai = value;
  m_SnssaiIsSet = true;
}
bool AsSessionWithQoSSubscription::snssaiIsSet() const { return m_SnssaiIsSet; }
void AsSessionWithQoSSubscription::unsetSnssai() { m_SnssaiIsSet = false; }
std::string AsSessionWithQoSSubscription::getNotificationDestination() const {
  return m_NotificationDestination;
}
void AsSessionWithQoSSubscription::setNotificationDestination(
    std::string const &value) {
  m_NotificationDestination = value;
}
std::string AsSessionWithQoSSubscription::getExterAppId() const {
  return m_ExterAppId;
}
void AsSessionWithQoSSubscription::setExterAppId(std::string const &value) {
  m_ExterAppId = value;
  m_ExterAppIdIsSet = true;
}
bool AsSessionWithQoSSubscription::exterAppIdIsSet() const {
  return m_ExterAppIdIsSet;
}
void AsSessionWithQoSSubscription::unsetExterAppId() {
  m_ExterAppIdIsSet = false;
}
std::vector<FlowInfo> &AsSessionWithQoSSubscription::getFlowInfo() {
  return m_FlowInfo;
}
void AsSessionWithQoSSubscription::setFlowInfo(
    std::vector<FlowInfo> const &value) {
  m_FlowInfo = value;
  m_FlowInfoIsSet = true;
}
bool AsSessionWithQoSSubscription::flowInfoIsSet() const {
  return m_FlowInfoIsSet;
}
void AsSessionWithQoSSubscription::unsetFlowInfo() { m_FlowInfoIsSet = false; }
std::vector<EthFlowDescription> &
AsSessionWithQoSSubscription::getEthFlowInfo() {
  return m_EthFlowInfo;
}
void AsSessionWithQoSSubscription::setEthFlowInfo(
    std::vector<EthFlowDescription> const &value) {
  m_EthFlowInfo = value;
  m_EthFlowInfoIsSet = true;
}
bool AsSessionWithQoSSubscription::ethFlowInfoIsSet() const {
  return m_EthFlowInfoIsSet;
}
void AsSessionWithQoSSubscription::unsetEthFlowInfo() {
  m_EthFlowInfoIsSet = false;
}
std::string AsSessionWithQoSSubscription::getQosReference() const {
  return m_QosReference;
}
void AsSessionWithQoSSubscription::setQosReference(std::string const &value) {
  m_QosReference = value;
  m_QosReferenceIsSet = true;
}
bool AsSessionWithQoSSubscription::qosReferenceIsSet() const {
  return m_QosReferenceIsSet;
}
void AsSessionWithQoSSubscription::unsetQosReference() {
  m_QosReferenceIsSet = false;
}
std::vector<std::string> &AsSessionWithQoSSubscription::getAltQoSReferences() {
  return m_AltQoSReferences;
}
void AsSessionWithQoSSubscription::setAltQoSReferences(
    std::vector<std::string> const &value) {
  m_AltQoSReferences = value;
  m_AltQoSReferencesIsSet = true;
}
bool AsSessionWithQoSSubscription::altQoSReferencesIsSet() const {
  return m_AltQoSReferencesIsSet;
}
void AsSessionWithQoSSubscription::unsetAltQoSReferences() {
  m_AltQoSReferencesIsSet = false;
}
bool AsSessionWithQoSSubscription::isDisUeNotif() const { return m_DisUeNotif; }
void AsSessionWithQoSSubscription::setDisUeNotif(bool const value) {
  m_DisUeNotif = value;
  m_DisUeNotifIsSet = true;
}
bool AsSessionWithQoSSubscription::disUeNotifIsSet() const {
  return m_DisUeNotifIsSet;
}
void AsSessionWithQoSSubscription::unsetDisUeNotif() {
  m_DisUeNotifIsSet = false;
}
std::string AsSessionWithQoSSubscription::getUeIpv4Addr() const {
  return m_UeIpv4Addr;
}
void AsSessionWithQoSSubscription::setUeIpv4Addr(std::string const &value) {
  m_UeIpv4Addr = value;
  m_UeIpv4AddrIsSet = true;
}
bool AsSessionWithQoSSubscription::ueIpv4AddrIsSet() const {
  return m_UeIpv4AddrIsSet;
}
void AsSessionWithQoSSubscription::unsetUeIpv4Addr() {
  m_UeIpv4AddrIsSet = false;
}
std::string AsSessionWithQoSSubscription::getIpDomain() const {
  return m_IpDomain;
}
void AsSessionWithQoSSubscription::setIpDomain(std::string const &value) {
  m_IpDomain = value;
  m_IpDomainIsSet = true;
}
bool AsSessionWithQoSSubscription::ipDomainIsSet() const {
  return m_IpDomainIsSet;
}
void AsSessionWithQoSSubscription::unsetIpDomain() { m_IpDomainIsSet = false; }
std::string AsSessionWithQoSSubscription::getUeIpv6Addr() const {
  return m_UeIpv6Addr;
}
void AsSessionWithQoSSubscription::setUeIpv6Addr(std::string const &value) {
  m_UeIpv6Addr = value;
  m_UeIpv6AddrIsSet = true;
}
bool AsSessionWithQoSSubscription::ueIpv6AddrIsSet() const {
  return m_UeIpv6AddrIsSet;
}
void AsSessionWithQoSSubscription::unsetUeIpv6Addr() {
  m_UeIpv6AddrIsSet = false;
}
std::string AsSessionWithQoSSubscription::getMacAddr() const {
  return m_MacAddr;
}
void AsSessionWithQoSSubscription::setMacAddr(std::string const &value) {
  m_MacAddr = value;
  m_MacAddrIsSet = true;
}
bool AsSessionWithQoSSubscription::macAddrIsSet() const {
  return m_MacAddrIsSet;
}
void AsSessionWithQoSSubscription::unsetMacAddr() { m_MacAddrIsSet = false; }
UsageThreshold AsSessionWithQoSSubscription::getUsageThreshold() const {
  return m_UsageThreshold;
}
void AsSessionWithQoSSubscription::setUsageThreshold(
    UsageThreshold const &value) {
  m_UsageThreshold = value;
  m_UsageThresholdIsSet = true;
}
bool AsSessionWithQoSSubscription::usageThresholdIsSet() const {
  return m_UsageThresholdIsSet;
}
void AsSessionWithQoSSubscription::unsetUsageThreshold() {
  m_UsageThresholdIsSet = false;
}
SponsorInformation AsSessionWithQoSSubscription::getSponsorInfo() const {
  return m_SponsorInfo;
}
void AsSessionWithQoSSubscription::setSponsorInfo(
    SponsorInformation const &value) {
  m_SponsorInfo = value;
  m_SponsorInfoIsSet = true;
}
bool AsSessionWithQoSSubscription::sponsorInfoIsSet() const {
  return m_SponsorInfoIsSet;
}
void AsSessionWithQoSSubscription::unsetSponsorInfo() {
  m_SponsorInfoIsSet = false;
}
QosMonitoringInformation AsSessionWithQoSSubscription::getQosMonInfo() const {
  return m_QosMonInfo;
}
void AsSessionWithQoSSubscription::setQosMonInfo(
    QosMonitoringInformation const &value) {
  m_QosMonInfo = value;
  m_QosMonInfoIsSet = true;
}
bool AsSessionWithQoSSubscription::qosMonInfoIsSet() const {
  return m_QosMonInfoIsSet;
}
void AsSessionWithQoSSubscription::unsetQosMonInfo() {
  m_QosMonInfoIsSet = false;
}
bool AsSessionWithQoSSubscription::isLocalNotifInd() const {
  return m_LocalNotifInd;
}
void AsSessionWithQoSSubscription::setLocalNotifInd(bool const value) {
  m_LocalNotifInd = value;
  m_LocalNotifIndIsSet = true;
}
bool AsSessionWithQoSSubscription::localNotifIndIsSet() const {
  return m_LocalNotifIndIsSet;
}
void AsSessionWithQoSSubscription::unsetLocalNotifInd() {
  m_LocalNotifIndIsSet = false;
}
TscQosRequirement AsSessionWithQoSSubscription::getTscQosReq() const {
  return m_TscQosReq;
}
void AsSessionWithQoSSubscription::setTscQosReq(
    TscQosRequirement const &value) {
  m_TscQosReq = value;
  m_TscQosReqIsSet = true;
}
bool AsSessionWithQoSSubscription::tscQosReqIsSet() const {
  return m_TscQosReqIsSet;
}
void AsSessionWithQoSSubscription::unsetTscQosReq() {
  m_TscQosReqIsSet = false;
}
bool AsSessionWithQoSSubscription::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void AsSessionWithQoSSubscription::setRequestTestNotification(
    bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool AsSessionWithQoSSubscription::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void AsSessionWithQoSSubscription::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig AsSessionWithQoSSubscription::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void AsSessionWithQoSSubscription::setWebsockNotifConfig(
    WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool AsSessionWithQoSSubscription::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void AsSessionWithQoSSubscription::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
