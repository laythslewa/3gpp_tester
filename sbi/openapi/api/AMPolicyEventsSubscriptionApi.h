/**
 * 3gpp-am-policyauthorization
 * API for AM policy authorization. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AMPolicyEventsSubscriptionApi.h
 *
 *
 */

#ifndef AMPolicyEventsSubscriptionApi_H_
#define AMPolicyEventsSubscriptionApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "AmEventsSubscData.h"
#include "AmEventsSubscRespData.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class AMPolicyEventsSubscriptionApi {
public:
  AMPolicyEventsSubscriptionApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~AMPolicyEventsSubscriptionApi() {}
  void init();

  const std::string base = "/3gpp-am-policyauthorization/v1";

private:
  void setupRoutes();

  void delete_am_events_subsc_handler(const Pistache::Rest::Request &request,
                                      Pistache::Http::ResponseWriter response);
  void update_am_events_subsc_handler(const Pistache::Rest::Request &request,
                                      Pistache::Http::ResponseWriter response);
  void am_policy_events_subscription_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// deletes the AM Policy Events Subscription sub-resource
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="afId">Identifier of the AF</param>
  /// <param name="appAmContextId">string identifying the Individual Application
  /// AM Context resource.</param>
  virtual void
  delete_am_events_subsc(const std::string &afId,
                         const std::string &appAmContextId,
                         Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// creates or modifies an AM Policy Events Subscription sub-resource.
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="afId">Identifier of the AF</param>
  /// <param name="appAmContextId">string identifying the AM Policy Events
  /// Subscription subresource</param> <param name="amEventsSubscData">Creation
  /// or modification of an application AM Policy Events Subscription
  /// sub-resource.</param>
  virtual void
  update_am_events_subsc(const std::string &afId,
                         const std::string &appAmContextId,
                         const AmEventsSubscData &amEventsSubscData,
                         Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AMPolicyEventsSubscriptionApi_H_ */
