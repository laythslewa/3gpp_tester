/**
 * Unified Data Repository Service API file for Application Data
 * The API version is defined in 3GPP TS 29.504 © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TrafficInfluData.h
 *
 * Represents the Traffic Influence Data.
 */

#ifndef TrafficInfluData_H_
#define TrafficInfluData_H_

#include "DnaiChangeType.h"
#include "EthFlowDescription.h"
#include "FlowInfo.h"
#include "NetworkAreaInfo.h"
#include "RouteToLocation.h"
#include "Snssai.h"
#include "SubscribedEvent.h"
#include "TemporalValidity.h"
#include "UserPlaneLatencyRequirements.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the Traffic Influence Data.
/// </summary>
class TrafficInfluData {
public:
  TrafficInfluData();
  virtual ~TrafficInfluData();

  void validate();

  /////////////////////////////////////////////
  /// TrafficInfluData members

  /// <summary>
  /// Contains the Notification Correlation Id allocated by the NEF for the UP
  /// path change notification.
  /// </summary>
  std::string getUpPathChgNotifCorreId() const;
  void setUpPathChgNotifCorreId(std::string const &value);
  bool upPathChgNotifCorreIdIsSet() const;
  void unsetUpPathChgNotifCorreId();
  /// <summary>
  /// Identifies whether an application can be relocated once a location of the
  /// application has been selected.
  /// </summary>
  bool isAppReloInd() const;
  void setAppReloInd(bool const value);
  bool appReloIndIsSet() const;
  void unsetAppReloInd();
  /// <summary>
  /// Identifies an application.
  /// </summary>
  std::string getAfAppId() const;
  void setAfAppId(std::string const &value);
  bool afAppIdIsSet() const;
  void unsetAfAppId();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  /// Identifies Ethernet packet filters. Either \&quot;trafficFilters\&quot; or
  /// \&quot;ethTrafficFilters\&quot; shall be included if applicable.
  /// </summary>
  std::vector<EthFlowDescription> &getEthTrafficFilters();
  void setEthTrafficFilters(std::vector<EthFlowDescription> const &value);
  bool ethTrafficFiltersIsSet() const;
  void unsetEthTrafficFilters();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  /// String identifying a group of devices network internal globally unique ID
  /// which identifies a set of IMSIs, as specified in clause 19.9 of 3GPP
  /// TS 23.003.
  /// </summary>
  std::string getInterGroupId() const;
  void setInterGroupId(std::string const &value);
  bool interGroupIdIsSet() const;
  void unsetInterGroupId();
  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  /// Identifies IP packet filters. Either \&quot;trafficFilters\&quot; or
  /// \&quot;ethTrafficFilters\&quot; shall be included if applicable.
  /// </summary>
  std::vector<FlowInfo> &getTrafficFilters();
  void setTrafficFilters(std::vector<FlowInfo> const &value);
  bool trafficFiltersIsSet() const;
  void unsetTrafficFilters();
  /// <summary>
  /// Identifies the N6 traffic routing requirement.
  /// </summary>
  std::vector<RouteToLocation> &getTrafficRoutes();
  void setTrafficRoutes(std::vector<RouteToLocation> const &value);
  bool trafficRoutesIsSet() const;
  void unsetTrafficRoutes();
  /// <summary>
  ///
  /// </summary>
  bool isTraffCorreInd() const;
  void setTraffCorreInd(bool const value);
  bool traffCorreIndIsSet() const;
  void unsetTraffCorreInd();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getValidStartTime() const;
  void setValidStartTime(std::string const &value);
  bool validStartTimeIsSet() const;
  void unsetValidStartTime();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getValidEndTime() const;
  void setValidEndTime(std::string const &value);
  bool validEndTimeIsSet() const;
  void unsetValidEndTime();
  /// <summary>
  /// Identifies the temporal validities for the N6 traffic routing requirement.
  /// </summary>
  std::vector<TemporalValidity> &getTempValidities();
  void setTempValidities(std::vector<TemporalValidity> const &value);
  bool tempValiditiesIsSet() const;
  void unsetTempValidities();
  /// <summary>
  ///
  /// </summary>
  NetworkAreaInfo getNwAreaInfo() const;
  void setNwAreaInfo(NetworkAreaInfo const &value);
  bool nwAreaInfoIsSet() const;
  void unsetNwAreaInfo();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getUpPathChgNotifUri() const;
  void setUpPathChgNotifUri(std::string const &value);
  bool upPathChgNotifUriIsSet() const;
  void unsetUpPathChgNotifUri();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getHeaders();
  void setHeaders(std::vector<std::string> const &value);
  bool headersIsSet() const;
  void unsetHeaders();
  /// <summary>
  ///
  /// </summary>
  std::vector<SubscribedEvent> &getSubscribedEvents();
  void setSubscribedEvents(std::vector<SubscribedEvent> const &value);
  bool subscribedEventsIsSet() const;
  void unsetSubscribedEvents();
  /// <summary>
  ///
  /// </summary>
  DnaiChangeType getDnaiChgType() const;
  void setDnaiChgType(DnaiChangeType const &value);
  bool dnaiChgTypeIsSet() const;
  void unsetDnaiChgType();
  /// <summary>
  ///
  /// </summary>
  bool isAfAckInd() const;
  void setAfAckInd(bool const value);
  bool afAckIndIsSet() const;
  void unsetAfAckInd();
  /// <summary>
  ///
  /// </summary>
  bool isAddrPreserInd() const;
  void setAddrPreserInd(bool const value);
  bool addrPreserIndIsSet() const;
  void unsetAddrPreserInd();
  /// <summary>
  ///
  /// </summary>
  UserPlaneLatencyRequirements getUpLatReq() const;
  void setUpLatReq(UserPlaneLatencyRequirements const &value);
  bool upLatReqIsSet() const;
  void unsetUpLatReq();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getResUri() const;
  void setResUri(std::string const &value);
  bool resUriIsSet() const;
  void unsetResUri();

  friend void to_json(nlohmann::json &j, const TrafficInfluData &o);
  friend void from_json(const nlohmann::json &j, TrafficInfluData &o);

protected:
  std::string m_UpPathChgNotifCorreId;
  bool m_UpPathChgNotifCorreIdIsSet;
  bool m_AppReloInd;
  bool m_AppReloIndIsSet;
  std::string m_AfAppId;
  bool m_AfAppIdIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  std::vector<EthFlowDescription> m_EthTrafficFilters;
  bool m_EthTrafficFiltersIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  std::string m_InterGroupId;
  bool m_InterGroupIdIsSet;
  std::string m_Supi;
  bool m_SupiIsSet;
  std::vector<FlowInfo> m_TrafficFilters;
  bool m_TrafficFiltersIsSet;
  std::vector<RouteToLocation> m_TrafficRoutes;
  bool m_TrafficRoutesIsSet;
  bool m_TraffCorreInd;
  bool m_TraffCorreIndIsSet;
  std::string m_ValidStartTime;
  bool m_ValidStartTimeIsSet;
  std::string m_ValidEndTime;
  bool m_ValidEndTimeIsSet;
  std::vector<TemporalValidity> m_TempValidities;
  bool m_TempValiditiesIsSet;
  NetworkAreaInfo m_NwAreaInfo;
  bool m_NwAreaInfoIsSet;
  std::string m_UpPathChgNotifUri;
  bool m_UpPathChgNotifUriIsSet;
  std::vector<std::string> m_Headers;
  bool m_HeadersIsSet;
  std::vector<SubscribedEvent> m_SubscribedEvents;
  bool m_SubscribedEventsIsSet;
  DnaiChangeType m_DnaiChgType;
  bool m_DnaiChgTypeIsSet;
  bool m_AfAckInd;
  bool m_AfAckIndIsSet;
  bool m_AddrPreserInd;
  bool m_AddrPreserIndIsSet;
  UserPlaneLatencyRequirements m_UpLatReq;
  bool m_UpLatReqIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::string m_ResUri;
  bool m_ResUriIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* TrafficInfluData_H_ */
