/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SessionRule.h
 *
 * Contains session level policy information.
 */

#ifndef SessionRule_H_
#define SessionRule_H_

#include "Ambr.h"
#include "AuthorizedDefaultQos.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains session level policy information.
/// </summary>
class SessionRule {
public:
  SessionRule();
  virtual ~SessionRule();

  void validate();

  /////////////////////////////////////////////
  /// SessionRule members

  /// <summary>
  ///
  /// </summary>
  Ambr getAuthSessAmbr() const;
  void setAuthSessAmbr(Ambr const &value);
  bool authSessAmbrIsSet() const;
  void unsetAuthSessAmbr();
  /// <summary>
  ///
  /// </summary>
  AuthorizedDefaultQos getAuthDefQos() const;
  void setAuthDefQos(AuthorizedDefaultQos const &value);
  bool authDefQosIsSet() const;
  void unsetAuthDefQos();
  /// <summary>
  /// Univocally identifies the session rule within a PDU session.
  /// </summary>
  std::string getSessRuleId() const;
  void setSessRuleId(std::string const &value);
  /// <summary>
  /// A reference to UsageMonitoringData policy decision type. It is the umId
  /// described in subclause 5.6.2.12.
  /// </summary>
  std::string getRefUmData() const;
  void setRefUmData(std::string const &value);
  bool refUmDataIsSet() const;
  void unsetRefUmData();
  /// <summary>
  /// A reference to UsageMonitoringData policy decision type to apply for
  /// Non-3GPP access. It is the umId described in subclause 5.6.2.12.
  /// </summary>
  std::string getRefUmN3gData() const;
  void setRefUmN3gData(std::string const &value);
  bool refUmN3gDataIsSet() const;
  void unsetRefUmN3gData();
  /// <summary>
  /// A reference to the condition data. It is the condId described in
  /// subclause 5.6.2.9.
  /// </summary>
  std::string getRefCondData() const;
  void setRefCondData(std::string const &value);
  bool refCondDataIsSet() const;
  void unsetRefCondData();

  friend void to_json(nlohmann::json &j, const SessionRule &o);
  friend void from_json(const nlohmann::json &j, SessionRule &o);

protected:
  Ambr m_AuthSessAmbr;
  bool m_AuthSessAmbrIsSet;
  AuthorizedDefaultQos m_AuthDefQos;
  bool m_AuthDefQosIsSet;
  std::string m_SessRuleId;

  std::string m_RefUmData;
  bool m_RefUmDataIsSet;
  std::string m_RefUmN3gData;
  bool m_RefUmN3gDataIsSet;
  std::string m_RefCondData;
  bool m_RefCondDataIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SessionRule_H_ */
