/**
 * LMF Location
 * LMF Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RelativeCartesianLocation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RelativeCartesianLocation::RelativeCartesianLocation() {
  m_x = 0.0f;
  m_y = 0.0f;
  m_z = 0.0f;
  m_zIsSet = false;
}

RelativeCartesianLocation::~RelativeCartesianLocation() {}

void RelativeCartesianLocation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const RelativeCartesianLocation &o) {
  j = nlohmann::json();
  j["x"] = o.m_x;
  j["y"] = o.m_y;
  if (o.ZIsSet())
    j["z"] = o.m_z;
}

void from_json(const nlohmann::json &j, RelativeCartesianLocation &o) {
  j.at("x").get_to(o.m_x);
  j.at("y").get_to(o.m_y);
  if (j.find("z") != j.end()) {
    j.at("z").get_to(o.m_z);
    o.m_zIsSet = true;
  }
}

float RelativeCartesianLocation::getX() const { return m_x; }
void RelativeCartesianLocation::setX(float const value) { m_x = value; }
float RelativeCartesianLocation::getY() const { return m_y; }
void RelativeCartesianLocation::setY(float const value) { m_y = value; }
float RelativeCartesianLocation::getZ() const { return m_z; }
void RelativeCartesianLocation::setZ(float const value) {
  m_z = value;
  m_zIsSet = true;
}
bool RelativeCartesianLocation::ZIsSet() const { return m_zIsSet; }
void RelativeCartesianLocation::unsetz() { m_zIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
