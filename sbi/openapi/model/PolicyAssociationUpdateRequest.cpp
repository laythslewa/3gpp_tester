/**
 * Npcf_UEPolicyControl
 * UE Policy Control Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PolicyAssociationUpdateRequest.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PolicyAssociationUpdateRequest::PolicyAssociationUpdateRequest() {
  m_NotificationUri = "";
  m_NotificationUriIsSet = false;
  m_AltNotifIpv4AddrsIsSet = false;
  m_AltNotifIpv6AddrsIsSet = false;
  m_AltNotifFqdnsIsSet = false;
  m_TriggersIsSet = false;
  m_PraStatusesIsSet = false;
  m_UserLocIsSet = false;
  m_UePolDelResultIsSet = false;
  m_UePolTransFailNotifIsSet = false;
  m_UePolReqIsSet = false;
  m_GuamiIsSet = false;
  m_ServingNfId = "";
  m_ServingNfIdIsSet = false;
  m_PlmnIdIsSet = false;
  m_ConnectStateIsSet = false;
  m_GroupIdsIsSet = false;
}

PolicyAssociationUpdateRequest::~PolicyAssociationUpdateRequest() {}

void PolicyAssociationUpdateRequest::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PolicyAssociationUpdateRequest &o) {
  j = nlohmann::json();
  if (o.notificationUriIsSet())
    j["notificationUri"] = o.m_NotificationUri;
  if (o.altNotifIpv4AddrsIsSet() || !o.m_AltNotifIpv4Addrs.empty())
    j["altNotifIpv4Addrs"] = o.m_AltNotifIpv4Addrs;
  if (o.altNotifIpv6AddrsIsSet() || !o.m_AltNotifIpv6Addrs.empty())
    j["altNotifIpv6Addrs"] = o.m_AltNotifIpv6Addrs;
  if (o.altNotifFqdnsIsSet() || !o.m_AltNotifFqdns.empty())
    j["altNotifFqdns"] = o.m_AltNotifFqdns;
  if (o.triggersIsSet() || !o.m_Triggers.empty())
    j["triggers"] = o.m_Triggers;
  if (o.praStatusesIsSet() || !o.m_PraStatuses.empty())
    j["praStatuses"] = o.m_PraStatuses;
  if (o.userLocIsSet())
    j["userLoc"] = o.m_UserLoc;
  if (o.uePolDelResultIsSet())
    j["uePolDelResult"] = o.m_UePolDelResult;
  if (o.uePolTransFailNotifIsSet())
    j["uePolTransFailNotif"] = o.m_UePolTransFailNotif;
  if (o.uePolReqIsSet())
    j["uePolReq"] = o.m_UePolReq;
  if (o.guamiIsSet())
    j["guami"] = o.m_Guami;
  if (o.servingNfIdIsSet())
    j["servingNfId"] = o.m_ServingNfId;
  if (o.plmnIdIsSet())
    j["plmnId"] = o.m_PlmnId;
  if (o.connectStateIsSet())
    j["connectState"] = o.m_ConnectState;
  if (o.groupIdsIsSet() || !o.m_GroupIds.empty())
    j["groupIds"] = o.m_GroupIds;
}

void from_json(const nlohmann::json &j, PolicyAssociationUpdateRequest &o) {
  if (j.find("notificationUri") != j.end()) {
    j.at("notificationUri").get_to(o.m_NotificationUri);
    o.m_NotificationUriIsSet = true;
  }
  if (j.find("altNotifIpv4Addrs") != j.end()) {
    j.at("altNotifIpv4Addrs").get_to(o.m_AltNotifIpv4Addrs);
    o.m_AltNotifIpv4AddrsIsSet = true;
  }
  if (j.find("altNotifIpv6Addrs") != j.end()) {
    j.at("altNotifIpv6Addrs").get_to(o.m_AltNotifIpv6Addrs);
    o.m_AltNotifIpv6AddrsIsSet = true;
  }
  if (j.find("altNotifFqdns") != j.end()) {
    j.at("altNotifFqdns").get_to(o.m_AltNotifFqdns);
    o.m_AltNotifFqdnsIsSet = true;
  }
  if (j.find("triggers") != j.end()) {
    j.at("triggers").get_to(o.m_Triggers);
    o.m_TriggersIsSet = true;
  }
  if (j.find("praStatuses") != j.end()) {
    j.at("praStatuses").get_to(o.m_PraStatuses);
    o.m_PraStatusesIsSet = true;
  }
  if (j.find("userLoc") != j.end()) {
    j.at("userLoc").get_to(o.m_UserLoc);
    o.m_UserLocIsSet = true;
  }
  if (j.find("uePolDelResult") != j.end()) {
    j.at("uePolDelResult").get_to(o.m_UePolDelResult);
    o.m_UePolDelResultIsSet = true;
  }
  if (j.find("uePolTransFailNotif") != j.end()) {
    j.at("uePolTransFailNotif").get_to(o.m_UePolTransFailNotif);
    o.m_UePolTransFailNotifIsSet = true;
  }
  if (j.find("uePolReq") != j.end()) {
    j.at("uePolReq").get_to(o.m_UePolReq);
    o.m_UePolReqIsSet = true;
  }
  if (j.find("guami") != j.end()) {
    j.at("guami").get_to(o.m_Guami);
    o.m_GuamiIsSet = true;
  }
  if (j.find("servingNfId") != j.end()) {
    j.at("servingNfId").get_to(o.m_ServingNfId);
    o.m_ServingNfIdIsSet = true;
  }
  if (j.find("plmnId") != j.end()) {
    j.at("plmnId").get_to(o.m_PlmnId);
    o.m_PlmnIdIsSet = true;
  }
  if (j.find("connectState") != j.end()) {
    j.at("connectState").get_to(o.m_ConnectState);
    o.m_ConnectStateIsSet = true;
  }
  if (j.find("groupIds") != j.end()) {
    j.at("groupIds").get_to(o.m_GroupIds);
    o.m_GroupIdsIsSet = true;
  }
}

std::string PolicyAssociationUpdateRequest::getNotificationUri() const {
  return m_NotificationUri;
}
void PolicyAssociationUpdateRequest::setNotificationUri(
    std::string const &value) {
  m_NotificationUri = value;
  m_NotificationUriIsSet = true;
}
bool PolicyAssociationUpdateRequest::notificationUriIsSet() const {
  return m_NotificationUriIsSet;
}
void PolicyAssociationUpdateRequest::unsetNotificationUri() {
  m_NotificationUriIsSet = false;
}
std::vector<std::string> &
PolicyAssociationUpdateRequest::getAltNotifIpv4Addrs() {
  return m_AltNotifIpv4Addrs;
}
void PolicyAssociationUpdateRequest::setAltNotifIpv4Addrs(
    std::vector<std::string> const &value) {
  m_AltNotifIpv4Addrs = value;
  m_AltNotifIpv4AddrsIsSet = true;
}
bool PolicyAssociationUpdateRequest::altNotifIpv4AddrsIsSet() const {
  return m_AltNotifIpv4AddrsIsSet;
}
void PolicyAssociationUpdateRequest::unsetAltNotifIpv4Addrs() {
  m_AltNotifIpv4AddrsIsSet = false;
}
std::vector<Ipv6Addr> &PolicyAssociationUpdateRequest::getAltNotifIpv6Addrs() {
  return m_AltNotifIpv6Addrs;
}
void PolicyAssociationUpdateRequest::setAltNotifIpv6Addrs(
    std::vector<Ipv6Addr> const &value) {
  m_AltNotifIpv6Addrs = value;
  m_AltNotifIpv6AddrsIsSet = true;
}
bool PolicyAssociationUpdateRequest::altNotifIpv6AddrsIsSet() const {
  return m_AltNotifIpv6AddrsIsSet;
}
void PolicyAssociationUpdateRequest::unsetAltNotifIpv6Addrs() {
  m_AltNotifIpv6AddrsIsSet = false;
}
std::vector<std::string> &PolicyAssociationUpdateRequest::getAltNotifFqdns() {
  return m_AltNotifFqdns;
}
void PolicyAssociationUpdateRequest::setAltNotifFqdns(
    std::vector<std::string> const &value) {
  m_AltNotifFqdns = value;
  m_AltNotifFqdnsIsSet = true;
}
bool PolicyAssociationUpdateRequest::altNotifFqdnsIsSet() const {
  return m_AltNotifFqdnsIsSet;
}
void PolicyAssociationUpdateRequest::unsetAltNotifFqdns() {
  m_AltNotifFqdnsIsSet = false;
}
std::vector<RequestTrigger> &PolicyAssociationUpdateRequest::getTriggers() {
  return m_Triggers;
}
void PolicyAssociationUpdateRequest::setTriggers(
    std::vector<RequestTrigger> const &value) {
  m_Triggers = value;
  m_TriggersIsSet = true;
}
bool PolicyAssociationUpdateRequest::triggersIsSet() const {
  return m_TriggersIsSet;
}
void PolicyAssociationUpdateRequest::unsetTriggers() {
  m_TriggersIsSet = false;
}
std::map<std::string, PresenceInfo> &
PolicyAssociationUpdateRequest::getPraStatuses() {
  return m_PraStatuses;
}
void PolicyAssociationUpdateRequest::setPraStatuses(
    std::map<std::string, PresenceInfo> const &value) {
  m_PraStatuses = value;
  m_PraStatusesIsSet = true;
}
bool PolicyAssociationUpdateRequest::praStatusesIsSet() const {
  return m_PraStatusesIsSet;
}
void PolicyAssociationUpdateRequest::unsetPraStatuses() {
  m_PraStatusesIsSet = false;
}
UserLocation PolicyAssociationUpdateRequest::getUserLoc() const {
  return m_UserLoc;
}
void PolicyAssociationUpdateRequest::setUserLoc(UserLocation const &value) {
  m_UserLoc = value;
  m_UserLocIsSet = true;
}
bool PolicyAssociationUpdateRequest::userLocIsSet() const {
  return m_UserLocIsSet;
}
void PolicyAssociationUpdateRequest::unsetUserLoc() { m_UserLocIsSet = false; }
std::string PolicyAssociationUpdateRequest::getUePolDelResult() const {
  return m_UePolDelResult;
}
void PolicyAssociationUpdateRequest::setUePolDelResult(
    std::string const &value) {
  m_UePolDelResult = value;
  m_UePolDelResultIsSet = true;
}
bool PolicyAssociationUpdateRequest::uePolDelResultIsSet() const {
  return m_UePolDelResultIsSet;
}
void PolicyAssociationUpdateRequest::unsetUePolDelResult() {
  m_UePolDelResultIsSet = false;
}
UePolicyTransferFailureNotification
PolicyAssociationUpdateRequest::getUePolTransFailNotif() const {
  return m_UePolTransFailNotif;
}
void PolicyAssociationUpdateRequest::setUePolTransFailNotif(
    UePolicyTransferFailureNotification const &value) {
  m_UePolTransFailNotif = value;
  m_UePolTransFailNotifIsSet = true;
}
bool PolicyAssociationUpdateRequest::uePolTransFailNotifIsSet() const {
  return m_UePolTransFailNotifIsSet;
}
void PolicyAssociationUpdateRequest::unsetUePolTransFailNotif() {
  m_UePolTransFailNotifIsSet = false;
}
std::string PolicyAssociationUpdateRequest::getUePolReq() const {
  return m_UePolReq;
}
void PolicyAssociationUpdateRequest::setUePolReq(std::string const &value) {
  m_UePolReq = value;
  m_UePolReqIsSet = true;
}
bool PolicyAssociationUpdateRequest::uePolReqIsSet() const {
  return m_UePolReqIsSet;
}
void PolicyAssociationUpdateRequest::unsetUePolReq() {
  m_UePolReqIsSet = false;
}
Guami PolicyAssociationUpdateRequest::getGuami() const { return m_Guami; }
void PolicyAssociationUpdateRequest::setGuami(Guami const &value) {
  m_Guami = value;
  m_GuamiIsSet = true;
}
bool PolicyAssociationUpdateRequest::guamiIsSet() const { return m_GuamiIsSet; }
void PolicyAssociationUpdateRequest::unsetGuami() { m_GuamiIsSet = false; }
std::string PolicyAssociationUpdateRequest::getServingNfId() const {
  return m_ServingNfId;
}
void PolicyAssociationUpdateRequest::setServingNfId(std::string const &value) {
  m_ServingNfId = value;
  m_ServingNfIdIsSet = true;
}
bool PolicyAssociationUpdateRequest::servingNfIdIsSet() const {
  return m_ServingNfIdIsSet;
}
void PolicyAssociationUpdateRequest::unsetServingNfId() {
  m_ServingNfIdIsSet = false;
}
PlmnId PolicyAssociationUpdateRequest::getPlmnId() const { return m_PlmnId; }
void PolicyAssociationUpdateRequest::setPlmnId(PlmnId const &value) {
  m_PlmnId = value;
  m_PlmnIdIsSet = true;
}
bool PolicyAssociationUpdateRequest::plmnIdIsSet() const {
  return m_PlmnIdIsSet;
}
void PolicyAssociationUpdateRequest::unsetPlmnId() { m_PlmnIdIsSet = false; }
CmState PolicyAssociationUpdateRequest::getConnectState() const {
  return m_ConnectState;
}
void PolicyAssociationUpdateRequest::setConnectState(CmState const &value) {
  m_ConnectState = value;
  m_ConnectStateIsSet = true;
}
bool PolicyAssociationUpdateRequest::connectStateIsSet() const {
  return m_ConnectStateIsSet;
}
void PolicyAssociationUpdateRequest::unsetConnectState() {
  m_ConnectStateIsSet = false;
}
std::vector<std::string> &PolicyAssociationUpdateRequest::getGroupIds() {
  return m_GroupIds;
}
void PolicyAssociationUpdateRequest::setGroupIds(
    std::vector<std::string> const &value) {
  m_GroupIds = value;
  m_GroupIdsIsSet = true;
}
bool PolicyAssociationUpdateRequest::groupIdsIsSet() const {
  return m_GroupIdsIsSet;
}
void PolicyAssociationUpdateRequest::unsetGroupIds() {
  m_GroupIdsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
