/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PdnConnectionInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PdnConnectionInformation::PdnConnectionInformation() {
  m_Apn = "";
  m_ApnIsSet = false;
  m_InterfaceIndIsSet = false;
  m_Ipv4Addr = "";
  m_Ipv4AddrIsSet = false;
  m_Ipv6AddrsIsSet = false;
}

PdnConnectionInformation::~PdnConnectionInformation() {}

void PdnConnectionInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PdnConnectionInformation &o) {
  j = nlohmann::json();
  j["status"] = o.m_Status;
  if (o.apnIsSet())
    j["apn"] = o.m_Apn;
  j["pdnType"] = o.m_PdnType;
  if (o.interfaceIndIsSet())
    j["interfaceInd"] = o.m_InterfaceInd;
  if (o.ipv4AddrIsSet())
    j["ipv4Addr"] = o.m_Ipv4Addr;
  if (o.ipv6AddrsIsSet() || !o.m_Ipv6Addrs.empty())
    j["ipv6Addrs"] = o.m_Ipv6Addrs;
}

void from_json(const nlohmann::json &j, PdnConnectionInformation &o) {
  j.at("status").get_to(o.m_Status);
  if (j.find("apn") != j.end()) {
    j.at("apn").get_to(o.m_Apn);
    o.m_ApnIsSet = true;
  }
  j.at("pdnType").get_to(o.m_PdnType);
  if (j.find("interfaceInd") != j.end()) {
    j.at("interfaceInd").get_to(o.m_InterfaceInd);
    o.m_InterfaceIndIsSet = true;
  }
  if (j.find("ipv4Addr") != j.end()) {
    j.at("ipv4Addr").get_to(o.m_Ipv4Addr);
    o.m_Ipv4AddrIsSet = true;
  }
  if (j.find("ipv6Addrs") != j.end()) {
    j.at("ipv6Addrs").get_to(o.m_Ipv6Addrs);
    o.m_Ipv6AddrsIsSet = true;
  }
}

PdnConnectionStatus PdnConnectionInformation::getStatus() const {
  return m_Status;
}
void PdnConnectionInformation::setStatus(PdnConnectionStatus const &value) {
  m_Status = value;
}
std::string PdnConnectionInformation::getApn() const { return m_Apn; }
void PdnConnectionInformation::setApn(std::string const &value) {
  m_Apn = value;
  m_ApnIsSet = true;
}
bool PdnConnectionInformation::apnIsSet() const { return m_ApnIsSet; }
void PdnConnectionInformation::unsetApn() { m_ApnIsSet = false; }
PdnType PdnConnectionInformation::getPdnType() const { return m_PdnType; }
void PdnConnectionInformation::setPdnType(PdnType const &value) {
  m_PdnType = value;
}
InterfaceIndication PdnConnectionInformation::getInterfaceInd() const {
  return m_InterfaceInd;
}
void PdnConnectionInformation::setInterfaceInd(
    InterfaceIndication const &value) {
  m_InterfaceInd = value;
  m_InterfaceIndIsSet = true;
}
bool PdnConnectionInformation::interfaceIndIsSet() const {
  return m_InterfaceIndIsSet;
}
void PdnConnectionInformation::unsetInterfaceInd() {
  m_InterfaceIndIsSet = false;
}
std::string PdnConnectionInformation::getIpv4Addr() const { return m_Ipv4Addr; }
void PdnConnectionInformation::setIpv4Addr(std::string const &value) {
  m_Ipv4Addr = value;
  m_Ipv4AddrIsSet = true;
}
bool PdnConnectionInformation::ipv4AddrIsSet() const { return m_Ipv4AddrIsSet; }
void PdnConnectionInformation::unsetIpv4Addr() { m_Ipv4AddrIsSet = false; }
std::vector<std::string> &PdnConnectionInformation::getIpv6Addrs() {
  return m_Ipv6Addrs;
}
void PdnConnectionInformation::setIpv6Addrs(
    std::vector<std::string> const &value) {
  m_Ipv6Addrs = value;
  m_Ipv6AddrsIsSet = true;
}
bool PdnConnectionInformation::ipv6AddrsIsSet() const {
  return m_Ipv6AddrsIsSet;
}
void PdnConnectionInformation::unsetIpv6Addrs() { m_Ipv6AddrsIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
