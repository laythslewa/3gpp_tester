/**
 * Nnwdaf_EventsSubscription
 * Nnwdaf_EventsSubscription Service API. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NfLoadLevelInformation.h
 *
 * Represents load level information of a given NF instance.
 */

#ifndef NfLoadLevelInformation_H_
#define NfLoadLevelInformation_H_

#include "NFType.h"
#include "NfStatus.h"
#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents load level information of a given NF instance.
/// </summary>
class NfLoadLevelInformation {
public:
  NfLoadLevelInformation();
  virtual ~NfLoadLevelInformation();

  void validate();

  /////////////////////////////////////////////
  /// NfLoadLevelInformation members

  /// <summary>
  ///
  /// </summary>
  NFType getNfType() const;
  void setNfType(NFType const &value);
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getNfInstanceId() const;
  void setNfInstanceId(std::string const &value);
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getNfSetId() const;
  void setNfSetId(std::string const &value);
  bool nfSetIdIsSet() const;
  void unsetNfSetId();
  /// <summary>
  ///
  /// </summary>
  NfStatus getNfStatus() const;
  void setNfStatus(NfStatus const &value);
  bool nfStatusIsSet() const;
  void unsetNfStatus();
  /// <summary>
  ///
  /// </summary>
  int32_t getNfCpuUsage() const;
  void setNfCpuUsage(int32_t const value);
  bool nfCpuUsageIsSet() const;
  void unsetNfCpuUsage();
  /// <summary>
  ///
  /// </summary>
  int32_t getNfMemoryUsage() const;
  void setNfMemoryUsage(int32_t const value);
  bool nfMemoryUsageIsSet() const;
  void unsetNfMemoryUsage();
  /// <summary>
  ///
  /// </summary>
  int32_t getNfStorageUsage() const;
  void setNfStorageUsage(int32_t const value);
  bool nfStorageUsageIsSet() const;
  void unsetNfStorageUsage();
  /// <summary>
  ///
  /// </summary>
  int32_t getNfLoadLevelAverage() const;
  void setNfLoadLevelAverage(int32_t const value);
  bool nfLoadLevelAverageIsSet() const;
  void unsetNfLoadLevelAverage();
  /// <summary>
  ///
  /// </summary>
  int32_t getNfLoadLevelpeak() const;
  void setNfLoadLevelpeak(int32_t const value);
  bool nfLoadLevelpeakIsSet() const;
  void unsetNfLoadLevelpeak();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getConfidence() const;
  void setConfidence(int32_t const value);
  bool confidenceIsSet() const;
  void unsetConfidence();

  friend void to_json(nlohmann::json &j, const NfLoadLevelInformation &o);
  friend void from_json(const nlohmann::json &j, NfLoadLevelInformation &o);

protected:
  NFType m_NfType;

  std::string m_NfInstanceId;

  std::string m_NfSetId;
  bool m_NfSetIdIsSet;
  NfStatus m_NfStatus;
  bool m_NfStatusIsSet;
  int32_t m_NfCpuUsage;
  bool m_NfCpuUsageIsSet;
  int32_t m_NfMemoryUsage;
  bool m_NfMemoryUsageIsSet;
  int32_t m_NfStorageUsage;
  bool m_NfStorageUsageIsSet;
  int32_t m_NfLoadLevelAverage;
  bool m_NfLoadLevelAverageIsSet;
  int32_t m_NfLoadLevelpeak;
  bool m_NfLoadLevelpeakIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  int32_t m_Confidence;
  bool m_ConfidenceIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NfLoadLevelInformation_H_ */
