/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ScpInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ScpInfo::ScpInfo() {
  m_ScpDomainInfoListIsSet = false;
  m_ScpPrefix = "";
  m_ScpPrefixIsSet = false;
  m_ScpPortsIsSet = false;
  m_AddressDomainsIsSet = false;
  m_Ipv4AddressesIsSet = false;
  m_Ipv6PrefixesIsSet = false;
  m_Ipv4AddrRangesIsSet = false;
  m_Ipv6PrefixRangesIsSet = false;
  m_ServedNfSetIdListIsSet = false;
  m_RemotePlmnListIsSet = false;
  m_IpReachabilityIsSet = false;
  m_ScpCapabilitiesIsSet = false;
}

ScpInfo::~ScpInfo() {}

void ScpInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ScpInfo &o) {
  j = nlohmann::json();
  if (o.scpDomainInfoListIsSet() || !o.m_ScpDomainInfoList.empty())
    j["scpDomainInfoList"] = o.m_ScpDomainInfoList;
  if (o.scpPrefixIsSet())
    j["scpPrefix"] = o.m_ScpPrefix;
  if (o.scpPortsIsSet() || !o.m_ScpPorts.empty())
    j["scpPorts"] = o.m_ScpPorts;
  if (o.addressDomainsIsSet() || !o.m_AddressDomains.empty())
    j["addressDomains"] = o.m_AddressDomains;
  if (o.ipv4AddressesIsSet() || !o.m_Ipv4Addresses.empty())
    j["ipv4Addresses"] = o.m_Ipv4Addresses;
  if (o.ipv6PrefixesIsSet() || !o.m_Ipv6Prefixes.empty())
    j["ipv6Prefixes"] = o.m_Ipv6Prefixes;
  if (o.ipv4AddrRangesIsSet() || !o.m_Ipv4AddrRanges.empty())
    j["ipv4AddrRanges"] = o.m_Ipv4AddrRanges;
  if (o.ipv6PrefixRangesIsSet() || !o.m_Ipv6PrefixRanges.empty())
    j["ipv6PrefixRanges"] = o.m_Ipv6PrefixRanges;
  if (o.servedNfSetIdListIsSet() || !o.m_ServedNfSetIdList.empty())
    j["servedNfSetIdList"] = o.m_ServedNfSetIdList;
  if (o.remotePlmnListIsSet() || !o.m_RemotePlmnList.empty())
    j["remotePlmnList"] = o.m_RemotePlmnList;
  if (o.ipReachabilityIsSet())
    j["ipReachability"] = o.m_IpReachability;
  if (o.scpCapabilitiesIsSet() || !o.m_ScpCapabilities.empty())
    j["scpCapabilities"] = o.m_ScpCapabilities;
}

void from_json(const nlohmann::json &j, ScpInfo &o) {
  if (j.find("scpDomainInfoList") != j.end()) {
    j.at("scpDomainInfoList").get_to(o.m_ScpDomainInfoList);
    o.m_ScpDomainInfoListIsSet = true;
  }
  if (j.find("scpPrefix") != j.end()) {
    j.at("scpPrefix").get_to(o.m_ScpPrefix);
    o.m_ScpPrefixIsSet = true;
  }
  if (j.find("scpPorts") != j.end()) {
    j.at("scpPorts").get_to(o.m_ScpPorts);
    o.m_ScpPortsIsSet = true;
  }
  if (j.find("addressDomains") != j.end()) {
    j.at("addressDomains").get_to(o.m_AddressDomains);
    o.m_AddressDomainsIsSet = true;
  }
  if (j.find("ipv4Addresses") != j.end()) {
    j.at("ipv4Addresses").get_to(o.m_Ipv4Addresses);
    o.m_Ipv4AddressesIsSet = true;
  }
  if (j.find("ipv6Prefixes") != j.end()) {
    j.at("ipv6Prefixes").get_to(o.m_Ipv6Prefixes);
    o.m_Ipv6PrefixesIsSet = true;
  }
  if (j.find("ipv4AddrRanges") != j.end()) {
    j.at("ipv4AddrRanges").get_to(o.m_Ipv4AddrRanges);
    o.m_Ipv4AddrRangesIsSet = true;
  }
  if (j.find("ipv6PrefixRanges") != j.end()) {
    j.at("ipv6PrefixRanges").get_to(o.m_Ipv6PrefixRanges);
    o.m_Ipv6PrefixRangesIsSet = true;
  }
  if (j.find("servedNfSetIdList") != j.end()) {
    j.at("servedNfSetIdList").get_to(o.m_ServedNfSetIdList);
    o.m_ServedNfSetIdListIsSet = true;
  }
  if (j.find("remotePlmnList") != j.end()) {
    j.at("remotePlmnList").get_to(o.m_RemotePlmnList);
    o.m_RemotePlmnListIsSet = true;
  }
  if (j.find("ipReachability") != j.end()) {
    j.at("ipReachability").get_to(o.m_IpReachability);
    o.m_IpReachabilityIsSet = true;
  }
  if (j.find("scpCapabilities") != j.end()) {
    j.at("scpCapabilities").get_to(o.m_ScpCapabilities);
    o.m_ScpCapabilitiesIsSet = true;
  }
}

std::map<std::string, std::vector<ScpDomainInfo>> &
ScpInfo::getScpDomainInfoList() {
  return m_ScpDomainInfoList;
}
void ScpInfo::setScpDomainInfoList(
    std::map<std::string, std::vector<ScpDomainInfo>> const &value) {
  m_ScpDomainInfoList = value;
  m_ScpDomainInfoListIsSet = true;
}
bool ScpInfo::scpDomainInfoListIsSet() const {
  return m_ScpDomainInfoListIsSet;
}
void ScpInfo::unsetScpDomainInfoList() { m_ScpDomainInfoListIsSet = false; }
std::string ScpInfo::getScpPrefix() const { return m_ScpPrefix; }
void ScpInfo::setScpPrefix(std::string const &value) {
  m_ScpPrefix = value;
  m_ScpPrefixIsSet = true;
}
bool ScpInfo::scpPrefixIsSet() const { return m_ScpPrefixIsSet; }
void ScpInfo::unsetScpPrefix() { m_ScpPrefixIsSet = false; }
std::map<std::string, int32_t> &ScpInfo::getScpPorts() { return m_ScpPorts; }
void ScpInfo::setScpPorts(std::map<std::string, int32_t> const value) {
  m_ScpPorts = value;
  m_ScpPortsIsSet = true;
}
bool ScpInfo::scpPortsIsSet() const { return m_ScpPortsIsSet; }
void ScpInfo::unsetScpPorts() { m_ScpPortsIsSet = false; }
std::vector<std::string> &ScpInfo::getAddressDomains() {
  return m_AddressDomains;
}
void ScpInfo::setAddressDomains(std::vector<std::string> const &value) {
  m_AddressDomains = value;
  m_AddressDomainsIsSet = true;
}
bool ScpInfo::addressDomainsIsSet() const { return m_AddressDomainsIsSet; }
void ScpInfo::unsetAddressDomains() { m_AddressDomainsIsSet = false; }
std::vector<std::string> &ScpInfo::getIpv4Addresses() {
  return m_Ipv4Addresses;
}
void ScpInfo::setIpv4Addresses(std::vector<std::string> const &value) {
  m_Ipv4Addresses = value;
  m_Ipv4AddressesIsSet = true;
}
bool ScpInfo::ipv4AddressesIsSet() const { return m_Ipv4AddressesIsSet; }
void ScpInfo::unsetIpv4Addresses() { m_Ipv4AddressesIsSet = false; }
std::vector<Ipv6Prefix> &ScpInfo::getIpv6Prefixes() { return m_Ipv6Prefixes; }
void ScpInfo::setIpv6Prefixes(std::vector<Ipv6Prefix> const &value) {
  m_Ipv6Prefixes = value;
  m_Ipv6PrefixesIsSet = true;
}
bool ScpInfo::ipv6PrefixesIsSet() const { return m_Ipv6PrefixesIsSet; }
void ScpInfo::unsetIpv6Prefixes() { m_Ipv6PrefixesIsSet = false; }
std::vector<Ipv4AddressRange> &ScpInfo::getIpv4AddrRanges() {
  return m_Ipv4AddrRanges;
}
void ScpInfo::setIpv4AddrRanges(std::vector<Ipv4AddressRange> const &value) {
  m_Ipv4AddrRanges = value;
  m_Ipv4AddrRangesIsSet = true;
}
bool ScpInfo::ipv4AddrRangesIsSet() const { return m_Ipv4AddrRangesIsSet; }
void ScpInfo::unsetIpv4AddrRanges() { m_Ipv4AddrRangesIsSet = false; }
std::vector<Ipv6PrefixRange> &ScpInfo::getIpv6PrefixRanges() {
  return m_Ipv6PrefixRanges;
}
void ScpInfo::setIpv6PrefixRanges(std::vector<Ipv6PrefixRange> const &value) {
  m_Ipv6PrefixRanges = value;
  m_Ipv6PrefixRangesIsSet = true;
}
bool ScpInfo::ipv6PrefixRangesIsSet() const { return m_Ipv6PrefixRangesIsSet; }
void ScpInfo::unsetIpv6PrefixRanges() { m_Ipv6PrefixRangesIsSet = false; }
std::vector<std::string> &ScpInfo::getServedNfSetIdList() {
  return m_ServedNfSetIdList;
}
void ScpInfo::setServedNfSetIdList(std::vector<std::string> const &value) {
  m_ServedNfSetIdList = value;
  m_ServedNfSetIdListIsSet = true;
}
bool ScpInfo::servedNfSetIdListIsSet() const {
  return m_ServedNfSetIdListIsSet;
}
void ScpInfo::unsetServedNfSetIdList() { m_ServedNfSetIdListIsSet = false; }
std::vector<PlmnId> &ScpInfo::getRemotePlmnList() { return m_RemotePlmnList; }
void ScpInfo::setRemotePlmnList(std::vector<PlmnId> const &value) {
  m_RemotePlmnList = value;
  m_RemotePlmnListIsSet = true;
}
bool ScpInfo::remotePlmnListIsSet() const { return m_RemotePlmnListIsSet; }
void ScpInfo::unsetRemotePlmnList() { m_RemotePlmnListIsSet = false; }
IpReachability ScpInfo::getIpReachability() const { return m_IpReachability; }
void ScpInfo::setIpReachability(IpReachability const &value) {
  m_IpReachability = value;
  m_IpReachabilityIsSet = true;
}
bool ScpInfo::ipReachabilityIsSet() const { return m_IpReachabilityIsSet; }
void ScpInfo::unsetIpReachability() { m_IpReachabilityIsSet = false; }
std::vector<ScpCapability> &ScpInfo::getScpCapabilities() {
  return m_ScpCapabilities;
}
void ScpInfo::setScpCapabilities(std::vector<ScpCapability> const &value) {
  m_ScpCapabilities = value;
  m_ScpCapabilitiesIsSet = true;
}
bool ScpInfo::scpCapabilitiesIsSet() const { return m_ScpCapabilitiesIsSet; }
void ScpInfo::unsetScpCapabilities() { m_ScpCapabilitiesIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
