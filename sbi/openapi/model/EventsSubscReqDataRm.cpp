/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EventsSubscReqDataRm.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EventsSubscReqDataRm::EventsSubscReqDataRm() {
  m_NotifUri = "";
  m_NotifUriIsSet = false;
  m_ReqQosMonParamsIsSet = false;
  m_QosMonIsSet = false;
  m_ReqAnisIsSet = false;
  m_UsgThresIsSet = false;
  m_NotifCorreId = "";
  m_NotifCorreIdIsSet = false;
  m_DirectNotifInd = false;
  m_DirectNotifIndIsSet = false;
}

EventsSubscReqDataRm::~EventsSubscReqDataRm() {}

void EventsSubscReqDataRm::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EventsSubscReqDataRm &o) {
  j = nlohmann::json();
  j["events"] = o.m_Events;
  if (o.notifUriIsSet())
    j["notifUri"] = o.m_NotifUri;
  if (o.reqQosMonParamsIsSet() || !o.m_ReqQosMonParams.empty())
    j["reqQosMonParams"] = o.m_ReqQosMonParams;
  if (o.qosMonIsSet())
    j["qosMon"] = o.m_QosMon;
  if (o.reqAnisIsSet() || !o.m_ReqAnis.empty())
    j["reqAnis"] = o.m_ReqAnis;
  if (o.usgThresIsSet())
    j["usgThres"] = o.m_UsgThres;
  if (o.notifCorreIdIsSet())
    j["notifCorreId"] = o.m_NotifCorreId;
  if (o.directNotifIndIsSet())
    j["directNotifInd"] = o.m_DirectNotifInd;
}

void from_json(const nlohmann::json &j, EventsSubscReqDataRm &o) {
  j.at("events").get_to(o.m_Events);
  if (j.find("notifUri") != j.end()) {
    j.at("notifUri").get_to(o.m_NotifUri);
    o.m_NotifUriIsSet = true;
  }
  if (j.find("reqQosMonParams") != j.end()) {
    j.at("reqQosMonParams").get_to(o.m_ReqQosMonParams);
    o.m_ReqQosMonParamsIsSet = true;
  }
  if (j.find("qosMon") != j.end()) {
    j.at("qosMon").get_to(o.m_QosMon);
    o.m_QosMonIsSet = true;
  }
  if (j.find("reqAnis") != j.end()) {
    j.at("reqAnis").get_to(o.m_ReqAnis);
    o.m_ReqAnisIsSet = true;
  }
  if (j.find("usgThres") != j.end()) {
    j.at("usgThres").get_to(o.m_UsgThres);
    o.m_UsgThresIsSet = true;
  }
  if (j.find("notifCorreId") != j.end()) {
    j.at("notifCorreId").get_to(o.m_NotifCorreId);
    o.m_NotifCorreIdIsSet = true;
  }
  if (j.find("directNotifInd") != j.end()) {
    j.at("directNotifInd").get_to(o.m_DirectNotifInd);
    o.m_DirectNotifIndIsSet = true;
  }
}

std::vector<AfEventSubscription> &EventsSubscReqDataRm::getEvents() {
  return m_Events;
}
void EventsSubscReqDataRm::setEvents(
    std::vector<AfEventSubscription> const &value) {
  m_Events = value;
}
std::string EventsSubscReqDataRm::getNotifUri() const { return m_NotifUri; }
void EventsSubscReqDataRm::setNotifUri(std::string const &value) {
  m_NotifUri = value;
  m_NotifUriIsSet = true;
}
bool EventsSubscReqDataRm::notifUriIsSet() const { return m_NotifUriIsSet; }
void EventsSubscReqDataRm::unsetNotifUri() { m_NotifUriIsSet = false; }
std::vector<RequestedQosMonitoringParameter> &
EventsSubscReqDataRm::getReqQosMonParams() {
  return m_ReqQosMonParams;
}
void EventsSubscReqDataRm::setReqQosMonParams(
    std::vector<RequestedQosMonitoringParameter> const &value) {
  m_ReqQosMonParams = value;
  m_ReqQosMonParamsIsSet = true;
}
bool EventsSubscReqDataRm::reqQosMonParamsIsSet() const {
  return m_ReqQosMonParamsIsSet;
}
void EventsSubscReqDataRm::unsetReqQosMonParams() {
  m_ReqQosMonParamsIsSet = false;
}
QosMonitoringInformationRm EventsSubscReqDataRm::getQosMon() const {
  return m_QosMon;
}
void EventsSubscReqDataRm::setQosMon(QosMonitoringInformationRm const &value) {
  m_QosMon = value;
  m_QosMonIsSet = true;
}
bool EventsSubscReqDataRm::qosMonIsSet() const { return m_QosMonIsSet; }
void EventsSubscReqDataRm::unsetQosMon() { m_QosMonIsSet = false; }
std::vector<RequiredAccessInfo> &EventsSubscReqDataRm::getReqAnis() {
  return m_ReqAnis;
}
void EventsSubscReqDataRm::setReqAnis(
    std::vector<RequiredAccessInfo> const &value) {
  m_ReqAnis = value;
  m_ReqAnisIsSet = true;
}
bool EventsSubscReqDataRm::reqAnisIsSet() const { return m_ReqAnisIsSet; }
void EventsSubscReqDataRm::unsetReqAnis() { m_ReqAnisIsSet = false; }
UsageThresholdRm EventsSubscReqDataRm::getUsgThres() const {
  return m_UsgThres;
}
void EventsSubscReqDataRm::setUsgThres(UsageThresholdRm const &value) {
  m_UsgThres = value;
  m_UsgThresIsSet = true;
}
bool EventsSubscReqDataRm::usgThresIsSet() const { return m_UsgThresIsSet; }
void EventsSubscReqDataRm::unsetUsgThres() { m_UsgThresIsSet = false; }
std::string EventsSubscReqDataRm::getNotifCorreId() const {
  return m_NotifCorreId;
}
void EventsSubscReqDataRm::setNotifCorreId(std::string const &value) {
  m_NotifCorreId = value;
  m_NotifCorreIdIsSet = true;
}
bool EventsSubscReqDataRm::notifCorreIdIsSet() const {
  return m_NotifCorreIdIsSet;
}
void EventsSubscReqDataRm::unsetNotifCorreId() { m_NotifCorreIdIsSet = false; }
bool EventsSubscReqDataRm::isDirectNotifInd() const { return m_DirectNotifInd; }
void EventsSubscReqDataRm::setDirectNotifInd(bool const value) {
  m_DirectNotifInd = value;
  m_DirectNotifIndIsSet = true;
}
bool EventsSubscReqDataRm::directNotifIndIsSet() const {
  return m_DirectNotifIndIsSet;
}
void EventsSubscReqDataRm::unsetDirectNotifInd() {
  m_DirectNotifIndIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
