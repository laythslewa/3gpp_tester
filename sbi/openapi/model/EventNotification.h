/**
 * 3gpp-traffic-influence
 * API for AF traffic influence Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EventNotification.h
 *
 * Represents a traffic influence event notification.
 */

#ifndef EventNotification_H_
#define EventNotification_H_

#include "DnaiChangeType.h"
#include "Ipv6Prefix.h"
#include "RouteToLocation.h"
#include "SubscribedEvent.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a traffic influence event notification.
/// </summary>
class EventNotification {
public:
  EventNotification();
  virtual ~EventNotification();

  void validate();

  /////////////////////////////////////////////
  /// EventNotification members

  /// <summary>
  /// Identifies an NEF Northbound interface transaction, generated by the AF.
  /// </summary>
  std::string getAfTransId() const;
  void setAfTransId(std::string const &value);
  bool afTransIdIsSet() const;
  void unsetAfTransId();
  /// <summary>
  ///
  /// </summary>
  DnaiChangeType getDnaiChgType() const;
  void setDnaiChgType(DnaiChangeType const &value);
  /// <summary>
  ///
  /// </summary>
  RouteToLocation getSourceTrafficRoute() const;
  void setSourceTrafficRoute(RouteToLocation const &value);
  bool sourceTrafficRouteIsSet() const;
  void unsetSourceTrafficRoute();
  /// <summary>
  ///
  /// </summary>
  SubscribedEvent getSubscribedEvent() const;
  void setSubscribedEvent(SubscribedEvent const &value);
  /// <summary>
  ///
  /// </summary>
  RouteToLocation getTargetTrafficRoute() const;
  void setTargetTrafficRoute(RouteToLocation const &value);
  bool targetTrafficRouteIsSet() const;
  void unsetTargetTrafficRoute();
  /// <summary>
  /// DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.
  /// </summary>
  std::string getSourceDnai() const;
  void setSourceDnai(std::string const &value);
  bool sourceDnaiIsSet() const;
  void unsetSourceDnai();
  /// <summary>
  /// DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.
  /// </summary>
  std::string getTargetDnai() const;
  void setTargetDnai(std::string const &value);
  bool targetDnaiIsSet() const;
  void unsetTargetDnai();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// string identifying a Ipv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in IETF RFC 1166.
  /// </summary>
  std::string getSrcUeIpv4Addr() const;
  void setSrcUeIpv4Addr(std::string const &value);
  bool srcUeIpv4AddrIsSet() const;
  void unsetSrcUeIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Prefix getSrcUeIpv6Prefix() const;
  void setSrcUeIpv6Prefix(Ipv6Prefix const &value);
  bool srcUeIpv6PrefixIsSet() const;
  void unsetSrcUeIpv6Prefix();
  /// <summary>
  /// string identifying a Ipv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in IETF RFC 1166.
  /// </summary>
  std::string getTgtUeIpv4Addr() const;
  void setTgtUeIpv4Addr(std::string const &value);
  bool tgtUeIpv4AddrIsSet() const;
  void unsetTgtUeIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Prefix getTgtUeIpv6Prefix() const;
  void setTgtUeIpv6Prefix(Ipv6Prefix const &value);
  bool tgtUeIpv6PrefixIsSet() const;
  void unsetTgtUeIpv6Prefix();
  /// <summary>
  /// String identifying a MAC address formatted in the hexadecimal notation
  /// according to clause 1.1 and clause 2.1 of RFC 7042
  /// </summary>
  std::string getUeMac() const;
  void setUeMac(std::string const &value);
  bool ueMacIsSet() const;
  void unsetUeMac();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getAfAckUri() const;
  void setAfAckUri(std::string const &value);
  bool afAckUriIsSet() const;
  void unsetAfAckUri();

  friend void to_json(nlohmann::json &j, const EventNotification &o);
  friend void from_json(const nlohmann::json &j, EventNotification &o);

protected:
  std::string m_AfTransId;
  bool m_AfTransIdIsSet;
  DnaiChangeType m_DnaiChgType;

  RouteToLocation m_SourceTrafficRoute;
  bool m_SourceTrafficRouteIsSet;
  SubscribedEvent m_SubscribedEvent;

  RouteToLocation m_TargetTrafficRoute;
  bool m_TargetTrafficRouteIsSet;
  std::string m_SourceDnai;
  bool m_SourceDnaiIsSet;
  std::string m_TargetDnai;
  bool m_TargetDnaiIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_SrcUeIpv4Addr;
  bool m_SrcUeIpv4AddrIsSet;
  Ipv6Prefix m_SrcUeIpv6Prefix;
  bool m_SrcUeIpv6PrefixIsSet;
  std::string m_TgtUeIpv4Addr;
  bool m_TgtUeIpv4AddrIsSet;
  Ipv6Prefix m_TgtUeIpv6Prefix;
  bool m_TgtUeIpv6PrefixIsSet;
  std::string m_UeMac;
  bool m_UeMacIsSet;
  std::string m_AfAckUri;
  bool m_AfAckUriIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* EventNotification_H_ */
