/**
 * 3gpp-iptvconfiguration
 * API for IPTV configuration. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualIPTVConfigurationApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

IndividualIPTVConfigurationApi::IndividualIPTVConfigurationApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void IndividualIPTVConfigurationApi::init() { setupRoutes(); }

void IndividualIPTVConfigurationApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Delete(
      *router, base + "/:afId/configurations/:configurationId",
      Routes::bind(&IndividualIPTVConfigurationApi::
                       af_id_configurations_configuration_id_delete_handler,
                   this));
  Routes::Get(
      *router, base + "/:afId/configurations/:configurationId",
      Routes::bind(&IndividualIPTVConfigurationApi::
                       af_id_configurations_configuration_id_get_handler,
                   this));
  Routes::Patch(
      *router, base + "/:afId/configurations/:configurationId",
      Routes::bind(&IndividualIPTVConfigurationApi::
                       af_id_configurations_configuration_id_patch_handler,
                   this));
  Routes::Put(
      *router, base + "/:afId/configurations/:configurationId",
      Routes::bind(&IndividualIPTVConfigurationApi::
                       af_id_configurations_configuration_id_put_handler,
                   this));

  // Default handler, called when a route is not found
  router->addCustomHandler(
      Routes::bind(&IndividualIPTVConfigurationApi::
                       individual_iptv_configuration_api_default_handler,
                   this));
}

void IndividualIPTVConfigurationApi::
    af_id_configurations_configuration_id_delete_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto afId = request.param(":afId").as<std::string>();
  auto configurationId = request.param(":configurationId").as<std::string>();

  try {
    this->af_id_configurations_configuration_id_delete(afId, configurationId,
                                                       response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualIPTVConfigurationApi::
    af_id_configurations_configuration_id_get_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto afId = request.param(":afId").as<std::string>();
  auto configurationId = request.param(":configurationId").as<std::string>();

  try {
    this->af_id_configurations_configuration_id_get(afId, configurationId,
                                                    response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualIPTVConfigurationApi::
    af_id_configurations_configuration_id_patch_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto afId = request.param(":afId").as<std::string>();
  auto configurationId = request.param(":configurationId").as<std::string>();

  // Getting the body param

  IptvConfigDataPatch iptvConfigDataPatch;

  try {
    nlohmann::json::parse(request.body()).get_to(iptvConfigDataPatch);
    this->af_id_configurations_configuration_id_patch(
        afId, configurationId, iptvConfigDataPatch, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualIPTVConfigurationApi::
    af_id_configurations_configuration_id_put_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto afId = request.param(":afId").as<std::string>();
  auto configurationId = request.param(":configurationId").as<std::string>();

  // Getting the body param

  IptvConfigData iptvConfigData;

  try {
    nlohmann::json::parse(request.body()).get_to(iptvConfigData);
    this->af_id_configurations_configuration_id_put(afId, configurationId,
                                                    iptvConfigData, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void IndividualIPTVConfigurationApi::
    individual_iptv_configuration_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
