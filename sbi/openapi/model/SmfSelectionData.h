/**
 * Npcf_AMPolicyControl
 * Access and Mobility Policy Control Service. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmfSelectionData.h
 *
 * Represents the SMF Selection information that may be replaced by the PCF.
 */

#ifndef SmfSelectionData_H_
#define SmfSelectionData_H_

#include "CandidateForReplacement.h"
#include "Snssai.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the SMF Selection information that may be replaced by the PCF.
/// </summary>
class SmfSelectionData {
public:
  SmfSelectionData();
  virtual ~SmfSelectionData();

  void validate();

  /////////////////////////////////////////////
  /// SmfSelectionData members

  /// <summary>
  ///
  /// </summary>
  bool isUnsuppDnn() const;
  void setUnsuppDnn(bool const value);
  bool unsuppDnnIsSet() const;
  void unsetUnsuppDnn();
  /// <summary>
  /// Contains the list of DNNs per S-NSSAI that are candidates for replacement.
  /// The snssai attribute within the CandidateForReplacement data type is the
  /// key of the map.
  /// </summary>
  std::map<std::string, CandidateForReplacement> &getCandidates();
  void
  setCandidates(std::map<std::string, CandidateForReplacement> const &value);
  bool candidatesIsSet() const;
  void unsetCandidates();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  ///
  /// </summary>
  Snssai getMappingSnssai() const;
  void setMappingSnssai(Snssai const &value);
  bool mappingSnssaiIsSet() const;
  void unsetMappingSnssai();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();

  friend void to_json(nlohmann::json &j, const SmfSelectionData &o);
  friend void from_json(const nlohmann::json &j, SmfSelectionData &o);

protected:
  bool m_UnsuppDnn;
  bool m_UnsuppDnnIsSet;
  std::map<std::string, CandidateForReplacement> m_Candidates;
  bool m_CandidatesIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  Snssai m_MappingSnssai;
  bool m_MappingSnssaiIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SmfSelectionData_H_ */
