/**
 * VAE_MessageDelivery
 * API for VAE Message Delivery Service Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DownlinkMessageDeliveryData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

DownlinkMessageDeliveryData::DownlinkMessageDeliveryData() {
  m_UeId = "";
  m_UeIdIsSet = false;
  m_GroupId = "";
  m_GroupIdIsSet = false;
  m_Duration = "";
  m_DurationIsSet = false;
  m_GeoId = "";
  m_GeoIdIsSet = false;
}

DownlinkMessageDeliveryData::~DownlinkMessageDeliveryData() {}

void DownlinkMessageDeliveryData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const DownlinkMessageDeliveryData &o) {
  j = nlohmann::json();
  if (o.ueIdIsSet())
    j["ueId"] = o.m_UeId;
  if (o.groupIdIsSet())
    j["groupId"] = o.m_GroupId;
  if (o.durationIsSet())
    j["duration"] = o.m_Duration;
  if (o.geoIdIsSet())
    j["geoId"] = o.m_GeoId;
  j["payload"] = o.m_Payload;
}

void from_json(const nlohmann::json &j, DownlinkMessageDeliveryData &o) {
  if (j.find("ueId") != j.end()) {
    j.at("ueId").get_to(o.m_UeId);
    o.m_UeIdIsSet = true;
  }
  if (j.find("groupId") != j.end()) {
    j.at("groupId").get_to(o.m_GroupId);
    o.m_GroupIdIsSet = true;
  }
  if (j.find("duration") != j.end()) {
    j.at("duration").get_to(o.m_Duration);
    o.m_DurationIsSet = true;
  }
  if (j.find("geoId") != j.end()) {
    j.at("geoId").get_to(o.m_GeoId);
    o.m_GeoIdIsSet = true;
  }
  j.at("payload").get_to(o.m_Payload);
}

std::string DownlinkMessageDeliveryData::getUeId() const { return m_UeId; }
void DownlinkMessageDeliveryData::setUeId(std::string const &value) {
  m_UeId = value;
  m_UeIdIsSet = true;
}
bool DownlinkMessageDeliveryData::ueIdIsSet() const { return m_UeIdIsSet; }
void DownlinkMessageDeliveryData::unsetUeId() { m_UeIdIsSet = false; }
std::string DownlinkMessageDeliveryData::getGroupId() const {
  return m_GroupId;
}
void DownlinkMessageDeliveryData::setGroupId(std::string const &value) {
  m_GroupId = value;
  m_GroupIdIsSet = true;
}
bool DownlinkMessageDeliveryData::groupIdIsSet() const {
  return m_GroupIdIsSet;
}
void DownlinkMessageDeliveryData::unsetGroupId() { m_GroupIdIsSet = false; }
std::string DownlinkMessageDeliveryData::getDuration() const {
  return m_Duration;
}
void DownlinkMessageDeliveryData::setDuration(std::string const &value) {
  m_Duration = value;
  m_DurationIsSet = true;
}
bool DownlinkMessageDeliveryData::durationIsSet() const {
  return m_DurationIsSet;
}
void DownlinkMessageDeliveryData::unsetDuration() { m_DurationIsSet = false; }
std::string DownlinkMessageDeliveryData::getGeoId() const { return m_GeoId; }
void DownlinkMessageDeliveryData::setGeoId(std::string const &value) {
  m_GeoId = value;
  m_GeoIdIsSet = true;
}
bool DownlinkMessageDeliveryData::geoIdIsSet() const { return m_GeoIdIsSet; }
void DownlinkMessageDeliveryData::unsetGeoId() { m_GeoIdIsSet = false; }
std::string DownlinkMessageDeliveryData::getPayload() const {
  return m_Payload;
}
void DownlinkMessageDeliveryData::setPayload(std::string const &value) {
  m_Payload = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
