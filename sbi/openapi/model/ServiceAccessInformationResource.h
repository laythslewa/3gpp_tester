/**
 * M5_ServiceAccessInformation
 * 5GMS AF M5 Service Access Information API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ServiceAccessInformationResource.h
 *
 *
 */

#ifndef ServiceAccessInformationResource_H_
#define ServiceAccessInformationResource_H_

#include "ProvisioningSessionType.h"
#include "ServiceAccessInformationResource_ClientConsumptionReportingConfiguration.h"
#include "ServiceAccessInformationResource_ClientMetricsReportingConfiguration.h"
#include "ServiceAccessInformationResource_DynamicPolicyInvocationConfiguration.h"
#include "ServiceAccessInformationResource_NetworkAssistanceConfiguration.h"
#include "ServiceAccessInformationResource_StreamingAccess.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class ServiceAccessInformationResource {
public:
  ServiceAccessInformationResource();
  virtual ~ServiceAccessInformationResource();

  void validate();

  /////////////////////////////////////////////
  /// ServiceAccessInformationResource members

  /// <summary>
  /// String chosen by the 5GMS AF to serve as an identifier in a resource URI.
  /// </summary>
  std::string getProvisioningSessionId() const;
  void setProvisioningSessionId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  ProvisioningSessionType getProvisioningSessionType() const;
  void setProvisioningSessionType(ProvisioningSessionType const &value);
  /// <summary>
  ///
  /// </summary>
  ServiceAccessInformationResource_StreamingAccess getStreamingAccess() const;
  void setStreamingAccess(
      ServiceAccessInformationResource_StreamingAccess const &value);
  bool streamingAccessIsSet() const;
  void unsetStreamingAccess();
  /// <summary>
  ///
  /// </summary>
  ServiceAccessInformationResource_ClientConsumptionReportingConfiguration
  getClientConsumptionReportingConfiguration() const;
  void setClientConsumptionReportingConfiguration(
      ServiceAccessInformationResource_ClientConsumptionReportingConfiguration const
          &value);
  bool clientConsumptionReportingConfigurationIsSet() const;
  void unsetClientConsumptionReportingConfiguration();
  /// <summary>
  ///
  /// </summary>
  ServiceAccessInformationResource_DynamicPolicyInvocationConfiguration
  getDynamicPolicyInvocationConfiguration() const;
  void setDynamicPolicyInvocationConfiguration(
      ServiceAccessInformationResource_DynamicPolicyInvocationConfiguration const
          &value);
  bool dynamicPolicyInvocationConfigurationIsSet() const;
  void unsetDynamicPolicyInvocationConfiguration();
  /// <summary>
  ///
  /// </summary>
  std::vector<
      ServiceAccessInformationResource_ClientMetricsReportingConfiguration> &
  getClientMetricsReportingConfiguration();
  void setClientMetricsReportingConfiguration(
      std::vector<
          ServiceAccessInformationResource_ClientMetricsReportingConfiguration> const
          &value);
  bool clientMetricsReportingConfigurationIsSet() const;
  void unsetClientMetricsReportingConfiguration();
  /// <summary>
  ///
  /// </summary>
  ServiceAccessInformationResource_NetworkAssistanceConfiguration
  getNetworkAssistanceConfiguration() const;
  void setNetworkAssistanceConfiguration(
      ServiceAccessInformationResource_NetworkAssistanceConfiguration const
          &value);
  bool networkAssistanceConfigurationIsSet() const;
  void unsetNetworkAssistanceConfiguration();

  friend void to_json(nlohmann::json &j,
                      const ServiceAccessInformationResource &o);
  friend void from_json(const nlohmann::json &j,
                        ServiceAccessInformationResource &o);

protected:
  std::string m_ProvisioningSessionId;

  ProvisioningSessionType m_ProvisioningSessionType;

  ServiceAccessInformationResource_StreamingAccess m_StreamingAccess;
  bool m_StreamingAccessIsSet;
  ServiceAccessInformationResource_ClientConsumptionReportingConfiguration
      m_ClientConsumptionReportingConfiguration;
  bool m_ClientConsumptionReportingConfigurationIsSet;
  ServiceAccessInformationResource_DynamicPolicyInvocationConfiguration
      m_DynamicPolicyInvocationConfiguration;
  bool m_DynamicPolicyInvocationConfigurationIsSet;
  std::vector<
      ServiceAccessInformationResource_ClientMetricsReportingConfiguration>
      m_ClientMetricsReportingConfiguration;
  bool m_ClientMetricsReportingConfigurationIsSet;
  ServiceAccessInformationResource_NetworkAssistanceConfiguration
      m_NetworkAssistanceConfiguration;
  bool m_NetworkAssistanceConfigurationIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ServiceAccessInformationResource_H_ */
