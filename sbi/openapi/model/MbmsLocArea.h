/**
 * SS_NetworkResourceAdaptation
 * SS Network Resource Adaptation Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MbmsLocArea.h
 *
 * Represents a user location area whithin which is sent a group message
 * delivery via MBMS request.
 */

#ifndef MbmsLocArea_H_
#define MbmsLocArea_H_

#include "CivicAddress.h"
#include "GeographicArea.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a user location area whithin which is sent a group message
/// delivery via MBMS request.
/// </summary>
class MbmsLocArea {
public:
  MbmsLocArea();
  virtual ~MbmsLocArea();

  void validate();

  /////////////////////////////////////////////
  /// MbmsLocArea members

  /// <summary>
  /// Indicates a Cell Global Identification of the user which identifies the
  /// cell the UE is registered.
  /// </summary>
  std::vector<std::string> &getCellId();
  void setCellId(std::vector<std::string> const &value);
  bool cellIdIsSet() const;
  void unsetCellId();
  /// <summary>
  /// Indicates an eNodeB in which the UE is currently located.
  /// </summary>
  std::vector<std::string> &getEnodeBId();
  void setEnodeBId(std::vector<std::string> const &value);
  bool enodeBIdIsSet() const;
  void unsetEnodeBId();
  /// <summary>
  /// Identifies a geographic area of the user where the UE is located.
  /// </summary>
  std::vector<GeographicArea> &getGeographicArea();
  void setGeographicArea(std::vector<GeographicArea> const &value);
  bool geographicAreaIsSet() const;
  void unsetGeographicArea();
  /// <summary>
  /// Identifies an MBMS Service Area Identity of the user where the UE is
  /// located.
  /// </summary>
  std::vector<std::string> &getMbmsServiceAreaId();
  void setMbmsServiceAreaId(std::vector<std::string> const &value);
  bool mbmsServiceAreaIdIsSet() const;
  void unsetMbmsServiceAreaId();
  /// <summary>
  /// Identifies a civic address of the user where the UE is located.
  /// </summary>
  std::vector<CivicAddress> &getCivicAddress();
  void setCivicAddress(std::vector<CivicAddress> const &value);
  bool civicAddressIsSet() const;
  void unsetCivicAddress();

  friend void to_json(nlohmann::json &j, const MbmsLocArea &o);
  friend void from_json(const nlohmann::json &j, MbmsLocArea &o);

protected:
  std::vector<std::string> m_CellId;
  bool m_CellIdIsSet;
  std::vector<std::string> m_EnodeBId;
  bool m_EnodeBIdIsSet;
  std::vector<GeographicArea> m_GeographicArea;
  bool m_GeographicAreaIsSet;
  std::vector<std::string> m_MbmsServiceAreaId;
  bool m_MbmsServiceAreaIdIsSet;
  std::vector<CivicAddress> m_CivicAddress;
  bool m_CivicAddressIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* MbmsLocArea_H_ */
