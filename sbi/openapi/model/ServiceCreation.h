/**
 * GMDviaMBMSbyxMB
 * API for Group Message Delivery via MBMS by xMB © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ServiceCreation.h
 *
 * Represents an individual xMB Service resource.
 */

#ifndef ServiceCreation_H_
#define ServiceCreation_H_

#include "ServiceAnnouncementMode.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an individual xMB Service resource.
/// </summary>
class ServiceCreation {
public:
  ServiceCreation();
  virtual ~ServiceCreation();

  void validate();

  /////////////////////////////////////////////
  /// ServiceCreation members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const &value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more
  /// information.
  /// </summary>
  std::string getExternalGroupId() const;
  void setExternalGroupId(std::string const &value);
  bool externalGroupIdIsSet() const;
  void unsetExternalGroupId();
  /// <summary>
  /// Identifies the MBMS User Service supplied by the SCEF.
  /// </summary>
  std::string getUserServiceId() const;
  void setUserServiceId(std::string const &value);
  bool userServiceIdIsSet() const;
  void unsetUserServiceId();
  /// <summary>
  /// The service class that service belongs to supplied by the SCEF.
  /// </summary>
  std::string getServiceClass() const;
  void setServiceClass(std::string const &value);
  bool serviceClassIsSet() const;
  void unsetServiceClass();
  /// <summary>
  /// List of language of the service content supplied by the SCEF.
  /// </summary>
  std::vector<std::string> &getServiceLanguages();
  void setServiceLanguages(std::vector<std::string> const &value);
  bool serviceLanguagesIsSet() const;
  void unsetServiceLanguages();
  /// <summary>
  /// List of Service Names supplied by the SCEF.
  /// </summary>
  std::vector<std::string> &getServiceNames();
  void setServiceNames(std::vector<std::string> const &value);
  bool serviceNamesIsSet() const;
  void unsetServiceNames();
  /// <summary>
  /// When set to &#39;true&#39;, the Content Provider indicates that the
  /// service is a Receive Only Mode service. This parameter is supplied by the
  /// SCEF.
  /// </summary>
  bool isReceiveOnlyMode() const;
  void setReceiveOnlyMode(bool const value);
  bool receiveOnlyModeIsSet() const;
  void unsetReceiveOnlyMode();
  /// <summary>
  ///
  /// </summary>
  ServiceAnnouncementMode getServiceAnnouncementMode() const;
  void setServiceAnnouncementMode(ServiceAnnouncementMode const &value);
  bool serviceAnnouncementModeIsSet() const;
  void unsetServiceAnnouncementMode();

  friend void to_json(nlohmann::json &j, const ServiceCreation &o);
  friend void from_json(const nlohmann::json &j, ServiceCreation &o);

protected:
  std::string m_Self;
  bool m_SelfIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::string m_ExternalGroupId;
  bool m_ExternalGroupIdIsSet;
  std::string m_UserServiceId;
  bool m_UserServiceIdIsSet;
  std::string m_ServiceClass;
  bool m_ServiceClassIsSet;
  std::vector<std::string> m_ServiceLanguages;
  bool m_ServiceLanguagesIsSet;
  std::vector<std::string> m_ServiceNames;
  bool m_ServiceNamesIsSet;
  bool m_ReceiveOnlyMode;
  bool m_ReceiveOnlyModeIsSet;
  ServiceAnnouncementMode m_ServiceAnnouncementMode;
  bool m_ServiceAnnouncementModeIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ServiceCreation_H_ */
