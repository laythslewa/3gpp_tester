/**
 * 3gpp-lpi-pp
 * API for Location Privacy Indication Parameters Provisioning. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * LPIParametersProvisioningsApi.h
 *
 *
 */

#ifndef LPIParametersProvisioningsApi_H_
#define LPIParametersProvisioningsApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "LpiParametersProvision.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class LPIParametersProvisioningsApi {
public:
  LPIParametersProvisioningsApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~LPIParametersProvisioningsApi() {}
  void init();

  const std::string base = "/3gpp-lpi-pp/v1";

private:
  void setupRoutes();

  void
  af_id_provisioned_lpis_get_handler(const Pistache::Rest::Request &request,
                                     Pistache::Http::ResponseWriter response);
  void
  af_id_provisioned_lpis_post_handler(const Pistache::Rest::Request &request,
                                      Pistache::Http::ResponseWriter response);
  void lpi_parameters_provisionings_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// read all of the active LPI Parameters Provisioning resources for the AF
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="afId">Identifier of the AF</param>
  virtual void
  af_id_provisioned_lpis_get(const std::string &afId,
                             Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Creates a new LPI Parameters Provisioning resource
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="afId">Identifier of the AF</param>
  /// <param name="lpiParametersProvision">new resource creation</param>
  virtual void af_id_provisioned_lpis_post(
      const std::string &afId,
      const LpiParametersProvision &lpiParametersProvision,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* LPIParametersProvisioningsApi_H_ */
