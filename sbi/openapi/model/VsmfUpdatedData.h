/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * VsmfUpdatedData.h
 *
 * Data within Update Response from V-SMF, or from I-SMF to SMF
 */

#ifndef VsmfUpdatedData_H_
#define VsmfUpdatedData_H_

#include "Arp.h"
#include "EbiArpMapping.h"
#include "N4Information.h"
#include "QosFlowItem.h"
#include "RefToBinaryData.h"
#include "SecondaryRatUsageInfo.h"
#include "SecondaryRatUsageReport.h"
#include "UserLocation.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within Update Response from V-SMF, or from I-SMF to SMF
/// </summary>
class VsmfUpdatedData {
public:
  VsmfUpdatedData();
  virtual ~VsmfUpdatedData();

  void validate();

  /////////////////////////////////////////////
  /// VsmfUpdatedData members

  /// <summary>
  ///
  /// </summary>
  std::vector<QosFlowItem> &getQosFlowsAddModList();
  void setQosFlowsAddModList(std::vector<QosFlowItem> const &value);
  bool qosFlowsAddModListIsSet() const;
  void unsetQosFlowsAddModList();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosFlowItem> &getQosFlowsRelList();
  void setQosFlowsRelList(std::vector<QosFlowItem> const &value);
  bool qosFlowsRelListIsSet() const;
  void unsetQosFlowsRelList();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosFlowItem> &getQosFlowsFailedtoAddModList();
  void setQosFlowsFailedtoAddModList(std::vector<QosFlowItem> const &value);
  bool qosFlowsFailedtoAddModListIsSet() const;
  void unsetQosFlowsFailedtoAddModList();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosFlowItem> &getQosFlowsFailedtoRelList();
  void setQosFlowsFailedtoRelList(std::vector<QosFlowItem> const &value);
  bool qosFlowsFailedtoRelListIsSet() const;
  void unsetQosFlowsFailedtoRelList();
  /// <summary>
  ///
  /// </summary>
  RefToBinaryData getN1SmInfoFromUe() const;
  void setN1SmInfoFromUe(RefToBinaryData const &value);
  bool n1SmInfoFromUeIsSet() const;
  void unsetN1SmInfoFromUe();
  /// <summary>
  ///
  /// </summary>
  RefToBinaryData getUnknownN1SmInfo() const;
  void setUnknownN1SmInfo(RefToBinaryData const &value);
  bool unknownN1SmInfoIsSet() const;
  void unsetUnknownN1SmInfo();
  /// <summary>
  ///
  /// </summary>
  UserLocation getUeLocation() const;
  void setUeLocation(UserLocation const &value);
  bool ueLocationIsSet() const;
  void unsetUeLocation();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getUeTimeZone() const;
  void setUeTimeZone(std::string const &value);
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();
  /// <summary>
  ///
  /// </summary>
  UserLocation getAddUeLocation() const;
  void setAddUeLocation(UserLocation const &value);
  bool addUeLocationIsSet() const;
  void unsetAddUeLocation();
  /// <summary>
  ///
  /// </summary>
  std::vector<EbiArpMapping> &getAssignedEbiList();
  void setAssignedEbiList(std::vector<EbiArpMapping> const &value);
  bool assignedEbiListIsSet() const;
  void unsetAssignedEbiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<Arp> &getFailedToAssignEbiList();
  void setFailedToAssignEbiList(std::vector<Arp> const &value);
  bool failedToAssignEbiListIsSet() const;
  void unsetFailedToAssignEbiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t> &getReleasedEbiList();
  void setReleasedEbiList(std::vector<int32_t> const value);
  bool releasedEbiListIsSet() const;
  void unsetReleasedEbiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<SecondaryRatUsageReport> &getSecondaryRatUsageReport();
  void
  setSecondaryRatUsageReport(std::vector<SecondaryRatUsageReport> const &value);
  bool secondaryRatUsageReportIsSet() const;
  void unsetSecondaryRatUsageReport();
  /// <summary>
  ///
  /// </summary>
  std::vector<SecondaryRatUsageInfo> &getSecondaryRatUsageInfo();
  void
  setSecondaryRatUsageInfo(std::vector<SecondaryRatUsageInfo> const &value);
  bool secondaryRatUsageInfoIsSet() const;
  void unsetSecondaryRatUsageInfo();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4Info() const;
  void setN4Info(N4Information const &value);
  bool n4InfoIsSet() const;
  void unsetN4Info();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4InfoExt1() const;
  void setN4InfoExt1(N4Information const &value);
  bool n4InfoExt1IsSet() const;
  void unsetN4InfoExt1();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4InfoExt2() const;
  void setN4InfoExt2(N4Information const &value);
  bool n4InfoExt2IsSet() const;
  void unsetN4InfoExt2();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4InfoExt3() const;
  void setN4InfoExt3(N4Information const &value);
  bool n4InfoExt3IsSet() const;
  void unsetN4InfoExt3();

  friend void to_json(nlohmann::json &j, const VsmfUpdatedData &o);
  friend void from_json(const nlohmann::json &j, VsmfUpdatedData &o);

protected:
  std::vector<QosFlowItem> m_QosFlowsAddModList;
  bool m_QosFlowsAddModListIsSet;
  std::vector<QosFlowItem> m_QosFlowsRelList;
  bool m_QosFlowsRelListIsSet;
  std::vector<QosFlowItem> m_QosFlowsFailedtoAddModList;
  bool m_QosFlowsFailedtoAddModListIsSet;
  std::vector<QosFlowItem> m_QosFlowsFailedtoRelList;
  bool m_QosFlowsFailedtoRelListIsSet;
  RefToBinaryData m_N1SmInfoFromUe;
  bool m_N1SmInfoFromUeIsSet;
  RefToBinaryData m_UnknownN1SmInfo;
  bool m_UnknownN1SmInfoIsSet;
  UserLocation m_UeLocation;
  bool m_UeLocationIsSet;
  std::string m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  UserLocation m_AddUeLocation;
  bool m_AddUeLocationIsSet;
  std::vector<EbiArpMapping> m_AssignedEbiList;
  bool m_AssignedEbiListIsSet;
  std::vector<Arp> m_FailedToAssignEbiList;
  bool m_FailedToAssignEbiListIsSet;
  std::vector<int32_t> m_ReleasedEbiList;
  bool m_ReleasedEbiListIsSet;
  std::vector<SecondaryRatUsageReport> m_SecondaryRatUsageReport;
  bool m_SecondaryRatUsageReportIsSet;
  std::vector<SecondaryRatUsageInfo> m_SecondaryRatUsageInfo;
  bool m_SecondaryRatUsageInfoIsSet;
  N4Information m_N4Info;
  bool m_N4InfoIsSet;
  N4Information m_N4InfoExt1;
  bool m_N4InfoExt1IsSet;
  N4Information m_N4InfoExt2;
  bool m_N4InfoExt2IsSet;
  N4Information m_N4InfoExt3;
  bool m_N4InfoExt3IsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* VsmfUpdatedData_H_ */
