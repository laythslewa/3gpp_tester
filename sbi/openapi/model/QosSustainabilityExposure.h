/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * QosSustainabilityExposure.h
 *
 * Represents a QoS sustainability information.
 */

#ifndef QosSustainabilityExposure_H_
#define QosSustainabilityExposure_H_

#include "LocationArea5G.h"
#include "RetainabilityThreshold.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a QoS sustainability information.
/// </summary>
class QosSustainabilityExposure {
public:
  QosSustainabilityExposure();
  virtual ~QosSustainabilityExposure();

  void validate();

  /////////////////////////////////////////////
  /// QosSustainabilityExposure members

  /// <summary>
  ///
  /// </summary>
  LocationArea5G getLocArea() const;
  void setLocArea(LocationArea5G const &value);
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getStartTs() const;
  void setStartTs(std::string const &value);
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getEndTs() const;
  void setEndTs(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  RetainabilityThreshold getQosFlowRetThd() const;
  void setQosFlowRetThd(RetainabilityThreshold const &value);
  bool qosFlowRetThdIsSet() const;
  void unsetQosFlowRetThd();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getRanUeThrouThd() const;
  void setRanUeThrouThd(std::string const &value);
  bool ranUeThrouThdIsSet() const;
  void unsetRanUeThrouThd();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getConfidence() const;
  void setConfidence(int32_t const value);
  bool confidenceIsSet() const;
  void unsetConfidence();

  friend void to_json(nlohmann::json &j, const QosSustainabilityExposure &o);
  friend void from_json(const nlohmann::json &j, QosSustainabilityExposure &o);

protected:
  LocationArea5G m_LocArea;

  std::string m_StartTs;

  std::string m_EndTs;

  RetainabilityThreshold m_QosFlowRetThd;
  bool m_QosFlowRetThdIsSet;
  std::string m_RanUeThrouThd;
  bool m_RanUeThrouThdIsSet;
  int32_t m_Confidence;
  bool m_ConfidenceIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* QosSustainabilityExposure_H_ */
