/**
 * Nsmsf_SMService Service API
 * SMSF SMService. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI,
 * TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeSmsContextData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeSmsContextData::UeSmsContextData() {
  m_Supi = "";
  m_Pei = "";
  m_PeiIsSet = false;
  m_AmfId = "";
  m_GuamisIsSet = false;
  m_AdditionalAccessTypeIsSet = false;
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_UeLocationIsSet = false;
  m_UeTimeZone = "";
  m_UeTimeZoneIsSet = false;
  m_TraceDataIsSet = false;
  m_BackupAmfInfoIsSet = false;
  m_UdmGroupId = "";
  m_UdmGroupIdIsSet = false;
  m_RoutingIndicator = "";
  m_RoutingIndicatorIsSet = false;
  m_HNwPubKeyId = 0;
  m_HNwPubKeyIdIsSet = false;
  m_RatTypeIsSet = false;
  m_AdditionalRatTypeIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

UeSmsContextData::~UeSmsContextData() {}

void UeSmsContextData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UeSmsContextData &o) {
  j = nlohmann::json();
  j["supi"] = o.m_Supi;
  if (o.peiIsSet())
    j["pei"] = o.m_Pei;
  j["amfId"] = o.m_AmfId;
  if (o.guamisIsSet() || !o.m_Guamis.empty())
    j["guamis"] = o.m_Guamis;
  j["accessType"] = o.m_AccessType;
  if (o.additionalAccessTypeIsSet())
    j["additionalAccessType"] = o.m_AdditionalAccessType;
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  if (o.ueLocationIsSet())
    j["ueLocation"] = o.m_UeLocation;
  if (o.ueTimeZoneIsSet())
    j["ueTimeZone"] = o.m_UeTimeZone;
  if (o.traceDataIsSet())
    j["traceData"] = o.m_TraceData;
  if (o.backupAmfInfoIsSet() || !o.m_BackupAmfInfo.empty())
    j["backupAmfInfo"] = o.m_BackupAmfInfo;
  if (o.udmGroupIdIsSet())
    j["udmGroupId"] = o.m_UdmGroupId;
  if (o.routingIndicatorIsSet())
    j["routingIndicator"] = o.m_RoutingIndicator;
  if (o.hNwPubKeyIdIsSet())
    j["hNwPubKeyId"] = o.m_HNwPubKeyId;
  if (o.ratTypeIsSet())
    j["ratType"] = o.m_RatType;
  if (o.additionalRatTypeIsSet())
    j["additionalRatType"] = o.m_AdditionalRatType;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, UeSmsContextData &o) {
  j.at("supi").get_to(o.m_Supi);
  if (j.find("pei") != j.end()) {
    j.at("pei").get_to(o.m_Pei);
    o.m_PeiIsSet = true;
  }
  j.at("amfId").get_to(o.m_AmfId);
  if (j.find("guamis") != j.end()) {
    j.at("guamis").get_to(o.m_Guamis);
    o.m_GuamisIsSet = true;
  }
  j.at("accessType").get_to(o.m_AccessType);
  if (j.find("additionalAccessType") != j.end()) {
    j.at("additionalAccessType").get_to(o.m_AdditionalAccessType);
    o.m_AdditionalAccessTypeIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("ueLocation") != j.end()) {
    j.at("ueLocation").get_to(o.m_UeLocation);
    o.m_UeLocationIsSet = true;
  }
  if (j.find("ueTimeZone") != j.end()) {
    j.at("ueTimeZone").get_to(o.m_UeTimeZone);
    o.m_UeTimeZoneIsSet = true;
  }
  if (j.find("traceData") != j.end()) {
    j.at("traceData").get_to(o.m_TraceData);
    o.m_TraceDataIsSet = true;
  }
  if (j.find("backupAmfInfo") != j.end()) {
    j.at("backupAmfInfo").get_to(o.m_BackupAmfInfo);
    o.m_BackupAmfInfoIsSet = true;
  }
  if (j.find("udmGroupId") != j.end()) {
    j.at("udmGroupId").get_to(o.m_UdmGroupId);
    o.m_UdmGroupIdIsSet = true;
  }
  if (j.find("routingIndicator") != j.end()) {
    j.at("routingIndicator").get_to(o.m_RoutingIndicator);
    o.m_RoutingIndicatorIsSet = true;
  }
  if (j.find("hNwPubKeyId") != j.end()) {
    j.at("hNwPubKeyId").get_to(o.m_HNwPubKeyId);
    o.m_HNwPubKeyIdIsSet = true;
  }
  if (j.find("ratType") != j.end()) {
    j.at("ratType").get_to(o.m_RatType);
    o.m_RatTypeIsSet = true;
  }
  if (j.find("additionalRatType") != j.end()) {
    j.at("additionalRatType").get_to(o.m_AdditionalRatType);
    o.m_AdditionalRatTypeIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

std::string UeSmsContextData::getSupi() const { return m_Supi; }
void UeSmsContextData::setSupi(std::string const &value) { m_Supi = value; }
std::string UeSmsContextData::getPei() const { return m_Pei; }
void UeSmsContextData::setPei(std::string const &value) {
  m_Pei = value;
  m_PeiIsSet = true;
}
bool UeSmsContextData::peiIsSet() const { return m_PeiIsSet; }
void UeSmsContextData::unsetPei() { m_PeiIsSet = false; }
std::string UeSmsContextData::getAmfId() const { return m_AmfId; }
void UeSmsContextData::setAmfId(std::string const &value) { m_AmfId = value; }
std::vector<Guami> &UeSmsContextData::getGuamis() { return m_Guamis; }
void UeSmsContextData::setGuamis(std::vector<Guami> const &value) {
  m_Guamis = value;
  m_GuamisIsSet = true;
}
bool UeSmsContextData::guamisIsSet() const { return m_GuamisIsSet; }
void UeSmsContextData::unsetGuamis() { m_GuamisIsSet = false; }
AccessType UeSmsContextData::getAccessType() const { return m_AccessType; }
void UeSmsContextData::setAccessType(AccessType const &value) {
  m_AccessType = value;
}
AccessType UeSmsContextData::getAdditionalAccessType() const {
  return m_AdditionalAccessType;
}
void UeSmsContextData::setAdditionalAccessType(AccessType const &value) {
  m_AdditionalAccessType = value;
  m_AdditionalAccessTypeIsSet = true;
}
bool UeSmsContextData::additionalAccessTypeIsSet() const {
  return m_AdditionalAccessTypeIsSet;
}
void UeSmsContextData::unsetAdditionalAccessType() {
  m_AdditionalAccessTypeIsSet = false;
}
std::string UeSmsContextData::getGpsi() const { return m_Gpsi; }
void UeSmsContextData::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool UeSmsContextData::gpsiIsSet() const { return m_GpsiIsSet; }
void UeSmsContextData::unsetGpsi() { m_GpsiIsSet = false; }
UserLocation UeSmsContextData::getUeLocation() const { return m_UeLocation; }
void UeSmsContextData::setUeLocation(UserLocation const &value) {
  m_UeLocation = value;
  m_UeLocationIsSet = true;
}
bool UeSmsContextData::ueLocationIsSet() const { return m_UeLocationIsSet; }
void UeSmsContextData::unsetUeLocation() { m_UeLocationIsSet = false; }
std::string UeSmsContextData::getUeTimeZone() const { return m_UeTimeZone; }
void UeSmsContextData::setUeTimeZone(std::string const &value) {
  m_UeTimeZone = value;
  m_UeTimeZoneIsSet = true;
}
bool UeSmsContextData::ueTimeZoneIsSet() const { return m_UeTimeZoneIsSet; }
void UeSmsContextData::unsetUeTimeZone() { m_UeTimeZoneIsSet = false; }
TraceData UeSmsContextData::getTraceData() const { return m_TraceData; }
void UeSmsContextData::setTraceData(TraceData const &value) {
  m_TraceData = value;
  m_TraceDataIsSet = true;
}
bool UeSmsContextData::traceDataIsSet() const { return m_TraceDataIsSet; }
void UeSmsContextData::unsetTraceData() { m_TraceDataIsSet = false; }
std::vector<BackupAmfInfo> &UeSmsContextData::getBackupAmfInfo() {
  return m_BackupAmfInfo;
}
void UeSmsContextData::setBackupAmfInfo(
    std::vector<BackupAmfInfo> const &value) {
  m_BackupAmfInfo = value;
  m_BackupAmfInfoIsSet = true;
}
bool UeSmsContextData::backupAmfInfoIsSet() const {
  return m_BackupAmfInfoIsSet;
}
void UeSmsContextData::unsetBackupAmfInfo() { m_BackupAmfInfoIsSet = false; }
std::string UeSmsContextData::getUdmGroupId() const { return m_UdmGroupId; }
void UeSmsContextData::setUdmGroupId(std::string const &value) {
  m_UdmGroupId = value;
  m_UdmGroupIdIsSet = true;
}
bool UeSmsContextData::udmGroupIdIsSet() const { return m_UdmGroupIdIsSet; }
void UeSmsContextData::unsetUdmGroupId() { m_UdmGroupIdIsSet = false; }
std::string UeSmsContextData::getRoutingIndicator() const {
  return m_RoutingIndicator;
}
void UeSmsContextData::setRoutingIndicator(std::string const &value) {
  m_RoutingIndicator = value;
  m_RoutingIndicatorIsSet = true;
}
bool UeSmsContextData::routingIndicatorIsSet() const {
  return m_RoutingIndicatorIsSet;
}
void UeSmsContextData::unsetRoutingIndicator() {
  m_RoutingIndicatorIsSet = false;
}
int32_t UeSmsContextData::getHNwPubKeyId() const { return m_HNwPubKeyId; }
void UeSmsContextData::setHNwPubKeyId(int32_t const value) {
  m_HNwPubKeyId = value;
  m_HNwPubKeyIdIsSet = true;
}
bool UeSmsContextData::hNwPubKeyIdIsSet() const { return m_HNwPubKeyIdIsSet; }
void UeSmsContextData::unsetHNwPubKeyId() { m_HNwPubKeyIdIsSet = false; }
RatType UeSmsContextData::getRatType() const { return m_RatType; }
void UeSmsContextData::setRatType(RatType const &value) {
  m_RatType = value;
  m_RatTypeIsSet = true;
}
bool UeSmsContextData::ratTypeIsSet() const { return m_RatTypeIsSet; }
void UeSmsContextData::unsetRatType() { m_RatTypeIsSet = false; }
RatType UeSmsContextData::getAdditionalRatType() const {
  return m_AdditionalRatType;
}
void UeSmsContextData::setAdditionalRatType(RatType const &value) {
  m_AdditionalRatType = value;
  m_AdditionalRatTypeIsSet = true;
}
bool UeSmsContextData::additionalRatTypeIsSet() const {
  return m_AdditionalRatTypeIsSet;
}
void UeSmsContextData::unsetAdditionalRatType() {
  m_AdditionalRatTypeIsSet = false;
}
std::string UeSmsContextData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void UeSmsContextData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool UeSmsContextData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void UeSmsContextData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
