/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * RecordCRUDApiImpl.h
 *
 *
 */

#ifndef RECORD_CRUD_API_IMPL_H_
#define RECORD_CRUD_API_IMPL_H_

#include <memory>
#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>

#include <RecordCRUDApi.h>

#include <pistache/optional.h>

#include "PatchItem.h"
#include "PatchResult.h"
#include "ProblemDetails.h"
#include "Record.h"
#include "RecordMeta.h"
#include "RecordSearchResult.h"
#include "SearchExpression.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class RecordCRUDApiImpl : public org::openapitools::server::api::RecordCRUDApi {
public:
  RecordCRUDApiImpl(std::shared_ptr<Pistache::Rest::Router>);
  ~RecordCRUDApiImpl() {}

  void create_or_modify_record(
      const std::string &realmId, const std::string &storageId,
      const std::string &recordId, const Record &record,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifNoneMatch,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifMatch,
      const Pistache::Optional<bool> &getPrevious,
      const Pistache::Optional<std::string> &supportedFeatures,
      Pistache::Http::ResponseWriter &response);
  void
  delete_record(const std::string &realmId, const std::string &storageId,
                const std::string &recordId,
                const Pistache::Optional<Pistache::Http::Header::Raw> &ifMatch,
                const Pistache::Optional<bool> &getPrevious,
                const Pistache::Optional<std::string> &supportedFeatures,
                Pistache::Http::ResponseWriter &response);
  void get_meta(
      const std::string &realmId, const std::string &storageId,
      const std::string &recordId,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifNoneMatch,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifModifiedSince,
      const Pistache::Optional<std::string> &supportedFeatures,
      Pistache::Http::ResponseWriter &response);
  void get_record(
      const std::string &realmId, const std::string &storageId,
      const std::string &recordId,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifNoneMatch,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifModifiedSince,
      const Pistache::Optional<std::string> &supportedFeatures,
      Pistache::Http::ResponseWriter &response);
  void search_record(const std::string &realmId, const std::string &storageId,
                     const Pistache::Optional<int32_t> &limitRange,
                     const Pistache::Optional<SearchExpression> &filter,
                     const Pistache::Optional<bool> &countIndicator,
                     const Pistache::Optional<std::string> &supportedFeatures,
                     Pistache::Http::ResponseWriter &response);
  void
  update_meta(const std::string &realmId, const std::string &storageId,
              const std::string &recordId,
              const std::vector<PatchItem> &patchItem,
              const Pistache::Optional<Pistache::Http::Header::Raw> &ifMatch,
              const Pistache::Optional<std::string> &supportedFeatures,
              Pistache::Http::ResponseWriter &response);
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif