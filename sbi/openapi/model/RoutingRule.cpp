/**
 * CAPIF_Routing_Info_API
 * API for Routing information. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RoutingRule.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RoutingRule::RoutingRule() {
  m_Ipv4AddrRangesIsSet = false;
  m_Ipv6AddrRangesIsSet = false;
}

RoutingRule::~RoutingRule() {}

void RoutingRule::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const RoutingRule &o) {
  j = nlohmann::json();
  if (o.ipv4AddrRangesIsSet() || !o.m_Ipv4AddrRanges.empty())
    j["ipv4AddrRanges"] = o.m_Ipv4AddrRanges;
  if (o.ipv6AddrRangesIsSet() || !o.m_Ipv6AddrRanges.empty())
    j["ipv6AddrRanges"] = o.m_Ipv6AddrRanges;
  j["aefProfile"] = o.m_AefProfile;
}

void from_json(const nlohmann::json &j, RoutingRule &o) {
  if (j.find("ipv4AddrRanges") != j.end()) {
    j.at("ipv4AddrRanges").get_to(o.m_Ipv4AddrRanges);
    o.m_Ipv4AddrRangesIsSet = true;
  }
  if (j.find("ipv6AddrRanges") != j.end()) {
    j.at("ipv6AddrRanges").get_to(o.m_Ipv6AddrRanges);
    o.m_Ipv6AddrRangesIsSet = true;
  }
  j.at("aefProfile").get_to(o.m_AefProfile);
}

std::vector<Ipv4AddressRange> &RoutingRule::getIpv4AddrRanges() {
  return m_Ipv4AddrRanges;
}
void RoutingRule::setIpv4AddrRanges(
    std::vector<Ipv4AddressRange> const &value) {
  m_Ipv4AddrRanges = value;
  m_Ipv4AddrRangesIsSet = true;
}
bool RoutingRule::ipv4AddrRangesIsSet() const { return m_Ipv4AddrRangesIsSet; }
void RoutingRule::unsetIpv4AddrRanges() { m_Ipv4AddrRangesIsSet = false; }
std::vector<Ipv6AddressRange> &RoutingRule::getIpv6AddrRanges() {
  return m_Ipv6AddrRanges;
}
void RoutingRule::setIpv6AddrRanges(
    std::vector<Ipv6AddressRange> const &value) {
  m_Ipv6AddrRanges = value;
  m_Ipv6AddrRangesIsSet = true;
}
bool RoutingRule::ipv6AddrRangesIsSet() const { return m_Ipv6AddrRangesIsSet; }
void RoutingRule::unsetIpv6AddrRanges() { m_Ipv6AddrRangesIsSet = false; }
AefProfile RoutingRule::getAefProfile() const { return m_AefProfile; }
void RoutingRule::setAefProfile(AefProfile const &value) {
  m_AefProfile = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
