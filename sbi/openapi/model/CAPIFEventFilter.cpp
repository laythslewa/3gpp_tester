/**
 * CAPIF_Events_API
 * API for event subscription management. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "CAPIFEventFilter.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

CAPIFEventFilter::CAPIFEventFilter() {
  m_ApiIdsIsSet = false;
  m_ApiInvokerIdsIsSet = false;
  m_AefIdsIsSet = false;
}

CAPIFEventFilter::~CAPIFEventFilter() {}

void CAPIFEventFilter::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const CAPIFEventFilter &o) {
  j = nlohmann::json();
  if (o.apiIdsIsSet() || !o.m_ApiIds.empty())
    j["apiIds"] = o.m_ApiIds;
  if (o.apiInvokerIdsIsSet() || !o.m_ApiInvokerIds.empty())
    j["apiInvokerIds"] = o.m_ApiInvokerIds;
  if (o.aefIdsIsSet() || !o.m_AefIds.empty())
    j["aefIds"] = o.m_AefIds;
}

void from_json(const nlohmann::json &j, CAPIFEventFilter &o) {
  if (j.find("apiIds") != j.end()) {
    j.at("apiIds").get_to(o.m_ApiIds);
    o.m_ApiIdsIsSet = true;
  }
  if (j.find("apiInvokerIds") != j.end()) {
    j.at("apiInvokerIds").get_to(o.m_ApiInvokerIds);
    o.m_ApiInvokerIdsIsSet = true;
  }
  if (j.find("aefIds") != j.end()) {
    j.at("aefIds").get_to(o.m_AefIds);
    o.m_AefIdsIsSet = true;
  }
}

std::vector<std::string> &CAPIFEventFilter::getApiIds() { return m_ApiIds; }
void CAPIFEventFilter::setApiIds(std::vector<std::string> const &value) {
  m_ApiIds = value;
  m_ApiIdsIsSet = true;
}
bool CAPIFEventFilter::apiIdsIsSet() const { return m_ApiIdsIsSet; }
void CAPIFEventFilter::unsetApiIds() { m_ApiIdsIsSet = false; }
std::vector<std::string> &CAPIFEventFilter::getApiInvokerIds() {
  return m_ApiInvokerIds;
}
void CAPIFEventFilter::setApiInvokerIds(std::vector<std::string> const &value) {
  m_ApiInvokerIds = value;
  m_ApiInvokerIdsIsSet = true;
}
bool CAPIFEventFilter::apiInvokerIdsIsSet() const {
  return m_ApiInvokerIdsIsSet;
}
void CAPIFEventFilter::unsetApiInvokerIds() { m_ApiInvokerIdsIsSet = false; }
std::vector<std::string> &CAPIFEventFilter::getAefIds() { return m_AefIds; }
void CAPIFEventFilter::setAefIds(std::vector<std::string> const &value) {
  m_AefIds = value;
  m_AefIdsIsSet = true;
}
bool CAPIFEventFilter::aefIdsIsSet() const { return m_AefIdsIsSet; }
void CAPIFEventFilter::unsetAefIds() { m_AefIdsIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
