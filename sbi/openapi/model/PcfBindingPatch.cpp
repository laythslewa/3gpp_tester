/**
 * Nbsf_Management
 * Binding Support Management Service API. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PcfBindingPatch.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PcfBindingPatch::PcfBindingPatch() {
  m_Ipv4Addr = "";
  m_Ipv4AddrIsSet = false;
  m_IpDomain = "";
  m_IpDomainIsSet = false;
  m_Ipv6PrefixIsSet = false;
  m_AddIpv6PrefixesIsSet = false;
  m_MacAddr48 = "";
  m_MacAddr48IsSet = false;
  m_AddMacAddrsIsSet = false;
  m_PcfId = "";
  m_PcfIdIsSet = false;
  m_PcfFqdn = "";
  m_PcfFqdnIsSet = false;
  m_PcfIpEndPointsIsSet = false;
  m_PcfDiamHost = "";
  m_PcfDiamHostIsSet = false;
  m_PcfDiamRealm = "";
  m_PcfDiamRealmIsSet = false;
}

PcfBindingPatch::~PcfBindingPatch() {}

void PcfBindingPatch::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PcfBindingPatch &o) {
  j = nlohmann::json();
  if (o.ipv4AddrIsSet())
    j["ipv4Addr"] = o.m_Ipv4Addr;
  if (o.ipDomainIsSet())
    j["ipDomain"] = o.m_IpDomain;
  if (o.ipv6PrefixIsSet())
    j["ipv6Prefix"] = o.m_Ipv6Prefix;
  if (o.addIpv6PrefixesIsSet() || !o.m_AddIpv6Prefixes.empty())
    j["addIpv6Prefixes"] = o.m_AddIpv6Prefixes;
  if (o.macAddr48IsSet())
    j["macAddr48"] = o.m_MacAddr48;
  if (o.addMacAddrsIsSet() || !o.m_AddMacAddrs.empty())
    j["addMacAddrs"] = o.m_AddMacAddrs;
  if (o.pcfIdIsSet())
    j["pcfId"] = o.m_PcfId;
  if (o.pcfFqdnIsSet())
    j["pcfFqdn"] = o.m_PcfFqdn;
  if (o.pcfIpEndPointsIsSet() || !o.m_PcfIpEndPoints.empty())
    j["pcfIpEndPoints"] = o.m_PcfIpEndPoints;
  if (o.pcfDiamHostIsSet())
    j["pcfDiamHost"] = o.m_PcfDiamHost;
  if (o.pcfDiamRealmIsSet())
    j["pcfDiamRealm"] = o.m_PcfDiamRealm;
}

void from_json(const nlohmann::json &j, PcfBindingPatch &o) {
  if (j.find("ipv4Addr") != j.end()) {
    j.at("ipv4Addr").get_to(o.m_Ipv4Addr);
    o.m_Ipv4AddrIsSet = true;
  }
  if (j.find("ipDomain") != j.end()) {
    j.at("ipDomain").get_to(o.m_IpDomain);
    o.m_IpDomainIsSet = true;
  }
  if (j.find("ipv6Prefix") != j.end()) {
    j.at("ipv6Prefix").get_to(o.m_Ipv6Prefix);
    o.m_Ipv6PrefixIsSet = true;
  }
  if (j.find("addIpv6Prefixes") != j.end()) {
    j.at("addIpv6Prefixes").get_to(o.m_AddIpv6Prefixes);
    o.m_AddIpv6PrefixesIsSet = true;
  }
  if (j.find("macAddr48") != j.end()) {
    j.at("macAddr48").get_to(o.m_MacAddr48);
    o.m_MacAddr48IsSet = true;
  }
  if (j.find("addMacAddrs") != j.end()) {
    j.at("addMacAddrs").get_to(o.m_AddMacAddrs);
    o.m_AddMacAddrsIsSet = true;
  }
  if (j.find("pcfId") != j.end()) {
    j.at("pcfId").get_to(o.m_PcfId);
    o.m_PcfIdIsSet = true;
  }
  if (j.find("pcfFqdn") != j.end()) {
    j.at("pcfFqdn").get_to(o.m_PcfFqdn);
    o.m_PcfFqdnIsSet = true;
  }
  if (j.find("pcfIpEndPoints") != j.end()) {
    j.at("pcfIpEndPoints").get_to(o.m_PcfIpEndPoints);
    o.m_PcfIpEndPointsIsSet = true;
  }
  if (j.find("pcfDiamHost") != j.end()) {
    j.at("pcfDiamHost").get_to(o.m_PcfDiamHost);
    o.m_PcfDiamHostIsSet = true;
  }
  if (j.find("pcfDiamRealm") != j.end()) {
    j.at("pcfDiamRealm").get_to(o.m_PcfDiamRealm);
    o.m_PcfDiamRealmIsSet = true;
  }
}

std::string PcfBindingPatch::getIpv4Addr() const { return m_Ipv4Addr; }
void PcfBindingPatch::setIpv4Addr(std::string const &value) {
  m_Ipv4Addr = value;
  m_Ipv4AddrIsSet = true;
}
bool PcfBindingPatch::ipv4AddrIsSet() const { return m_Ipv4AddrIsSet; }
void PcfBindingPatch::unsetIpv4Addr() { m_Ipv4AddrIsSet = false; }
std::string PcfBindingPatch::getIpDomain() const { return m_IpDomain; }
void PcfBindingPatch::setIpDomain(std::string const &value) {
  m_IpDomain = value;
  m_IpDomainIsSet = true;
}
bool PcfBindingPatch::ipDomainIsSet() const { return m_IpDomainIsSet; }
void PcfBindingPatch::unsetIpDomain() { m_IpDomainIsSet = false; }
Ipv6PrefixRm PcfBindingPatch::getIpv6Prefix() const { return m_Ipv6Prefix; }
void PcfBindingPatch::setIpv6Prefix(Ipv6PrefixRm const &value) {
  m_Ipv6Prefix = value;
  m_Ipv6PrefixIsSet = true;
}
bool PcfBindingPatch::ipv6PrefixIsSet() const { return m_Ipv6PrefixIsSet; }
void PcfBindingPatch::unsetIpv6Prefix() { m_Ipv6PrefixIsSet = false; }
std::vector<Ipv6Prefix> &PcfBindingPatch::getAddIpv6Prefixes() {
  return m_AddIpv6Prefixes;
}
void PcfBindingPatch::setAddIpv6Prefixes(std::vector<Ipv6Prefix> const &value) {
  m_AddIpv6Prefixes = value;
  m_AddIpv6PrefixesIsSet = true;
}
bool PcfBindingPatch::addIpv6PrefixesIsSet() const {
  return m_AddIpv6PrefixesIsSet;
}
void PcfBindingPatch::unsetAddIpv6Prefixes() { m_AddIpv6PrefixesIsSet = false; }
std::string PcfBindingPatch::getMacAddr48() const { return m_MacAddr48; }
void PcfBindingPatch::setMacAddr48(std::string const &value) {
  m_MacAddr48 = value;
  m_MacAddr48IsSet = true;
}
bool PcfBindingPatch::macAddr48IsSet() const { return m_MacAddr48IsSet; }
void PcfBindingPatch::unsetMacAddr48() { m_MacAddr48IsSet = false; }
std::vector<std::string> &PcfBindingPatch::getAddMacAddrs() {
  return m_AddMacAddrs;
}
void PcfBindingPatch::setAddMacAddrs(std::vector<std::string> const &value) {
  m_AddMacAddrs = value;
  m_AddMacAddrsIsSet = true;
}
bool PcfBindingPatch::addMacAddrsIsSet() const { return m_AddMacAddrsIsSet; }
void PcfBindingPatch::unsetAddMacAddrs() { m_AddMacAddrsIsSet = false; }
std::string PcfBindingPatch::getPcfId() const { return m_PcfId; }
void PcfBindingPatch::setPcfId(std::string const &value) {
  m_PcfId = value;
  m_PcfIdIsSet = true;
}
bool PcfBindingPatch::pcfIdIsSet() const { return m_PcfIdIsSet; }
void PcfBindingPatch::unsetPcfId() { m_PcfIdIsSet = false; }
std::string PcfBindingPatch::getPcfFqdn() const { return m_PcfFqdn; }
void PcfBindingPatch::setPcfFqdn(std::string const &value) {
  m_PcfFqdn = value;
  m_PcfFqdnIsSet = true;
}
bool PcfBindingPatch::pcfFqdnIsSet() const { return m_PcfFqdnIsSet; }
void PcfBindingPatch::unsetPcfFqdn() { m_PcfFqdnIsSet = false; }
std::vector<IpEndPoint> &PcfBindingPatch::getPcfIpEndPoints() {
  return m_PcfIpEndPoints;
}
void PcfBindingPatch::setPcfIpEndPoints(std::vector<IpEndPoint> const &value) {
  m_PcfIpEndPoints = value;
  m_PcfIpEndPointsIsSet = true;
}
bool PcfBindingPatch::pcfIpEndPointsIsSet() const {
  return m_PcfIpEndPointsIsSet;
}
void PcfBindingPatch::unsetPcfIpEndPoints() { m_PcfIpEndPointsIsSet = false; }
std::string PcfBindingPatch::getPcfDiamHost() const { return m_PcfDiamHost; }
void PcfBindingPatch::setPcfDiamHost(std::string const &value) {
  m_PcfDiamHost = value;
  m_PcfDiamHostIsSet = true;
}
bool PcfBindingPatch::pcfDiamHostIsSet() const { return m_PcfDiamHostIsSet; }
void PcfBindingPatch::unsetPcfDiamHost() { m_PcfDiamHostIsSet = false; }
std::string PcfBindingPatch::getPcfDiamRealm() const { return m_PcfDiamRealm; }
void PcfBindingPatch::setPcfDiamRealm(std::string const &value) {
  m_PcfDiamRealm = value;
  m_PcfDiamRealmIsSet = true;
}
bool PcfBindingPatch::pcfDiamRealmIsSet() const { return m_PcfDiamRealmIsSet; }
void PcfBindingPatch::unsetPcfDiamRealm() { m_PcfDiamRealmIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
