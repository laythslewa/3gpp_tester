/**
 * Unified Data Repository Service API file for policy data
 * The API version is defined in 3GPP TS 29.504 © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmPolicyData.h
 *
 * Contains the SM policy data for a given subscriber.
 */

#ifndef SmPolicyData_H_
#define SmPolicyData_H_

#include "SmPolicySnssaiData.h"
#include "UsageMonData.h"
#include "UsageMonDataLimit.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the SM policy data for a given subscriber.
/// </summary>
class SmPolicyData {
public:
  SmPolicyData();
  virtual ~SmPolicyData();

  void validate();

  /////////////////////////////////////////////
  /// SmPolicyData members

  /// <summary>
  /// Contains Session Management Policy data per S-NSSAI for all the SNSSAIs of
  /// the subscriber. The key of the map is the S-NSSAI.
  /// </summary>
  std::map<std::string, SmPolicySnssaiData> &getSmPolicySnssaiData();
  void
  setSmPolicySnssaiData(std::map<std::string, SmPolicySnssaiData> const &value);
  /// <summary>
  /// Contains a list of usage monitoring profiles associated with the
  /// subscriber. The limit identifier is used as the key of the map.
  /// </summary>
  std::map<std::string, UsageMonDataLimit> &getUmDataLimits();
  void setUmDataLimits(std::map<std::string, UsageMonDataLimit> const &value);
  bool umDataLimitsIsSet() const;
  void unsetUmDataLimits();
  /// <summary>
  /// Contains the remaining allowed usage data associated with the subscriber.
  /// The limit identifier is used as the key of the map.
  /// </summary>
  std::map<std::string, UsageMonData> &getUmData();
  void setUmData(std::map<std::string, UsageMonData> const &value);
  bool umDataIsSet() const;
  void unsetUmData();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();

  friend void to_json(nlohmann::json &j, const SmPolicyData &o);
  friend void from_json(const nlohmann::json &j, SmPolicyData &o);

protected:
  std::map<std::string, SmPolicySnssaiData> m_SmPolicySnssaiData;

  std::map<std::string, UsageMonDataLimit> m_UmDataLimits;
  bool m_UmDataLimitsIsSet;
  std::map<std::string, UsageMonData> m_UmData;
  bool m_UmDataIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SmPolicyData_H_ */
