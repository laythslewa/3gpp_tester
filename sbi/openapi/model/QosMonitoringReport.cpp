/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "QosMonitoringReport.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

QosMonitoringReport::QosMonitoringReport() {
  m_FlowsIsSet = false;
  m_UlDelaysIsSet = false;
  m_DlDelaysIsSet = false;
  m_RtDelaysIsSet = false;
}

QosMonitoringReport::~QosMonitoringReport() {}

void QosMonitoringReport::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const QosMonitoringReport &o) {
  j = nlohmann::json();
  if (o.flowsIsSet() || !o.m_Flows.empty())
    j["flows"] = o.m_Flows;
  if (o.ulDelaysIsSet() || !o.m_UlDelays.empty())
    j["ulDelays"] = o.m_UlDelays;
  if (o.dlDelaysIsSet() || !o.m_DlDelays.empty())
    j["dlDelays"] = o.m_DlDelays;
  if (o.rtDelaysIsSet() || !o.m_RtDelays.empty())
    j["rtDelays"] = o.m_RtDelays;
}

void from_json(const nlohmann::json &j, QosMonitoringReport &o) {
  if (j.find("flows") != j.end()) {
    j.at("flows").get_to(o.m_Flows);
    o.m_FlowsIsSet = true;
  }
  if (j.find("ulDelays") != j.end()) {
    j.at("ulDelays").get_to(o.m_UlDelays);
    o.m_UlDelaysIsSet = true;
  }
  if (j.find("dlDelays") != j.end()) {
    j.at("dlDelays").get_to(o.m_DlDelays);
    o.m_DlDelaysIsSet = true;
  }
  if (j.find("rtDelays") != j.end()) {
    j.at("rtDelays").get_to(o.m_RtDelays);
    o.m_RtDelaysIsSet = true;
  }
}

std::vector<Flows> &QosMonitoringReport::getFlows() { return m_Flows; }
void QosMonitoringReport::setFlows(std::vector<Flows> const &value) {
  m_Flows = value;
  m_FlowsIsSet = true;
}
bool QosMonitoringReport::flowsIsSet() const { return m_FlowsIsSet; }
void QosMonitoringReport::unsetFlows() { m_FlowsIsSet = false; }
std::vector<int32_t> &QosMonitoringReport::getUlDelays() { return m_UlDelays; }
void QosMonitoringReport::setUlDelays(std::vector<int32_t> const value) {
  m_UlDelays = value;
  m_UlDelaysIsSet = true;
}
bool QosMonitoringReport::ulDelaysIsSet() const { return m_UlDelaysIsSet; }
void QosMonitoringReport::unsetUlDelays() { m_UlDelaysIsSet = false; }
std::vector<int32_t> &QosMonitoringReport::getDlDelays() { return m_DlDelays; }
void QosMonitoringReport::setDlDelays(std::vector<int32_t> const value) {
  m_DlDelays = value;
  m_DlDelaysIsSet = true;
}
bool QosMonitoringReport::dlDelaysIsSet() const { return m_DlDelaysIsSet; }
void QosMonitoringReport::unsetDlDelays() { m_DlDelaysIsSet = false; }
std::vector<int32_t> &QosMonitoringReport::getRtDelays() { return m_RtDelays; }
void QosMonitoringReport::setRtDelays(std::vector<int32_t> const value) {
  m_RtDelays = value;
  m_RtDelaysIsSet = true;
}
bool QosMonitoringReport::rtDelaysIsSet() const { return m_RtDelaysIsSet; }
void QosMonitoringReport::unsetRtDelays() { m_RtDelaysIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
