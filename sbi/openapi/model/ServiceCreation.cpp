/**
 * GMDviaMBMSbyxMB
 * API for Group Message Delivery via MBMS by xMB Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ServiceCreation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ServiceCreation::ServiceCreation() {
  m_Self = "";
  m_SelfIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_ExternalGroupId = "";
  m_ExternalGroupIdIsSet = false;
  m_UserServiceId = "";
  m_UserServiceIdIsSet = false;
  m_ServiceClass = "";
  m_ServiceClassIsSet = false;
  m_ServiceLanguagesIsSet = false;
  m_ServiceNamesIsSet = false;
  m_ReceiveOnlyMode = false;
  m_ReceiveOnlyModeIsSet = false;
  m_ServiceAnnouncementModeIsSet = false;
}

ServiceCreation::~ServiceCreation() {}

void ServiceCreation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ServiceCreation &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.externalGroupIdIsSet())
    j["externalGroupId"] = o.m_ExternalGroupId;
  if (o.userServiceIdIsSet())
    j["userServiceId"] = o.m_UserServiceId;
  if (o.serviceClassIsSet())
    j["serviceClass"] = o.m_ServiceClass;
  if (o.serviceLanguagesIsSet() || !o.m_ServiceLanguages.empty())
    j["serviceLanguages"] = o.m_ServiceLanguages;
  if (o.serviceNamesIsSet() || !o.m_ServiceNames.empty())
    j["serviceNames"] = o.m_ServiceNames;
  if (o.receiveOnlyModeIsSet())
    j["receiveOnlyMode"] = o.m_ReceiveOnlyMode;
  if (o.serviceAnnouncementModeIsSet())
    j["serviceAnnouncementMode"] = o.m_ServiceAnnouncementMode;
}

void from_json(const nlohmann::json &j, ServiceCreation &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("externalGroupId") != j.end()) {
    j.at("externalGroupId").get_to(o.m_ExternalGroupId);
    o.m_ExternalGroupIdIsSet = true;
  }
  if (j.find("userServiceId") != j.end()) {
    j.at("userServiceId").get_to(o.m_UserServiceId);
    o.m_UserServiceIdIsSet = true;
  }
  if (j.find("serviceClass") != j.end()) {
    j.at("serviceClass").get_to(o.m_ServiceClass);
    o.m_ServiceClassIsSet = true;
  }
  if (j.find("serviceLanguages") != j.end()) {
    j.at("serviceLanguages").get_to(o.m_ServiceLanguages);
    o.m_ServiceLanguagesIsSet = true;
  }
  if (j.find("serviceNames") != j.end()) {
    j.at("serviceNames").get_to(o.m_ServiceNames);
    o.m_ServiceNamesIsSet = true;
  }
  if (j.find("receiveOnlyMode") != j.end()) {
    j.at("receiveOnlyMode").get_to(o.m_ReceiveOnlyMode);
    o.m_ReceiveOnlyModeIsSet = true;
  }
  if (j.find("serviceAnnouncementMode") != j.end()) {
    j.at("serviceAnnouncementMode").get_to(o.m_ServiceAnnouncementMode);
    o.m_ServiceAnnouncementModeIsSet = true;
  }
}

std::string ServiceCreation::getSelf() const { return m_Self; }
void ServiceCreation::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool ServiceCreation::selfIsSet() const { return m_SelfIsSet; }
void ServiceCreation::unsetSelf() { m_SelfIsSet = false; }
std::string ServiceCreation::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void ServiceCreation::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool ServiceCreation::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void ServiceCreation::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::string ServiceCreation::getExternalGroupId() const {
  return m_ExternalGroupId;
}
void ServiceCreation::setExternalGroupId(std::string const &value) {
  m_ExternalGroupId = value;
  m_ExternalGroupIdIsSet = true;
}
bool ServiceCreation::externalGroupIdIsSet() const {
  return m_ExternalGroupIdIsSet;
}
void ServiceCreation::unsetExternalGroupId() { m_ExternalGroupIdIsSet = false; }
std::string ServiceCreation::getUserServiceId() const {
  return m_UserServiceId;
}
void ServiceCreation::setUserServiceId(std::string const &value) {
  m_UserServiceId = value;
  m_UserServiceIdIsSet = true;
}
bool ServiceCreation::userServiceIdIsSet() const {
  return m_UserServiceIdIsSet;
}
void ServiceCreation::unsetUserServiceId() { m_UserServiceIdIsSet = false; }
std::string ServiceCreation::getServiceClass() const { return m_ServiceClass; }
void ServiceCreation::setServiceClass(std::string const &value) {
  m_ServiceClass = value;
  m_ServiceClassIsSet = true;
}
bool ServiceCreation::serviceClassIsSet() const { return m_ServiceClassIsSet; }
void ServiceCreation::unsetServiceClass() { m_ServiceClassIsSet = false; }
std::vector<std::string> &ServiceCreation::getServiceLanguages() {
  return m_ServiceLanguages;
}
void ServiceCreation::setServiceLanguages(
    std::vector<std::string> const &value) {
  m_ServiceLanguages = value;
  m_ServiceLanguagesIsSet = true;
}
bool ServiceCreation::serviceLanguagesIsSet() const {
  return m_ServiceLanguagesIsSet;
}
void ServiceCreation::unsetServiceLanguages() {
  m_ServiceLanguagesIsSet = false;
}
std::vector<std::string> &ServiceCreation::getServiceNames() {
  return m_ServiceNames;
}
void ServiceCreation::setServiceNames(std::vector<std::string> const &value) {
  m_ServiceNames = value;
  m_ServiceNamesIsSet = true;
}
bool ServiceCreation::serviceNamesIsSet() const { return m_ServiceNamesIsSet; }
void ServiceCreation::unsetServiceNames() { m_ServiceNamesIsSet = false; }
bool ServiceCreation::isReceiveOnlyMode() const { return m_ReceiveOnlyMode; }
void ServiceCreation::setReceiveOnlyMode(bool const value) {
  m_ReceiveOnlyMode = value;
  m_ReceiveOnlyModeIsSet = true;
}
bool ServiceCreation::receiveOnlyModeIsSet() const {
  return m_ReceiveOnlyModeIsSet;
}
void ServiceCreation::unsetReceiveOnlyMode() { m_ReceiveOnlyModeIsSet = false; }
ServiceAnnouncementMode ServiceCreation::getServiceAnnouncementMode() const {
  return m_ServiceAnnouncementMode;
}
void ServiceCreation::setServiceAnnouncementMode(
    ServiceAnnouncementMode const &value) {
  m_ServiceAnnouncementMode = value;
  m_ServiceAnnouncementModeIsSet = true;
}
bool ServiceCreation::serviceAnnouncementModeIsSet() const {
  return m_ServiceAnnouncementModeIsSet;
}
void ServiceCreation::unsetServiceAnnouncementMode() {
  m_ServiceAnnouncementModeIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
