/**
 * CAPIF_API_Provider_Management_API
 * API for API provider domain functions management. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "APIProviderEnrolmentDetails.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

APIProviderEnrolmentDetails::APIProviderEnrolmentDetails() {
  m_ApiProvDomId = "";
  m_ApiProvDomIdIsSet = false;
  m_RegSec = "";
  m_ApiProvFuncsIsSet = false;
  m_ApiProvDomInfo = "";
  m_ApiProvDomInfoIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
  m_FailReason = "";
  m_FailReasonIsSet = false;
}

APIProviderEnrolmentDetails::~APIProviderEnrolmentDetails() {}

void APIProviderEnrolmentDetails::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const APIProviderEnrolmentDetails &o) {
  j = nlohmann::json();
  if (o.apiProvDomIdIsSet())
    j["apiProvDomId"] = o.m_ApiProvDomId;
  j["regSec"] = o.m_RegSec;
  if (o.apiProvFuncsIsSet() || !o.m_ApiProvFuncs.empty())
    j["apiProvFuncs"] = o.m_ApiProvFuncs;
  if (o.apiProvDomInfoIsSet())
    j["apiProvDomInfo"] = o.m_ApiProvDomInfo;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
  if (o.failReasonIsSet())
    j["failReason"] = o.m_FailReason;
}

void from_json(const nlohmann::json &j, APIProviderEnrolmentDetails &o) {
  if (j.find("apiProvDomId") != j.end()) {
    j.at("apiProvDomId").get_to(o.m_ApiProvDomId);
    o.m_ApiProvDomIdIsSet = true;
  }
  j.at("regSec").get_to(o.m_RegSec);
  if (j.find("apiProvFuncs") != j.end()) {
    j.at("apiProvFuncs").get_to(o.m_ApiProvFuncs);
    o.m_ApiProvFuncsIsSet = true;
  }
  if (j.find("apiProvDomInfo") != j.end()) {
    j.at("apiProvDomInfo").get_to(o.m_ApiProvDomInfo);
    o.m_ApiProvDomInfoIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
  if (j.find("failReason") != j.end()) {
    j.at("failReason").get_to(o.m_FailReason);
    o.m_FailReasonIsSet = true;
  }
}

std::string APIProviderEnrolmentDetails::getApiProvDomId() const {
  return m_ApiProvDomId;
}
void APIProviderEnrolmentDetails::setApiProvDomId(std::string const &value) {
  m_ApiProvDomId = value;
  m_ApiProvDomIdIsSet = true;
}
bool APIProviderEnrolmentDetails::apiProvDomIdIsSet() const {
  return m_ApiProvDomIdIsSet;
}
void APIProviderEnrolmentDetails::unsetApiProvDomId() {
  m_ApiProvDomIdIsSet = false;
}
std::string APIProviderEnrolmentDetails::getRegSec() const { return m_RegSec; }
void APIProviderEnrolmentDetails::setRegSec(std::string const &value) {
  m_RegSec = value;
}
std::vector<APIProviderFunctionDetails> &
APIProviderEnrolmentDetails::getApiProvFuncs() {
  return m_ApiProvFuncs;
}
void APIProviderEnrolmentDetails::setApiProvFuncs(
    std::vector<APIProviderFunctionDetails> const &value) {
  m_ApiProvFuncs = value;
  m_ApiProvFuncsIsSet = true;
}
bool APIProviderEnrolmentDetails::apiProvFuncsIsSet() const {
  return m_ApiProvFuncsIsSet;
}
void APIProviderEnrolmentDetails::unsetApiProvFuncs() {
  m_ApiProvFuncsIsSet = false;
}
std::string APIProviderEnrolmentDetails::getApiProvDomInfo() const {
  return m_ApiProvDomInfo;
}
void APIProviderEnrolmentDetails::setApiProvDomInfo(std::string const &value) {
  m_ApiProvDomInfo = value;
  m_ApiProvDomInfoIsSet = true;
}
bool APIProviderEnrolmentDetails::apiProvDomInfoIsSet() const {
  return m_ApiProvDomInfoIsSet;
}
void APIProviderEnrolmentDetails::unsetApiProvDomInfo() {
  m_ApiProvDomInfoIsSet = false;
}
std::string APIProviderEnrolmentDetails::getSuppFeat() const {
  return m_SuppFeat;
}
void APIProviderEnrolmentDetails::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool APIProviderEnrolmentDetails::suppFeatIsSet() const {
  return m_SuppFeatIsSet;
}
void APIProviderEnrolmentDetails::unsetSuppFeat() { m_SuppFeatIsSet = false; }
std::string APIProviderEnrolmentDetails::getFailReason() const {
  return m_FailReason;
}
void APIProviderEnrolmentDetails::setFailReason(std::string const &value) {
  m_FailReason = value;
  m_FailReasonIsSet = true;
}
bool APIProviderEnrolmentDetails::failReasonIsSet() const {
  return m_FailReasonIsSet;
}
void APIProviderEnrolmentDetails::unsetFailReason() {
  m_FailReasonIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
