/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UserInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UserInformation::UserInformation() {
  m_ServedGPSI = "";
  m_ServedGPSIIsSet = false;
  m_ServedPEI = "";
  m_ServedPEIIsSet = false;
  m_UnauthenticatedFlag = false;
  m_UnauthenticatedFlagIsSet = false;
  m_RoamerInOutIsSet = false;
}

UserInformation::~UserInformation() {}

void UserInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UserInformation &o) {
  j = nlohmann::json();
  if (o.servedGPSIIsSet())
    j["servedGPSI"] = o.m_ServedGPSI;
  if (o.servedPEIIsSet())
    j["servedPEI"] = o.m_ServedPEI;
  if (o.unauthenticatedFlagIsSet())
    j["unauthenticatedFlag"] = o.m_UnauthenticatedFlag;
  if (o.roamerInOutIsSet())
    j["roamerInOut"] = o.m_RoamerInOut;
}

void from_json(const nlohmann::json &j, UserInformation &o) {
  if (j.find("servedGPSI") != j.end()) {
    j.at("servedGPSI").get_to(o.m_ServedGPSI);
    o.m_ServedGPSIIsSet = true;
  }
  if (j.find("servedPEI") != j.end()) {
    j.at("servedPEI").get_to(o.m_ServedPEI);
    o.m_ServedPEIIsSet = true;
  }
  if (j.find("unauthenticatedFlag") != j.end()) {
    j.at("unauthenticatedFlag").get_to(o.m_UnauthenticatedFlag);
    o.m_UnauthenticatedFlagIsSet = true;
  }
  if (j.find("roamerInOut") != j.end()) {
    j.at("roamerInOut").get_to(o.m_RoamerInOut);
    o.m_RoamerInOutIsSet = true;
  }
}

std::string UserInformation::getServedGPSI() const { return m_ServedGPSI; }
void UserInformation::setServedGPSI(std::string const &value) {
  m_ServedGPSI = value;
  m_ServedGPSIIsSet = true;
}
bool UserInformation::servedGPSIIsSet() const { return m_ServedGPSIIsSet; }
void UserInformation::unsetServedGPSI() { m_ServedGPSIIsSet = false; }
std::string UserInformation::getServedPEI() const { return m_ServedPEI; }
void UserInformation::setServedPEI(std::string const &value) {
  m_ServedPEI = value;
  m_ServedPEIIsSet = true;
}
bool UserInformation::servedPEIIsSet() const { return m_ServedPEIIsSet; }
void UserInformation::unsetServedPEI() { m_ServedPEIIsSet = false; }
bool UserInformation::isUnauthenticatedFlag() const {
  return m_UnauthenticatedFlag;
}
void UserInformation::setUnauthenticatedFlag(bool const value) {
  m_UnauthenticatedFlag = value;
  m_UnauthenticatedFlagIsSet = true;
}
bool UserInformation::unauthenticatedFlagIsSet() const {
  return m_UnauthenticatedFlagIsSet;
}
void UserInformation::unsetUnauthenticatedFlag() {
  m_UnauthenticatedFlagIsSet = false;
}
RoamerInOut UserInformation::getRoamerInOut() const { return m_RoamerInOut; }
void UserInformation::setRoamerInOut(RoamerInOut const &value) {
  m_RoamerInOut = value;
  m_RoamerInOutIsSet = true;
}
bool UserInformation::roamerInOutIsSet() const { return m_RoamerInOutIsSet; }
void UserInformation::unsetRoamerInOut() { m_RoamerInOutIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
