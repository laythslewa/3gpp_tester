/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service © 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PDUContainerInformation.h
 *
 *
 */

#ifndef PDUContainerInformation_H_
#define PDUContainerInformation_H_

#include "3GPPPSDataOffStatus.h"
#include "PresenceInfo.h"
#include "QosCharacteristics.h"
#include "QosData.h"
#include "RatType.h"
#include "ServingNetworkFunctionID.h"
#include "SteeringFunctionality.h"
#include "SteeringMode.h"
#include "UserLocation.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class PDUContainerInformation {
public:
  PDUContainerInformation();
  virtual ~PDUContainerInformation();

  void validate();

  /////////////////////////////////////////////
  /// PDUContainerInformation members

  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getTimeofFirstUsage() const;
  void setTimeofFirstUsage(std::string const &value);
  bool timeofFirstUsageIsSet() const;
  void unsetTimeofFirstUsage();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getTimeofLastUsage() const;
  void setTimeofLastUsage(std::string const &value);
  bool timeofLastUsageIsSet() const;
  void unsetTimeofLastUsage();
  /// <summary>
  ///
  /// </summary>
  QosData getQoSInformation() const;
  void setQoSInformation(QosData const &value);
  bool qoSInformationIsSet() const;
  void unsetQoSInformation();
  /// <summary>
  ///
  /// </summary>
  QosCharacteristics getQoSCharacteristics() const;
  void setQoSCharacteristics(QosCharacteristics const &value);
  bool qoSCharacteristicsIsSet() const;
  void unsetQoSCharacteristics();
  /// <summary>
  ///
  /// </summary>
  std::string getAFCorrelationInformation() const;
  void setAFCorrelationInformation(std::string const &value);
  bool aFCorrelationInformationIsSet() const;
  void unsetAFCorrelationInformation();
  /// <summary>
  ///
  /// </summary>
  UserLocation getUserLocationInformation() const;
  void setUserLocationInformation(UserLocation const &value);
  bool userLocationInformationIsSet() const;
  void unsetUserLocationInformation();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getUetimeZone() const;
  void setUetimeZone(std::string const &value);
  bool uetimeZoneIsSet() const;
  void unsetUetimeZone();
  /// <summary>
  ///
  /// </summary>
  RatType getRATType() const;
  void setRATType(RatType const &value);
  bool rATTypeIsSet() const;
  void unsetRATType();
  /// <summary>
  ///
  /// </summary>
  std::vector<ServingNetworkFunctionID> &getServingNodeID();
  void setServingNodeID(std::vector<ServingNetworkFunctionID> const &value);
  bool servingNodeIDIsSet() const;
  void unsetServingNodeID();
  /// <summary>
  ///
  /// </summary>
  std::map<std::string, PresenceInfo> &getPresenceReportingAreaInformation();
  void setPresenceReportingAreaInformation(
      std::map<std::string, PresenceInfo> const &value);
  bool presenceReportingAreaInformationIsSet() const;
  void unsetPresenceReportingAreaInformation();
  /// <summary>
  ///
  /// </summary>
  3GPPPSDataOffStatus getR3gppPSDataOffStatus() const;
  void setR3gppPSDataOffStatus(3GPPPSDataOffStatus const &value);
  bool r3gppPSDataOffStatusIsSet() const;
  void unsetr_3gppPSDataOffStatus();
  /// <summary>
  ///
  /// </summary>
  std::string getSponsorIdentity() const;
  void setSponsorIdentity(std::string const &value);
  bool sponsorIdentityIsSet() const;
  void unsetSponsorIdentity();
  /// <summary>
  ///
  /// </summary>
  std::string getApplicationserviceProviderIdentity() const;
  void setApplicationserviceProviderIdentity(std::string const &value);
  bool applicationserviceProviderIdentityIsSet() const;
  void unsetApplicationserviceProviderIdentity();
  /// <summary>
  ///
  /// </summary>
  std::string getChargingRuleBaseName() const;
  void setChargingRuleBaseName(std::string const &value);
  bool chargingRuleBaseNameIsSet() const;
  void unsetChargingRuleBaseName();
  /// <summary>
  ///
  /// </summary>
  SteeringFunctionality getMAPDUSteeringFunctionality() const;
  void setMAPDUSteeringFunctionality(SteeringFunctionality const &value);
  bool mAPDUSteeringFunctionalityIsSet() const;
  void unsetMAPDUSteeringFunctionality();
  /// <summary>
  ///
  /// </summary>
  SteeringMode getMAPDUSteeringMode() const;
  void setMAPDUSteeringMode(SteeringMode const &value);
  bool mAPDUSteeringModeIsSet() const;
  void unsetMAPDUSteeringMode();

  friend void to_json(nlohmann::json &j, const PDUContainerInformation &o);
  friend void from_json(const nlohmann::json &j, PDUContainerInformation &o);

protected:
  std::string m_TimeofFirstUsage;
  bool m_TimeofFirstUsageIsSet;
  std::string m_TimeofLastUsage;
  bool m_TimeofLastUsageIsSet;
  QosData m_QoSInformation;
  bool m_QoSInformationIsSet;
  QosCharacteristics m_QoSCharacteristics;
  bool m_QoSCharacteristicsIsSet;
  std::string m_AFCorrelationInformation;
  bool m_AFCorrelationInformationIsSet;
  UserLocation m_UserLocationInformation;
  bool m_UserLocationInformationIsSet;
  std::string m_UetimeZone;
  bool m_UetimeZoneIsSet;
  RatType m_RATType;
  bool m_RATTypeIsSet;
  std::vector<ServingNetworkFunctionID> m_ServingNodeID;
  bool m_ServingNodeIDIsSet;
  std::map<std::string, PresenceInfo> m_PresenceReportingAreaInformation;
  bool m_PresenceReportingAreaInformationIsSet;
  3GPPPSDataOffStatus m_r_3gppPSDataOffStatus;
  bool m_r_3gppPSDataOffStatusIsSet;
  std::string m_SponsorIdentity;
  bool m_SponsorIdentityIsSet;
  std::string m_ApplicationserviceProviderIdentity;
  bool m_ApplicationserviceProviderIdentityIsSet;
  std::string m_ChargingRuleBaseName;
  bool m_ChargingRuleBaseNameIsSet;
  SteeringFunctionality m_MAPDUSteeringFunctionality;
  bool m_MAPDUSteeringFunctionalityIsSet;
  SteeringMode m_MAPDUSteeringMode;
  bool m_MAPDUSteeringModeIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PDUContainerInformation_H_ */
