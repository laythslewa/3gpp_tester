/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SessionRuleReport.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SessionRuleReport::SessionRuleReport() {
  m_SessRuleFailureCodeIsSet = false;
  m_PolicyDecFailureReportsIsSet = false;
}

SessionRuleReport::~SessionRuleReport() {}

void SessionRuleReport::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SessionRuleReport &o) {
  j = nlohmann::json();
  j["ruleIds"] = o.m_RuleIds;
  j["ruleStatus"] = o.m_RuleStatus;
  if (o.sessRuleFailureCodeIsSet())
    j["sessRuleFailureCode"] = o.m_SessRuleFailureCode;
  if (o.policyDecFailureReportsIsSet() || !o.m_PolicyDecFailureReports.empty())
    j["policyDecFailureReports"] = o.m_PolicyDecFailureReports;
}

void from_json(const nlohmann::json &j, SessionRuleReport &o) {
  j.at("ruleIds").get_to(o.m_RuleIds);
  j.at("ruleStatus").get_to(o.m_RuleStatus);
  if (j.find("sessRuleFailureCode") != j.end()) {
    j.at("sessRuleFailureCode").get_to(o.m_SessRuleFailureCode);
    o.m_SessRuleFailureCodeIsSet = true;
  }
  if (j.find("policyDecFailureReports") != j.end()) {
    j.at("policyDecFailureReports").get_to(o.m_PolicyDecFailureReports);
    o.m_PolicyDecFailureReportsIsSet = true;
  }
}

std::vector<std::string> &SessionRuleReport::getRuleIds() { return m_RuleIds; }
void SessionRuleReport::setRuleIds(std::vector<std::string> const &value) {
  m_RuleIds = value;
}
RuleStatus SessionRuleReport::getRuleStatus() const { return m_RuleStatus; }
void SessionRuleReport::setRuleStatus(RuleStatus const &value) {
  m_RuleStatus = value;
}
SessionRuleFailureCode SessionRuleReport::getSessRuleFailureCode() const {
  return m_SessRuleFailureCode;
}
void SessionRuleReport::setSessRuleFailureCode(
    SessionRuleFailureCode const &value) {
  m_SessRuleFailureCode = value;
  m_SessRuleFailureCodeIsSet = true;
}
bool SessionRuleReport::sessRuleFailureCodeIsSet() const {
  return m_SessRuleFailureCodeIsSet;
}
void SessionRuleReport::unsetSessRuleFailureCode() {
  m_SessRuleFailureCodeIsSet = false;
}
std::vector<PolicyDecisionFailureCode> &
SessionRuleReport::getPolicyDecFailureReports() {
  return m_PolicyDecFailureReports;
}
void SessionRuleReport::setPolicyDecFailureReports(
    std::vector<PolicyDecisionFailureCode> const &value) {
  m_PolicyDecFailureReports = value;
  m_PolicyDecFailureReportsIsSet = true;
}
bool SessionRuleReport::policyDecFailureReportsIsSet() const {
  return m_PolicyDecFailureReportsIsSet;
}
void SessionRuleReport::unsetPolicyDecFailureReports() {
  m_PolicyDecFailureReportsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
