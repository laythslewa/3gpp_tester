/**
 * Nhss_EE
 * HSS Event Exposure Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ReachabilityForDataConfiguration.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ReachabilityForDataConfiguration::ReachabilityForDataConfiguration() {
  m_MaximumLatency = 0;
  m_MaximumLatencyIsSet = false;
  m_MaximumResponseTime = 0;
  m_MaximumResponseTimeIsSet = false;
  m_SuggestedPacketNumDl = 0;
  m_SuggestedPacketNumDlIsSet = false;
}

ReachabilityForDataConfiguration::~ReachabilityForDataConfiguration() {}

void ReachabilityForDataConfiguration::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ReachabilityForDataConfiguration &o) {
  j = nlohmann::json();
  if (o.maximumLatencyIsSet())
    j["maximumLatency"] = o.m_MaximumLatency;
  if (o.maximumResponseTimeIsSet())
    j["maximumResponseTime"] = o.m_MaximumResponseTime;
  if (o.suggestedPacketNumDlIsSet())
    j["suggestedPacketNumDl"] = o.m_SuggestedPacketNumDl;
}

void from_json(const nlohmann::json &j, ReachabilityForDataConfiguration &o) {
  if (j.find("maximumLatency") != j.end()) {
    j.at("maximumLatency").get_to(o.m_MaximumLatency);
    o.m_MaximumLatencyIsSet = true;
  }
  if (j.find("maximumResponseTime") != j.end()) {
    j.at("maximumResponseTime").get_to(o.m_MaximumResponseTime);
    o.m_MaximumResponseTimeIsSet = true;
  }
  if (j.find("suggestedPacketNumDl") != j.end()) {
    j.at("suggestedPacketNumDl").get_to(o.m_SuggestedPacketNumDl);
    o.m_SuggestedPacketNumDlIsSet = true;
  }
}

int32_t ReachabilityForDataConfiguration::getMaximumLatency() const {
  return m_MaximumLatency;
}
void ReachabilityForDataConfiguration::setMaximumLatency(int32_t const value) {
  m_MaximumLatency = value;
  m_MaximumLatencyIsSet = true;
}
bool ReachabilityForDataConfiguration::maximumLatencyIsSet() const {
  return m_MaximumLatencyIsSet;
}
void ReachabilityForDataConfiguration::unsetMaximumLatency() {
  m_MaximumLatencyIsSet = false;
}
int32_t ReachabilityForDataConfiguration::getMaximumResponseTime() const {
  return m_MaximumResponseTime;
}
void ReachabilityForDataConfiguration::setMaximumResponseTime(
    int32_t const value) {
  m_MaximumResponseTime = value;
  m_MaximumResponseTimeIsSet = true;
}
bool ReachabilityForDataConfiguration::maximumResponseTimeIsSet() const {
  return m_MaximumResponseTimeIsSet;
}
void ReachabilityForDataConfiguration::unsetMaximumResponseTime() {
  m_MaximumResponseTimeIsSet = false;
}
int32_t ReachabilityForDataConfiguration::getSuggestedPacketNumDl() const {
  return m_SuggestedPacketNumDl;
}
void ReachabilityForDataConfiguration::setSuggestedPacketNumDl(
    int32_t const value) {
  m_SuggestedPacketNumDl = value;
  m_SuggestedPacketNumDlIsSet = true;
}
bool ReachabilityForDataConfiguration::suggestedPacketNumDlIsSet() const {
  return m_SuggestedPacketNumDlIsSet;
}
void ReachabilityForDataConfiguration::unsetSuggestedPacketNumDl() {
  m_SuggestedPacketNumDlIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
