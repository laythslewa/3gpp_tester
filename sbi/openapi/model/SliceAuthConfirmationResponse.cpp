/**
 * Nnssaaf_NSSAA
 * Network Slice-Specific Authentication and Authorization Service. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SliceAuthConfirmationResponse.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SliceAuthConfirmationResponse::SliceAuthConfirmationResponse() {
  m_Gpsi = "";
  m_EapMessage = "";
  m_AuthResultIsSet = false;
}

SliceAuthConfirmationResponse::~SliceAuthConfirmationResponse() {}

void SliceAuthConfirmationResponse::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SliceAuthConfirmationResponse &o) {
  j = nlohmann::json();
  j["gpsi"] = o.m_Gpsi;
  j["snssai"] = o.m_Snssai;
  j["eapMessage"] = o.m_EapMessage;
  if (o.authResultIsSet())
    j["authResult"] = o.m_AuthResult;
}

void from_json(const nlohmann::json &j, SliceAuthConfirmationResponse &o) {
  j.at("gpsi").get_to(o.m_Gpsi);
  j.at("snssai").get_to(o.m_Snssai);
  j.at("eapMessage").get_to(o.m_EapMessage);
  if (j.find("authResult") != j.end()) {
    j.at("authResult").get_to(o.m_AuthResult);
    o.m_AuthResultIsSet = true;
  }
}

std::string SliceAuthConfirmationResponse::getGpsi() const { return m_Gpsi; }
void SliceAuthConfirmationResponse::setGpsi(std::string const &value) {
  m_Gpsi = value;
}
Snssai SliceAuthConfirmationResponse::getSnssai() const { return m_Snssai; }
void SliceAuthConfirmationResponse::setSnssai(Snssai const &value) {
  m_Snssai = value;
}
std::string SliceAuthConfirmationResponse::getEapMessage() const {
  return m_EapMessage;
}
void SliceAuthConfirmationResponse::setEapMessage(std::string const &value) {
  m_EapMessage = value;
}
AuthStatus SliceAuthConfirmationResponse::getAuthResult() const {
  return m_AuthResult;
}
void SliceAuthConfirmationResponse::setAuthResult(AuthStatus const &value) {
  m_AuthResult = value;
  m_AuthResultIsSet = true;
}
bool SliceAuthConfirmationResponse::authResultIsSet() const {
  return m_AuthResultIsSet;
}
void SliceAuthConfirmationResponse::unsetAuthResult() {
  m_AuthResultIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
