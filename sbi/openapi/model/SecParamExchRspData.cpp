/**
 * N32 Handshake API
 * N32-c Handshake Service.  Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC).  All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SecParamExchRspData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SecParamExchRspData::SecParamExchRspData() {
  m_N32fContextId = "";
  m_SelectedJweCipherSuite = "";
  m_SelectedJweCipherSuiteIsSet = false;
  m_SelectedJwsCipherSuite = "";
  m_SelectedJwsCipherSuiteIsSet = false;
  m_SelProtectionPolicyInfoIsSet = false;
  m_IpxProviderSecInfoListIsSet = false;
  m_Sender = "";
  m_SenderIsSet = false;
}

SecParamExchRspData::~SecParamExchRspData() {}

void SecParamExchRspData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SecParamExchRspData &o) {
  j = nlohmann::json();
  j["n32fContextId"] = o.m_N32fContextId;
  if (o.selectedJweCipherSuiteIsSet())
    j["selectedJweCipherSuite"] = o.m_SelectedJweCipherSuite;
  if (o.selectedJwsCipherSuiteIsSet())
    j["selectedJwsCipherSuite"] = o.m_SelectedJwsCipherSuite;
  if (o.selProtectionPolicyInfoIsSet())
    j["selProtectionPolicyInfo"] = o.m_SelProtectionPolicyInfo;
  if (o.ipxProviderSecInfoListIsSet() || !o.m_IpxProviderSecInfoList.empty())
    j["ipxProviderSecInfoList"] = o.m_IpxProviderSecInfoList;
  if (o.senderIsSet())
    j["sender"] = o.m_Sender;
}

void from_json(const nlohmann::json &j, SecParamExchRspData &o) {
  j.at("n32fContextId").get_to(o.m_N32fContextId);
  if (j.find("selectedJweCipherSuite") != j.end()) {
    j.at("selectedJweCipherSuite").get_to(o.m_SelectedJweCipherSuite);
    o.m_SelectedJweCipherSuiteIsSet = true;
  }
  if (j.find("selectedJwsCipherSuite") != j.end()) {
    j.at("selectedJwsCipherSuite").get_to(o.m_SelectedJwsCipherSuite);
    o.m_SelectedJwsCipherSuiteIsSet = true;
  }
  if (j.find("selProtectionPolicyInfo") != j.end()) {
    j.at("selProtectionPolicyInfo").get_to(o.m_SelProtectionPolicyInfo);
    o.m_SelProtectionPolicyInfoIsSet = true;
  }
  if (j.find("ipxProviderSecInfoList") != j.end()) {
    j.at("ipxProviderSecInfoList").get_to(o.m_IpxProviderSecInfoList);
    o.m_IpxProviderSecInfoListIsSet = true;
  }
  if (j.find("sender") != j.end()) {
    j.at("sender").get_to(o.m_Sender);
    o.m_SenderIsSet = true;
  }
}

std::string SecParamExchRspData::getN32fContextId() const {
  return m_N32fContextId;
}
void SecParamExchRspData::setN32fContextId(std::string const &value) {
  m_N32fContextId = value;
}
std::string SecParamExchRspData::getSelectedJweCipherSuite() const {
  return m_SelectedJweCipherSuite;
}
void SecParamExchRspData::setSelectedJweCipherSuite(std::string const &value) {
  m_SelectedJweCipherSuite = value;
  m_SelectedJweCipherSuiteIsSet = true;
}
bool SecParamExchRspData::selectedJweCipherSuiteIsSet() const {
  return m_SelectedJweCipherSuiteIsSet;
}
void SecParamExchRspData::unsetSelectedJweCipherSuite() {
  m_SelectedJweCipherSuiteIsSet = false;
}
std::string SecParamExchRspData::getSelectedJwsCipherSuite() const {
  return m_SelectedJwsCipherSuite;
}
void SecParamExchRspData::setSelectedJwsCipherSuite(std::string const &value) {
  m_SelectedJwsCipherSuite = value;
  m_SelectedJwsCipherSuiteIsSet = true;
}
bool SecParamExchRspData::selectedJwsCipherSuiteIsSet() const {
  return m_SelectedJwsCipherSuiteIsSet;
}
void SecParamExchRspData::unsetSelectedJwsCipherSuite() {
  m_SelectedJwsCipherSuiteIsSet = false;
}
ProtectionPolicy SecParamExchRspData::getSelProtectionPolicyInfo() const {
  return m_SelProtectionPolicyInfo;
}
void SecParamExchRspData::setSelProtectionPolicyInfo(
    ProtectionPolicy const &value) {
  m_SelProtectionPolicyInfo = value;
  m_SelProtectionPolicyInfoIsSet = true;
}
bool SecParamExchRspData::selProtectionPolicyInfoIsSet() const {
  return m_SelProtectionPolicyInfoIsSet;
}
void SecParamExchRspData::unsetSelProtectionPolicyInfo() {
  m_SelProtectionPolicyInfoIsSet = false;
}
std::vector<IpxProviderSecInfo> &
SecParamExchRspData::getIpxProviderSecInfoList() {
  return m_IpxProviderSecInfoList;
}
void SecParamExchRspData::setIpxProviderSecInfoList(
    std::vector<IpxProviderSecInfo> const &value) {
  m_IpxProviderSecInfoList = value;
  m_IpxProviderSecInfoListIsSet = true;
}
bool SecParamExchRspData::ipxProviderSecInfoListIsSet() const {
  return m_IpxProviderSecInfoListIsSet;
}
void SecParamExchRspData::unsetIpxProviderSecInfoList() {
  m_IpxProviderSecInfoListIsSet = false;
}
std::string SecParamExchRspData::getSender() const { return m_Sender; }
void SecParamExchRspData::setSender(std::string const &value) {
  m_Sender = value;
  m_SenderIsSet = true;
}
bool SecParamExchRspData::senderIsSet() const { return m_SenderIsSet; }
void SecParamExchRspData::unsetSender() { m_SenderIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
