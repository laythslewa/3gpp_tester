/**
 * Nucmf_UECapabilityManagement
 * Nucmf_UECapabilityManagement Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DictionaryEntryStoreApi.h
 *
 *
 */

#ifndef DictionaryEntryStoreApi_H_
#define DictionaryEntryStoreApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "Inline_response_200.h"
#include "ProblemDetails.h"
#include "RacFormat.h"
#include "RedirectResponse.h"
#include "UeRadioCapaId.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class DictionaryEntryStoreApi {
public:
  DictionaryEntryStoreApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~DictionaryEntryStoreApi() {}
  void init();

  const std::string base = "/nucmf-uecm/v1";

private:
  void setupRoutes();

  void
  retrieve_dictionary_entry_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);
  void dictionary_entry_store_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// retrieve a dictionary entry matching query parameters
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueRadioCapaId">UE Radio Capability ID, either PLMN Assigned
  /// or Manufacturer Assigned</param> <param name="racFormat">Encoding format
  /// of RAC Info (optional, default to RacFormat())</param> <param
  /// name="supportedFeatures">supported features of the NF consumer (optional,
  /// default to &quot;&quot;)</param>
  virtual void retrieve_dictionary_entry(
      const Pistache::Optional<UeRadioCapaId> &ueRadioCapaId,
      const Pistache::Optional<RacFormat> &racFormat,
      const Pistache::Optional<std::string> &supportedFeatures,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* DictionaryEntryStoreApi_H_ */
