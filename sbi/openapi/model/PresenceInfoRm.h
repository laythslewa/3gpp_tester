/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.3.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PresenceInfoRm.h
 *
 * This data type is defined in the same way as the \&quot;PresenceInfo\&quot;
 * data type, but with the OpenAPI \&quot;nullable&#x3D; true\&quot; property.
 * If the additionalPraId IE is present, this IE shall state the presence
 * information of the UE for the individual PRA identified by the
 * additionalPraId IE; If the additionalPraId IE is not present, this IE shall
 * state the presence information of the UE for the PRA identified by the praId
 * IE.
 */

#ifndef PresenceInfoRm_H_
#define PresenceInfoRm_H_

#include "Ecgi.h"
#include "GlobalRanNodeId.h"
#include "Ncgi.h"
#include "PresenceState.h"
#include "Tai.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// This data type is defined in the same way as the \&quot;PresenceInfo\&quot;
/// data type, but with the OpenAPI \&quot;nullable&#x3D; true\&quot; property.
/// If the additionalPraId IE is present, this IE shall state the presence
/// information of the UE for the individual PRA identified by the
/// additionalPraId IE; If the additionalPraId IE is not present, this IE shall
/// state the presence information of the UE for the PRA identified by the praId
/// IE.
/// </summary>
class PresenceInfoRm {
public:
  PresenceInfoRm();
  virtual ~PresenceInfoRm();

  void validate();

  /////////////////////////////////////////////
  /// PresenceInfoRm members

  /// <summary>
  /// Represents an identifier of the Presence Reporting Area (see clause 28.10
  /// of 3GPP TS 23.003. This IE shall be present if the Area of Interest
  /// subscribed or reported is a Presence Reporting Area or a Set of Core
  /// Network predefined Presence Reporting Areas. When present, it shall be
  /// encoded as a string representing an integer in the following ranges: 0 to
  /// 8 388 607 for UE-dedicated PRA 8 388 608 to 16 777 215 for Core Network
  /// predefined PRA Examples: PRA ID 123 is encoded as \&quot;123\&quot; PRA ID
  /// 11 238 660 is encoded as \&quot;11238660\&quot;
  /// </summary>
  std::string getPraId() const;
  void setPraId(std::string const &value);
  bool praIdIsSet() const;
  void unsetPraId();
  /// <summary>
  /// This IE may be present if the praId IE is present and if it contains a PRA
  /// identifier referring to a set of Core Network predefined Presence
  /// Reporting Areas. When present, this IE shall contain a PRA Identifier of
  /// an individual PRA within the Set of Core Network predefined Presence
  /// Reporting Areas indicated by the praId IE.
  /// </summary>
  std::string getAdditionalPraId() const;
  void setAdditionalPraId(std::string const &value);
  bool additionalPraIdIsSet() const;
  void unsetAdditionalPraId();
  /// <summary>
  ///
  /// </summary>
  PresenceState getPresenceState() const;
  void setPresenceState(PresenceState const &value);
  bool presenceStateIsSet() const;
  void unsetPresenceState();
  /// <summary>
  /// Represents the list of tracking areas that constitutes the area. This IE
  /// shall be present if the subscription or the event report is for tracking
  /// UE presence in the tracking areas. For non 3GPP access the TAI shall be
  /// the N3GPP TAI.
  /// </summary>
  std::vector<Tai> &getTrackingAreaList();
  void setTrackingAreaList(std::vector<Tai> const &value);
  bool trackingAreaListIsSet() const;
  void unsetTrackingAreaList();
  /// <summary>
  /// Represents the list of EUTRAN cell Ids that constitutes the area. This IE
  /// shall be present if the Area of Interest subscribed is a list of EUTRAN
  /// cell Ids.
  /// </summary>
  std::vector<Ecgi> &getEcgiList();
  void setEcgiList(std::vector<Ecgi> const &value);
  bool ecgiListIsSet() const;
  void unsetEcgiList();
  /// <summary>
  /// Represents the list of NR cell Ids that constitutes the area. This IE
  /// shall be present if the Area of Interest subscribed is a list of NR cell
  /// Ids.
  /// </summary>
  std::vector<Ncgi> &getNcgiList();
  void setNcgiList(std::vector<Ncgi> const &value);
  bool ncgiListIsSet() const;
  void unsetNcgiList();
  /// <summary>
  /// Represents the list of NG RAN node identifiers that constitutes the area.
  /// This IE shall be present if the Area of Interest subscribed is a list of
  /// NG RAN node identifiers.
  /// </summary>
  std::vector<GlobalRanNodeId> &getGlobalRanNodeIdList();
  void setGlobalRanNodeIdList(std::vector<GlobalRanNodeId> const &value);
  bool globalRanNodeIdListIsSet() const;
  void unsetGlobalRanNodeIdList();
  /// <summary>
  /// Represents the list of eNodeB identifiers that constitutes the area. This
  /// IE shall be present if the Area of Interest subscribed is a list of eNodeB
  /// identifiers.
  /// </summary>
  std::vector<GlobalRanNodeId> &getGlobaleNbIdList();
  void setGlobaleNbIdList(std::vector<GlobalRanNodeId> const &value);
  bool globaleNbIdListIsSet() const;
  void unsetGlobaleNbIdList();

  friend void to_json(nlohmann::json &j, const PresenceInfoRm &o);
  friend void from_json(const nlohmann::json &j, PresenceInfoRm &o);

protected:
  std::string m_PraId;
  bool m_PraIdIsSet;
  std::string m_AdditionalPraId;
  bool m_AdditionalPraIdIsSet;
  PresenceState m_PresenceState;
  bool m_PresenceStateIsSet;
  std::vector<Tai> m_TrackingAreaList;
  bool m_TrackingAreaListIsSet;
  std::vector<Ecgi> m_EcgiList;
  bool m_EcgiListIsSet;
  std::vector<Ncgi> m_NcgiList;
  bool m_NcgiListIsSet;
  std::vector<GlobalRanNodeId> m_GlobalRanNodeIdList;
  bool m_GlobalRanNodeIdListIsSet;
  std::vector<GlobalRanNodeId> m_GlobaleNbIdList;
  bool m_GlobaleNbIdListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PresenceInfoRm_H_ */
