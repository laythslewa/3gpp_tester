/**
 * Unified Data Repository Service API file for Application Data
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IPTVConfigurationDataStoreApi.h
 *
 *
 */

#ifndef IPTVConfigurationDataStoreApi_H_
#define IPTVConfigurationDataStoreApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "IptvConfigData.h"
#include "ProblemDetails.h"
#include "Snssai.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class IPTVConfigurationDataStoreApi {
public:
  IPTVConfigurationDataStoreApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~IPTVConfigurationDataStoreApi() {}
  void init();

  const std::string base = "";

private:
  void setupRoutes();

  void
  read_iptv_congifuration_data_handler(const Pistache::Rest::Request &request,
                                       Pistache::Http::ResponseWriter response);
  void iptv_configuration_data_store_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Retrieve IPTV configuration Data
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="configIds">Each element identifies a configuration.
  /// (optional, default to std::vector&lt;std::string&gt;())</param> <param
  /// name="dnns">Each element identifies a DNN. (optional, default to
  /// std::vector&lt;std::string&gt;())</param> <param name="snssais">Each
  /// element identifies a slice. (optional, default to
  /// std::vector&lt;Snssai&gt;())</param> <param name="supis">Each element
  /// identifies the user. (optional, default to
  /// std::vector&lt;std::string&gt;())</param> <param name="interGroupIds">Each
  /// element identifies a group of users. (optional, default to
  /// std::vector&lt;std::string&gt;())</param>
  virtual void read_iptv_congifuration_data(
      const Pistache::Optional<std::vector<std::string>> &configIds,
      const Pistache::Optional<std::vector<std::string>> &dnns,
      const Pistache::Optional<std::vector<Snssai>> &snssais,
      const Pistache::Optional<std::vector<std::string>> &supis,
      const Pistache::Optional<std::vector<std::string>> &interGroupIds,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IPTVConfigurationDataStoreApi_H_ */
