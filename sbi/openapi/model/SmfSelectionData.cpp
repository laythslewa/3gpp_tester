/**
 * Npcf_AMPolicyControl
 * Access and Mobility Policy Control Service. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SmfSelectionData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SmfSelectionData::SmfSelectionData() {
  m_UnsuppDnn = false;
  m_UnsuppDnnIsSet = false;
  m_CandidatesIsSet = false;
  m_SnssaiIsSet = false;
  m_MappingSnssaiIsSet = false;
  m_Dnn = "";
  m_DnnIsSet = false;
}

SmfSelectionData::~SmfSelectionData() {}

void SmfSelectionData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SmfSelectionData &o) {
  j = nlohmann::json();
  if (o.unsuppDnnIsSet())
    j["unsuppDnn"] = o.m_UnsuppDnn;
  if (o.candidatesIsSet() || !o.m_Candidates.empty())
    j["candidates"] = o.m_Candidates;
  if (o.snssaiIsSet())
    j["snssai"] = o.m_Snssai;
  if (o.mappingSnssaiIsSet())
    j["mappingSnssai"] = o.m_MappingSnssai;
  if (o.dnnIsSet())
    j["dnn"] = o.m_Dnn;
}

void from_json(const nlohmann::json &j, SmfSelectionData &o) {
  if (j.find("unsuppDnn") != j.end()) {
    j.at("unsuppDnn").get_to(o.m_UnsuppDnn);
    o.m_UnsuppDnnIsSet = true;
  }
  if (j.find("candidates") != j.end()) {
    j.at("candidates").get_to(o.m_Candidates);
    o.m_CandidatesIsSet = true;
  }
  if (j.find("snssai") != j.end()) {
    j.at("snssai").get_to(o.m_Snssai);
    o.m_SnssaiIsSet = true;
  }
  if (j.find("mappingSnssai") != j.end()) {
    j.at("mappingSnssai").get_to(o.m_MappingSnssai);
    o.m_MappingSnssaiIsSet = true;
  }
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
}

bool SmfSelectionData::isUnsuppDnn() const { return m_UnsuppDnn; }
void SmfSelectionData::setUnsuppDnn(bool const value) {
  m_UnsuppDnn = value;
  m_UnsuppDnnIsSet = true;
}
bool SmfSelectionData::unsuppDnnIsSet() const { return m_UnsuppDnnIsSet; }
void SmfSelectionData::unsetUnsuppDnn() { m_UnsuppDnnIsSet = false; }
std::map<std::string, CandidateForReplacement> &
SmfSelectionData::getCandidates() {
  return m_Candidates;
}
void SmfSelectionData::setCandidates(
    std::map<std::string, CandidateForReplacement> const &value) {
  m_Candidates = value;
  m_CandidatesIsSet = true;
}
bool SmfSelectionData::candidatesIsSet() const { return m_CandidatesIsSet; }
void SmfSelectionData::unsetCandidates() { m_CandidatesIsSet = false; }
Snssai SmfSelectionData::getSnssai() const { return m_Snssai; }
void SmfSelectionData::setSnssai(Snssai const &value) {
  m_Snssai = value;
  m_SnssaiIsSet = true;
}
bool SmfSelectionData::snssaiIsSet() const { return m_SnssaiIsSet; }
void SmfSelectionData::unsetSnssai() { m_SnssaiIsSet = false; }
Snssai SmfSelectionData::getMappingSnssai() const { return m_MappingSnssai; }
void SmfSelectionData::setMappingSnssai(Snssai const &value) {
  m_MappingSnssai = value;
  m_MappingSnssaiIsSet = true;
}
bool SmfSelectionData::mappingSnssaiIsSet() const {
  return m_MappingSnssaiIsSet;
}
void SmfSelectionData::unsetMappingSnssai() { m_MappingSnssaiIsSet = false; }
std::string SmfSelectionData::getDnn() const { return m_Dnn; }
void SmfSelectionData::setDnn(std::string const &value) {
  m_Dnn = value;
  m_DnnIsSet = true;
}
bool SmfSelectionData::dnnIsSet() const { return m_DnnIsSet; }
void SmfSelectionData::unsetDnn() { m_DnnIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
