/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.3.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TraceData.h
 *
 *
 */

#ifndef TraceData_H_
#define TraceData_H_

#include "Ipv6Addr.h"
#include "TraceDepth.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class TraceData {
public:
  TraceData();
  virtual ~TraceData();

  void validate();

  /////////////////////////////////////////////
  /// TraceData members

  /// <summary>
  /// Trace Reference (see 3GPP TS 32.422).It shall be encoded as the
  /// concatenation of MCC, MNC and Trace ID as
  /// follows:&lt;MCC&gt;&lt;MNC&gt;-&lt;Trace ID&gt;The Trace ID shall be
  /// encoded as a 3 octet string in hexadecimal representation. Each character
  /// in the Trace ID string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent 4 bits. The most significant character
  /// representing the 4 most significant bits of the Trace ID shall appear
  /// first in the string, and the character representing the 4 least
  /// significant bit of the Trace ID shall appear last in the string.
  /// </summary>
  std::string getTraceRef() const;
  void setTraceRef(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  TraceDepth getTraceDepth() const;
  void setTraceDepth(TraceDepth const &value);
  /// <summary>
  /// List of NE Types (see 3GPP TS 32.422).It shall be encoded as an octet
  /// string in hexadecimal representation. Each character in the string shall
  /// take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to
  /// \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent
  /// 4 bits. The most significant character representing the 4 most significant
  /// bits shall appear first in the string, and the character representing the
  /// 4 least significant bit shall appear last in the string.Octets shall be
  /// coded according to 3GPP TS 32.422.
  /// </summary>
  std::string getNeTypeList() const;
  void setNeTypeList(std::string const &value);
  /// <summary>
  /// Triggering events (see 3GPP TS 32.422).It shall be encoded as an octet
  /// string in hexadecimal representation. Each character in the string shall
  /// take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to
  /// \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent
  /// 4 bits. The most significant character representing the 4 most significant
  /// bits shall appear first in the string, and the character representing the
  /// 4 least significant bit shall appear last in the string.Octets shall be
  /// coded according to 3GPP TS 32.422.
  /// </summary>
  std::string getEventList() const;
  void setEventList(std::string const &value);
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getCollectionEntityIpv4Addr() const;
  void setCollectionEntityIpv4Addr(std::string const &value);
  bool collectionEntityIpv4AddrIsSet() const;
  void unsetCollectionEntityIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getCollectionEntityIpv6Addr() const;
  void setCollectionEntityIpv6Addr(Ipv6Addr const &value);
  bool collectionEntityIpv6AddrIsSet() const;
  void unsetCollectionEntityIpv6Addr();
  /// <summary>
  /// List of Interfaces (see 3GPP TS 32.422).It shall be encoded as an octet
  /// string in hexadecimal representation. Each character in the string shall
  /// take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to
  /// \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent
  /// 4 bits. The most significant character representing the 4 most significant
  /// bits shall appear first in the string, and the character representing the
  /// 4 least significant bit shall appear last in the string.Octets shall be
  /// coded according to 3GPP TS 32.422. If this attribute is not present, all
  /// the interfaces applicable to the list of NE types indicated in the
  /// neTypeList attribute should be traced.
  /// </summary>
  std::string getInterfaceList() const;
  void setInterfaceList(std::string const &value);
  bool interfaceListIsSet() const;
  void unsetInterfaceList();

  friend void to_json(nlohmann::json &j, const TraceData &o);
  friend void from_json(const nlohmann::json &j, TraceData &o);

protected:
  std::string m_TraceRef;

  TraceDepth m_TraceDepth;

  std::string m_NeTypeList;

  std::string m_EventList;

  std::string m_CollectionEntityIpv4Addr;
  bool m_CollectionEntityIpv4AddrIsSet;
  Ipv6Addr m_CollectionEntityIpv6Addr;
  bool m_CollectionEntityIpv6AddrIsSet;
  std::string m_InterfaceList;
  bool m_InterfaceListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* TraceData_H_ */
