/**
 * Nnwdaf_EventsSubscription
 * Nnwdaf_EventsSubscription Service API. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeMobility.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeMobility::UeMobility() {
  m_Ts = "";
  m_TsIsSet = false;
  m_RecurringTimeIsSet = false;
  m_Duration = 0;
  m_DurationVariance = 0.0f;
  m_DurationVarianceIsSet = false;
}

UeMobility::~UeMobility() {}

void UeMobility::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UeMobility &o) {
  j = nlohmann::json();
  if (o.tsIsSet())
    j["ts"] = o.m_Ts;
  if (o.recurringTimeIsSet())
    j["recurringTime"] = o.m_RecurringTime;
  j["duration"] = o.m_Duration;
  if (o.durationVarianceIsSet())
    j["durationVariance"] = o.m_DurationVariance;
  j["locInfos"] = o.m_LocInfos;
}

void from_json(const nlohmann::json &j, UeMobility &o) {
  if (j.find("ts") != j.end()) {
    j.at("ts").get_to(o.m_Ts);
    o.m_TsIsSet = true;
  }
  if (j.find("recurringTime") != j.end()) {
    j.at("recurringTime").get_to(o.m_RecurringTime);
    o.m_RecurringTimeIsSet = true;
  }
  j.at("duration").get_to(o.m_Duration);
  if (j.find("durationVariance") != j.end()) {
    j.at("durationVariance").get_to(o.m_DurationVariance);
    o.m_DurationVarianceIsSet = true;
  }
  j.at("locInfos").get_to(o.m_LocInfos);
}

std::string UeMobility::getTs() const { return m_Ts; }
void UeMobility::setTs(std::string const &value) {
  m_Ts = value;
  m_TsIsSet = true;
}
bool UeMobility::tsIsSet() const { return m_TsIsSet; }
void UeMobility::unsetTs() { m_TsIsSet = false; }
ScheduledCommunicationTime UeMobility::getRecurringTime() const {
  return m_RecurringTime;
}
void UeMobility::setRecurringTime(ScheduledCommunicationTime const &value) {
  m_RecurringTime = value;
  m_RecurringTimeIsSet = true;
}
bool UeMobility::recurringTimeIsSet() const { return m_RecurringTimeIsSet; }
void UeMobility::unsetRecurringTime() { m_RecurringTimeIsSet = false; }
int32_t UeMobility::getDuration() const { return m_Duration; }
void UeMobility::setDuration(int32_t const value) { m_Duration = value; }
float UeMobility::getDurationVariance() const { return m_DurationVariance; }
void UeMobility::setDurationVariance(float const value) {
  m_DurationVariance = value;
  m_DurationVarianceIsSet = true;
}
bool UeMobility::durationVarianceIsSet() const {
  return m_DurationVarianceIsSet;
}
void UeMobility::unsetDurationVariance() { m_DurationVarianceIsSet = false; }
std::vector<LocationInfo> &UeMobility::getLocInfos() { return m_LocInfos; }
void UeMobility::setLocInfos(std::vector<LocationInfo> const &value) {
  m_LocInfos = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
