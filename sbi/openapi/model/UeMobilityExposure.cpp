/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeMobilityExposure.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeMobilityExposure::UeMobilityExposure() {
  m_Ts = "";
  m_TsIsSet = false;
  m_RecurringTimeIsSet = false;
  m_Duration = 0;
  m_DurationVariance = 0.0f;
  m_DurationVarianceIsSet = false;
}

UeMobilityExposure::~UeMobilityExposure() {}

void UeMobilityExposure::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UeMobilityExposure &o) {
  j = nlohmann::json();
  if (o.tsIsSet())
    j["ts"] = o.m_Ts;
  if (o.recurringTimeIsSet())
    j["recurringTime"] = o.m_RecurringTime;
  j["duration"] = o.m_Duration;
  if (o.durationVarianceIsSet())
    j["durationVariance"] = o.m_DurationVariance;
  j["locInfo"] = o.m_LocInfo;
}

void from_json(const nlohmann::json &j, UeMobilityExposure &o) {
  if (j.find("ts") != j.end()) {
    j.at("ts").get_to(o.m_Ts);
    o.m_TsIsSet = true;
  }
  if (j.find("recurringTime") != j.end()) {
    j.at("recurringTime").get_to(o.m_RecurringTime);
    o.m_RecurringTimeIsSet = true;
  }
  j.at("duration").get_to(o.m_Duration);
  if (j.find("durationVariance") != j.end()) {
    j.at("durationVariance").get_to(o.m_DurationVariance);
    o.m_DurationVarianceIsSet = true;
  }
  j.at("locInfo").get_to(o.m_LocInfo);
}

std::string UeMobilityExposure::getTs() const { return m_Ts; }
void UeMobilityExposure::setTs(std::string const &value) {
  m_Ts = value;
  m_TsIsSet = true;
}
bool UeMobilityExposure::tsIsSet() const { return m_TsIsSet; }
void UeMobilityExposure::unsetTs() { m_TsIsSet = false; }
ScheduledCommunicationTime UeMobilityExposure::getRecurringTime() const {
  return m_RecurringTime;
}
void UeMobilityExposure::setRecurringTime(
    ScheduledCommunicationTime const &value) {
  m_RecurringTime = value;
  m_RecurringTimeIsSet = true;
}
bool UeMobilityExposure::recurringTimeIsSet() const {
  return m_RecurringTimeIsSet;
}
void UeMobilityExposure::unsetRecurringTime() { m_RecurringTimeIsSet = false; }
int32_t UeMobilityExposure::getDuration() const { return m_Duration; }
void UeMobilityExposure::setDuration(int32_t const value) {
  m_Duration = value;
}
float UeMobilityExposure::getDurationVariance() const {
  return m_DurationVariance;
}
void UeMobilityExposure::setDurationVariance(float const value) {
  m_DurationVariance = value;
  m_DurationVarianceIsSet = true;
}
bool UeMobilityExposure::durationVarianceIsSet() const {
  return m_DurationVarianceIsSet;
}
void UeMobilityExposure::unsetDurationVariance() {
  m_DurationVarianceIsSet = false;
}
std::vector<UeLocationInfo> &UeMobilityExposure::getLocInfo() {
  return m_LocInfo;
}
void UeMobilityExposure::setLocInfo(std::vector<UeLocationInfo> const &value) {
  m_LocInfo = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
