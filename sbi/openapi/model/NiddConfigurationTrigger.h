/**
 * 3gpp-nidd-configuration-trigger
 * API for NIDD Configuration Trigger. © 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NiddConfigurationTrigger.h
 *
 * Represents a NIDD configuration trigger.
 */

#ifndef NiddConfigurationTrigger_H_
#define NiddConfigurationTrigger_H_

#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a NIDD configuration trigger.
/// </summary>
class NiddConfigurationTrigger {
public:
  NiddConfigurationTrigger();
  virtual ~NiddConfigurationTrigger();

  void validate();

  /////////////////////////////////////////////
  /// NiddConfigurationTrigger members

  /// <summary>
  /// Identifies the trigger receiving entity.
  /// </summary>
  std::string getAfId() const;
  void setAfId(std::string const &value);
  /// <summary>
  /// Identifies the trigger sending entity.
  /// </summary>
  std::string getNefId() const;
  void setNefId(std::string const &value);
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);

  friend void to_json(nlohmann::json &j, const NiddConfigurationTrigger &o);
  friend void from_json(const nlohmann::json &j, NiddConfigurationTrigger &o);

protected:
  std::string m_AfId;

  std::string m_NefId;

  std::string m_Gpsi;

  std::string m_SuppFeat;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NiddConfigurationTrigger_H_ */
