/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CnAssistedRanPara.h
 *
 * SMF derived CN assisted RAN parameters tuning
 */

#ifndef CnAssistedRanPara_H_
#define CnAssistedRanPara_H_

#include "BatteryIndication.h"
#include "ScheduledCommunicationTime.h"
#include "ScheduledCommunicationType.h"
#include "StationaryIndication.h"
#include "TrafficProfile.h"
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// SMF derived CN assisted RAN parameters tuning
/// </summary>
class CnAssistedRanPara {
public:
  CnAssistedRanPara();
  virtual ~CnAssistedRanPara();

  void validate();

  /////////////////////////////////////////////
  /// CnAssistedRanPara members

  /// <summary>
  ///
  /// </summary>
  StationaryIndication getStationaryIndication() const;
  void setStationaryIndication(StationaryIndication const &value);
  bool stationaryIndicationIsSet() const;
  void unsetStationaryIndication();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getCommunicationDurationTime() const;
  void setCommunicationDurationTime(int32_t const value);
  bool communicationDurationTimeIsSet() const;
  void unsetCommunicationDurationTime();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getPeriodicTime() const;
  void setPeriodicTime(int32_t const value);
  bool periodicTimeIsSet() const;
  void unsetPeriodicTime();
  /// <summary>
  ///
  /// </summary>
  ScheduledCommunicationTime getScheduledCommunicationTime() const;
  void setScheduledCommunicationTime(ScheduledCommunicationTime const &value);
  bool scheduledCommunicationTimeIsSet() const;
  void unsetScheduledCommunicationTime();
  /// <summary>
  ///
  /// </summary>
  ScheduledCommunicationType getScheduledCommunicationType() const;
  void setScheduledCommunicationType(ScheduledCommunicationType const &value);
  bool scheduledCommunicationTypeIsSet() const;
  void unsetScheduledCommunicationType();
  /// <summary>
  ///
  /// </summary>
  TrafficProfile getTrafficProfile() const;
  void setTrafficProfile(TrafficProfile const &value);
  bool trafficProfileIsSet() const;
  void unsetTrafficProfile();
  /// <summary>
  ///
  /// </summary>
  BatteryIndication getBatteryIndication() const;
  void setBatteryIndication(BatteryIndication const &value);
  bool batteryIndicationIsSet() const;
  void unsetBatteryIndication();

  friend void to_json(nlohmann::json &j, const CnAssistedRanPara &o);
  friend void from_json(const nlohmann::json &j, CnAssistedRanPara &o);

protected:
  StationaryIndication m_StationaryIndication;
  bool m_StationaryIndicationIsSet;
  int32_t m_CommunicationDurationTime;
  bool m_CommunicationDurationTimeIsSet;
  int32_t m_PeriodicTime;
  bool m_PeriodicTimeIsSet;
  ScheduledCommunicationTime m_ScheduledCommunicationTime;
  bool m_ScheduledCommunicationTimeIsSet;
  ScheduledCommunicationType m_ScheduledCommunicationType;
  bool m_ScheduledCommunicationTypeIsSet;
  TrafficProfile m_TrafficProfile;
  bool m_TrafficProfileIsSet;
  BatteryIndication m_BatteryIndication;
  bool m_BatteryIndicationIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* CnAssistedRanPara_H_ */
