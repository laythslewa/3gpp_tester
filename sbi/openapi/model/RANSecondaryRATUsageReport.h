/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RANSecondaryRATUsageReport.h
 *
 *
 */

#ifndef RANSecondaryRATUsageReport_H_
#define RANSecondaryRATUsageReport_H_

#include "QosFlowsUsageReport.h"
#include "RatType.h"
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class RANSecondaryRATUsageReport {
public:
  RANSecondaryRATUsageReport();
  virtual ~RANSecondaryRATUsageReport();

  void validate();

  /////////////////////////////////////////////
  /// RANSecondaryRATUsageReport members

  /// <summary>
  ///
  /// </summary>
  RatType getRANSecondaryRATType() const;
  void setRANSecondaryRATType(RatType const &value);
  bool rANSecondaryRATTypeIsSet() const;
  void unsetRANSecondaryRATType();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosFlowsUsageReport> &getQosFlowsUsageReports();
  void setQosFlowsUsageReports(std::vector<QosFlowsUsageReport> const &value);
  bool qosFlowsUsageReportsIsSet() const;
  void unsetQosFlowsUsageReports();

  friend void to_json(nlohmann::json &j, const RANSecondaryRATUsageReport &o);
  friend void from_json(const nlohmann::json &j, RANSecondaryRATUsageReport &o);

protected:
  RatType m_RANSecondaryRATType;
  bool m_RANSecondaryRATTypeIsSet;
  std::vector<QosFlowsUsageReport> m_QosFlowsUsageReports;
  bool m_QosFlowsUsageReportsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* RANSecondaryRATUsageReport_H_ */
