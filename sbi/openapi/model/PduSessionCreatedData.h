/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PduSessionCreatedData.h
 *
 * Data within Create Response
 */

#ifndef PduSessionCreatedData_H_
#define PduSessionCreatedData_H_

#include "Ambr.h"
#include "EpsBearerInfo.h"
#include "EpsPdnCnxInfo.h"
#include "IpAddress.h"
#include "Ipv6Prefix.h"
#include "MaxIntegrityProtectedDataRate.h"
#include "PduSessionType.h"
#include "QosFlowSetupItem.h"
#include "RedundantPduSessionInformation.h"
#include "RefToBinaryData.h"
#include "RoamingChargingProfile.h"
#include "Snssai.h"
#include "TunnelInfo.h"
#include "UpSecurity.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within Create Response
/// </summary>
class PduSessionCreatedData {
public:
  PduSessionCreatedData();
  virtual ~PduSessionCreatedData();

  void validate();

  /////////////////////////////////////////////
  /// PduSessionCreatedData members

  /// <summary>
  ///
  /// </summary>
  PduSessionType getPduSessionType() const;
  void setPduSessionType(PduSessionType const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getSscMode() const;
  void setSscMode(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  TunnelInfo getHcnTunnelInfo() const;
  void setHcnTunnelInfo(TunnelInfo const &value);
  bool hcnTunnelInfoIsSet() const;
  void unsetHcnTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  TunnelInfo getCnTunnelInfo() const;
  void setCnTunnelInfo(TunnelInfo const &value);
  bool cnTunnelInfoIsSet() const;
  void unsetCnTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  TunnelInfo getAdditionalCnTunnelInfo() const;
  void setAdditionalCnTunnelInfo(TunnelInfo const &value);
  bool additionalCnTunnelInfoIsSet() const;
  void unsetAdditionalCnTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  Ambr getSessionAmbr() const;
  void setSessionAmbr(Ambr const &value);
  bool sessionAmbrIsSet() const;
  void unsetSessionAmbr();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosFlowSetupItem> &getQosFlowsSetupList();
  void setQosFlowsSetupList(std::vector<QosFlowSetupItem> const &value);
  bool qosFlowsSetupListIsSet() const;
  void unsetQosFlowsSetupList();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getHSmfInstanceId() const;
  void setHSmfInstanceId(std::string const &value);
  bool hSmfInstanceIdIsSet() const;
  void unsetHSmfInstanceId();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getSmfInstanceId() const;
  void setSmfInstanceId(std::string const &value);
  bool smfInstanceIdIsSet() const;
  void unsetSmfInstanceId();
  /// <summary>
  /// Unsigned integer identifying a PDU session, within the range 0 to 255, as
  /// specified in clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU
  /// Session ID is allocated by the Core Network for UEs not supporting N1
  /// mode, reserved range 64 to 95 is used. PDU Session ID within the reserved
  /// range is only visible in the Core Network.
  /// </summary>
  int32_t getPduSessionId() const;
  void setPduSessionId(int32_t const value);
  bool pduSessionIdIsSet() const;
  void unsetPduSessionId();
  /// <summary>
  ///
  /// </summary>
  Snssai getSNssai() const;
  void setSNssai(Snssai const &value);
  bool sNssaiIsSet() const;
  void unsetSNssai();
  /// <summary>
  ///
  /// </summary>
  bool isEnablePauseCharging() const;
  void setEnablePauseCharging(bool const value);
  bool enablePauseChargingIsSet() const;
  void unsetEnablePauseCharging();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getUeIpv4Address() const;
  void setUeIpv4Address(std::string const &value);
  bool ueIpv4AddressIsSet() const;
  void unsetUeIpv4Address();
  /// <summary>
  ///
  /// </summary>
  Ipv6Prefix getUeIpv6Prefix() const;
  void setUeIpv6Prefix(Ipv6Prefix const &value);
  bool ueIpv6PrefixIsSet() const;
  void unsetUeIpv6Prefix();
  /// <summary>
  ///
  /// </summary>
  RefToBinaryData getN1SmInfoToUe() const;
  void setN1SmInfoToUe(RefToBinaryData const &value);
  bool n1SmInfoToUeIsSet() const;
  void unsetN1SmInfoToUe();
  /// <summary>
  ///
  /// </summary>
  EpsPdnCnxInfo getEpsPdnCnxInfo() const;
  void setEpsPdnCnxInfo(EpsPdnCnxInfo const &value);
  bool epsPdnCnxInfoIsSet() const;
  void unsetEpsPdnCnxInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<EpsBearerInfo> &getEpsBearerInfo();
  void setEpsBearerInfo(std::vector<EpsBearerInfo> const &value);
  bool epsBearerInfoIsSet() const;
  void unsetEpsBearerInfo();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  MaxIntegrityProtectedDataRate getMaxIntegrityProtectedDataRate() const;
  void
  setMaxIntegrityProtectedDataRate(MaxIntegrityProtectedDataRate const &value);
  bool maxIntegrityProtectedDataRateIsSet() const;
  void unsetMaxIntegrityProtectedDataRate();
  /// <summary>
  ///
  /// </summary>
  MaxIntegrityProtectedDataRate getMaxIntegrityProtectedDataRateDl() const;
  void setMaxIntegrityProtectedDataRateDl(
      MaxIntegrityProtectedDataRate const &value);
  bool maxIntegrityProtectedDataRateDlIsSet() const;
  void unsetMaxIntegrityProtectedDataRateDl();
  /// <summary>
  ///
  /// </summary>
  bool isAlwaysOnGranted() const;
  void setAlwaysOnGranted(bool const value);
  bool alwaysOnGrantedIsSet() const;
  void unsetAlwaysOnGranted();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  ///
  /// </summary>
  UpSecurity getUpSecurity() const;
  void setUpSecurity(UpSecurity const &value);
  bool upSecurityIsSet() const;
  void unsetUpSecurity();
  /// <summary>
  ///
  /// </summary>
  RoamingChargingProfile getRoamingChargingProfile() const;
  void setRoamingChargingProfile(RoamingChargingProfile const &value);
  bool roamingChargingProfileIsSet() const;
  void unsetRoamingChargingProfile();
  /// <summary>
  ///
  /// </summary>
  std::string getHSmfServiceInstanceId() const;
  void setHSmfServiceInstanceId(std::string const &value);
  bool hSmfServiceInstanceIdIsSet() const;
  void unsetHSmfServiceInstanceId();
  /// <summary>
  ///
  /// </summary>
  std::string getSmfServiceInstanceId() const;
  void setSmfServiceInstanceId(std::string const &value);
  bool smfServiceInstanceIdIsSet() const;
  void unsetSmfServiceInstanceId();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getRecoveryTime() const;
  void setRecoveryTime(std::string const &value);
  bool recoveryTimeIsSet() const;
  void unsetRecoveryTime();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getDnaiList();
  void setDnaiList(std::vector<std::string> const &value);
  bool dnaiListIsSet() const;
  void unsetDnaiList();
  /// <summary>
  ///
  /// </summary>
  bool isIpv6MultiHomingInd() const;
  void setIpv6MultiHomingInd(bool const value);
  bool ipv6MultiHomingIndIsSet() const;
  void unsetIpv6MultiHomingInd();
  /// <summary>
  ///
  /// </summary>
  bool isMaAcceptedInd() const;
  void setMaAcceptedInd(bool const value);
  bool maAcceptedIndIsSet() const;
  void unsetMaAcceptedInd();
  /// <summary>
  ///
  /// </summary>
  std::string getHomeProvidedChargingId() const;
  void setHomeProvidedChargingId(std::string const &value);
  bool homeProvidedChargingIdIsSet() const;
  void unsetHomeProvidedChargingId();
  /// <summary>
  ///
  /// </summary>
  bool isNefExtBufSupportInd() const;
  void setNefExtBufSupportInd(bool const value);
  bool nefExtBufSupportIndIsSet() const;
  void unsetNefExtBufSupportInd();
  /// <summary>
  ///
  /// </summary>
  bool isSmallDataRateControlEnabled() const;
  void setSmallDataRateControlEnabled(bool const value);
  bool smallDataRateControlEnabledIsSet() const;
  void unsetSmallDataRateControlEnabled();
  /// <summary>
  ///
  /// </summary>
  std::string getUeIpv6InterfaceId() const;
  void setUeIpv6InterfaceId(std::string const &value);
  bool ueIpv6InterfaceIdIsSet() const;
  void unsetUeIpv6InterfaceId();
  /// <summary>
  /// Represents information that identifies which IP pool or external server is
  /// used to allocate the IP address.
  /// </summary>
  int32_t getIpv6Index() const;
  void setIpv6Index(int32_t const value);
  bool ipv6IndexIsSet() const;
  void unsetIpv6Index();
  /// <summary>
  ///
  /// </summary>
  IpAddress getDnAaaAddress() const;
  void setDnAaaAddress(IpAddress const &value);
  bool dnAaaAddressIsSet() const;
  void unsetDnAaaAddress();
  /// <summary>
  ///
  /// </summary>
  RedundantPduSessionInformation getRedundantPduSessionInfo() const;
  void setRedundantPduSessionInfo(RedundantPduSessionInformation const &value);
  bool redundantPduSessionInfoIsSet() const;
  void unsetRedundantPduSessionInfo();
  /// <summary>
  ///
  /// </summary>
  bool isNspuSupportInd() const;
  void setNspuSupportInd(bool const value);
  bool nspuSupportIndIsSet() const;
  void unsetNspuSupportInd();

  friend void to_json(nlohmann::json &j, const PduSessionCreatedData &o);
  friend void from_json(const nlohmann::json &j, PduSessionCreatedData &o);

protected:
  PduSessionType m_PduSessionType;

  std::string m_SscMode;

  TunnelInfo m_HcnTunnelInfo;
  bool m_HcnTunnelInfoIsSet;
  TunnelInfo m_CnTunnelInfo;
  bool m_CnTunnelInfoIsSet;
  TunnelInfo m_AdditionalCnTunnelInfo;
  bool m_AdditionalCnTunnelInfoIsSet;
  Ambr m_SessionAmbr;
  bool m_SessionAmbrIsSet;
  std::vector<QosFlowSetupItem> m_QosFlowsSetupList;
  bool m_QosFlowsSetupListIsSet;
  std::string m_HSmfInstanceId;
  bool m_HSmfInstanceIdIsSet;
  std::string m_SmfInstanceId;
  bool m_SmfInstanceIdIsSet;
  int32_t m_PduSessionId;
  bool m_PduSessionIdIsSet;
  Snssai m_SNssai;
  bool m_SNssaiIsSet;
  bool m_EnablePauseCharging;
  bool m_EnablePauseChargingIsSet;
  std::string m_UeIpv4Address;
  bool m_UeIpv4AddressIsSet;
  Ipv6Prefix m_UeIpv6Prefix;
  bool m_UeIpv6PrefixIsSet;
  RefToBinaryData m_N1SmInfoToUe;
  bool m_N1SmInfoToUeIsSet;
  EpsPdnCnxInfo m_EpsPdnCnxInfo;
  bool m_EpsPdnCnxInfoIsSet;
  std::vector<EpsBearerInfo> m_EpsBearerInfo;
  bool m_EpsBearerInfoIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  MaxIntegrityProtectedDataRate m_MaxIntegrityProtectedDataRate;
  bool m_MaxIntegrityProtectedDataRateIsSet;
  MaxIntegrityProtectedDataRate m_MaxIntegrityProtectedDataRateDl;
  bool m_MaxIntegrityProtectedDataRateDlIsSet;
  bool m_AlwaysOnGranted;
  bool m_AlwaysOnGrantedIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  UpSecurity m_UpSecurity;
  bool m_UpSecurityIsSet;
  RoamingChargingProfile m_RoamingChargingProfile;
  bool m_RoamingChargingProfileIsSet;
  std::string m_HSmfServiceInstanceId;
  bool m_HSmfServiceInstanceIdIsSet;
  std::string m_SmfServiceInstanceId;
  bool m_SmfServiceInstanceIdIsSet;
  std::string m_RecoveryTime;
  bool m_RecoveryTimeIsSet;
  std::vector<std::string> m_DnaiList;
  bool m_DnaiListIsSet;
  bool m_Ipv6MultiHomingInd;
  bool m_Ipv6MultiHomingIndIsSet;
  bool m_MaAcceptedInd;
  bool m_MaAcceptedIndIsSet;
  std::string m_HomeProvidedChargingId;
  bool m_HomeProvidedChargingIdIsSet;
  bool m_NefExtBufSupportInd;
  bool m_NefExtBufSupportIndIsSet;
  bool m_SmallDataRateControlEnabled;
  bool m_SmallDataRateControlEnabledIsSet;
  std::string m_UeIpv6InterfaceId;
  bool m_UeIpv6InterfaceIdIsSet;
  int32_t m_Ipv6Index;
  bool m_Ipv6IndexIsSet;
  IpAddress m_DnAaaAddress;
  bool m_DnAaaAddressIsSet;
  RedundantPduSessionInformation m_RedundantPduSessionInfo;
  bool m_RedundantPduSessionInfoIsSet;
  bool m_NspuSupportInd;
  bool m_NspuSupportIndIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PduSessionCreatedData_H_ */
