/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.3.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IpAddr.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

IpAddr::IpAddr() {
  m_Ipv4Addr = "";
  m_Ipv4AddrIsSet = false;
  m_Ipv6AddrIsSet = false;
  m_Ipv6PrefixIsSet = false;
}

IpAddr::~IpAddr() {}

void IpAddr::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const IpAddr &o) {
  j = nlohmann::json();
  if (o.ipv4AddrIsSet())
    j["ipv4Addr"] = o.m_Ipv4Addr;
  if (o.ipv6AddrIsSet())
    j["ipv6Addr"] = o.m_Ipv6Addr;
  if (o.ipv6PrefixIsSet())
    j["ipv6Prefix"] = o.m_Ipv6Prefix;
}

void from_json(const nlohmann::json &j, IpAddr &o) {
  if (j.find("ipv4Addr") != j.end()) {
    j.at("ipv4Addr").get_to(o.m_Ipv4Addr);
    o.m_Ipv4AddrIsSet = true;
  }
  if (j.find("ipv6Addr") != j.end()) {
    j.at("ipv6Addr").get_to(o.m_Ipv6Addr);
    o.m_Ipv6AddrIsSet = true;
  }
  if (j.find("ipv6Prefix") != j.end()) {
    j.at("ipv6Prefix").get_to(o.m_Ipv6Prefix);
    o.m_Ipv6PrefixIsSet = true;
  }
}

std::string IpAddr::getIpv4Addr() const { return m_Ipv4Addr; }
void IpAddr::setIpv4Addr(std::string const &value) {
  m_Ipv4Addr = value;
  m_Ipv4AddrIsSet = true;
}
bool IpAddr::ipv4AddrIsSet() const { return m_Ipv4AddrIsSet; }
void IpAddr::unsetIpv4Addr() { m_Ipv4AddrIsSet = false; }
Ipv6Addr IpAddr::getIpv6Addr() const { return m_Ipv6Addr; }
void IpAddr::setIpv6Addr(Ipv6Addr const &value) {
  m_Ipv6Addr = value;
  m_Ipv6AddrIsSet = true;
}
bool IpAddr::ipv6AddrIsSet() const { return m_Ipv6AddrIsSet; }
void IpAddr::unsetIpv6Addr() { m_Ipv6AddrIsSet = false; }
Ipv6Prefix IpAddr::getIpv6Prefix() const { return m_Ipv6Prefix; }
void IpAddr::setIpv6Prefix(Ipv6Prefix const &value) {
  m_Ipv6Prefix = value;
  m_Ipv6PrefixIsSet = true;
}
bool IpAddr::ipv6PrefixIsSet() const { return m_Ipv6PrefixIsSet; }
void IpAddr::unsetIpv6Prefix() { m_Ipv6PrefixIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
