/**
 * 3gpp-cp-parameter-provisioning
 * API for provisioning communication pattern parameters. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "CpParameterSet.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

CpParameterSet::CpParameterSet() {
  m_SetId = "";
  m_Self = "";
  m_SelfIsSet = false;
  m_ValidityTime = "";
  m_ValidityTimeIsSet = false;
  m_PeriodicCommunicationIndicatorIsSet = false;
  m_CommunicationDurationTime = 0;
  m_CommunicationDurationTimeIsSet = false;
  m_PeriodicTime = 0;
  m_PeriodicTimeIsSet = false;
  m_ScheduledCommunicationTimeIsSet = false;
  m_ScheduledCommunicationTypeIsSet = false;
  m_StationaryIndicationIsSet = false;
  m_BatteryIndsIsSet = false;
  m_TrafficProfileIsSet = false;
  m_ExpectedUmtsIsSet = false;
  m_ExpectedUmtDays = 0;
  m_ExpectedUmtDaysIsSet = false;
}

CpParameterSet::~CpParameterSet() {}

void CpParameterSet::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const CpParameterSet &o) {
  j = nlohmann::json();
  j["setId"] = o.m_SetId;
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  if (o.validityTimeIsSet())
    j["validityTime"] = o.m_ValidityTime;
  if (o.periodicCommunicationIndicatorIsSet())
    j["periodicCommunicationIndicator"] = o.m_PeriodicCommunicationIndicator;
  if (o.communicationDurationTimeIsSet())
    j["communicationDurationTime"] = o.m_CommunicationDurationTime;
  if (o.periodicTimeIsSet())
    j["periodicTime"] = o.m_PeriodicTime;
  if (o.scheduledCommunicationTimeIsSet())
    j["scheduledCommunicationTime"] = o.m_ScheduledCommunicationTime;
  if (o.scheduledCommunicationTypeIsSet())
    j["scheduledCommunicationType"] = o.m_ScheduledCommunicationType;
  if (o.stationaryIndicationIsSet())
    j["stationaryIndication"] = o.m_StationaryIndication;
  if (o.batteryIndsIsSet() || !o.m_BatteryInds.empty())
    j["batteryInds"] = o.m_BatteryInds;
  if (o.trafficProfileIsSet())
    j["trafficProfile"] = o.m_TrafficProfile;
  if (o.expectedUmtsIsSet() || !o.m_ExpectedUmts.empty())
    j["expectedUmts"] = o.m_ExpectedUmts;
  if (o.expectedUmtDaysIsSet())
    j["expectedUmtDays"] = o.m_ExpectedUmtDays;
}

void from_json(const nlohmann::json &j, CpParameterSet &o) {
  j.at("setId").get_to(o.m_SetId);
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("validityTime") != j.end()) {
    j.at("validityTime").get_to(o.m_ValidityTime);
    o.m_ValidityTimeIsSet = true;
  }
  if (j.find("periodicCommunicationIndicator") != j.end()) {
    j.at("periodicCommunicationIndicator")
        .get_to(o.m_PeriodicCommunicationIndicator);
    o.m_PeriodicCommunicationIndicatorIsSet = true;
  }
  if (j.find("communicationDurationTime") != j.end()) {
    j.at("communicationDurationTime").get_to(o.m_CommunicationDurationTime);
    o.m_CommunicationDurationTimeIsSet = true;
  }
  if (j.find("periodicTime") != j.end()) {
    j.at("periodicTime").get_to(o.m_PeriodicTime);
    o.m_PeriodicTimeIsSet = true;
  }
  if (j.find("scheduledCommunicationTime") != j.end()) {
    j.at("scheduledCommunicationTime").get_to(o.m_ScheduledCommunicationTime);
    o.m_ScheduledCommunicationTimeIsSet = true;
  }
  if (j.find("scheduledCommunicationType") != j.end()) {
    j.at("scheduledCommunicationType").get_to(o.m_ScheduledCommunicationType);
    o.m_ScheduledCommunicationTypeIsSet = true;
  }
  if (j.find("stationaryIndication") != j.end()) {
    j.at("stationaryIndication").get_to(o.m_StationaryIndication);
    o.m_StationaryIndicationIsSet = true;
  }
  if (j.find("batteryInds") != j.end()) {
    j.at("batteryInds").get_to(o.m_BatteryInds);
    o.m_BatteryIndsIsSet = true;
  }
  if (j.find("trafficProfile") != j.end()) {
    j.at("trafficProfile").get_to(o.m_TrafficProfile);
    o.m_TrafficProfileIsSet = true;
  }
  if (j.find("expectedUmts") != j.end()) {
    j.at("expectedUmts").get_to(o.m_ExpectedUmts);
    o.m_ExpectedUmtsIsSet = true;
  }
  if (j.find("expectedUmtDays") != j.end()) {
    j.at("expectedUmtDays").get_to(o.m_ExpectedUmtDays);
    o.m_ExpectedUmtDaysIsSet = true;
  }
}

std::string CpParameterSet::getSetId() const { return m_SetId; }
void CpParameterSet::setSetId(std::string const &value) { m_SetId = value; }
std::string CpParameterSet::getSelf() const { return m_Self; }
void CpParameterSet::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool CpParameterSet::selfIsSet() const { return m_SelfIsSet; }
void CpParameterSet::unsetSelf() { m_SelfIsSet = false; }
std::string CpParameterSet::getValidityTime() const { return m_ValidityTime; }
void CpParameterSet::setValidityTime(std::string const &value) {
  m_ValidityTime = value;
  m_ValidityTimeIsSet = true;
}
bool CpParameterSet::validityTimeIsSet() const { return m_ValidityTimeIsSet; }
void CpParameterSet::unsetValidityTime() { m_ValidityTimeIsSet = false; }
CommunicationIndicator
CpParameterSet::getPeriodicCommunicationIndicator() const {
  return m_PeriodicCommunicationIndicator;
}
void CpParameterSet::setPeriodicCommunicationIndicator(
    CommunicationIndicator const &value) {
  m_PeriodicCommunicationIndicator = value;
  m_PeriodicCommunicationIndicatorIsSet = true;
}
bool CpParameterSet::periodicCommunicationIndicatorIsSet() const {
  return m_PeriodicCommunicationIndicatorIsSet;
}
void CpParameterSet::unsetPeriodicCommunicationIndicator() {
  m_PeriodicCommunicationIndicatorIsSet = false;
}
int32_t CpParameterSet::getCommunicationDurationTime() const {
  return m_CommunicationDurationTime;
}
void CpParameterSet::setCommunicationDurationTime(int32_t const value) {
  m_CommunicationDurationTime = value;
  m_CommunicationDurationTimeIsSet = true;
}
bool CpParameterSet::communicationDurationTimeIsSet() const {
  return m_CommunicationDurationTimeIsSet;
}
void CpParameterSet::unsetCommunicationDurationTime() {
  m_CommunicationDurationTimeIsSet = false;
}
int32_t CpParameterSet::getPeriodicTime() const { return m_PeriodicTime; }
void CpParameterSet::setPeriodicTime(int32_t const value) {
  m_PeriodicTime = value;
  m_PeriodicTimeIsSet = true;
}
bool CpParameterSet::periodicTimeIsSet() const { return m_PeriodicTimeIsSet; }
void CpParameterSet::unsetPeriodicTime() { m_PeriodicTimeIsSet = false; }
ScheduledCommunicationTime
CpParameterSet::getScheduledCommunicationTime() const {
  return m_ScheduledCommunicationTime;
}
void CpParameterSet::setScheduledCommunicationTime(
    ScheduledCommunicationTime const &value) {
  m_ScheduledCommunicationTime = value;
  m_ScheduledCommunicationTimeIsSet = true;
}
bool CpParameterSet::scheduledCommunicationTimeIsSet() const {
  return m_ScheduledCommunicationTimeIsSet;
}
void CpParameterSet::unsetScheduledCommunicationTime() {
  m_ScheduledCommunicationTimeIsSet = false;
}
ScheduledCommunicationType
CpParameterSet::getScheduledCommunicationType() const {
  return m_ScheduledCommunicationType;
}
void CpParameterSet::setScheduledCommunicationType(
    ScheduledCommunicationType const &value) {
  m_ScheduledCommunicationType = value;
  m_ScheduledCommunicationTypeIsSet = true;
}
bool CpParameterSet::scheduledCommunicationTypeIsSet() const {
  return m_ScheduledCommunicationTypeIsSet;
}
void CpParameterSet::unsetScheduledCommunicationType() {
  m_ScheduledCommunicationTypeIsSet = false;
}
StationaryIndication CpParameterSet::getStationaryIndication() const {
  return m_StationaryIndication;
}
void CpParameterSet::setStationaryIndication(
    StationaryIndication const &value) {
  m_StationaryIndication = value;
  m_StationaryIndicationIsSet = true;
}
bool CpParameterSet::stationaryIndicationIsSet() const {
  return m_StationaryIndicationIsSet;
}
void CpParameterSet::unsetStationaryIndication() {
  m_StationaryIndicationIsSet = false;
}
std::vector<BatteryIndication> &CpParameterSet::getBatteryInds() {
  return m_BatteryInds;
}
void CpParameterSet::setBatteryInds(
    std::vector<BatteryIndication> const &value) {
  m_BatteryInds = value;
  m_BatteryIndsIsSet = true;
}
bool CpParameterSet::batteryIndsIsSet() const { return m_BatteryIndsIsSet; }
void CpParameterSet::unsetBatteryInds() { m_BatteryIndsIsSet = false; }
TrafficProfile CpParameterSet::getTrafficProfile() const {
  return m_TrafficProfile;
}
void CpParameterSet::setTrafficProfile(TrafficProfile const &value) {
  m_TrafficProfile = value;
  m_TrafficProfileIsSet = true;
}
bool CpParameterSet::trafficProfileIsSet() const {
  return m_TrafficProfileIsSet;
}
void CpParameterSet::unsetTrafficProfile() { m_TrafficProfileIsSet = false; }
std::vector<UmtLocationArea5G> &CpParameterSet::getExpectedUmts() {
  return m_ExpectedUmts;
}
void CpParameterSet::setExpectedUmts(
    std::vector<UmtLocationArea5G> const &value) {
  m_ExpectedUmts = value;
  m_ExpectedUmtsIsSet = true;
}
bool CpParameterSet::expectedUmtsIsSet() const { return m_ExpectedUmtsIsSet; }
void CpParameterSet::unsetExpectedUmts() { m_ExpectedUmtsIsSet = false; }
int32_t CpParameterSet::getExpectedUmtDays() const { return m_ExpectedUmtDays; }
void CpParameterSet::setExpectedUmtDays(int32_t const value) {
  m_ExpectedUmtDays = value;
  m_ExpectedUmtDaysIsSet = true;
}
bool CpParameterSet::expectedUmtDaysIsSet() const {
  return m_ExpectedUmtDaysIsSet;
}
void CpParameterSet::unsetExpectedUmtDays() { m_ExpectedUmtDaysIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
