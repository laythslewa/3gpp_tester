/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. © 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AppSessionContextReqData.h
 *
 * Identifies the service requirements of an Individual Application Session
 * Context.
 */

#ifndef AppSessionContextReqData_H_
#define AppSessionContextReqData_H_

#include "AfRequestedData.h"
#include "AfRoutingRequirement.h"
#include "BridgeManagementContainer.h"
#include "EventsSubscReqData.h"
#include "Ipv6Addr.h"
#include "MediaComponent.h"
#include "MpsAction.h"
#include "PortManagementContainer.h"
#include "PreemptionControlInformation.h"
#include "ReservPriority.h"
#include "ServiceInfoStatus.h"
#include "Snssai.h"
#include "SponsoringStatus.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Identifies the service requirements of an Individual Application Session
/// Context.
/// </summary>
class AppSessionContextReqData {
public:
  AppSessionContextReqData();
  virtual ~AppSessionContextReqData();

  void validate();

  /////////////////////////////////////////////
  /// AppSessionContextReqData members

  /// <summary>
  /// Contains an AF application identifier.
  /// </summary>
  std::string getAfAppId() const;
  void setAfAppId(std::string const &value);
  bool afAppIdIsSet() const;
  void unsetAfAppId();
  /// <summary>
  /// Application provided charging identifier allowing correlation of charging
  /// information.
  /// </summary>
  std::string getAfChargId() const;
  void setAfChargId(std::string const &value);
  bool afChargIdIsSet() const;
  void unsetAfChargId();
  /// <summary>
  ///
  /// </summary>
  AfRequestedData getAfReqData() const;
  void setAfReqData(AfRequestedData const &value);
  bool afReqDataIsSet() const;
  void unsetAfReqData();
  /// <summary>
  ///
  /// </summary>
  AfRoutingRequirement getAfRoutReq() const;
  void setAfRoutReq(AfRoutingRequirement const &value);
  bool afRoutReqIsSet() const;
  void unsetAfRoutReq();
  /// <summary>
  /// Contains an identity of an application service provider.
  /// </summary>
  std::string getAspId() const;
  void setAspId(std::string const &value);
  bool aspIdIsSet() const;
  void unsetAspId();
  /// <summary>
  /// string identifying a BDT Reference ID as defined in subclause 5.3.3 of
  /// 3GPP TS 29.154.
  /// </summary>
  std::string getBdtRefId() const;
  void setBdtRefId(std::string const &value);
  bool bdtRefIdIsSet() const;
  void unsetBdtRefId();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  EventsSubscReqData getEvSubsc() const;
  void setEvSubsc(EventsSubscReqData const &value);
  bool evSubscIsSet() const;
  void unsetEvSubsc();
  /// <summary>
  /// indication of MCPTT service request
  /// </summary>
  std::string getMcpttId() const;
  void setMcpttId(std::string const &value);
  bool mcpttIdIsSet() const;
  void unsetMcpttId();
  /// <summary>
  /// indication of MCVideo service request
  /// </summary>
  std::string getMcVideoId() const;
  void setMcVideoId(std::string const &value);
  bool mcVideoIdIsSet() const;
  void unsetMcVideoId();
  /// <summary>
  /// Contains media component information. The key of the map is the medCompN
  /// attribute.
  /// </summary>
  std::map<std::string, MediaComponent> &getMedComponents();
  void setMedComponents(std::map<std::string, MediaComponent> const &value);
  bool medComponentsIsSet() const;
  void unsetMedComponents();
  /// <summary>
  ///
  /// </summary>
  std::string getIpDomain() const;
  void setIpDomain(std::string const &value);
  bool ipDomainIsSet() const;
  void unsetIpDomain();
  /// <summary>
  ///
  /// </summary>
  MpsAction getMpsAction() const;
  void setMpsAction(MpsAction const &value);
  bool mpsActionIsSet() const;
  void unsetMpsAction();
  /// <summary>
  /// indication of MPS service request
  /// </summary>
  std::string getMpsId() const;
  void setMpsId(std::string const &value);
  bool mpsIdIsSet() const;
  void unsetMpsId();
  /// <summary>
  /// indication of MCS service request
  /// </summary>
  std::string getMcsId() const;
  void setMcsId(std::string const &value);
  bool mcsIdIsSet() const;
  void unsetMcsId();
  /// <summary>
  ///
  /// </summary>
  PreemptionControlInformation getPreemptControlInfo() const;
  void setPreemptControlInfo(PreemptionControlInformation const &value);
  bool preemptControlInfoIsSet() const;
  void unsetPreemptControlInfo();
  /// <summary>
  ///
  /// </summary>
  ReservPriority getResPrio() const;
  void setResPrio(ReservPriority const &value);
  bool resPrioIsSet() const;
  void unsetResPrio();
  /// <summary>
  ///
  /// </summary>
  ServiceInfoStatus getServInfStatus() const;
  void setServInfStatus(ServiceInfoStatus const &value);
  bool servInfStatusIsSet() const;
  void unsetServInfStatus();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNotifUri() const;
  void setNotifUri(std::string const &value);
  /// <summary>
  /// Contains values of the service URN and may include subservices.
  /// </summary>
  std::string getServUrn() const;
  void setServUrn(std::string const &value);
  bool servUrnIsSet() const;
  void unsetServUrn();
  /// <summary>
  ///
  /// </summary>
  Snssai getSliceInfo() const;
  void setSliceInfo(Snssai const &value);
  bool sliceInfoIsSet() const;
  void unsetSliceInfo();
  /// <summary>
  /// Contains an identity of a sponsor.
  /// </summary>
  std::string getSponId() const;
  void setSponId(std::string const &value);
  bool sponIdIsSet() const;
  void unsetSponId();
  /// <summary>
  ///
  /// </summary>
  SponsoringStatus getSponStatus() const;
  void setSponStatus(SponsoringStatus const &value);
  bool sponStatusIsSet() const;
  void unsetSponStatus();
  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getUeIpv4() const;
  void setUeIpv4(std::string const &value);
  bool ueIpv4IsSet() const;
  void unsetUeIpv4();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getUeIpv6() const;
  void setUeIpv6(Ipv6Addr const &value);
  bool ueIpv6IsSet() const;
  void unsetUeIpv6();
  /// <summary>
  /// String identifying a MAC address formatted in the hexadecimal notation
  /// according to clause 1.1 and clause 2.1 of RFC 7042
  /// </summary>
  std::string getUeMac() const;
  void setUeMac(std::string const &value);
  bool ueMacIsSet() const;
  void unsetUeMac();
  /// <summary>
  ///
  /// </summary>
  BridgeManagementContainer getTsnBridgeManCont() const;
  void setTsnBridgeManCont(BridgeManagementContainer const &value);
  bool tsnBridgeManContIsSet() const;
  void unsetTsnBridgeManCont();
  /// <summary>
  ///
  /// </summary>
  PortManagementContainer getTsnPortManContDstt() const;
  void setTsnPortManContDstt(PortManagementContainer const &value);
  bool tsnPortManContDsttIsSet() const;
  void unsetTsnPortManContDstt();
  /// <summary>
  ///
  /// </summary>
  std::vector<PortManagementContainer> &getTsnPortManContNwtts();
  void
  setTsnPortManContNwtts(std::vector<PortManagementContainer> const &value);
  bool tsnPortManContNwttsIsSet() const;
  void unsetTsnPortManContNwtts();

  friend void to_json(nlohmann::json &j, const AppSessionContextReqData &o);
  friend void from_json(const nlohmann::json &j, AppSessionContextReqData &o);

protected:
  std::string m_AfAppId;
  bool m_AfAppIdIsSet;
  std::string m_AfChargId;
  bool m_AfChargIdIsSet;
  AfRequestedData m_AfReqData;
  bool m_AfReqDataIsSet;
  AfRoutingRequirement m_AfRoutReq;
  bool m_AfRoutReqIsSet;
  std::string m_AspId;
  bool m_AspIdIsSet;
  std::string m_BdtRefId;
  bool m_BdtRefIdIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  EventsSubscReqData m_EvSubsc;
  bool m_EvSubscIsSet;
  std::string m_McpttId;
  bool m_McpttIdIsSet;
  std::string m_McVideoId;
  bool m_McVideoIdIsSet;
  std::map<std::string, MediaComponent> m_MedComponents;
  bool m_MedComponentsIsSet;
  std::string m_IpDomain;
  bool m_IpDomainIsSet;
  MpsAction m_MpsAction;
  bool m_MpsActionIsSet;
  std::string m_MpsId;
  bool m_MpsIdIsSet;
  std::string m_McsId;
  bool m_McsIdIsSet;
  PreemptionControlInformation m_PreemptControlInfo;
  bool m_PreemptControlInfoIsSet;
  ReservPriority m_ResPrio;
  bool m_ResPrioIsSet;
  ServiceInfoStatus m_ServInfStatus;
  bool m_ServInfStatusIsSet;
  std::string m_NotifUri;

  std::string m_ServUrn;
  bool m_ServUrnIsSet;
  Snssai m_SliceInfo;
  bool m_SliceInfoIsSet;
  std::string m_SponId;
  bool m_SponIdIsSet;
  SponsoringStatus m_SponStatus;
  bool m_SponStatusIsSet;
  std::string m_Supi;
  bool m_SupiIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_SuppFeat;

  std::string m_UeIpv4;
  bool m_UeIpv4IsSet;
  Ipv6Addr m_UeIpv6;
  bool m_UeIpv6IsSet;
  std::string m_UeMac;
  bool m_UeMacIsSet;
  BridgeManagementContainer m_TsnBridgeManCont;
  bool m_TsnBridgeManContIsSet;
  PortManagementContainer m_TsnPortManContDstt;
  bool m_TsnPortManContDsttIsSet;
  std::vector<PortManagementContainer> m_TsnPortManContNwtts;
  bool m_TsnPortManContNwttsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AppSessionContextReqData_H_ */
