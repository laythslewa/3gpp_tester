/**
 * M5_NetworkAssistance
 * 5GMS AF M5 Network Assistance API Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NetworkAssistanceSession.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NetworkAssistanceSession::NetworkAssistanceSession() {
  m_NaSessionId = "";
  m_ServiceDataFlowDescriptionIsSet = false;
  m_PolicyTemplateId = "";
  m_PolicyTemplateIdIsSet = false;
  m_RequestedQoSIsSet = false;
  m_RecommendedQoSIsSet = false;
  m_NotficationURL = "";
  m_NotficationURLIsSet = false;
}

NetworkAssistanceSession::~NetworkAssistanceSession() {}

void NetworkAssistanceSession::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NetworkAssistanceSession &o) {
  j = nlohmann::json();
  j["naSessionId"] = o.m_NaSessionId;
  if (o.serviceDataFlowDescriptionIsSet() ||
      !o.m_ServiceDataFlowDescription.empty())
    j["serviceDataFlowDescription"] = o.m_ServiceDataFlowDescription;
  if (o.policyTemplateIdIsSet())
    j["policyTemplateId"] = o.m_PolicyTemplateId;
  if (o.requestedQoSIsSet())
    j["requestedQoS"] = o.m_RequestedQoS;
  if (o.recommendedQoSIsSet())
    j["recommendedQoS"] = o.m_RecommendedQoS;
  if (o.notficationURLIsSet())
    j["notficationURL"] = o.m_NotficationURL;
}

void from_json(const nlohmann::json &j, NetworkAssistanceSession &o) {
  j.at("naSessionId").get_to(o.m_NaSessionId);
  if (j.find("serviceDataFlowDescription") != j.end()) {
    j.at("serviceDataFlowDescription").get_to(o.m_ServiceDataFlowDescription);
    o.m_ServiceDataFlowDescriptionIsSet = true;
  }
  if (j.find("policyTemplateId") != j.end()) {
    j.at("policyTemplateId").get_to(o.m_PolicyTemplateId);
    o.m_PolicyTemplateIdIsSet = true;
  }
  if (j.find("requestedQoS") != j.end()) {
    j.at("requestedQoS").get_to(o.m_RequestedQoS);
    o.m_RequestedQoSIsSet = true;
  }
  if (j.find("recommendedQoS") != j.end()) {
    j.at("recommendedQoS").get_to(o.m_RecommendedQoS);
    o.m_RecommendedQoSIsSet = true;
  }
  if (j.find("notficationURL") != j.end()) {
    j.at("notficationURL").get_to(o.m_NotficationURL);
    o.m_NotficationURLIsSet = true;
  }
}

std::string NetworkAssistanceSession::getNaSessionId() const {
  return m_NaSessionId;
}
void NetworkAssistanceSession::setNaSessionId(std::string const &value) {
  m_NaSessionId = value;
}
std::vector<ServiceDataFlowDescription> &
NetworkAssistanceSession::getServiceDataFlowDescription() {
  return m_ServiceDataFlowDescription;
}
void NetworkAssistanceSession::setServiceDataFlowDescription(
    std::vector<ServiceDataFlowDescription> const &value) {
  m_ServiceDataFlowDescription = value;
  m_ServiceDataFlowDescriptionIsSet = true;
}
bool NetworkAssistanceSession::serviceDataFlowDescriptionIsSet() const {
  return m_ServiceDataFlowDescriptionIsSet;
}
void NetworkAssistanceSession::unsetServiceDataFlowDescription() {
  m_ServiceDataFlowDescriptionIsSet = false;
}
std::string NetworkAssistanceSession::getPolicyTemplateId() const {
  return m_PolicyTemplateId;
}
void NetworkAssistanceSession::setPolicyTemplateId(std::string const &value) {
  m_PolicyTemplateId = value;
  m_PolicyTemplateIdIsSet = true;
}
bool NetworkAssistanceSession::policyTemplateIdIsSet() const {
  return m_PolicyTemplateIdIsSet;
}
void NetworkAssistanceSession::unsetPolicyTemplateId() {
  m_PolicyTemplateIdIsSet = false;
}
M5QoSSpecification NetworkAssistanceSession::getRequestedQoS() const {
  return m_RequestedQoS;
}
void NetworkAssistanceSession::setRequestedQoS(
    M5QoSSpecification const &value) {
  m_RequestedQoS = value;
  m_RequestedQoSIsSet = true;
}
bool NetworkAssistanceSession::requestedQoSIsSet() const {
  return m_RequestedQoSIsSet;
}
void NetworkAssistanceSession::unsetRequestedQoS() {
  m_RequestedQoSIsSet = false;
}
M5QoSSpecification NetworkAssistanceSession::getRecommendedQoS() const {
  return m_RecommendedQoS;
}
void NetworkAssistanceSession::setRecommendedQoS(
    M5QoSSpecification const &value) {
  m_RecommendedQoS = value;
  m_RecommendedQoSIsSet = true;
}
bool NetworkAssistanceSession::recommendedQoSIsSet() const {
  return m_RecommendedQoSIsSet;
}
void NetworkAssistanceSession::unsetRecommendedQoS() {
  m_RecommendedQoSIsSet = false;
}
std::string NetworkAssistanceSession::getNotficationURL() const {
  return m_NotficationURL;
}
void NetworkAssistanceSession::setNotficationURL(std::string const &value) {
  m_NotficationURL = value;
  m_NotficationURLIsSet = true;
}
bool NetworkAssistanceSession::notficationURLIsSet() const {
  return m_NotficationURLIsSet;
}
void NetworkAssistanceSession::unsetNotficationURL() {
  m_NotficationURLIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
