/**
 * 3gpp-service-parameter
 * API for AF service paramter Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ServiceParameterDataPatch.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ServiceParameterDataPatch::ServiceParameterDataPatch() {
  m_ParamOverPc5 = "";
  m_ParamOverPc5IsSet = false;
  m_ParamOverUu = "";
  m_ParamOverUuIsSet = false;
  m_ParamForProSeDd = "";
  m_ParamForProSeDdIsSet = false;
  m_ParamForProSeDc = "";
  m_ParamForProSeDcIsSet = false;
  m_ParamForProSeU2N = "";
  m_ParamForProSeU2NIsSet = false;
  m_ParamForProSeUsageRep = "";
  m_ParamForProSeUsageRepIsSet = false;
  m_ParamForProSeServPathSel = "";
  m_ParamForProSeServPathSelIsSet = false;
  m_UrspInfluenceIsSet = false;
}

ServiceParameterDataPatch::~ServiceParameterDataPatch() {}

void ServiceParameterDataPatch::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ServiceParameterDataPatch &o) {
  j = nlohmann::json();
  if (o.paramOverPc5IsSet())
    j["paramOverPc5"] = o.m_ParamOverPc5;
  if (o.paramOverUuIsSet())
    j["paramOverUu"] = o.m_ParamOverUu;
  if (o.paramForProSeDdIsSet())
    j["paramForProSeDd"] = o.m_ParamForProSeDd;
  if (o.paramForProSeDcIsSet())
    j["paramForProSeDc"] = o.m_ParamForProSeDc;
  if (o.paramForProSeU2NIsSet())
    j["paramForProSeU2N"] = o.m_ParamForProSeU2N;
  if (o.paramForProSeUsageRepIsSet())
    j["paramForProSeUsageRep"] = o.m_ParamForProSeUsageRep;
  if (o.paramForProSeServPathSelIsSet())
    j["paramForProSeServPathSel"] = o.m_ParamForProSeServPathSel;
  if (o.urspInfluenceIsSet() || !o.m_UrspInfluence.empty())
    j["urspInfluence"] = o.m_UrspInfluence;
}

void from_json(const nlohmann::json &j, ServiceParameterDataPatch &o) {
  if (j.find("paramOverPc5") != j.end()) {
    j.at("paramOverPc5").get_to(o.m_ParamOverPc5);
    o.m_ParamOverPc5IsSet = true;
  }
  if (j.find("paramOverUu") != j.end()) {
    j.at("paramOverUu").get_to(o.m_ParamOverUu);
    o.m_ParamOverUuIsSet = true;
  }
  if (j.find("paramForProSeDd") != j.end()) {
    j.at("paramForProSeDd").get_to(o.m_ParamForProSeDd);
    o.m_ParamForProSeDdIsSet = true;
  }
  if (j.find("paramForProSeDc") != j.end()) {
    j.at("paramForProSeDc").get_to(o.m_ParamForProSeDc);
    o.m_ParamForProSeDcIsSet = true;
  }
  if (j.find("paramForProSeU2N") != j.end()) {
    j.at("paramForProSeU2N").get_to(o.m_ParamForProSeU2N);
    o.m_ParamForProSeU2NIsSet = true;
  }
  if (j.find("paramForProSeUsageRep") != j.end()) {
    j.at("paramForProSeUsageRep").get_to(o.m_ParamForProSeUsageRep);
    o.m_ParamForProSeUsageRepIsSet = true;
  }
  if (j.find("paramForProSeServPathSel") != j.end()) {
    j.at("paramForProSeServPathSel").get_to(o.m_ParamForProSeServPathSel);
    o.m_ParamForProSeServPathSelIsSet = true;
  }
  if (j.find("urspInfluence") != j.end()) {
    j.at("urspInfluence").get_to(o.m_UrspInfluence);
    o.m_UrspInfluenceIsSet = true;
  }
}

std::string ServiceParameterDataPatch::getParamOverPc5() const {
  return m_ParamOverPc5;
}
void ServiceParameterDataPatch::setParamOverPc5(std::string const &value) {
  m_ParamOverPc5 = value;
  m_ParamOverPc5IsSet = true;
}
bool ServiceParameterDataPatch::paramOverPc5IsSet() const {
  return m_ParamOverPc5IsSet;
}
void ServiceParameterDataPatch::unsetParamOverPc5() {
  m_ParamOverPc5IsSet = false;
}
std::string ServiceParameterDataPatch::getParamOverUu() const {
  return m_ParamOverUu;
}
void ServiceParameterDataPatch::setParamOverUu(std::string const &value) {
  m_ParamOverUu = value;
  m_ParamOverUuIsSet = true;
}
bool ServiceParameterDataPatch::paramOverUuIsSet() const {
  return m_ParamOverUuIsSet;
}
void ServiceParameterDataPatch::unsetParamOverUu() {
  m_ParamOverUuIsSet = false;
}
std::string ServiceParameterDataPatch::getParamForProSeDd() const {
  return m_ParamForProSeDd;
}
void ServiceParameterDataPatch::setParamForProSeDd(std::string const &value) {
  m_ParamForProSeDd = value;
  m_ParamForProSeDdIsSet = true;
}
bool ServiceParameterDataPatch::paramForProSeDdIsSet() const {
  return m_ParamForProSeDdIsSet;
}
void ServiceParameterDataPatch::unsetParamForProSeDd() {
  m_ParamForProSeDdIsSet = false;
}
std::string ServiceParameterDataPatch::getParamForProSeDc() const {
  return m_ParamForProSeDc;
}
void ServiceParameterDataPatch::setParamForProSeDc(std::string const &value) {
  m_ParamForProSeDc = value;
  m_ParamForProSeDcIsSet = true;
}
bool ServiceParameterDataPatch::paramForProSeDcIsSet() const {
  return m_ParamForProSeDcIsSet;
}
void ServiceParameterDataPatch::unsetParamForProSeDc() {
  m_ParamForProSeDcIsSet = false;
}
std::string ServiceParameterDataPatch::getParamForProSeU2N() const {
  return m_ParamForProSeU2N;
}
void ServiceParameterDataPatch::setParamForProSeU2N(std::string const &value) {
  m_ParamForProSeU2N = value;
  m_ParamForProSeU2NIsSet = true;
}
bool ServiceParameterDataPatch::paramForProSeU2NIsSet() const {
  return m_ParamForProSeU2NIsSet;
}
void ServiceParameterDataPatch::unsetParamForProSeU2N() {
  m_ParamForProSeU2NIsSet = false;
}
std::string ServiceParameterDataPatch::getParamForProSeUsageRep() const {
  return m_ParamForProSeUsageRep;
}
void ServiceParameterDataPatch::setParamForProSeUsageRep(
    std::string const &value) {
  m_ParamForProSeUsageRep = value;
  m_ParamForProSeUsageRepIsSet = true;
}
bool ServiceParameterDataPatch::paramForProSeUsageRepIsSet() const {
  return m_ParamForProSeUsageRepIsSet;
}
void ServiceParameterDataPatch::unsetParamForProSeUsageRep() {
  m_ParamForProSeUsageRepIsSet = false;
}
std::string ServiceParameterDataPatch::getParamForProSeServPathSel() const {
  return m_ParamForProSeServPathSel;
}
void ServiceParameterDataPatch::setParamForProSeServPathSel(
    std::string const &value) {
  m_ParamForProSeServPathSel = value;
  m_ParamForProSeServPathSelIsSet = true;
}
bool ServiceParameterDataPatch::paramForProSeServPathSelIsSet() const {
  return m_ParamForProSeServPathSelIsSet;
}
void ServiceParameterDataPatch::unsetParamForProSeServPathSel() {
  m_ParamForProSeServPathSelIsSet = false;
}
std::vector<UrspRuleRequest> &ServiceParameterDataPatch::getUrspInfluence() {
  return m_UrspInfluence;
}
void ServiceParameterDataPatch::setUrspInfluence(
    std::vector<UrspRuleRequest> const &value) {
  m_UrspInfluence = value;
  m_UrspInfluenceIsSet = true;
}
bool ServiceParameterDataPatch::urspInfluenceIsSet() const {
  return m_UrspInfluenceIsSet;
}
void ServiceParameterDataPatch::unsetUrspInfluence() {
  m_UrspInfluenceIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
