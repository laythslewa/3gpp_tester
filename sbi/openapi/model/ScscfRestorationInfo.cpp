/**
 * Nhss_imsUECM
 * Nhss UE Context Management Service for IMS. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ScscfRestorationInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ScscfRestorationInfo::ScscfRestorationInfo() {
  m_UserName = "";
  m_UserNameIsSet = false;
  m_RestorationInfoIsSet = false;
  m_RegistrationTimeOut = "";
  m_RegistrationTimeOutIsSet = false;
  m_SipAuthenticationSchemeIsSet = false;
}

ScscfRestorationInfo::~ScscfRestorationInfo() {}

void ScscfRestorationInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ScscfRestorationInfo &o) {
  j = nlohmann::json();
  if (o.userNameIsSet())
    j["userName"] = o.m_UserName;
  if (o.restorationInfoIsSet() || !o.m_RestorationInfo.empty())
    j["restorationInfo"] = o.m_RestorationInfo;
  if (o.registrationTimeOutIsSet())
    j["registrationTimeOut"] = o.m_RegistrationTimeOut;
  if (o.sipAuthenticationSchemeIsSet())
    j["sipAuthenticationScheme"] = o.m_SipAuthenticationScheme;
}

void from_json(const nlohmann::json &j, ScscfRestorationInfo &o) {
  if (j.find("userName") != j.end()) {
    j.at("userName").get_to(o.m_UserName);
    o.m_UserNameIsSet = true;
  }
  if (j.find("restorationInfo") != j.end()) {
    j.at("restorationInfo").get_to(o.m_RestorationInfo);
    o.m_RestorationInfoIsSet = true;
  }
  if (j.find("registrationTimeOut") != j.end()) {
    j.at("registrationTimeOut").get_to(o.m_RegistrationTimeOut);
    o.m_RegistrationTimeOutIsSet = true;
  }
  if (j.find("sipAuthenticationScheme") != j.end()) {
    j.at("sipAuthenticationScheme").get_to(o.m_SipAuthenticationScheme);
    o.m_SipAuthenticationSchemeIsSet = true;
  }
}

std::string ScscfRestorationInfo::getUserName() const { return m_UserName; }
void ScscfRestorationInfo::setUserName(std::string const &value) {
  m_UserName = value;
  m_UserNameIsSet = true;
}
bool ScscfRestorationInfo::userNameIsSet() const { return m_UserNameIsSet; }
void ScscfRestorationInfo::unsetUserName() { m_UserNameIsSet = false; }
std::vector<RestorationInfo> &ScscfRestorationInfo::getRestorationInfo() {
  return m_RestorationInfo;
}
void ScscfRestorationInfo::setRestorationInfo(
    std::vector<RestorationInfo> const &value) {
  m_RestorationInfo = value;
  m_RestorationInfoIsSet = true;
}
bool ScscfRestorationInfo::restorationInfoIsSet() const {
  return m_RestorationInfoIsSet;
}
void ScscfRestorationInfo::unsetRestorationInfo() {
  m_RestorationInfoIsSet = false;
}
std::string ScscfRestorationInfo::getRegistrationTimeOut() const {
  return m_RegistrationTimeOut;
}
void ScscfRestorationInfo::setRegistrationTimeOut(std::string const &value) {
  m_RegistrationTimeOut = value;
  m_RegistrationTimeOutIsSet = true;
}
bool ScscfRestorationInfo::registrationTimeOutIsSet() const {
  return m_RegistrationTimeOutIsSet;
}
void ScscfRestorationInfo::unsetRegistrationTimeOut() {
  m_RegistrationTimeOutIsSet = false;
}
SipAuthenticationScheme
ScscfRestorationInfo::getSipAuthenticationScheme() const {
  return m_SipAuthenticationScheme;
}
void ScscfRestorationInfo::setSipAuthenticationScheme(
    SipAuthenticationScheme const &value) {
  m_SipAuthenticationScheme = value;
  m_SipAuthenticationSchemeIsSet = true;
}
bool ScscfRestorationInfo::sipAuthenticationSchemeIsSet() const {
  return m_SipAuthenticationSchemeIsSet;
}
void ScscfRestorationInfo::unsetSipAuthenticationScheme() {
  m_SipAuthenticationSchemeIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
