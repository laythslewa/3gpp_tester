/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmContextRetrieveData.h
 *
 * Data within Retrieve SM Context Request
 */

#ifndef SmContextRetrieveData_H_
#define SmContextRetrieveData_H_

#include "MmeCapabilities.h"
#include "PlmnId.h"
#include "SmContextType.h"
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within Retrieve SM Context Request
/// </summary>
class SmContextRetrieveData {
public:
  SmContextRetrieveData();
  virtual ~SmContextRetrieveData();

  void validate();

  /////////////////////////////////////////////
  /// SmContextRetrieveData members

  /// <summary>
  ///
  /// </summary>
  MmeCapabilities getTargetMmeCap() const;
  void setTargetMmeCap(MmeCapabilities const &value);
  bool targetMmeCapIsSet() const;
  void unsetTargetMmeCap();
  /// <summary>
  ///
  /// </summary>
  SmContextType getSmContextType() const;
  void setSmContextType(SmContextType const &value);
  bool smContextTypeIsSet() const;
  void unsetSmContextType();
  /// <summary>
  ///
  /// </summary>
  PlmnId getServingNetwork() const;
  void setServingNetwork(PlmnId const &value);
  bool servingNetworkIsSet() const;
  void unsetServingNetwork();
  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t> &getNotToTransferEbiList();
  void setNotToTransferEbiList(std::vector<int32_t> const value);
  bool notToTransferEbiListIsSet() const;
  void unsetNotToTransferEbiList();
  /// <summary>
  ///
  /// </summary>
  bool isRanUnchangedInd() const;
  void setRanUnchangedInd(bool const value);
  bool ranUnchangedIndIsSet() const;
  void unsetRanUnchangedInd();

  friend void to_json(nlohmann::json &j, const SmContextRetrieveData &o);
  friend void from_json(const nlohmann::json &j, SmContextRetrieveData &o);

protected:
  MmeCapabilities m_TargetMmeCap;
  bool m_TargetMmeCapIsSet;
  SmContextType m_SmContextType;
  bool m_SmContextTypeIsSet;
  PlmnId m_ServingNetwork;
  bool m_ServingNetworkIsSet;
  std::vector<int32_t> m_NotToTransferEbiList;
  bool m_NotToTransferEbiListIsSet;
  bool m_RanUnchangedInd;
  bool m_RanUnchangedIndIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SmContextRetrieveData_H_ */
