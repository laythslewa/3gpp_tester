/**
 * Unified Data Repository Service API file for structured data for exposure
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AccessAndMobilityDataApi.h
 *
 *
 */

#ifndef AccessAndMobilityDataApi_H_
#define AccessAndMobilityDataApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "AccessAndMobilityData.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class AccessAndMobilityDataApi {
public:
  AccessAndMobilityDataApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~AccessAndMobilityDataApi() {}
  void init();

  const std::string base = "";

private:
  void setupRoutes();

  void create_or_replace_access_and_mobility_data_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void delete_access_and_mobility_data_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void query_access_and_mobility_data_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void update_access_and_mobility_data_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void access_and_mobility_data_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Creates and updates the access and mobility exposure data for a UE
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId">UE id</param>
  /// <param name="accessAndMobilityData"></param>
  virtual void create_or_replace_access_and_mobility_data(
      const std::string &ueId,
      const AccessAndMobilityData &accessAndMobilityData,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Deletes the access and mobility exposure data for a UE
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId">UE id</param>
  virtual void
  delete_access_and_mobility_data(const std::string &ueId,
                                  Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Retrieves the access and mobility exposure data for a UE
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId">UE id</param>
  /// <param name="suppFeat">Supported Features (optional, default to
  /// &quot;&quot;)</param>
  virtual void query_access_and_mobility_data(
      const std::string &ueId, const Pistache::Optional<std::string> &suppFeat,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Updates the access and mobility exposure data for a UE
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId">UE id</param>
  /// <param name="accessAndMobilityData"></param>
  virtual void update_access_and_mobility_data(
      const std::string &ueId,
      const AccessAndMobilityData &accessAndMobilityData,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AccessAndMobilityDataApi_H_ */
