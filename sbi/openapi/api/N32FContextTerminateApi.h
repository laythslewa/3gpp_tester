/**
 * N32 Handshake API
 * N32-c Handshake Service.  Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC).  All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * N32FContextTerminateApi.h
 *
 *
 */

#ifndef N32FContextTerminateApi_H_
#define N32FContextTerminateApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "N32fContextInfo.h"
#include "ProblemDetails.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class N32FContextTerminateApi {
public:
  N32FContextTerminateApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~N32FContextTerminateApi() {}
  void init();

  const std::string base = "/n32c-handshake/v1";

private:
  void setupRoutes();

  void post_n32f_terminate_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response);
  void n32_f_context_terminate_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// N32-f Context Terminate
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="n32fContextInfo">Custom operation for n32-f context
  /// termination</param>
  virtual void
  post_n32f_terminate(const N32fContextInfo &n32fContextInfo,
                      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* N32FContextTerminateApi_H_ */
