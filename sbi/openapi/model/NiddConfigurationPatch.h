/**
 * 3gpp-nidd
 * API for non IP data delivery. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NiddConfigurationPatch.h
 *
 * Represents the parameters to update a NIDD configuration.
 */

#ifndef NiddConfigurationPatch_H_
#define NiddConfigurationPatch_H_

#include "PdnEstablishmentOptionsRm.h"
#include "RdsPort.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the parameters to update a NIDD configuration.
/// </summary>
class NiddConfigurationPatch {
public:
  NiddConfigurationPatch();
  virtual ~NiddConfigurationPatch();

  void validate();

  /////////////////////////////////////////////
  /// NiddConfigurationPatch members

  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI with
  /// \&quot;nullable&#x3D;true\&quot; property.
  /// </summary>
  std::string getDuration() const;
  void setDuration(std::string const &value);
  bool durationIsSet() const;
  void unsetDuration();
  /// <summary>
  /// The reliable data service (as defined in subclause 4.5.15.3 of 3GPP
  /// TS 23.682) to indicate if a reliable data service acknowledgment is
  /// enabled or not.
  /// </summary>
  bool isReliableDataService() const;
  void setReliableDataService(bool const value);
  bool reliableDataServiceIsSet() const;
  void unsetReliableDataService();
  /// <summary>
  /// Indicates the static port configuration that is used for reliable data
  /// transfer between specific applications using RDS (as defined in
  /// subclause 5.2.4 and 5.2.5 of 3GPP TS 24.250).
  /// </summary>
  std::vector<RdsPort> &getRdsPorts();
  void setRdsPorts(std::vector<RdsPort> const &value);
  bool rdsPortsIsSet() const;
  void unsetRdsPorts();
  /// <summary>
  ///
  /// </summary>
  PdnEstablishmentOptionsRm getPdnEstablishmentOption() const;
  void setPdnEstablishmentOption(PdnEstablishmentOptionsRm const &value);
  bool pdnEstablishmentOptionIsSet() const;
  void unsetPdnEstablishmentOption();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getNotificationDestination() const;
  void setNotificationDestination(std::string const &value);
  bool notificationDestinationIsSet() const;
  void unsetNotificationDestination();

  friend void to_json(nlohmann::json &j, const NiddConfigurationPatch &o);
  friend void from_json(const nlohmann::json &j, NiddConfigurationPatch &o);

protected:
  std::string m_Duration;
  bool m_DurationIsSet;
  bool m_ReliableDataService;
  bool m_ReliableDataServiceIsSet;
  std::vector<RdsPort> m_RdsPorts;
  bool m_RdsPortsIsSet;
  PdnEstablishmentOptionsRm m_PdnEstablishmentOption;
  bool m_PdnEstablishmentOptionIsSet;
  std::string m_NotificationDestination;
  bool m_NotificationDestinationIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NiddConfigurationPatch_H_ */
