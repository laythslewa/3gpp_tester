/**
 * Nhss_SDM
 * HSS Subscriber Data Management. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SubscriptionData.h
 *
 * Contains data about a subscription request, to be created by a consumer to an
 * URI of the HSS_SDM API to be monitored; it also represents the response
 * containing data about the created subscription
 */

#ifndef SubscriptionData_H_
#define SubscriptionData_H_

#include "SubscriptionDataSets.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains data about a subscription request, to be created by a consumer to
/// an URI of the HSS_SDM API to be monitored; it also represents the response
/// containing data about the created subscription
/// </summary>
class SubscriptionData {
public:
  SubscriptionData();
  virtual ~SubscriptionData();

  void validate();

  /////////////////////////////////////////////
  /// SubscriptionData members

  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getNfInstanceId() const;
  void setNfInstanceId(std::string const &value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getCallbackReference() const;
  void setCallbackReference(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getMonitoredResourceUris();
  void setMonitoredResourceUris(std::vector<std::string> const &value);
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getExpires() const;
  void setExpires(std::string const &value);
  bool expiresIsSet() const;
  void unsetExpires();
  /// <summary>
  ///
  /// </summary>
  bool isImmediateReport() const;
  void setImmediateReport(bool const value);
  bool immediateReportIsSet() const;
  void unsetImmediateReport();
  /// <summary>
  ///
  /// </summary>
  SubscriptionDataSets getReport() const;
  void setReport(SubscriptionDataSets const &value);
  bool reportIsSet() const;
  void unsetReport();

  friend void to_json(nlohmann::json &j, const SubscriptionData &o);
  friend void from_json(const nlohmann::json &j, SubscriptionData &o);

protected:
  std::string m_NfInstanceId;

  std::string m_CallbackReference;

  std::vector<std::string> m_MonitoredResourceUris;

  std::string m_Expires;
  bool m_ExpiresIsSet;
  bool m_ImmediateReport;
  bool m_ImmediateReportIsSet;
  SubscriptionDataSets m_Report;
  bool m_ReportIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SubscriptionData_H_ */
