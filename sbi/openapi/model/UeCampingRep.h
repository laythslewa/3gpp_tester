/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UeCampingRep.h
 *
 * Contains the current applicable values corresponding to the policy control
 * request triggers.
 */

#ifndef UeCampingRep_H_
#define UeCampingRep_H_

#include "AccessType.h"
#include "NetLocAccessSupport.h"
#include "PlmnIdNid.h"
#include "RatType.h"
#include "ServingNfIdentity.h"
#include "UserLocation.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the current applicable values corresponding to the policy control
/// request triggers.
/// </summary>
class UeCampingRep {
public:
  UeCampingRep();
  virtual ~UeCampingRep();

  void validate();

  /////////////////////////////////////////////
  /// UeCampingRep members

  /// <summary>
  ///
  /// </summary>
  AccessType getAccessType() const;
  void setAccessType(AccessType const &value);
  bool accessTypeIsSet() const;
  void unsetAccessType();
  /// <summary>
  ///
  /// </summary>
  RatType getRatType() const;
  void setRatType(RatType const &value);
  bool ratTypeIsSet() const;
  void unsetRatType();
  /// <summary>
  ///
  /// </summary>
  ServingNfIdentity getServNfId() const;
  void setServNfId(ServingNfIdentity const &value);
  bool servNfIdIsSet() const;
  void unsetServNfId();
  /// <summary>
  ///
  /// </summary>
  PlmnIdNid getServingNetwork() const;
  void setServingNetwork(PlmnIdNid const &value);
  bool servingNetworkIsSet() const;
  void unsetServingNetwork();
  /// <summary>
  ///
  /// </summary>
  UserLocation getUserLocationInfo() const;
  void setUserLocationInfo(UserLocation const &value);
  bool userLocationInfoIsSet() const;
  void unsetUserLocationInfo();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getUeTimeZone() const;
  void setUeTimeZone(std::string const &value);
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();
  /// <summary>
  ///
  /// </summary>
  NetLocAccessSupport getNetLocAccSupp() const;
  void setNetLocAccSupp(NetLocAccessSupport const &value);
  bool netLocAccSuppIsSet() const;
  void unsetNetLocAccSupp();

  friend void to_json(nlohmann::json &j, const UeCampingRep &o);
  friend void from_json(const nlohmann::json &j, UeCampingRep &o);

protected:
  AccessType m_AccessType;
  bool m_AccessTypeIsSet;
  RatType m_RatType;
  bool m_RatTypeIsSet;
  ServingNfIdentity m_ServNfId;
  bool m_ServNfIdIsSet;
  PlmnIdNid m_ServingNetwork;
  bool m_ServingNetworkIsSet;
  UserLocation m_UserLocationInfo;
  bool m_UserLocationInfoIsSet;
  std::string m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  NetLocAccessSupport m_NetLocAccSupp;
  bool m_NetLocAccSuppIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UeCampingRep_H_ */
