/**
 * 3gpp-bdt
 * API for BDT resouce management. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "Bdt.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Bdt::Bdt() {
  m_Self = "";
  m_SelfIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_NumberOfUEs = 0;
  m_LocationAreaIsSet = false;
  m_LocationArea5GIsSet = false;
  m_ReferenceId = "";
  m_ReferenceIdIsSet = false;
  m_TransferPoliciesIsSet = false;
  m_SelectedPolicy = 0;
  m_SelectedPolicyIsSet = false;
  m_ExternalGroupId = "";
  m_ExternalGroupIdIsSet = false;
  m_NotificationDestination = "";
  m_NotificationDestinationIsSet = false;
  m_WarnNotifEnabled = false;
  m_WarnNotifEnabledIsSet = false;
  m_TrafficDes = "";
  m_TrafficDesIsSet = false;
}

Bdt::~Bdt() {}

void Bdt::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const Bdt &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  j["volumePerUE"] = o.m_VolumePerUE;
  j["numberOfUEs"] = o.m_NumberOfUEs;
  j["desiredTimeWindow"] = o.m_DesiredTimeWindow;
  if (o.locationAreaIsSet())
    j["locationArea"] = o.m_LocationArea;
  if (o.locationArea5GIsSet())
    j["locationArea5G"] = o.m_LocationArea5G;
  if (o.referenceIdIsSet())
    j["referenceId"] = o.m_ReferenceId;
  if (o.transferPoliciesIsSet() || !o.m_TransferPolicies.empty())
    j["transferPolicies"] = o.m_TransferPolicies;
  if (o.selectedPolicyIsSet())
    j["selectedPolicy"] = o.m_SelectedPolicy;
  if (o.externalGroupIdIsSet())
    j["externalGroupId"] = o.m_ExternalGroupId;
  if (o.notificationDestinationIsSet())
    j["notificationDestination"] = o.m_NotificationDestination;
  if (o.warnNotifEnabledIsSet())
    j["warnNotifEnabled"] = o.m_WarnNotifEnabled;
  if (o.trafficDesIsSet())
    j["trafficDes"] = o.m_TrafficDes;
}

void from_json(const nlohmann::json &j, Bdt &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  j.at("volumePerUE").get_to(o.m_VolumePerUE);
  j.at("numberOfUEs").get_to(o.m_NumberOfUEs);
  j.at("desiredTimeWindow").get_to(o.m_DesiredTimeWindow);
  if (j.find("locationArea") != j.end()) {
    j.at("locationArea").get_to(o.m_LocationArea);
    o.m_LocationAreaIsSet = true;
  }
  if (j.find("locationArea5G") != j.end()) {
    j.at("locationArea5G").get_to(o.m_LocationArea5G);
    o.m_LocationArea5GIsSet = true;
  }
  if (j.find("referenceId") != j.end()) {
    j.at("referenceId").get_to(o.m_ReferenceId);
    o.m_ReferenceIdIsSet = true;
  }
  if (j.find("transferPolicies") != j.end()) {
    j.at("transferPolicies").get_to(o.m_TransferPolicies);
    o.m_TransferPoliciesIsSet = true;
  }
  if (j.find("selectedPolicy") != j.end()) {
    j.at("selectedPolicy").get_to(o.m_SelectedPolicy);
    o.m_SelectedPolicyIsSet = true;
  }
  if (j.find("externalGroupId") != j.end()) {
    j.at("externalGroupId").get_to(o.m_ExternalGroupId);
    o.m_ExternalGroupIdIsSet = true;
  }
  if (j.find("notificationDestination") != j.end()) {
    j.at("notificationDestination").get_to(o.m_NotificationDestination);
    o.m_NotificationDestinationIsSet = true;
  }
  if (j.find("warnNotifEnabled") != j.end()) {
    j.at("warnNotifEnabled").get_to(o.m_WarnNotifEnabled);
    o.m_WarnNotifEnabledIsSet = true;
  }
  if (j.find("trafficDes") != j.end()) {
    j.at("trafficDes").get_to(o.m_TrafficDes);
    o.m_TrafficDesIsSet = true;
  }
}

std::string Bdt::getSelf() const { return m_Self; }
void Bdt::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool Bdt::selfIsSet() const { return m_SelfIsSet; }
void Bdt::unsetSelf() { m_SelfIsSet = false; }
std::string Bdt::getSupportedFeatures() const { return m_SupportedFeatures; }
void Bdt::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool Bdt::supportedFeaturesIsSet() const { return m_SupportedFeaturesIsSet; }
void Bdt::unsetSupportedFeatures() { m_SupportedFeaturesIsSet = false; }
UsageThreshold Bdt::getVolumePerUE() const { return m_VolumePerUE; }
void Bdt::setVolumePerUE(UsageThreshold const &value) { m_VolumePerUE = value; }
int32_t Bdt::getNumberOfUEs() const { return m_NumberOfUEs; }
void Bdt::setNumberOfUEs(int32_t const value) { m_NumberOfUEs = value; }
TimeWindow Bdt::getDesiredTimeWindow() const { return m_DesiredTimeWindow; }
void Bdt::setDesiredTimeWindow(TimeWindow const &value) {
  m_DesiredTimeWindow = value;
}
LocationArea Bdt::getLocationArea() const { return m_LocationArea; }
void Bdt::setLocationArea(LocationArea const &value) {
  m_LocationArea = value;
  m_LocationAreaIsSet = true;
}
bool Bdt::locationAreaIsSet() const { return m_LocationAreaIsSet; }
void Bdt::unsetLocationArea() { m_LocationAreaIsSet = false; }
LocationArea5G Bdt::getLocationArea5G() const { return m_LocationArea5G; }
void Bdt::setLocationArea5G(LocationArea5G const &value) {
  m_LocationArea5G = value;
  m_LocationArea5GIsSet = true;
}
bool Bdt::locationArea5GIsSet() const { return m_LocationArea5GIsSet; }
void Bdt::unsetLocationArea5G() { m_LocationArea5GIsSet = false; }
std::string Bdt::getReferenceId() const { return m_ReferenceId; }
void Bdt::setReferenceId(std::string const &value) {
  m_ReferenceId = value;
  m_ReferenceIdIsSet = true;
}
bool Bdt::referenceIdIsSet() const { return m_ReferenceIdIsSet; }
void Bdt::unsetReferenceId() { m_ReferenceIdIsSet = false; }
std::vector<TransferPolicy> &Bdt::getTransferPolicies() {
  return m_TransferPolicies;
}
void Bdt::setTransferPolicies(std::vector<TransferPolicy> const &value) {
  m_TransferPolicies = value;
  m_TransferPoliciesIsSet = true;
}
bool Bdt::transferPoliciesIsSet() const { return m_TransferPoliciesIsSet; }
void Bdt::unsetTransferPolicies() { m_TransferPoliciesIsSet = false; }
int32_t Bdt::getSelectedPolicy() const { return m_SelectedPolicy; }
void Bdt::setSelectedPolicy(int32_t const value) {
  m_SelectedPolicy = value;
  m_SelectedPolicyIsSet = true;
}
bool Bdt::selectedPolicyIsSet() const { return m_SelectedPolicyIsSet; }
void Bdt::unsetSelectedPolicy() { m_SelectedPolicyIsSet = false; }
std::string Bdt::getExternalGroupId() const { return m_ExternalGroupId; }
void Bdt::setExternalGroupId(std::string const &value) {
  m_ExternalGroupId = value;
  m_ExternalGroupIdIsSet = true;
}
bool Bdt::externalGroupIdIsSet() const { return m_ExternalGroupIdIsSet; }
void Bdt::unsetExternalGroupId() { m_ExternalGroupIdIsSet = false; }
std::string Bdt::getNotificationDestination() const {
  return m_NotificationDestination;
}
void Bdt::setNotificationDestination(std::string const &value) {
  m_NotificationDestination = value;
  m_NotificationDestinationIsSet = true;
}
bool Bdt::notificationDestinationIsSet() const {
  return m_NotificationDestinationIsSet;
}
void Bdt::unsetNotificationDestination() {
  m_NotificationDestinationIsSet = false;
}
bool Bdt::isWarnNotifEnabled() const { return m_WarnNotifEnabled; }
void Bdt::setWarnNotifEnabled(bool const value) {
  m_WarnNotifEnabled = value;
  m_WarnNotifEnabledIsSet = true;
}
bool Bdt::warnNotifEnabledIsSet() const { return m_WarnNotifEnabledIsSet; }
void Bdt::unsetWarnNotifEnabled() { m_WarnNotifEnabledIsSet = false; }
std::string Bdt::getTrafficDes() const { return m_TrafficDes; }
void Bdt::setTrafficDes(std::string const &value) {
  m_TrafficDes = value;
  m_TrafficDesIsSet = true;
}
bool Bdt::trafficDesIsSet() const { return m_TrafficDesIsSet; }
void Bdt::unsetTrafficDes() { m_TrafficDesIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
