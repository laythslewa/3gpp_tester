/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NssfEventSubscriptionCreateData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NssfEventSubscriptionCreateData::NssfEventSubscriptionCreateData() {
  m_NfNssaiAvailabilityUri = "";
  m_Expiry = "";
  m_ExpiryIsSet = false;
  m_AmfSetId = "";
  m_AmfSetIdIsSet = false;
  m_TaiRangeListIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

NssfEventSubscriptionCreateData::~NssfEventSubscriptionCreateData() {}

void NssfEventSubscriptionCreateData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NssfEventSubscriptionCreateData &o) {
  j = nlohmann::json();
  j["nfNssaiAvailabilityUri"] = o.m_NfNssaiAvailabilityUri;
  j["taiList"] = o.m_TaiList;
  j["event"] = o.m_Event;
  if (o.expiryIsSet())
    j["expiry"] = o.m_Expiry;
  if (o.amfSetIdIsSet())
    j["amfSetId"] = o.m_AmfSetId;
  if (o.taiRangeListIsSet() || !o.m_TaiRangeList.empty())
    j["taiRangeList"] = o.m_TaiRangeList;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, NssfEventSubscriptionCreateData &o) {
  j.at("nfNssaiAvailabilityUri").get_to(o.m_NfNssaiAvailabilityUri);
  j.at("taiList").get_to(o.m_TaiList);
  j.at("event").get_to(o.m_Event);
  if (j.find("expiry") != j.end()) {
    j.at("expiry").get_to(o.m_Expiry);
    o.m_ExpiryIsSet = true;
  }
  if (j.find("amfSetId") != j.end()) {
    j.at("amfSetId").get_to(o.m_AmfSetId);
    o.m_AmfSetIdIsSet = true;
  }
  if (j.find("taiRangeList") != j.end()) {
    j.at("taiRangeList").get_to(o.m_TaiRangeList);
    o.m_TaiRangeListIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

std::string NssfEventSubscriptionCreateData::getNfNssaiAvailabilityUri() const {
  return m_NfNssaiAvailabilityUri;
}
void NssfEventSubscriptionCreateData::setNfNssaiAvailabilityUri(
    std::string const &value) {
  m_NfNssaiAvailabilityUri = value;
}
std::vector<Tai> &NssfEventSubscriptionCreateData::getTaiList() {
  return m_TaiList;
}
void NssfEventSubscriptionCreateData::setTaiList(
    std::vector<Tai> const &value) {
  m_TaiList = value;
}
NssfEventType NssfEventSubscriptionCreateData::getEvent() const {
  return m_Event;
}
void NssfEventSubscriptionCreateData::setEvent(NssfEventType const &value) {
  m_Event = value;
}
std::string NssfEventSubscriptionCreateData::getExpiry() const {
  return m_Expiry;
}
void NssfEventSubscriptionCreateData::setExpiry(std::string const &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}
bool NssfEventSubscriptionCreateData::expiryIsSet() const {
  return m_ExpiryIsSet;
}
void NssfEventSubscriptionCreateData::unsetExpiry() { m_ExpiryIsSet = false; }
std::string NssfEventSubscriptionCreateData::getAmfSetId() const {
  return m_AmfSetId;
}
void NssfEventSubscriptionCreateData::setAmfSetId(std::string const &value) {
  m_AmfSetId = value;
  m_AmfSetIdIsSet = true;
}
bool NssfEventSubscriptionCreateData::amfSetIdIsSet() const {
  return m_AmfSetIdIsSet;
}
void NssfEventSubscriptionCreateData::unsetAmfSetId() {
  m_AmfSetIdIsSet = false;
}
std::vector<TaiRange> &NssfEventSubscriptionCreateData::getTaiRangeList() {
  return m_TaiRangeList;
}
void NssfEventSubscriptionCreateData::setTaiRangeList(
    std::vector<TaiRange> const &value) {
  m_TaiRangeList = value;
  m_TaiRangeListIsSet = true;
}
bool NssfEventSubscriptionCreateData::taiRangeListIsSet() const {
  return m_TaiRangeListIsSet;
}
void NssfEventSubscriptionCreateData::unsetTaiRangeList() {
  m_TaiRangeListIsSet = false;
}
std::string NssfEventSubscriptionCreateData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void NssfEventSubscriptionCreateData::setSupportedFeatures(
    std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool NssfEventSubscriptionCreateData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void NssfEventSubscriptionCreateData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
