/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualApplicationSessionContextDocumentApi.h
 *
 *
 */

#ifndef IndividualApplicationSessionContextDocumentApi_H_
#define IndividualApplicationSessionContextDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "AppSessionContext.h"
#include "AppSessionContextUpdateDataPatch.h"
#include "EventsSubscReqData.h"
#include "ExtendedProblemDetails.h"
#include "ProblemDetails.h"
#include "RedirectResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class IndividualApplicationSessionContextDocumentApi {
public:
  IndividualApplicationSessionContextDocumentApi(
      std::shared_ptr<Pistache::Rest::Router>);
  virtual ~IndividualApplicationSessionContextDocumentApi() {}
  void init();

  const std::string base = "/npcf-policyauthorization/v1";

private:
  void setupRoutes();

  void delete_app_session_handler(const Pistache::Rest::Request &request,
                                  Pistache::Http::ResponseWriter response);
  void get_app_session_handler(const Pistache::Rest::Request &request,
                               Pistache::Http::ResponseWriter response);
  void mod_app_session_handler(const Pistache::Rest::Request &request,
                               Pistache::Http::ResponseWriter response);
  void individual_application_session_context_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Deletes an existing Individual Application Session Context
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="appSessionId">string identifying the Individual Application
  /// Session Context resource</param> <param name="eventsSubscReqData">deletion
  /// of the Individual Application Session Context resource, req notification
  /// (optional)</param>
  virtual void delete_app_session(const std::string &appSessionId,
                                  const EventsSubscReqData &eventsSubscReqData,
                                  Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Reads an existing Individual Application Session Context
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="appSessionId">string identifying the resource</param>
  virtual void get_app_session(const std::string &appSessionId,
                               Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Modifies an existing Individual Application Session Context
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="appSessionId">string identifying the resource</param>
  /// <param name="appSessionContextUpdateDataPatch">modification of the
  /// resource.</param>
  virtual void mod_app_session(
      const std::string &appSessionId,
      const AppSessionContextUpdateDataPatch &appSessionContextUpdateDataPatch,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IndividualApplicationSessionContextDocumentApi_H_ */
