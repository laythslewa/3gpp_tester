/**
 * Npcf_AMPolicyAuthorization Service API
 * PCF Access and Mobility Policy Authorization Service. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AMPolicyEventsSubscriptionDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

AMPolicyEventsSubscriptionDocumentApi::AMPolicyEventsSubscriptionDocumentApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void AMPolicyEventsSubscriptionDocumentApi::init() { setupRoutes(); }

void AMPolicyEventsSubscriptionDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Delete(*router,
                 base + "/app-am-contexts/:appAmContextId/events-subscription",
                 Routes::bind(&AMPolicyEventsSubscriptionDocumentApi::
                                  delete_am_events_subsc_handler,
                              this));
  Routes::Put(*router,
              base + "/app-am-contexts/:appAmContextId/events-subscription",
              Routes::bind(&AMPolicyEventsSubscriptionDocumentApi::
                               update_am_events_subsc_handler,
                           this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &AMPolicyEventsSubscriptionDocumentApi::
          am_policy_events_subscription_document_api_default_handler,
      this));
}

void AMPolicyEventsSubscriptionDocumentApi::delete_am_events_subsc_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto appAmContextId = request.param(":appAmContextId").as<std::string>();

  try {
    this->delete_am_events_subsc(appAmContextId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void AMPolicyEventsSubscriptionDocumentApi::update_am_events_subsc_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto appAmContextId = request.param(":appAmContextId").as<std::string>();

  // Getting the body param

  AmEventsSubscData amEventsSubscData;

  try {
    nlohmann::json::parse(request.body()).get_to(amEventsSubscData);
    this->update_am_events_subsc(appAmContextId, amEventsSubscData, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void AMPolicyEventsSubscriptionDocumentApi::
    am_policy_events_subscription_document_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
