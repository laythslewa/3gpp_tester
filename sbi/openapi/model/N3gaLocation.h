/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * N3gaLocation.h
 *
 *
 */

#ifndef N3gaLocation_H_
#define N3gaLocation_H_

#include "HfcNodeId.h"
#include "Ipv6Addr.h"
#include "LineType.h"
#include "Tai.h"
#include "TnapId.h"
#include "TwapId.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class N3gaLocation {
public:
  N3gaLocation();
  virtual ~N3gaLocation();

  void validate();

  /////////////////////////////////////////////
  /// N3gaLocation members

  /// <summary>
  ///
  /// </summary>
  Tai getN3gppTai() const;
  void setN3gppTai(Tai const &value);
  bool n3gppTaiIsSet() const;
  void unsetN3gppTai();
  /// <summary>
  /// This IE shall contain the N3IWF identifier received over NGAP and shall be
  /// encoded as a string of hexadecimal characters. Each character in the
  /// string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;,
  /// \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot;
  /// and shall represent 4 bits. The most significant character representing
  /// the 4 most significant bits of the N3IWF ID shall appear first in the
  /// string, and the character representing the 4 least significant bit of the
  /// N3IWF ID shall appear last in the string.
  /// </summary>
  std::string getN3IwfId() const;
  void setN3IwfId(std::string const &value);
  bool n3IwfIdIsSet() const;
  void unsetN3IwfId();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getUeIpv4Addr() const;
  void setUeIpv4Addr(std::string const &value);
  bool ueIpv4AddrIsSet() const;
  void unsetUeIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getUeIpv6Addr() const;
  void setUeIpv6Addr(Ipv6Addr const &value);
  bool ueIpv6AddrIsSet() const;
  void unsetUeIpv6Addr();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getPortNumber() const;
  void setPortNumber(int32_t const value);
  bool portNumberIsSet() const;
  void unsetPortNumber();
  /// <summary>
  ///
  /// </summary>
  TnapId getTnapId() const;
  void setTnapId(TnapId const &value);
  bool tnapIdIsSet() const;
  void unsetTnapId();
  /// <summary>
  ///
  /// </summary>
  TwapId getTwapId() const;
  void setTwapId(TwapId const &value);
  bool twapIdIsSet() const;
  void unsetTwapId();
  /// <summary>
  ///
  /// </summary>
  HfcNodeId getHfcNodeId() const;
  void setHfcNodeId(HfcNodeId const &value);
  bool hfcNodeIdIsSet() const;
  void unsetHfcNodeId();
  /// <summary>
  /// string with format \&quot;bytes\&quot; as defined in OpenAPI
  /// </summary>
  std::string getGli() const;
  void setGli(std::string const &value);
  bool gliIsSet() const;
  void unsetGli();
  /// <summary>
  ///
  /// </summary>
  LineType getW5gbanLineType() const;
  void setW5gbanLineType(LineType const &value);
  bool w5gbanLineTypeIsSet() const;
  void unsetW5gbanLineType();
  /// <summary>
  /// Global Cable Identifier uniquely identifying the connection between the
  /// 5G-CRG or FN-CRG to the 5GS. See clause 28.15.4 of 3GPP TS 23.003. This
  /// shall be encoded as a string per clause 28.15.4 of 3GPP TS 23.003, and
  /// compliant with the syntax specified in clause 2.2 of IETF RFC 7542 for the
  /// username part of a NAI. The GCI value is specified in CableLabs
  /// WR-TR-5WWC-ARCH.
  /// </summary>
  std::string getGci() const;
  void setGci(std::string const &value);
  bool gciIsSet() const;
  void unsetGci();

  friend void to_json(nlohmann::json &j, const N3gaLocation &o);
  friend void from_json(const nlohmann::json &j, N3gaLocation &o);

protected:
  Tai m_N3gppTai;
  bool m_N3gppTaiIsSet;
  std::string m_N3IwfId;
  bool m_N3IwfIdIsSet;
  std::string m_UeIpv4Addr;
  bool m_UeIpv4AddrIsSet;
  Ipv6Addr m_UeIpv6Addr;
  bool m_UeIpv6AddrIsSet;
  int32_t m_PortNumber;
  bool m_PortNumberIsSet;
  TnapId m_TnapId;
  bool m_TnapIdIsSet;
  TwapId m_TwapId;
  bool m_TwapIdIsSet;
  HfcNodeId m_HfcNodeId;
  bool m_HfcNodeIdIsSet;
  std::string m_Gli;
  bool m_GliIsSet;
  LineType m_W5gbanLineType;
  bool m_W5gbanLineTypeIsSet;
  std::string m_Gci;
  bool m_GciIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* N3gaLocation_H_ */
