/**
 * Namf_Communication
 * AMF Communication Service © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PduSessionContext.h
 *
 * Represents a PDU Session Context in UE Context
 */

#ifndef PduSessionContext_H_
#define PduSessionContext_H_

#include "AccessType.h"
#include "CnAssistedRanPara.h"
#include "EbiArpMapping.h"
#include "SbiBindingLevel.h"
#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a PDU Session Context in UE Context
/// </summary>
class PduSessionContext {
public:
  PduSessionContext();
  virtual ~PduSessionContext();

  void validate();

  /////////////////////////////////////////////
  /// PduSessionContext members

  /// <summary>
  /// Unsigned integer identifying a PDU session, within the range 0 to 255, as
  /// specified in clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU
  /// Session ID is allocated by the Core Network for UEs not supporting N1
  /// mode, reserved range 64 to 95 is used. PDU Session ID within the reserved
  /// range is only visible in the Core Network.
  /// </summary>
  int32_t getPduSessionId() const;
  void setPduSessionId(int32_t const value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getSmContextRef() const;
  void setSmContextRef(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  Snssai getSNssai() const;
  void setSNssai(Snssai const &value);
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getSelectedDnn() const;
  void setSelectedDnn(std::string const &value);
  bool selectedDnnIsSet() const;
  void unsetSelectedDnn();
  /// <summary>
  ///
  /// </summary>
  AccessType getAccessType() const;
  void setAccessType(AccessType const &value);
  /// <summary>
  ///
  /// </summary>
  AccessType getAdditionalAccessType() const;
  void setAdditionalAccessType(AccessType const &value);
  bool additionalAccessTypeIsSet() const;
  void unsetAdditionalAccessType();
  /// <summary>
  ///
  /// </summary>
  std::vector<EbiArpMapping> &getAllocatedEbiList();
  void setAllocatedEbiList(std::vector<EbiArpMapping> const &value);
  bool allocatedEbiListIsSet() const;
  void unsetAllocatedEbiList();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getHsmfId() const;
  void setHsmfId(std::string const &value);
  bool hsmfIdIsSet() const;
  void unsetHsmfId();
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getHsmfSetId() const;
  void setHsmfSetId(std::string const &value);
  bool hsmfSetIdIsSet() const;
  void unsetHsmfSetId();
  /// <summary>
  /// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted
  /// as the following string  \&quot; set&lt;Set ID&gt;.sn&lt;Service
  /// Name&gt;.nfi&lt;NF Instance
  /// ID&gt;.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.sn&lt;ServiceName&gt;.nfi&lt;NFInstanceID&gt;.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition)  &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition)  &lt;NID&gt; encoded as defined
  /// in clause 5.4.2 (\&quot;Nid\&quot; data type definition)
  /// &lt;NFInstanceId&gt; encoded as defined in clause 5.3.2
  /// &lt;ServiceName&gt; encoded as defined in 3GPP TS 29.510 &lt;Set ID&gt;
  /// encoded as a string of characters consisting of alphabetic characters (A-Z
  /// and a-z), digits (0-9) and/or the hyphen (-) and that shall end with
  /// either an alphabetic character or a digit.
  /// </summary>
  std::string getHsmfServiceSetId() const;
  void setHsmfServiceSetId(std::string const &value);
  bool hsmfServiceSetIdIsSet() const;
  void unsetHsmfServiceSetId();
  /// <summary>
  ///
  /// </summary>
  SbiBindingLevel getSmfBinding() const;
  void setSmfBinding(SbiBindingLevel const &value);
  bool smfBindingIsSet() const;
  void unsetSmfBinding();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getVsmfId() const;
  void setVsmfId(std::string const &value);
  bool vsmfIdIsSet() const;
  void unsetVsmfId();
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getVsmfSetId() const;
  void setVsmfSetId(std::string const &value);
  bool vsmfSetIdIsSet() const;
  void unsetVsmfSetId();
  /// <summary>
  /// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted
  /// as the following string  \&quot; set&lt;Set ID&gt;.sn&lt;Service
  /// Name&gt;.nfi&lt;NF Instance
  /// ID&gt;.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.sn&lt;ServiceName&gt;.nfi&lt;NFInstanceID&gt;.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition)  &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition)  &lt;NID&gt; encoded as defined
  /// in clause 5.4.2 (\&quot;Nid\&quot; data type definition)
  /// &lt;NFInstanceId&gt; encoded as defined in clause 5.3.2
  /// &lt;ServiceName&gt; encoded as defined in 3GPP TS 29.510 &lt;Set ID&gt;
  /// encoded as a string of characters consisting of alphabetic characters (A-Z
  /// and a-z), digits (0-9) and/or the hyphen (-) and that shall end with
  /// either an alphabetic character or a digit.
  /// </summary>
  std::string getVsmfServiceSetId() const;
  void setVsmfServiceSetId(std::string const &value);
  bool vsmfServiceSetIdIsSet() const;
  void unsetVsmfServiceSetId();
  /// <summary>
  ///
  /// </summary>
  SbiBindingLevel getVsmfBinding() const;
  void setVsmfBinding(SbiBindingLevel const &value);
  bool vsmfBindingIsSet() const;
  void unsetVsmfBinding();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getIsmfId() const;
  void setIsmfId(std::string const &value);
  bool ismfIdIsSet() const;
  void unsetIsmfId();
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getIsmfSetId() const;
  void setIsmfSetId(std::string const &value);
  bool ismfSetIdIsSet() const;
  void unsetIsmfSetId();
  /// <summary>
  /// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted
  /// as the following string  \&quot; set&lt;Set ID&gt;.sn&lt;Service
  /// Name&gt;.nfi&lt;NF Instance
  /// ID&gt;.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.sn&lt;ServiceName&gt;.nfi&lt;NFInstanceID&gt;.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition)  &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition)  &lt;NID&gt; encoded as defined
  /// in clause 5.4.2 (\&quot;Nid\&quot; data type definition)
  /// &lt;NFInstanceId&gt; encoded as defined in clause 5.3.2
  /// &lt;ServiceName&gt; encoded as defined in 3GPP TS 29.510 &lt;Set ID&gt;
  /// encoded as a string of characters consisting of alphabetic characters (A-Z
  /// and a-z), digits (0-9) and/or the hyphen (-) and that shall end with
  /// either an alphabetic character or a digit.
  /// </summary>
  std::string getIsmfServiceSetId() const;
  void setIsmfServiceSetId(std::string const &value);
  bool ismfServiceSetIdIsSet() const;
  void unsetIsmfServiceSetId();
  /// <summary>
  ///
  /// </summary>
  SbiBindingLevel getIsmfBinding() const;
  void setIsmfBinding(SbiBindingLevel const &value);
  bool ismfBindingIsSet() const;
  void unsetIsmfBinding();
  /// <summary>
  /// Contains the Identifier of the selected Network Slice instance
  /// </summary>
  std::string getNsInstance() const;
  void setNsInstance(std::string const &value);
  bool nsInstanceIsSet() const;
  void unsetNsInstance();
  /// <summary>
  ///
  /// </summary>
  std::string getSmfServiceInstanceId() const;
  void setSmfServiceInstanceId(std::string const &value);
  bool smfServiceInstanceIdIsSet() const;
  void unsetSmfServiceInstanceId();
  /// <summary>
  ///
  /// </summary>
  bool isMaPduSession() const;
  void setMaPduSession(bool const value);
  bool maPduSessionIsSet() const;
  void unsetMaPduSession();
  /// <summary>
  ///
  /// </summary>
  CnAssistedRanPara getCnAssistedRanPara() const;
  void setCnAssistedRanPara(CnAssistedRanPara const &value);
  bool cnAssistedRanParaIsSet() const;
  void unsetCnAssistedRanPara();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNrfManagementUri() const;
  void setNrfManagementUri(std::string const &value);
  bool nrfManagementUriIsSet() const;
  void unsetNrfManagementUri();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNrfDiscoveryUri() const;
  void setNrfDiscoveryUri(std::string const &value);
  bool nrfDiscoveryUriIsSet() const;
  void unsetNrfDiscoveryUri();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNrfAccessTokenUri() const;
  void setNrfAccessTokenUri(std::string const &value);
  bool nrfAccessTokenUriIsSet() const;
  void unsetNrfAccessTokenUri();

  friend void to_json(nlohmann::json &j, const PduSessionContext &o);
  friend void from_json(const nlohmann::json &j, PduSessionContext &o);

protected:
  int32_t m_PduSessionId;

  std::string m_SmContextRef;

  Snssai m_SNssai;

  std::string m_Dnn;

  std::string m_SelectedDnn;
  bool m_SelectedDnnIsSet;
  AccessType m_AccessType;

  AccessType m_AdditionalAccessType;
  bool m_AdditionalAccessTypeIsSet;
  std::vector<EbiArpMapping> m_AllocatedEbiList;
  bool m_AllocatedEbiListIsSet;
  std::string m_HsmfId;
  bool m_HsmfIdIsSet;
  std::string m_HsmfSetId;
  bool m_HsmfSetIdIsSet;
  std::string m_HsmfServiceSetId;
  bool m_HsmfServiceSetIdIsSet;
  SbiBindingLevel m_SmfBinding;
  bool m_SmfBindingIsSet;
  std::string m_VsmfId;
  bool m_VsmfIdIsSet;
  std::string m_VsmfSetId;
  bool m_VsmfSetIdIsSet;
  std::string m_VsmfServiceSetId;
  bool m_VsmfServiceSetIdIsSet;
  SbiBindingLevel m_VsmfBinding;
  bool m_VsmfBindingIsSet;
  std::string m_IsmfId;
  bool m_IsmfIdIsSet;
  std::string m_IsmfSetId;
  bool m_IsmfSetIdIsSet;
  std::string m_IsmfServiceSetId;
  bool m_IsmfServiceSetIdIsSet;
  SbiBindingLevel m_IsmfBinding;
  bool m_IsmfBindingIsSet;
  std::string m_NsInstance;
  bool m_NsInstanceIsSet;
  std::string m_SmfServiceInstanceId;
  bool m_SmfServiceInstanceIdIsSet;
  bool m_MaPduSession;
  bool m_MaPduSessionIsSet;
  CnAssistedRanPara m_CnAssistedRanPara;
  bool m_CnAssistedRanParaIsSet;
  std::string m_NrfManagementUri;
  bool m_NrfManagementUriIsSet;
  std::string m_NrfDiscoveryUri;
  bool m_NrfDiscoveryUriIsSet;
  std::string m_NrfAccessTokenUri;
  bool m_NrfAccessTokenUriIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PduSessionContext_H_ */
