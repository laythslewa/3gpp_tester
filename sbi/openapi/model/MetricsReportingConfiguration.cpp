/**
 * M1_MetricsReportingProvisioning
 * 5GMS AF M1 Metrics Reporting Provisioning API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MetricsReportingConfiguration.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

MetricsReportingConfiguration::MetricsReportingConfiguration() {
  m_MetricsReportingConfigurationId = "";
  m_Scheme = "";
  m_DataNetworkName = "";
  m_DataNetworkNameIsSet = false;
  m_ReportingInterval = 0;
  m_ReportingIntervalIsSet = false;
  m_SamplePercentage = 0.0;
  m_SamplePercentageIsSet = false;
  m_UrlFiltersIsSet = false;
  m_MetricsIsSet = false;
}

MetricsReportingConfiguration::~MetricsReportingConfiguration() {}

void MetricsReportingConfiguration::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const MetricsReportingConfiguration &o) {
  j = nlohmann::json();
  j["metricsReportingConfigurationId"] = o.m_MetricsReportingConfigurationId;
  j["scheme"] = o.m_Scheme;
  if (o.dataNetworkNameIsSet())
    j["dataNetworkName"] = o.m_DataNetworkName;
  if (o.reportingIntervalIsSet())
    j["reportingInterval"] = o.m_ReportingInterval;
  if (o.samplePercentageIsSet())
    j["samplePercentage"] = o.m_SamplePercentage;
  if (o.urlFiltersIsSet() || !o.m_UrlFilters.empty())
    j["urlFilters"] = o.m_UrlFilters;
  if (o.metricsIsSet() || !o.m_Metrics.empty())
    j["metrics"] = o.m_Metrics;
}

void from_json(const nlohmann::json &j, MetricsReportingConfiguration &o) {
  j.at("metricsReportingConfigurationId")
      .get_to(o.m_MetricsReportingConfigurationId);
  j.at("scheme").get_to(o.m_Scheme);
  if (j.find("dataNetworkName") != j.end()) {
    j.at("dataNetworkName").get_to(o.m_DataNetworkName);
    o.m_DataNetworkNameIsSet = true;
  }
  if (j.find("reportingInterval") != j.end()) {
    j.at("reportingInterval").get_to(o.m_ReportingInterval);
    o.m_ReportingIntervalIsSet = true;
  }
  if (j.find("samplePercentage") != j.end()) {
    j.at("samplePercentage").get_to(o.m_SamplePercentage);
    o.m_SamplePercentageIsSet = true;
  }
  if (j.find("urlFilters") != j.end()) {
    j.at("urlFilters").get_to(o.m_UrlFilters);
    o.m_UrlFiltersIsSet = true;
  }
  if (j.find("metrics") != j.end()) {
    j.at("metrics").get_to(o.m_Metrics);
    o.m_MetricsIsSet = true;
  }
}

std::string
MetricsReportingConfiguration::getMetricsReportingConfigurationId() const {
  return m_MetricsReportingConfigurationId;
}
void MetricsReportingConfiguration::setMetricsReportingConfigurationId(
    std::string const &value) {
  m_MetricsReportingConfigurationId = value;
}
std::string MetricsReportingConfiguration::getScheme() const {
  return m_Scheme;
}
void MetricsReportingConfiguration::setScheme(std::string const &value) {
  m_Scheme = value;
}
std::string MetricsReportingConfiguration::getDataNetworkName() const {
  return m_DataNetworkName;
}
void MetricsReportingConfiguration::setDataNetworkName(
    std::string const &value) {
  m_DataNetworkName = value;
  m_DataNetworkNameIsSet = true;
}
bool MetricsReportingConfiguration::dataNetworkNameIsSet() const {
  return m_DataNetworkNameIsSet;
}
void MetricsReportingConfiguration::unsetDataNetworkName() {
  m_DataNetworkNameIsSet = false;
}
int32_t MetricsReportingConfiguration::getReportingInterval() const {
  return m_ReportingInterval;
}
void MetricsReportingConfiguration::setReportingInterval(int32_t const value) {
  m_ReportingInterval = value;
  m_ReportingIntervalIsSet = true;
}
bool MetricsReportingConfiguration::reportingIntervalIsSet() const {
  return m_ReportingIntervalIsSet;
}
void MetricsReportingConfiguration::unsetReportingInterval() {
  m_ReportingIntervalIsSet = false;
}
double MetricsReportingConfiguration::getSamplePercentage() const {
  return m_SamplePercentage;
}
void MetricsReportingConfiguration::setSamplePercentage(double const value) {
  m_SamplePercentage = value;
  m_SamplePercentageIsSet = true;
}
bool MetricsReportingConfiguration::samplePercentageIsSet() const {
  return m_SamplePercentageIsSet;
}
void MetricsReportingConfiguration::unsetSamplePercentage() {
  m_SamplePercentageIsSet = false;
}
std::vector<std::string> &MetricsReportingConfiguration::getUrlFilters() {
  return m_UrlFilters;
}
void MetricsReportingConfiguration::setUrlFilters(
    std::vector<std::string> const &value) {
  m_UrlFilters = value;
  m_UrlFiltersIsSet = true;
}
bool MetricsReportingConfiguration::urlFiltersIsSet() const {
  return m_UrlFiltersIsSet;
}
void MetricsReportingConfiguration::unsetUrlFilters() {
  m_UrlFiltersIsSet = false;
}
std::vector<std::string> &MetricsReportingConfiguration::getMetrics() {
  return m_Metrics;
}
void MetricsReportingConfiguration::setMetrics(
    std::vector<std::string> const &value) {
  m_Metrics = value;
  m_MetricsIsSet = true;
}
bool MetricsReportingConfiguration::metricsIsSet() const {
  return m_MetricsIsSet;
}
void MetricsReportingConfiguration::unsetMetrics() { m_MetricsIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
