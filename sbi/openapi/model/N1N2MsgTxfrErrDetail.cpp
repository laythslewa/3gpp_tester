/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "N1N2MsgTxfrErrDetail.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

N1N2MsgTxfrErrDetail::N1N2MsgTxfrErrDetail() {
  m_RetryAfter = 0;
  m_RetryAfterIsSet = false;
  m_HighestPrioArpIsSet = false;
  m_MaxWaitingTime = 0;
  m_MaxWaitingTimeIsSet = false;
}

N1N2MsgTxfrErrDetail::~N1N2MsgTxfrErrDetail() {}

void N1N2MsgTxfrErrDetail::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const N1N2MsgTxfrErrDetail &o) {
  j = nlohmann::json();
  if (o.retryAfterIsSet())
    j["retryAfter"] = o.m_RetryAfter;
  if (o.highestPrioArpIsSet())
    j["highestPrioArp"] = o.m_HighestPrioArp;
  if (o.maxWaitingTimeIsSet())
    j["maxWaitingTime"] = o.m_MaxWaitingTime;
}

void from_json(const nlohmann::json &j, N1N2MsgTxfrErrDetail &o) {
  if (j.find("retryAfter") != j.end()) {
    j.at("retryAfter").get_to(o.m_RetryAfter);
    o.m_RetryAfterIsSet = true;
  }
  if (j.find("highestPrioArp") != j.end()) {
    j.at("highestPrioArp").get_to(o.m_HighestPrioArp);
    o.m_HighestPrioArpIsSet = true;
  }
  if (j.find("maxWaitingTime") != j.end()) {
    j.at("maxWaitingTime").get_to(o.m_MaxWaitingTime);
    o.m_MaxWaitingTimeIsSet = true;
  }
}

int32_t N1N2MsgTxfrErrDetail::getRetryAfter() const { return m_RetryAfter; }
void N1N2MsgTxfrErrDetail::setRetryAfter(int32_t const value) {
  m_RetryAfter = value;
  m_RetryAfterIsSet = true;
}
bool N1N2MsgTxfrErrDetail::retryAfterIsSet() const { return m_RetryAfterIsSet; }
void N1N2MsgTxfrErrDetail::unsetRetryAfter() { m_RetryAfterIsSet = false; }
Arp N1N2MsgTxfrErrDetail::getHighestPrioArp() const { return m_HighestPrioArp; }
void N1N2MsgTxfrErrDetail::setHighestPrioArp(Arp const &value) {
  m_HighestPrioArp = value;
  m_HighestPrioArpIsSet = true;
}
bool N1N2MsgTxfrErrDetail::highestPrioArpIsSet() const {
  return m_HighestPrioArpIsSet;
}
void N1N2MsgTxfrErrDetail::unsetHighestPrioArp() {
  m_HighestPrioArpIsSet = false;
}
int32_t N1N2MsgTxfrErrDetail::getMaxWaitingTime() const {
  return m_MaxWaitingTime;
}
void N1N2MsgTxfrErrDetail::setMaxWaitingTime(int32_t const value) {
  m_MaxWaitingTime = value;
  m_MaxWaitingTimeIsSet = true;
}
bool N1N2MsgTxfrErrDetail::maxWaitingTimeIsSet() const {
  return m_MaxWaitingTimeIsSet;
}
void N1N2MsgTxfrErrDetail::unsetMaxWaitingTime() {
  m_MaxWaitingTimeIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
