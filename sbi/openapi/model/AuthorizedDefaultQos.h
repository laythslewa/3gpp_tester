/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AuthorizedDefaultQos.h
 *
 * Represents the Authorized Default QoS.
 */

#ifndef AuthorizedDefaultQos_H_
#define AuthorizedDefaultQos_H_

#include "Arp.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the Authorized Default QoS.
/// </summary>
class AuthorizedDefaultQos {
public:
  AuthorizedDefaultQos();
  virtual ~AuthorizedDefaultQos();

  void validate();

  /////////////////////////////////////////////
  /// AuthorizedDefaultQos members

  /// <summary>
  /// Unsigned integer representing a 5G QoS Identifier (see clause 5.7.2.1 of
  /// 3GPP TS 23.501, within the range 0 to 255
  /// </summary>
  int32_t getR5qi() const;
  void setR5qi(int32_t const value);
  bool r5qiIsSet() const;
  void unsetr_5qi();
  /// <summary>
  ///
  /// </summary>
  Arp getArp() const;
  void setArp(Arp const &value);
  bool arpIsSet() const;
  void unsetArp();
  /// <summary>
  /// This data type is defined in the same way as the
  /// \&quot;5QiPriorityLevel\&quot; data type, but with the OpenAPI
  /// \&quot;nullable&#x3D; true\&quot; property.
  /// </summary>
  int32_t getPriorityLevel() const;
  void setPriorityLevel(int32_t const value);
  bool priorityLevelIsSet() const;
  void unsetPriorityLevel();
  /// <summary>
  /// This data type is defined in the same way as the \&quot;AverWindow\&quot;
  /// data type, but with the OpenAPI \&quot;nullable&#x3D; true\&quot;
  /// property.
  /// </summary>
  int32_t getAverWindow() const;
  void setAverWindow(int32_t const value);
  bool averWindowIsSet() const;
  void unsetAverWindow();
  /// <summary>
  /// This data type is defined in the same way as the
  /// \&quot;MaxDataBurstVol\&quot; data type, but with the OpenAPI
  /// \&quot;nullable&#x3D; true\&quot; property
  /// </summary>
  int32_t getMaxDataBurstVol() const;
  void setMaxDataBurstVol(int32_t const value);
  bool maxDataBurstVolIsSet() const;
  void unsetMaxDataBurstVol();
  /// <summary>
  /// This data type is defined in the same way as the \&quot;BitRate\&quot;
  /// data type, but with the OpenAPI \&quot;nullable&#x3D; true\&quot;
  /// property.
  /// </summary>
  std::string getMaxbrUl() const;
  void setMaxbrUl(std::string const &value);
  bool maxbrUlIsSet() const;
  void unsetMaxbrUl();
  /// <summary>
  /// This data type is defined in the same way as the \&quot;BitRate\&quot;
  /// data type, but with the OpenAPI \&quot;nullable&#x3D; true\&quot;
  /// property.
  /// </summary>
  std::string getMaxbrDl() const;
  void setMaxbrDl(std::string const &value);
  bool maxbrDlIsSet() const;
  void unsetMaxbrDl();
  /// <summary>
  /// This data type is defined in the same way as the \&quot;BitRate\&quot;
  /// data type, but with the OpenAPI \&quot;nullable&#x3D; true\&quot;
  /// property.
  /// </summary>
  std::string getGbrUl() const;
  void setGbrUl(std::string const &value);
  bool gbrUlIsSet() const;
  void unsetGbrUl();
  /// <summary>
  /// This data type is defined in the same way as the \&quot;BitRate\&quot;
  /// data type, but with the OpenAPI \&quot;nullable&#x3D; true\&quot;
  /// property.
  /// </summary>
  std::string getGbrDl() const;
  void setGbrDl(std::string const &value);
  bool gbrDlIsSet() const;
  void unsetGbrDl();
  /// <summary>
  /// This data type is defined in the same way as the
  /// \&quot;ExtMaxDataBurstVol\&quot; data type, but with the OpenAPI
  /// \&quot;nullable&#x3D; true\&quot; property.
  /// </summary>
  int32_t getExtMaxDataBurstVol() const;
  void setExtMaxDataBurstVol(int32_t const value);
  bool extMaxDataBurstVolIsSet() const;
  void unsetExtMaxDataBurstVol();

  friend void to_json(nlohmann::json &j, const AuthorizedDefaultQos &o);
  friend void from_json(const nlohmann::json &j, AuthorizedDefaultQos &o);

protected:
  int32_t m_r_5qi;
  bool m_r_5qiIsSet;
  Arp m_Arp;
  bool m_ArpIsSet;
  int32_t m_PriorityLevel;
  bool m_PriorityLevelIsSet;
  int32_t m_AverWindow;
  bool m_AverWindowIsSet;
  int32_t m_MaxDataBurstVol;
  bool m_MaxDataBurstVolIsSet;
  std::string m_MaxbrUl;
  bool m_MaxbrUlIsSet;
  std::string m_MaxbrDl;
  bool m_MaxbrDlIsSet;
  std::string m_GbrUl;
  bool m_GbrUlIsSet;
  std::string m_GbrDl;
  bool m_GbrDlIsSet;
  int32_t m_ExtMaxDataBurstVol;
  bool m_ExtMaxDataBurstVolIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AuthorizedDefaultQos_H_ */
