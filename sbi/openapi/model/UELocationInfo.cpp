/**
 * LMF Location
 * LMF Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UELocationInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UELocationInfo::UELocationInfo() {
  m_LocationEstimateIsSet = false;
  m_AgeOfLocationEstimate = 0;
  m_AgeOfLocationEstimateIsSet = false;
  m_VelocityEstimateIsSet = false;
  m_AgeOfVelocityEstimate = 0;
  m_AgeOfVelocityEstimateIsSet = false;
}

UELocationInfo::~UELocationInfo() {}

void UELocationInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UELocationInfo &o) {
  j = nlohmann::json();
  if (o.locationEstimateIsSet())
    j["locationEstimate"] = o.m_LocationEstimate;
  if (o.ageOfLocationEstimateIsSet())
    j["ageOfLocationEstimate"] = o.m_AgeOfLocationEstimate;
  if (o.velocityEstimateIsSet())
    j["velocityEstimate"] = o.m_VelocityEstimate;
  if (o.ageOfVelocityEstimateIsSet())
    j["ageOfVelocityEstimate"] = o.m_AgeOfVelocityEstimate;
}

void from_json(const nlohmann::json &j, UELocationInfo &o) {
  if (j.find("locationEstimate") != j.end()) {
    j.at("locationEstimate").get_to(o.m_LocationEstimate);
    o.m_LocationEstimateIsSet = true;
  }
  if (j.find("ageOfLocationEstimate") != j.end()) {
    j.at("ageOfLocationEstimate").get_to(o.m_AgeOfLocationEstimate);
    o.m_AgeOfLocationEstimateIsSet = true;
  }
  if (j.find("velocityEstimate") != j.end()) {
    j.at("velocityEstimate").get_to(o.m_VelocityEstimate);
    o.m_VelocityEstimateIsSet = true;
  }
  if (j.find("ageOfVelocityEstimate") != j.end()) {
    j.at("ageOfVelocityEstimate").get_to(o.m_AgeOfVelocityEstimate);
    o.m_AgeOfVelocityEstimateIsSet = true;
  }
}

GeographicArea UELocationInfo::getLocationEstimate() const {
  return m_LocationEstimate;
}
void UELocationInfo::setLocationEstimate(GeographicArea const &value) {
  m_LocationEstimate = value;
  m_LocationEstimateIsSet = true;
}
bool UELocationInfo::locationEstimateIsSet() const {
  return m_LocationEstimateIsSet;
}
void UELocationInfo::unsetLocationEstimate() {
  m_LocationEstimateIsSet = false;
}
int32_t UELocationInfo::getAgeOfLocationEstimate() const {
  return m_AgeOfLocationEstimate;
}
void UELocationInfo::setAgeOfLocationEstimate(int32_t const value) {
  m_AgeOfLocationEstimate = value;
  m_AgeOfLocationEstimateIsSet = true;
}
bool UELocationInfo::ageOfLocationEstimateIsSet() const {
  return m_AgeOfLocationEstimateIsSet;
}
void UELocationInfo::unsetAgeOfLocationEstimate() {
  m_AgeOfLocationEstimateIsSet = false;
}
VelocityEstimate UELocationInfo::getVelocityEstimate() const {
  return m_VelocityEstimate;
}
void UELocationInfo::setVelocityEstimate(VelocityEstimate const &value) {
  m_VelocityEstimate = value;
  m_VelocityEstimateIsSet = true;
}
bool UELocationInfo::velocityEstimateIsSet() const {
  return m_VelocityEstimateIsSet;
}
void UELocationInfo::unsetVelocityEstimate() {
  m_VelocityEstimateIsSet = false;
}
int32_t UELocationInfo::getAgeOfVelocityEstimate() const {
  return m_AgeOfVelocityEstimate;
}
void UELocationInfo::setAgeOfVelocityEstimate(int32_t const value) {
  m_AgeOfVelocityEstimate = value;
  m_AgeOfVelocityEstimateIsSet = true;
}
bool UELocationInfo::ageOfVelocityEstimateIsSet() const {
  return m_AgeOfVelocityEstimateIsSet;
}
void UELocationInfo::unsetAgeOfVelocityEstimate() {
  m_AgeOfVelocityEstimateIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
