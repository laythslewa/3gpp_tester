/**
 * Ngmlc_Location
 * Ngmlc_Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "LocUpdateNotification.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

LocUpdateNotification::LocUpdateNotification() {
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_Supi = "";
  m_SupiIsSet = false;
  m_AgeOfLocationEstimate = 0;
  m_CivicAddressIsSet = false;
  m_AfId = "";
  m_AfIdIsSet = false;
  m_ServiceIdentity = "";
  m_ServiceIdentityIsSet = false;
}

LocUpdateNotification::~LocUpdateNotification() {}

void LocUpdateNotification::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const LocUpdateNotification &o) {
  j = nlohmann::json();
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  j["locationRequestType"] = o.m_LocationRequestType;
  j["locationEstimate"] = o.m_LocationEstimate;
  j["ageOfLocationEstimate"] = o.m_AgeOfLocationEstimate;
  j["accuracyFulfilmentIndicator"] = o.m_AccuracyFulfilmentIndicator;
  if (o.civicAddressIsSet())
    j["civicAddress"] = o.m_CivicAddress;
  j["lcsQosClass"] = o.m_LcsQosClass;
  if (o.afIdIsSet())
    j["afId"] = o.m_AfId;
  if (o.serviceIdentityIsSet())
    j["serviceIdentity"] = o.m_ServiceIdentity;
}

void from_json(const nlohmann::json &j, LocUpdateNotification &o) {
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  j.at("locationRequestType").get_to(o.m_LocationRequestType);
  j.at("locationEstimate").get_to(o.m_LocationEstimate);
  j.at("ageOfLocationEstimate").get_to(o.m_AgeOfLocationEstimate);
  j.at("accuracyFulfilmentIndicator").get_to(o.m_AccuracyFulfilmentIndicator);
  if (j.find("civicAddress") != j.end()) {
    j.at("civicAddress").get_to(o.m_CivicAddress);
    o.m_CivicAddressIsSet = true;
  }
  j.at("lcsQosClass").get_to(o.m_LcsQosClass);
  if (j.find("afId") != j.end()) {
    j.at("afId").get_to(o.m_AfId);
    o.m_AfIdIsSet = true;
  }
  if (j.find("serviceIdentity") != j.end()) {
    j.at("serviceIdentity").get_to(o.m_ServiceIdentity);
    o.m_ServiceIdentityIsSet = true;
  }
}

std::string LocUpdateNotification::getGpsi() const { return m_Gpsi; }
void LocUpdateNotification::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool LocUpdateNotification::gpsiIsSet() const { return m_GpsiIsSet; }
void LocUpdateNotification::unsetGpsi() { m_GpsiIsSet = false; }
std::string LocUpdateNotification::getSupi() const { return m_Supi; }
void LocUpdateNotification::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool LocUpdateNotification::supiIsSet() const { return m_SupiIsSet; }
void LocUpdateNotification::unsetSupi() { m_SupiIsSet = false; }
LocationRequestType LocUpdateNotification::getLocationRequestType() const {
  return m_LocationRequestType;
}
void LocUpdateNotification::setLocationRequestType(
    LocationRequestType const &value) {
  m_LocationRequestType = value;
}
GeographicArea LocUpdateNotification::getLocationEstimate() const {
  return m_LocationEstimate;
}
void LocUpdateNotification::setLocationEstimate(GeographicArea const &value) {
  m_LocationEstimate = value;
}
int32_t LocUpdateNotification::getAgeOfLocationEstimate() const {
  return m_AgeOfLocationEstimate;
}
void LocUpdateNotification::setAgeOfLocationEstimate(int32_t const value) {
  m_AgeOfLocationEstimate = value;
}
AccuracyFulfilmentIndicator
LocUpdateNotification::getAccuracyFulfilmentIndicator() const {
  return m_AccuracyFulfilmentIndicator;
}
void LocUpdateNotification::setAccuracyFulfilmentIndicator(
    AccuracyFulfilmentIndicator const &value) {
  m_AccuracyFulfilmentIndicator = value;
}
CivicAddress LocUpdateNotification::getCivicAddress() const {
  return m_CivicAddress;
}
void LocUpdateNotification::setCivicAddress(CivicAddress const &value) {
  m_CivicAddress = value;
  m_CivicAddressIsSet = true;
}
bool LocUpdateNotification::civicAddressIsSet() const {
  return m_CivicAddressIsSet;
}
void LocUpdateNotification::unsetCivicAddress() { m_CivicAddressIsSet = false; }
LcsQosClass LocUpdateNotification::getLcsQosClass() const {
  return m_LcsQosClass;
}
void LocUpdateNotification::setLcsQosClass(LcsQosClass const &value) {
  m_LcsQosClass = value;
}
std::string LocUpdateNotification::getAfId() const { return m_AfId; }
void LocUpdateNotification::setAfId(std::string const &value) {
  m_AfId = value;
  m_AfIdIsSet = true;
}
bool LocUpdateNotification::afIdIsSet() const { return m_AfIdIsSet; }
void LocUpdateNotification::unsetAfId() { m_AfIdIsSet = false; }
std::string LocUpdateNotification::getServiceIdentity() const {
  return m_ServiceIdentity;
}
void LocUpdateNotification::setServiceIdentity(std::string const &value) {
  m_ServiceIdentity = value;
  m_ServiceIdentityIsSet = true;
}
bool LocUpdateNotification::serviceIdentityIsSet() const {
  return m_ServiceIdentityIsSet;
}
void LocUpdateNotification::unsetServiceIdentity() {
  m_ServiceIdentityIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
