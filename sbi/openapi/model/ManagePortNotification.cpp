/**
 * 3gpp-nidd
 * API for non IP data delivery. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ManagePortNotification.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ManagePortNotification::ManagePortNotification() {
  m_NiddConfiguration = "";
  m_ExternalId = "";
  m_ExternalIdIsSet = false;
  m_Msisdn = "";
  m_MsisdnIsSet = false;
  m_ManagedPortsIsSet = false;
}

ManagePortNotification::~ManagePortNotification() {}

void ManagePortNotification::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ManagePortNotification &o) {
  j = nlohmann::json();
  j["niddConfiguration"] = o.m_NiddConfiguration;
  if (o.externalIdIsSet())
    j["externalId"] = o.m_ExternalId;
  if (o.msisdnIsSet())
    j["msisdn"] = o.m_Msisdn;
  if (o.managedPortsIsSet() || !o.m_ManagedPorts.empty())
    j["managedPorts"] = o.m_ManagedPorts;
}

void from_json(const nlohmann::json &j, ManagePortNotification &o) {
  j.at("niddConfiguration").get_to(o.m_NiddConfiguration);
  if (j.find("externalId") != j.end()) {
    j.at("externalId").get_to(o.m_ExternalId);
    o.m_ExternalIdIsSet = true;
  }
  if (j.find("msisdn") != j.end()) {
    j.at("msisdn").get_to(o.m_Msisdn);
    o.m_MsisdnIsSet = true;
  }
  if (j.find("managedPorts") != j.end()) {
    j.at("managedPorts").get_to(o.m_ManagedPorts);
    o.m_ManagedPortsIsSet = true;
  }
}

std::string ManagePortNotification::getNiddConfiguration() const {
  return m_NiddConfiguration;
}
void ManagePortNotification::setNiddConfiguration(std::string const &value) {
  m_NiddConfiguration = value;
}
std::string ManagePortNotification::getExternalId() const {
  return m_ExternalId;
}
void ManagePortNotification::setExternalId(std::string const &value) {
  m_ExternalId = value;
  m_ExternalIdIsSet = true;
}
bool ManagePortNotification::externalIdIsSet() const {
  return m_ExternalIdIsSet;
}
void ManagePortNotification::unsetExternalId() { m_ExternalIdIsSet = false; }
std::string ManagePortNotification::getMsisdn() const { return m_Msisdn; }
void ManagePortNotification::setMsisdn(std::string const &value) {
  m_Msisdn = value;
  m_MsisdnIsSet = true;
}
bool ManagePortNotification::msisdnIsSet() const { return m_MsisdnIsSet; }
void ManagePortNotification::unsetMsisdn() { m_MsisdnIsSet = false; }
std::vector<ManagePort> &ManagePortNotification::getManagedPorts() {
  return m_ManagedPorts;
}
void ManagePortNotification::setManagedPorts(
    std::vector<ManagePort> const &value) {
  m_ManagedPorts = value;
  m_ManagedPortsIsSet = true;
}
bool ManagePortNotification::managedPortsIsSet() const {
  return m_ManagedPortsIsSet;
}
void ManagePortNotification::unsetManagedPorts() {
  m_ManagedPortsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
