/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeContext.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeContext::UeContext() {
  m_Supi = "";
  m_SupiIsSet = false;
  m_SupiUnauthInd = false;
  m_SupiUnauthIndIsSet = false;
  m_GpsiListIsSet = false;
  m_Pei = "";
  m_PeiIsSet = false;
  m_UdmGroupId = "";
  m_UdmGroupIdIsSet = false;
  m_AusfGroupId = "";
  m_AusfGroupIdIsSet = false;
  m_PcfGroupId = "";
  m_PcfGroupIdIsSet = false;
  m_RoutingIndicator = "";
  m_RoutingIndicatorIsSet = false;
  m_HNwPubKeyId = 0;
  m_HNwPubKeyIdIsSet = false;
  m_GroupListIsSet = false;
  m_DrxParameterIsSet = false;
  m_SubRfsp = 0;
  m_SubRfspIsSet = false;
  m_UsedRfsp = 0;
  m_UsedRfspIsSet = false;
  m_SubUeAmbrIsSet = false;
  m_SmsfId = "";
  m_SmsfIdIsSet = false;
  m_SeafDataIsSet = false;
  m_r_5gMmCapabilityIsSet = false;
  m_PcfId = "";
  m_PcfIdIsSet = false;
  m_PcfSetId = "";
  m_PcfSetIdIsSet = false;
  m_PcfAmpServiceSetId = "";
  m_PcfAmpServiceSetIdIsSet = false;
  m_PcfUepServiceSetId = "";
  m_PcfUepServiceSetIdIsSet = false;
  m_PcfBindingIsSet = false;
  m_PcfAmPolicyUri = "";
  m_PcfAmPolicyUriIsSet = false;
  m_AmPolicyReqTriggerListIsSet = false;
  m_PcfUePolicyUri = "";
  m_PcfUePolicyUriIsSet = false;
  m_UePolicyReqTriggerListIsSet = false;
  m_HpcfId = "";
  m_HpcfIdIsSet = false;
  m_HpcfSetId = "";
  m_HpcfSetIdIsSet = false;
  m_RestrictedRatListIsSet = false;
  m_ForbiddenAreaListIsSet = false;
  m_ServiceAreaRestrictionIsSet = false;
  m_RestrictedCoreNwTypeListIsSet = false;
  m_EventSubscriptionListIsSet = false;
  m_MmContextListIsSet = false;
  m_SessionContextListIsSet = false;
  m_TraceDataIsSet = false;
  m_ServiceGapExpiryTime = "";
  m_ServiceGapExpiryTimeIsSet = false;
  m_StnSr = "";
  m_StnSrIsSet = false;
  m_CMsisdn = "";
  m_CMsisdnIsSet = false;
  m_MsClassmark2IsSet = false;
  m_SupportedCodecListIsSet = false;
  m_SmallDataRateStatusInfosIsSet = false;
  m_RestrictedPrimaryRatListIsSet = false;
  m_RestrictedSecondaryRatListIsSet = false;
  m_V2xContextIsSet = false;
  m_LteCatMInd = false;
  m_LteCatMIndIsSet = false;
  m_MoExpDataCounterIsSet = false;
  m_CagDataIsSet = false;
  m_ManagementMdtInd = false;
  m_ManagementMdtIndIsSet = false;
  m_ImmediateMdtConfIsSet = false;
  m_EcRestrictionDataWbIsSet = false;
  m_EcRestrictionDataNb = false;
  m_EcRestrictionDataNbIsSet = false;
  m_IabOperationAllowed = false;
  m_IabOperationAllowedIsSet = false;
  m_ProseContextIsSet = false;
  m_AnalyticsSubscriptionListIsSet = false;
}

UeContext::~UeContext() {}

void UeContext::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UeContext &o) {
  j = nlohmann::json();
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  if (o.supiUnauthIndIsSet())
    j["supiUnauthInd"] = o.m_SupiUnauthInd;
  if (o.gpsiListIsSet() || !o.m_GpsiList.empty())
    j["gpsiList"] = o.m_GpsiList;
  if (o.peiIsSet())
    j["pei"] = o.m_Pei;
  if (o.udmGroupIdIsSet())
    j["udmGroupId"] = o.m_UdmGroupId;
  if (o.ausfGroupIdIsSet())
    j["ausfGroupId"] = o.m_AusfGroupId;
  if (o.pcfGroupIdIsSet())
    j["pcfGroupId"] = o.m_PcfGroupId;
  if (o.routingIndicatorIsSet())
    j["routingIndicator"] = o.m_RoutingIndicator;
  if (o.hNwPubKeyIdIsSet())
    j["hNwPubKeyId"] = o.m_HNwPubKeyId;
  if (o.groupListIsSet() || !o.m_GroupList.empty())
    j["groupList"] = o.m_GroupList;
  if (o.drxParameterIsSet())
    j["drxParameter"] = o.m_DrxParameter;
  if (o.subRfspIsSet())
    j["subRfsp"] = o.m_SubRfsp;
  if (o.usedRfspIsSet())
    j["usedRfsp"] = o.m_UsedRfsp;
  if (o.subUeAmbrIsSet())
    j["subUeAmbr"] = o.m_SubUeAmbr;
  if (o.smsfIdIsSet())
    j["smsfId"] = o.m_SmsfId;
  if (o.seafDataIsSet())
    j["seafData"] = o.m_SeafData;
  if (o.r5gMmCapabilityIsSet())
    j["5gMmCapability"] = o.m_r_5gMmCapability;
  if (o.pcfIdIsSet())
    j["pcfId"] = o.m_PcfId;
  if (o.pcfSetIdIsSet())
    j["pcfSetId"] = o.m_PcfSetId;
  if (o.pcfAmpServiceSetIdIsSet())
    j["pcfAmpServiceSetId"] = o.m_PcfAmpServiceSetId;
  if (o.pcfUepServiceSetIdIsSet())
    j["pcfUepServiceSetId"] = o.m_PcfUepServiceSetId;
  if (o.pcfBindingIsSet())
    j["pcfBinding"] = o.m_PcfBinding;
  if (o.pcfAmPolicyUriIsSet())
    j["pcfAmPolicyUri"] = o.m_PcfAmPolicyUri;
  if (o.amPolicyReqTriggerListIsSet() || !o.m_AmPolicyReqTriggerList.empty())
    j["amPolicyReqTriggerList"] = o.m_AmPolicyReqTriggerList;
  if (o.pcfUePolicyUriIsSet())
    j["pcfUePolicyUri"] = o.m_PcfUePolicyUri;
  if (o.uePolicyReqTriggerListIsSet() || !o.m_UePolicyReqTriggerList.empty())
    j["uePolicyReqTriggerList"] = o.m_UePolicyReqTriggerList;
  if (o.hpcfIdIsSet())
    j["hpcfId"] = o.m_HpcfId;
  if (o.hpcfSetIdIsSet())
    j["hpcfSetId"] = o.m_HpcfSetId;
  if (o.restrictedRatListIsSet() || !o.m_RestrictedRatList.empty())
    j["restrictedRatList"] = o.m_RestrictedRatList;
  if (o.forbiddenAreaListIsSet() || !o.m_ForbiddenAreaList.empty())
    j["forbiddenAreaList"] = o.m_ForbiddenAreaList;
  if (o.serviceAreaRestrictionIsSet())
    j["serviceAreaRestriction"] = o.m_ServiceAreaRestriction;
  if (o.restrictedCoreNwTypeListIsSet() ||
      !o.m_RestrictedCoreNwTypeList.empty())
    j["restrictedCoreNwTypeList"] = o.m_RestrictedCoreNwTypeList;
  if (o.eventSubscriptionListIsSet() || !o.m_EventSubscriptionList.empty())
    j["eventSubscriptionList"] = o.m_EventSubscriptionList;
  if (o.mmContextListIsSet() || !o.m_MmContextList.empty())
    j["mmContextList"] = o.m_MmContextList;
  if (o.sessionContextListIsSet() || !o.m_SessionContextList.empty())
    j["sessionContextList"] = o.m_SessionContextList;
  if (o.traceDataIsSet())
    j["traceData"] = o.m_TraceData;
  if (o.serviceGapExpiryTimeIsSet())
    j["serviceGapExpiryTime"] = o.m_ServiceGapExpiryTime;
  if (o.stnSrIsSet())
    j["stnSr"] = o.m_StnSr;
  if (o.cMsisdnIsSet())
    j["cMsisdn"] = o.m_CMsisdn;
  if (o.msClassmark2IsSet())
    j["msClassmark2"] = o.m_MsClassmark2;
  if (o.supportedCodecListIsSet() || !o.m_SupportedCodecList.empty())
    j["supportedCodecList"] = o.m_SupportedCodecList;
  if (o.smallDataRateStatusInfosIsSet() ||
      !o.m_SmallDataRateStatusInfos.empty())
    j["smallDataRateStatusInfos"] = o.m_SmallDataRateStatusInfos;
  if (o.restrictedPrimaryRatListIsSet() ||
      !o.m_RestrictedPrimaryRatList.empty())
    j["restrictedPrimaryRatList"] = o.m_RestrictedPrimaryRatList;
  if (o.restrictedSecondaryRatListIsSet() ||
      !o.m_RestrictedSecondaryRatList.empty())
    j["restrictedSecondaryRatList"] = o.m_RestrictedSecondaryRatList;
  if (o.v2xContextIsSet())
    j["v2xContext"] = o.m_V2xContext;
  if (o.lteCatMIndIsSet())
    j["lteCatMInd"] = o.m_LteCatMInd;
  if (o.moExpDataCounterIsSet())
    j["moExpDataCounter"] = o.m_MoExpDataCounter;
  if (o.cagDataIsSet())
    j["cagData"] = o.m_CagData;
  if (o.managementMdtIndIsSet())
    j["managementMdtInd"] = o.m_ManagementMdtInd;
  if (o.immediateMdtConfIsSet())
    j["immediateMdtConf"] = o.m_ImmediateMdtConf;
  if (o.ecRestrictionDataWbIsSet())
    j["ecRestrictionDataWb"] = o.m_EcRestrictionDataWb;
  if (o.ecRestrictionDataNbIsSet())
    j["ecRestrictionDataNb"] = o.m_EcRestrictionDataNb;
  if (o.iabOperationAllowedIsSet())
    j["iabOperationAllowed"] = o.m_IabOperationAllowed;
  if (o.proseContextIsSet())
    j["proseContext"] = o.m_ProseContext;
  if (o.analyticsSubscriptionListIsSet() ||
      !o.m_AnalyticsSubscriptionList.empty())
    j["analyticsSubscriptionList"] = o.m_AnalyticsSubscriptionList;
}

void from_json(const nlohmann::json &j, UeContext &o) {
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("supiUnauthInd") != j.end()) {
    j.at("supiUnauthInd").get_to(o.m_SupiUnauthInd);
    o.m_SupiUnauthIndIsSet = true;
  }
  if (j.find("gpsiList") != j.end()) {
    j.at("gpsiList").get_to(o.m_GpsiList);
    o.m_GpsiListIsSet = true;
  }
  if (j.find("pei") != j.end()) {
    j.at("pei").get_to(o.m_Pei);
    o.m_PeiIsSet = true;
  }
  if (j.find("udmGroupId") != j.end()) {
    j.at("udmGroupId").get_to(o.m_UdmGroupId);
    o.m_UdmGroupIdIsSet = true;
  }
  if (j.find("ausfGroupId") != j.end()) {
    j.at("ausfGroupId").get_to(o.m_AusfGroupId);
    o.m_AusfGroupIdIsSet = true;
  }
  if (j.find("pcfGroupId") != j.end()) {
    j.at("pcfGroupId").get_to(o.m_PcfGroupId);
    o.m_PcfGroupIdIsSet = true;
  }
  if (j.find("routingIndicator") != j.end()) {
    j.at("routingIndicator").get_to(o.m_RoutingIndicator);
    o.m_RoutingIndicatorIsSet = true;
  }
  if (j.find("hNwPubKeyId") != j.end()) {
    j.at("hNwPubKeyId").get_to(o.m_HNwPubKeyId);
    o.m_HNwPubKeyIdIsSet = true;
  }
  if (j.find("groupList") != j.end()) {
    j.at("groupList").get_to(o.m_GroupList);
    o.m_GroupListIsSet = true;
  }
  if (j.find("drxParameter") != j.end()) {
    j.at("drxParameter").get_to(o.m_DrxParameter);
    o.m_DrxParameterIsSet = true;
  }
  if (j.find("subRfsp") != j.end()) {
    j.at("subRfsp").get_to(o.m_SubRfsp);
    o.m_SubRfspIsSet = true;
  }
  if (j.find("usedRfsp") != j.end()) {
    j.at("usedRfsp").get_to(o.m_UsedRfsp);
    o.m_UsedRfspIsSet = true;
  }
  if (j.find("subUeAmbr") != j.end()) {
    j.at("subUeAmbr").get_to(o.m_SubUeAmbr);
    o.m_SubUeAmbrIsSet = true;
  }
  if (j.find("smsfId") != j.end()) {
    j.at("smsfId").get_to(o.m_SmsfId);
    o.m_SmsfIdIsSet = true;
  }
  if (j.find("seafData") != j.end()) {
    j.at("seafData").get_to(o.m_SeafData);
    o.m_SeafDataIsSet = true;
  }
  if (j.find("5gMmCapability") != j.end()) {
    j.at("5gMmCapability").get_to(o.m_r_5gMmCapability);
    o.m_r_5gMmCapabilityIsSet = true;
  }
  if (j.find("pcfId") != j.end()) {
    j.at("pcfId").get_to(o.m_PcfId);
    o.m_PcfIdIsSet = true;
  }
  if (j.find("pcfSetId") != j.end()) {
    j.at("pcfSetId").get_to(o.m_PcfSetId);
    o.m_PcfSetIdIsSet = true;
  }
  if (j.find("pcfAmpServiceSetId") != j.end()) {
    j.at("pcfAmpServiceSetId").get_to(o.m_PcfAmpServiceSetId);
    o.m_PcfAmpServiceSetIdIsSet = true;
  }
  if (j.find("pcfUepServiceSetId") != j.end()) {
    j.at("pcfUepServiceSetId").get_to(o.m_PcfUepServiceSetId);
    o.m_PcfUepServiceSetIdIsSet = true;
  }
  if (j.find("pcfBinding") != j.end()) {
    j.at("pcfBinding").get_to(o.m_PcfBinding);
    o.m_PcfBindingIsSet = true;
  }
  if (j.find("pcfAmPolicyUri") != j.end()) {
    j.at("pcfAmPolicyUri").get_to(o.m_PcfAmPolicyUri);
    o.m_PcfAmPolicyUriIsSet = true;
  }
  if (j.find("amPolicyReqTriggerList") != j.end()) {
    j.at("amPolicyReqTriggerList").get_to(o.m_AmPolicyReqTriggerList);
    o.m_AmPolicyReqTriggerListIsSet = true;
  }
  if (j.find("pcfUePolicyUri") != j.end()) {
    j.at("pcfUePolicyUri").get_to(o.m_PcfUePolicyUri);
    o.m_PcfUePolicyUriIsSet = true;
  }
  if (j.find("uePolicyReqTriggerList") != j.end()) {
    j.at("uePolicyReqTriggerList").get_to(o.m_UePolicyReqTriggerList);
    o.m_UePolicyReqTriggerListIsSet = true;
  }
  if (j.find("hpcfId") != j.end()) {
    j.at("hpcfId").get_to(o.m_HpcfId);
    o.m_HpcfIdIsSet = true;
  }
  if (j.find("hpcfSetId") != j.end()) {
    j.at("hpcfSetId").get_to(o.m_HpcfSetId);
    o.m_HpcfSetIdIsSet = true;
  }
  if (j.find("restrictedRatList") != j.end()) {
    j.at("restrictedRatList").get_to(o.m_RestrictedRatList);
    o.m_RestrictedRatListIsSet = true;
  }
  if (j.find("forbiddenAreaList") != j.end()) {
    j.at("forbiddenAreaList").get_to(o.m_ForbiddenAreaList);
    o.m_ForbiddenAreaListIsSet = true;
  }
  if (j.find("serviceAreaRestriction") != j.end()) {
    j.at("serviceAreaRestriction").get_to(o.m_ServiceAreaRestriction);
    o.m_ServiceAreaRestrictionIsSet = true;
  }
  if (j.find("restrictedCoreNwTypeList") != j.end()) {
    j.at("restrictedCoreNwTypeList").get_to(o.m_RestrictedCoreNwTypeList);
    o.m_RestrictedCoreNwTypeListIsSet = true;
  }
  if (j.find("eventSubscriptionList") != j.end()) {
    j.at("eventSubscriptionList").get_to(o.m_EventSubscriptionList);
    o.m_EventSubscriptionListIsSet = true;
  }
  if (j.find("mmContextList") != j.end()) {
    j.at("mmContextList").get_to(o.m_MmContextList);
    o.m_MmContextListIsSet = true;
  }
  if (j.find("sessionContextList") != j.end()) {
    j.at("sessionContextList").get_to(o.m_SessionContextList);
    o.m_SessionContextListIsSet = true;
  }
  if (j.find("traceData") != j.end()) {
    j.at("traceData").get_to(o.m_TraceData);
    o.m_TraceDataIsSet = true;
  }
  if (j.find("serviceGapExpiryTime") != j.end()) {
    j.at("serviceGapExpiryTime").get_to(o.m_ServiceGapExpiryTime);
    o.m_ServiceGapExpiryTimeIsSet = true;
  }
  if (j.find("stnSr") != j.end()) {
    j.at("stnSr").get_to(o.m_StnSr);
    o.m_StnSrIsSet = true;
  }
  if (j.find("cMsisdn") != j.end()) {
    j.at("cMsisdn").get_to(o.m_CMsisdn);
    o.m_CMsisdnIsSet = true;
  }
  if (j.find("msClassmark2") != j.end()) {
    j.at("msClassmark2").get_to(o.m_MsClassmark2);
    o.m_MsClassmark2IsSet = true;
  }
  if (j.find("supportedCodecList") != j.end()) {
    j.at("supportedCodecList").get_to(o.m_SupportedCodecList);
    o.m_SupportedCodecListIsSet = true;
  }
  if (j.find("smallDataRateStatusInfos") != j.end()) {
    j.at("smallDataRateStatusInfos").get_to(o.m_SmallDataRateStatusInfos);
    o.m_SmallDataRateStatusInfosIsSet = true;
  }
  if (j.find("restrictedPrimaryRatList") != j.end()) {
    j.at("restrictedPrimaryRatList").get_to(o.m_RestrictedPrimaryRatList);
    o.m_RestrictedPrimaryRatListIsSet = true;
  }
  if (j.find("restrictedSecondaryRatList") != j.end()) {
    j.at("restrictedSecondaryRatList").get_to(o.m_RestrictedSecondaryRatList);
    o.m_RestrictedSecondaryRatListIsSet = true;
  }
  if (j.find("v2xContext") != j.end()) {
    j.at("v2xContext").get_to(o.m_V2xContext);
    o.m_V2xContextIsSet = true;
  }
  if (j.find("lteCatMInd") != j.end()) {
    j.at("lteCatMInd").get_to(o.m_LteCatMInd);
    o.m_LteCatMIndIsSet = true;
  }
  if (j.find("moExpDataCounter") != j.end()) {
    j.at("moExpDataCounter").get_to(o.m_MoExpDataCounter);
    o.m_MoExpDataCounterIsSet = true;
  }
  if (j.find("cagData") != j.end()) {
    j.at("cagData").get_to(o.m_CagData);
    o.m_CagDataIsSet = true;
  }
  if (j.find("managementMdtInd") != j.end()) {
    j.at("managementMdtInd").get_to(o.m_ManagementMdtInd);
    o.m_ManagementMdtIndIsSet = true;
  }
  if (j.find("immediateMdtConf") != j.end()) {
    j.at("immediateMdtConf").get_to(o.m_ImmediateMdtConf);
    o.m_ImmediateMdtConfIsSet = true;
  }
  if (j.find("ecRestrictionDataWb") != j.end()) {
    j.at("ecRestrictionDataWb").get_to(o.m_EcRestrictionDataWb);
    o.m_EcRestrictionDataWbIsSet = true;
  }
  if (j.find("ecRestrictionDataNb") != j.end()) {
    j.at("ecRestrictionDataNb").get_to(o.m_EcRestrictionDataNb);
    o.m_EcRestrictionDataNbIsSet = true;
  }
  if (j.find("iabOperationAllowed") != j.end()) {
    j.at("iabOperationAllowed").get_to(o.m_IabOperationAllowed);
    o.m_IabOperationAllowedIsSet = true;
  }
  if (j.find("proseContext") != j.end()) {
    j.at("proseContext").get_to(o.m_ProseContext);
    o.m_ProseContextIsSet = true;
  }
  if (j.find("analyticsSubscriptionList") != j.end()) {
    j.at("analyticsSubscriptionList").get_to(o.m_AnalyticsSubscriptionList);
    o.m_AnalyticsSubscriptionListIsSet = true;
  }
}

std::string UeContext::getSupi() const { return m_Supi; }
void UeContext::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool UeContext::supiIsSet() const { return m_SupiIsSet; }
void UeContext::unsetSupi() { m_SupiIsSet = false; }
bool UeContext::isSupiUnauthInd() const { return m_SupiUnauthInd; }
void UeContext::setSupiUnauthInd(bool const value) {
  m_SupiUnauthInd = value;
  m_SupiUnauthIndIsSet = true;
}
bool UeContext::supiUnauthIndIsSet() const { return m_SupiUnauthIndIsSet; }
void UeContext::unsetSupiUnauthInd() { m_SupiUnauthIndIsSet = false; }
std::vector<std::string> &UeContext::getGpsiList() { return m_GpsiList; }
void UeContext::setGpsiList(std::vector<std::string> const &value) {
  m_GpsiList = value;
  m_GpsiListIsSet = true;
}
bool UeContext::gpsiListIsSet() const { return m_GpsiListIsSet; }
void UeContext::unsetGpsiList() { m_GpsiListIsSet = false; }
std::string UeContext::getPei() const { return m_Pei; }
void UeContext::setPei(std::string const &value) {
  m_Pei = value;
  m_PeiIsSet = true;
}
bool UeContext::peiIsSet() const { return m_PeiIsSet; }
void UeContext::unsetPei() { m_PeiIsSet = false; }
std::string UeContext::getUdmGroupId() const { return m_UdmGroupId; }
void UeContext::setUdmGroupId(std::string const &value) {
  m_UdmGroupId = value;
  m_UdmGroupIdIsSet = true;
}
bool UeContext::udmGroupIdIsSet() const { return m_UdmGroupIdIsSet; }
void UeContext::unsetUdmGroupId() { m_UdmGroupIdIsSet = false; }
std::string UeContext::getAusfGroupId() const { return m_AusfGroupId; }
void UeContext::setAusfGroupId(std::string const &value) {
  m_AusfGroupId = value;
  m_AusfGroupIdIsSet = true;
}
bool UeContext::ausfGroupIdIsSet() const { return m_AusfGroupIdIsSet; }
void UeContext::unsetAusfGroupId() { m_AusfGroupIdIsSet = false; }
std::string UeContext::getPcfGroupId() const { return m_PcfGroupId; }
void UeContext::setPcfGroupId(std::string const &value) {
  m_PcfGroupId = value;
  m_PcfGroupIdIsSet = true;
}
bool UeContext::pcfGroupIdIsSet() const { return m_PcfGroupIdIsSet; }
void UeContext::unsetPcfGroupId() { m_PcfGroupIdIsSet = false; }
std::string UeContext::getRoutingIndicator() const {
  return m_RoutingIndicator;
}
void UeContext::setRoutingIndicator(std::string const &value) {
  m_RoutingIndicator = value;
  m_RoutingIndicatorIsSet = true;
}
bool UeContext::routingIndicatorIsSet() const {
  return m_RoutingIndicatorIsSet;
}
void UeContext::unsetRoutingIndicator() { m_RoutingIndicatorIsSet = false; }
int32_t UeContext::getHNwPubKeyId() const { return m_HNwPubKeyId; }
void UeContext::setHNwPubKeyId(int32_t const value) {
  m_HNwPubKeyId = value;
  m_HNwPubKeyIdIsSet = true;
}
bool UeContext::hNwPubKeyIdIsSet() const { return m_HNwPubKeyIdIsSet; }
void UeContext::unsetHNwPubKeyId() { m_HNwPubKeyIdIsSet = false; }
std::vector<std::string> &UeContext::getGroupList() { return m_GroupList; }
void UeContext::setGroupList(std::vector<std::string> const &value) {
  m_GroupList = value;
  m_GroupListIsSet = true;
}
bool UeContext::groupListIsSet() const { return m_GroupListIsSet; }
void UeContext::unsetGroupList() { m_GroupListIsSet = false; }
std::string UeContext::getDrxParameter() const { return m_DrxParameter; }
void UeContext::setDrxParameter(std::string const &value) {
  m_DrxParameter = value;
  m_DrxParameterIsSet = true;
}
bool UeContext::drxParameterIsSet() const { return m_DrxParameterIsSet; }
void UeContext::unsetDrxParameter() { m_DrxParameterIsSet = false; }
int32_t UeContext::getSubRfsp() const { return m_SubRfsp; }
void UeContext::setSubRfsp(int32_t const value) {
  m_SubRfsp = value;
  m_SubRfspIsSet = true;
}
bool UeContext::subRfspIsSet() const { return m_SubRfspIsSet; }
void UeContext::unsetSubRfsp() { m_SubRfspIsSet = false; }
int32_t UeContext::getUsedRfsp() const { return m_UsedRfsp; }
void UeContext::setUsedRfsp(int32_t const value) {
  m_UsedRfsp = value;
  m_UsedRfspIsSet = true;
}
bool UeContext::usedRfspIsSet() const { return m_UsedRfspIsSet; }
void UeContext::unsetUsedRfsp() { m_UsedRfspIsSet = false; }
Ambr UeContext::getSubUeAmbr() const { return m_SubUeAmbr; }
void UeContext::setSubUeAmbr(Ambr const &value) {
  m_SubUeAmbr = value;
  m_SubUeAmbrIsSet = true;
}
bool UeContext::subUeAmbrIsSet() const { return m_SubUeAmbrIsSet; }
void UeContext::unsetSubUeAmbr() { m_SubUeAmbrIsSet = false; }
std::string UeContext::getSmsfId() const { return m_SmsfId; }
void UeContext::setSmsfId(std::string const &value) {
  m_SmsfId = value;
  m_SmsfIdIsSet = true;
}
bool UeContext::smsfIdIsSet() const { return m_SmsfIdIsSet; }
void UeContext::unsetSmsfId() { m_SmsfIdIsSet = false; }
SeafData UeContext::getSeafData() const { return m_SeafData; }
void UeContext::setSeafData(SeafData const &value) {
  m_SeafData = value;
  m_SeafDataIsSet = true;
}
bool UeContext::seafDataIsSet() const { return m_SeafDataIsSet; }
void UeContext::unsetSeafData() { m_SeafDataIsSet = false; }
std::string UeContext::getR5gMmCapability() const { return m_r_5gMmCapability; }
void UeContext::setR5gMmCapability(std::string const &value) {
  m_r_5gMmCapability = value;
  m_r_5gMmCapabilityIsSet = true;
}
bool UeContext::r5gMmCapabilityIsSet() const { return m_r_5gMmCapabilityIsSet; }
void UeContext::unsetr_5gMmCapability() { m_r_5gMmCapabilityIsSet = false; }
std::string UeContext::getPcfId() const { return m_PcfId; }
void UeContext::setPcfId(std::string const &value) {
  m_PcfId = value;
  m_PcfIdIsSet = true;
}
bool UeContext::pcfIdIsSet() const { return m_PcfIdIsSet; }
void UeContext::unsetPcfId() { m_PcfIdIsSet = false; }
std::string UeContext::getPcfSetId() const { return m_PcfSetId; }
void UeContext::setPcfSetId(std::string const &value) {
  m_PcfSetId = value;
  m_PcfSetIdIsSet = true;
}
bool UeContext::pcfSetIdIsSet() const { return m_PcfSetIdIsSet; }
void UeContext::unsetPcfSetId() { m_PcfSetIdIsSet = false; }
std::string UeContext::getPcfAmpServiceSetId() const {
  return m_PcfAmpServiceSetId;
}
void UeContext::setPcfAmpServiceSetId(std::string const &value) {
  m_PcfAmpServiceSetId = value;
  m_PcfAmpServiceSetIdIsSet = true;
}
bool UeContext::pcfAmpServiceSetIdIsSet() const {
  return m_PcfAmpServiceSetIdIsSet;
}
void UeContext::unsetPcfAmpServiceSetId() { m_PcfAmpServiceSetIdIsSet = false; }
std::string UeContext::getPcfUepServiceSetId() const {
  return m_PcfUepServiceSetId;
}
void UeContext::setPcfUepServiceSetId(std::string const &value) {
  m_PcfUepServiceSetId = value;
  m_PcfUepServiceSetIdIsSet = true;
}
bool UeContext::pcfUepServiceSetIdIsSet() const {
  return m_PcfUepServiceSetIdIsSet;
}
void UeContext::unsetPcfUepServiceSetId() { m_PcfUepServiceSetIdIsSet = false; }
SbiBindingLevel UeContext::getPcfBinding() const { return m_PcfBinding; }
void UeContext::setPcfBinding(SbiBindingLevel const &value) {
  m_PcfBinding = value;
  m_PcfBindingIsSet = true;
}
bool UeContext::pcfBindingIsSet() const { return m_PcfBindingIsSet; }
void UeContext::unsetPcfBinding() { m_PcfBindingIsSet = false; }
std::string UeContext::getPcfAmPolicyUri() const { return m_PcfAmPolicyUri; }
void UeContext::setPcfAmPolicyUri(std::string const &value) {
  m_PcfAmPolicyUri = value;
  m_PcfAmPolicyUriIsSet = true;
}
bool UeContext::pcfAmPolicyUriIsSet() const { return m_PcfAmPolicyUriIsSet; }
void UeContext::unsetPcfAmPolicyUri() { m_PcfAmPolicyUriIsSet = false; }
std::vector<PolicyReqTrigger> &UeContext::getAmPolicyReqTriggerList() {
  return m_AmPolicyReqTriggerList;
}
void UeContext::setAmPolicyReqTriggerList(
    std::vector<PolicyReqTrigger> const &value) {
  m_AmPolicyReqTriggerList = value;
  m_AmPolicyReqTriggerListIsSet = true;
}
bool UeContext::amPolicyReqTriggerListIsSet() const {
  return m_AmPolicyReqTriggerListIsSet;
}
void UeContext::unsetAmPolicyReqTriggerList() {
  m_AmPolicyReqTriggerListIsSet = false;
}
std::string UeContext::getPcfUePolicyUri() const { return m_PcfUePolicyUri; }
void UeContext::setPcfUePolicyUri(std::string const &value) {
  m_PcfUePolicyUri = value;
  m_PcfUePolicyUriIsSet = true;
}
bool UeContext::pcfUePolicyUriIsSet() const { return m_PcfUePolicyUriIsSet; }
void UeContext::unsetPcfUePolicyUri() { m_PcfUePolicyUriIsSet = false; }
std::vector<PolicyReqTrigger> &UeContext::getUePolicyReqTriggerList() {
  return m_UePolicyReqTriggerList;
}
void UeContext::setUePolicyReqTriggerList(
    std::vector<PolicyReqTrigger> const &value) {
  m_UePolicyReqTriggerList = value;
  m_UePolicyReqTriggerListIsSet = true;
}
bool UeContext::uePolicyReqTriggerListIsSet() const {
  return m_UePolicyReqTriggerListIsSet;
}
void UeContext::unsetUePolicyReqTriggerList() {
  m_UePolicyReqTriggerListIsSet = false;
}
std::string UeContext::getHpcfId() const { return m_HpcfId; }
void UeContext::setHpcfId(std::string const &value) {
  m_HpcfId = value;
  m_HpcfIdIsSet = true;
}
bool UeContext::hpcfIdIsSet() const { return m_HpcfIdIsSet; }
void UeContext::unsetHpcfId() { m_HpcfIdIsSet = false; }
std::string UeContext::getHpcfSetId() const { return m_HpcfSetId; }
void UeContext::setHpcfSetId(std::string const &value) {
  m_HpcfSetId = value;
  m_HpcfSetIdIsSet = true;
}
bool UeContext::hpcfSetIdIsSet() const { return m_HpcfSetIdIsSet; }
void UeContext::unsetHpcfSetId() { m_HpcfSetIdIsSet = false; }
std::vector<RatType> &UeContext::getRestrictedRatList() {
  return m_RestrictedRatList;
}
void UeContext::setRestrictedRatList(std::vector<RatType> const &value) {
  m_RestrictedRatList = value;
  m_RestrictedRatListIsSet = true;
}
bool UeContext::restrictedRatListIsSet() const {
  return m_RestrictedRatListIsSet;
}
void UeContext::unsetRestrictedRatList() { m_RestrictedRatListIsSet = false; }
std::vector<Area> &UeContext::getForbiddenAreaList() {
  return m_ForbiddenAreaList;
}
void UeContext::setForbiddenAreaList(std::vector<Area> const &value) {
  m_ForbiddenAreaList = value;
  m_ForbiddenAreaListIsSet = true;
}
bool UeContext::forbiddenAreaListIsSet() const {
  return m_ForbiddenAreaListIsSet;
}
void UeContext::unsetForbiddenAreaList() { m_ForbiddenAreaListIsSet = false; }
ServiceAreaRestriction UeContext::getServiceAreaRestriction() const {
  return m_ServiceAreaRestriction;
}
void UeContext::setServiceAreaRestriction(ServiceAreaRestriction const &value) {
  m_ServiceAreaRestriction = value;
  m_ServiceAreaRestrictionIsSet = true;
}
bool UeContext::serviceAreaRestrictionIsSet() const {
  return m_ServiceAreaRestrictionIsSet;
}
void UeContext::unsetServiceAreaRestriction() {
  m_ServiceAreaRestrictionIsSet = false;
}
std::vector<CoreNetworkType> &UeContext::getRestrictedCoreNwTypeList() {
  return m_RestrictedCoreNwTypeList;
}
void UeContext::setRestrictedCoreNwTypeList(
    std::vector<CoreNetworkType> const &value) {
  m_RestrictedCoreNwTypeList = value;
  m_RestrictedCoreNwTypeListIsSet = true;
}
bool UeContext::restrictedCoreNwTypeListIsSet() const {
  return m_RestrictedCoreNwTypeListIsSet;
}
void UeContext::unsetRestrictedCoreNwTypeList() {
  m_RestrictedCoreNwTypeListIsSet = false;
}
std::vector<ExtAmfEventSubscription> &UeContext::getEventSubscriptionList() {
  return m_EventSubscriptionList;
}
void UeContext::setEventSubscriptionList(
    std::vector<ExtAmfEventSubscription> const &value) {
  m_EventSubscriptionList = value;
  m_EventSubscriptionListIsSet = true;
}
bool UeContext::eventSubscriptionListIsSet() const {
  return m_EventSubscriptionListIsSet;
}
void UeContext::unsetEventSubscriptionList() {
  m_EventSubscriptionListIsSet = false;
}
std::vector<MmContext> &UeContext::getMmContextList() {
  return m_MmContextList;
}
void UeContext::setMmContextList(std::vector<MmContext> const &value) {
  m_MmContextList = value;
  m_MmContextListIsSet = true;
}
bool UeContext::mmContextListIsSet() const { return m_MmContextListIsSet; }
void UeContext::unsetMmContextList() { m_MmContextListIsSet = false; }
std::vector<PduSessionContext> &UeContext::getSessionContextList() {
  return m_SessionContextList;
}
void UeContext::setSessionContextList(
    std::vector<PduSessionContext> const &value) {
  m_SessionContextList = value;
  m_SessionContextListIsSet = true;
}
bool UeContext::sessionContextListIsSet() const {
  return m_SessionContextListIsSet;
}
void UeContext::unsetSessionContextList() { m_SessionContextListIsSet = false; }
TraceData UeContext::getTraceData() const { return m_TraceData; }
void UeContext::setTraceData(TraceData const &value) {
  m_TraceData = value;
  m_TraceDataIsSet = true;
}
bool UeContext::traceDataIsSet() const { return m_TraceDataIsSet; }
void UeContext::unsetTraceData() { m_TraceDataIsSet = false; }
std::string UeContext::getServiceGapExpiryTime() const {
  return m_ServiceGapExpiryTime;
}
void UeContext::setServiceGapExpiryTime(std::string const &value) {
  m_ServiceGapExpiryTime = value;
  m_ServiceGapExpiryTimeIsSet = true;
}
bool UeContext::serviceGapExpiryTimeIsSet() const {
  return m_ServiceGapExpiryTimeIsSet;
}
void UeContext::unsetServiceGapExpiryTime() {
  m_ServiceGapExpiryTimeIsSet = false;
}
std::string UeContext::getStnSr() const { return m_StnSr; }
void UeContext::setStnSr(std::string const &value) {
  m_StnSr = value;
  m_StnSrIsSet = true;
}
bool UeContext::stnSrIsSet() const { return m_StnSrIsSet; }
void UeContext::unsetStnSr() { m_StnSrIsSet = false; }
std::string UeContext::getCMsisdn() const { return m_CMsisdn; }
void UeContext::setCMsisdn(std::string const &value) {
  m_CMsisdn = value;
  m_CMsisdnIsSet = true;
}
bool UeContext::cMsisdnIsSet() const { return m_CMsisdnIsSet; }
void UeContext::unsetCMsisdn() { m_CMsisdnIsSet = false; }
std::string UeContext::getMsClassmark2() const { return m_MsClassmark2; }
void UeContext::setMsClassmark2(std::string const &value) {
  m_MsClassmark2 = value;
  m_MsClassmark2IsSet = true;
}
bool UeContext::msClassmark2IsSet() const { return m_MsClassmark2IsSet; }
void UeContext::unsetMsClassmark2() { m_MsClassmark2IsSet = false; }
std::vector<std::string> &UeContext::getSupportedCodecList() {
  return m_SupportedCodecList;
}
void UeContext::setSupportedCodecList(std::vector<std::string> const &value) {
  m_SupportedCodecList = value;
  m_SupportedCodecListIsSet = true;
}
bool UeContext::supportedCodecListIsSet() const {
  return m_SupportedCodecListIsSet;
}
void UeContext::unsetSupportedCodecList() { m_SupportedCodecListIsSet = false; }
std::vector<SmallDataRateStatusInfo> &UeContext::getSmallDataRateStatusInfos() {
  return m_SmallDataRateStatusInfos;
}
void UeContext::setSmallDataRateStatusInfos(
    std::vector<SmallDataRateStatusInfo> const &value) {
  m_SmallDataRateStatusInfos = value;
  m_SmallDataRateStatusInfosIsSet = true;
}
bool UeContext::smallDataRateStatusInfosIsSet() const {
  return m_SmallDataRateStatusInfosIsSet;
}
void UeContext::unsetSmallDataRateStatusInfos() {
  m_SmallDataRateStatusInfosIsSet = false;
}
std::vector<RatType> &UeContext::getRestrictedPrimaryRatList() {
  return m_RestrictedPrimaryRatList;
}
void UeContext::setRestrictedPrimaryRatList(std::vector<RatType> const &value) {
  m_RestrictedPrimaryRatList = value;
  m_RestrictedPrimaryRatListIsSet = true;
}
bool UeContext::restrictedPrimaryRatListIsSet() const {
  return m_RestrictedPrimaryRatListIsSet;
}
void UeContext::unsetRestrictedPrimaryRatList() {
  m_RestrictedPrimaryRatListIsSet = false;
}
std::vector<RatType> &UeContext::getRestrictedSecondaryRatList() {
  return m_RestrictedSecondaryRatList;
}
void UeContext::setRestrictedSecondaryRatList(
    std::vector<RatType> const &value) {
  m_RestrictedSecondaryRatList = value;
  m_RestrictedSecondaryRatListIsSet = true;
}
bool UeContext::restrictedSecondaryRatListIsSet() const {
  return m_RestrictedSecondaryRatListIsSet;
}
void UeContext::unsetRestrictedSecondaryRatList() {
  m_RestrictedSecondaryRatListIsSet = false;
}
V2xContext UeContext::getV2xContext() const { return m_V2xContext; }
void UeContext::setV2xContext(V2xContext const &value) {
  m_V2xContext = value;
  m_V2xContextIsSet = true;
}
bool UeContext::v2xContextIsSet() const { return m_V2xContextIsSet; }
void UeContext::unsetV2xContext() { m_V2xContextIsSet = false; }
bool UeContext::isLteCatMInd() const { return m_LteCatMInd; }
void UeContext::setLteCatMInd(bool const value) {
  m_LteCatMInd = value;
  m_LteCatMIndIsSet = true;
}
bool UeContext::lteCatMIndIsSet() const { return m_LteCatMIndIsSet; }
void UeContext::unsetLteCatMInd() { m_LteCatMIndIsSet = false; }
MoExpDataCounter UeContext::getMoExpDataCounter() const {
  return m_MoExpDataCounter;
}
void UeContext::setMoExpDataCounter(MoExpDataCounter const &value) {
  m_MoExpDataCounter = value;
  m_MoExpDataCounterIsSet = true;
}
bool UeContext::moExpDataCounterIsSet() const {
  return m_MoExpDataCounterIsSet;
}
void UeContext::unsetMoExpDataCounter() { m_MoExpDataCounterIsSet = false; }
CagData UeContext::getCagData() const { return m_CagData; }
void UeContext::setCagData(CagData const &value) {
  m_CagData = value;
  m_CagDataIsSet = true;
}
bool UeContext::cagDataIsSet() const { return m_CagDataIsSet; }
void UeContext::unsetCagData() { m_CagDataIsSet = false; }
bool UeContext::isManagementMdtInd() const { return m_ManagementMdtInd; }
void UeContext::setManagementMdtInd(bool const value) {
  m_ManagementMdtInd = value;
  m_ManagementMdtIndIsSet = true;
}
bool UeContext::managementMdtIndIsSet() const {
  return m_ManagementMdtIndIsSet;
}
void UeContext::unsetManagementMdtInd() { m_ManagementMdtIndIsSet = false; }
ImmediateMdtConf UeContext::getImmediateMdtConf() const {
  return m_ImmediateMdtConf;
}
void UeContext::setImmediateMdtConf(ImmediateMdtConf const &value) {
  m_ImmediateMdtConf = value;
  m_ImmediateMdtConfIsSet = true;
}
bool UeContext::immediateMdtConfIsSet() const {
  return m_ImmediateMdtConfIsSet;
}
void UeContext::unsetImmediateMdtConf() { m_ImmediateMdtConfIsSet = false; }
EcRestrictionDataWb UeContext::getEcRestrictionDataWb() const {
  return m_EcRestrictionDataWb;
}
void UeContext::setEcRestrictionDataWb(EcRestrictionDataWb const &value) {
  m_EcRestrictionDataWb = value;
  m_EcRestrictionDataWbIsSet = true;
}
bool UeContext::ecRestrictionDataWbIsSet() const {
  return m_EcRestrictionDataWbIsSet;
}
void UeContext::unsetEcRestrictionDataWb() {
  m_EcRestrictionDataWbIsSet = false;
}
bool UeContext::isEcRestrictionDataNb() const { return m_EcRestrictionDataNb; }
void UeContext::setEcRestrictionDataNb(bool const value) {
  m_EcRestrictionDataNb = value;
  m_EcRestrictionDataNbIsSet = true;
}
bool UeContext::ecRestrictionDataNbIsSet() const {
  return m_EcRestrictionDataNbIsSet;
}
void UeContext::unsetEcRestrictionDataNb() {
  m_EcRestrictionDataNbIsSet = false;
}
bool UeContext::isIabOperationAllowed() const { return m_IabOperationAllowed; }
void UeContext::setIabOperationAllowed(bool const value) {
  m_IabOperationAllowed = value;
  m_IabOperationAllowedIsSet = true;
}
bool UeContext::iabOperationAllowedIsSet() const {
  return m_IabOperationAllowedIsSet;
}
void UeContext::unsetIabOperationAllowed() {
  m_IabOperationAllowedIsSet = false;
}
ProseContext UeContext::getProseContext() const { return m_ProseContext; }
void UeContext::setProseContext(ProseContext const &value) {
  m_ProseContext = value;
  m_ProseContextIsSet = true;
}
bool UeContext::proseContextIsSet() const { return m_ProseContextIsSet; }
void UeContext::unsetProseContext() { m_ProseContextIsSet = false; }
std::vector<AnalyticsSubscription> &UeContext::getAnalyticsSubscriptionList() {
  return m_AnalyticsSubscriptionList;
}
void UeContext::setAnalyticsSubscriptionList(
    std::vector<AnalyticsSubscription> const &value) {
  m_AnalyticsSubscriptionList = value;
  m_AnalyticsSubscriptionListIsSet = true;
}
bool UeContext::analyticsSubscriptionListIsSet() const {
  return m_AnalyticsSubscriptionListIsSet;
}
void UeContext::unsetAnalyticsSubscriptionList() {
  m_AnalyticsSubscriptionListIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
