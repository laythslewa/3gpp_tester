/**
 * Namf_Communication
 * AMF Communication Service © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * N2InformationTransferReqData.h
 *
 * Data within a N2 Information Transfer request containing the N2 information
 * requested to be transferred to 5G AN
 */

#ifndef N2InformationTransferReqData_H_
#define N2InformationTransferReqData_H_

#include "GlobalRanNodeId.h"
#include "N2InfoContainer.h"
#include "RatSelector.h"
#include "Tai.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within a N2 Information Transfer request containing the N2 information
/// requested to be transferred to 5G AN
/// </summary>
class N2InformationTransferReqData {
public:
  N2InformationTransferReqData();
  virtual ~N2InformationTransferReqData();

  void validate();

  /////////////////////////////////////////////
  /// N2InformationTransferReqData members

  /// <summary>
  ///
  /// </summary>
  std::vector<Tai> &getTaiList();
  void setTaiList(std::vector<Tai> const &value);
  bool taiListIsSet() const;
  void unsetTaiList();
  /// <summary>
  ///
  /// </summary>
  RatSelector getRatSelector() const;
  void setRatSelector(RatSelector const &value);
  bool ratSelectorIsSet() const;
  void unsetRatSelector();
  /// <summary>
  ///
  /// </summary>
  std::vector<GlobalRanNodeId> &getGlobalRanNodeList();
  void setGlobalRanNodeList(std::vector<GlobalRanNodeId> const &value);
  bool globalRanNodeListIsSet() const;
  void unsetGlobalRanNodeList();
  /// <summary>
  ///
  /// </summary>
  N2InfoContainer getN2Information() const;
  void setN2Information(N2InfoContainer const &value);
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  friend void to_json(nlohmann::json &j, const N2InformationTransferReqData &o);
  friend void from_json(const nlohmann::json &j,
                        N2InformationTransferReqData &o);

protected:
  std::vector<Tai> m_TaiList;
  bool m_TaiListIsSet;
  RatSelector m_RatSelector;
  bool m_RatSelectorIsSet;
  std::vector<GlobalRanNodeId> m_GlobalRanNodeList;
  bool m_GlobalRanNodeListIsSet;
  N2InfoContainer m_N2Information;

  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* N2InformationTransferReqData_H_ */
