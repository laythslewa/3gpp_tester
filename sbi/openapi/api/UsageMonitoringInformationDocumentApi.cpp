/**
 * Unified Data Repository Service API file for policy data
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UsageMonitoringInformationDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

UsageMonitoringInformationDocumentApi::UsageMonitoringInformationDocumentApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void UsageMonitoringInformationDocumentApi::init() { setupRoutes(); }

void UsageMonitoringInformationDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Put(*router, base + "/policy-data/ues/:ueId/sm-data/:usageMonId",
              Routes::bind(&UsageMonitoringInformationDocumentApi::
                               create_usage_monitoring_resource_handler,
                           this));
  Routes::Delete(*router, base + "/policy-data/ues/:ueId/sm-data/:usageMonId",
                 Routes::bind(&UsageMonitoringInformationDocumentApi::
                                  delete_usage_monitoring_information_handler,
                              this));
  Routes::Get(*router, base + "/policy-data/ues/:ueId/sm-data/:usageMonId",
              Routes::bind(&UsageMonitoringInformationDocumentApi::
                               read_usage_monitoring_information_handler,
                           this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &UsageMonitoringInformationDocumentApi::
          usage_monitoring_information_document_api_default_handler,
      this));
}

void UsageMonitoringInformationDocumentApi::
    create_usage_monitoring_resource_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto ueId = request.param(":ueId").as<std::string>();
  auto usageMonId = request.param(":usageMonId").as<std::string>();

  // Getting the body param

  UsageMonData usageMonData;

  try {
    nlohmann::json::parse(request.body()).get_to(usageMonData);
    this->create_usage_monitoring_resource(ueId, usageMonId, usageMonData,
                                           response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void UsageMonitoringInformationDocumentApi::
    delete_usage_monitoring_information_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto ueId = request.param(":ueId").as<std::string>();
  auto usageMonId = request.param(":usageMonId").as<std::string>();

  try {
    this->delete_usage_monitoring_information(ueId, usageMonId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void UsageMonitoringInformationDocumentApi::
    read_usage_monitoring_information_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto ueId = request.param(":ueId").as<std::string>();
  auto usageMonId = request.param(":usageMonId").as<std::string>();

  // Getting the query params
  auto suppFeatQuery = request.query().get("supp-feat");
  Pistache::Optional<std::string> suppFeat;
  if (!suppFeatQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(suppFeatQuery.get(), valueQuery_instance)) {
      suppFeat = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->read_usage_monitoring_information(ueId, usageMonId, suppFeat,
                                            response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void UsageMonitoringInformationDocumentApi::
    usage_monitoring_information_document_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
