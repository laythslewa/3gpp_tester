/**
 * NRF NFManagement Service
 * NRF NFManagement Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NFService.h
 *
 * Information of a given NF Service Instance; it is part of the NFProfile of an
 * NF Instance
 */

#ifndef NFService_H_
#define NFService_H_

#include "DefaultNotificationSubscription.h"
#include "ExtSnssai.h"
#include "IpEndPoint.h"
#include "NFServiceStatus.h"
#include "NFServiceVersion.h"
#include "NFType.h"
#include "PlmnId.h"
#include "PlmnIdNid.h"
#include "PlmnSnssai.h"
#include "ServiceName.h"
#include "UriScheme.h"
#include "VendorSpecificFeature.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Information of a given NF Service Instance; it is part of the NFProfile of
/// an NF Instance
/// </summary>
class NFService {
public:
  NFService();
  virtual ~NFService();

  void validate();

  /////////////////////////////////////////////
  /// NFService members

  /// <summary>
  ///
  /// </summary>
  std::string getServiceInstanceId() const;
  void setServiceInstanceId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  ServiceName getServiceName() const;
  void setServiceName(ServiceName const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<NFServiceVersion> &getVersions();
  void setVersions(std::vector<NFServiceVersion> const &value);
  /// <summary>
  ///
  /// </summary>
  UriScheme getScheme() const;
  void setScheme(UriScheme const &value);
  /// <summary>
  ///
  /// </summary>
  NFServiceStatus getNfServiceStatus() const;
  void setNfServiceStatus(NFServiceStatus const &value);
  /// <summary>
  /// Fully Qualified Domain Name
  /// </summary>
  std::string getFqdn() const;
  void setFqdn(std::string const &value);
  bool fqdnIsSet() const;
  void unsetFqdn();
  /// <summary>
  /// Fully Qualified Domain Name
  /// </summary>
  std::string getInterPlmnFqdn() const;
  void setInterPlmnFqdn(std::string const &value);
  bool interPlmnFqdnIsSet() const;
  void unsetInterPlmnFqdn();
  /// <summary>
  ///
  /// </summary>
  std::vector<IpEndPoint> &getIpEndPoints();
  void setIpEndPoints(std::vector<IpEndPoint> const &value);
  bool ipEndPointsIsSet() const;
  void unsetIpEndPoints();
  /// <summary>
  ///
  /// </summary>
  std::string getApiPrefix() const;
  void setApiPrefix(std::string const &value);
  bool apiPrefixIsSet() const;
  void unsetApiPrefix();
  /// <summary>
  ///
  /// </summary>
  std::vector<DefaultNotificationSubscription> &
  getDefaultNotificationSubscriptions();
  void setDefaultNotificationSubscriptions(
      std::vector<DefaultNotificationSubscription> const &value);
  bool defaultNotificationSubscriptionsIsSet() const;
  void unsetDefaultNotificationSubscriptions();
  /// <summary>
  ///
  /// </summary>
  std::vector<PlmnId> &getAllowedPlmns();
  void setAllowedPlmns(std::vector<PlmnId> const &value);
  bool allowedPlmnsIsSet() const;
  void unsetAllowedPlmns();
  /// <summary>
  ///
  /// </summary>
  std::vector<PlmnIdNid> &getAllowedSnpns();
  void setAllowedSnpns(std::vector<PlmnIdNid> const &value);
  bool allowedSnpnsIsSet() const;
  void unsetAllowedSnpns();
  /// <summary>
  ///
  /// </summary>
  std::vector<NFType> &getAllowedNfTypes();
  void setAllowedNfTypes(std::vector<NFType> const &value);
  bool allowedNfTypesIsSet() const;
  void unsetAllowedNfTypes();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getAllowedNfDomains();
  void setAllowedNfDomains(std::vector<std::string> const &value);
  bool allowedNfDomainsIsSet() const;
  void unsetAllowedNfDomains();
  /// <summary>
  ///
  /// </summary>
  std::vector<ExtSnssai> &getAllowedNssais();
  void setAllowedNssais(std::vector<ExtSnssai> const &value);
  bool allowedNssaisIsSet() const;
  void unsetAllowedNssais();
  /// <summary>
  /// A map (list of key-value pairs) where NF Type serves as key
  /// </summary>
  std::map<std::string, std::vector<std::string>> &
  getAllowedOperationsPerNfType();
  void setAllowedOperationsPerNfType(
      std::map<std::string, std::vector<std::string>> const &value);
  bool allowedOperationsPerNfTypeIsSet() const;
  void unsetAllowedOperationsPerNfType();
  /// <summary>
  /// A map (list of key-value pairs) where NF Instance Id serves as key
  /// </summary>
  std::map<std::string, std::vector<std::string>> &
  getAllowedOperationsPerNfInstance();
  void setAllowedOperationsPerNfInstance(
      std::map<std::string, std::vector<std::string>> const &value);
  bool allowedOperationsPerNfInstanceIsSet() const;
  void unsetAllowedOperationsPerNfInstance();
  /// <summary>
  ///
  /// </summary>
  int32_t getPriority() const;
  void setPriority(int32_t const value);
  bool priorityIsSet() const;
  void unsetPriority();
  /// <summary>
  ///
  /// </summary>
  int32_t getCapacity() const;
  void setCapacity(int32_t const value);
  bool capacityIsSet() const;
  void unsetCapacity();
  /// <summary>
  ///
  /// </summary>
  int32_t getLoad() const;
  void setLoad(int32_t const value);
  bool loadIsSet() const;
  void unsetLoad();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getLoadTimeStamp() const;
  void setLoadTimeStamp(std::string const &value);
  bool loadTimeStampIsSet() const;
  void unsetLoadTimeStamp();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getRecoveryTime() const;
  void setRecoveryTime(std::string const &value);
  bool recoveryTimeIsSet() const;
  void unsetRecoveryTime();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getNfServiceSetIdList();
  void setNfServiceSetIdList(std::vector<std::string> const &value);
  bool nfServiceSetIdListIsSet() const;
  void unsetNfServiceSetIdList();
  /// <summary>
  ///
  /// </summary>
  std::vector<ExtSnssai> &getSNssais();
  void setSNssais(std::vector<ExtSnssai> const &value);
  bool sNssaisIsSet() const;
  void unsetSNssais();
  /// <summary>
  ///
  /// </summary>
  std::vector<PlmnSnssai> &getPerPlmnSnssaiList();
  void setPerPlmnSnssaiList(std::vector<PlmnSnssai> const &value);
  bool perPlmnSnssaiListIsSet() const;
  void unsetPerPlmnSnssaiList();
  /// <summary>
  /// Vendor ID of the NF Service instance (Private Enterprise Number assigned
  /// by IANA)
  /// </summary>
  std::string getVendorId() const;
  void setVendorId(std::string const &value);
  bool vendorIdIsSet() const;
  void unsetVendorId();
  /// <summary>
  /// A map (list of key-value pairs) where IANA-assigned SMI Network Management
  /// Private Enterprise Codes serves as key
  /// </summary>
  std::map<std::string, std::vector<VendorSpecificFeature>> &
  getSupportedVendorSpecificFeatures();
  void setSupportedVendorSpecificFeatures(
      std::map<std::string, std::vector<VendorSpecificFeature>> const &value);
  bool supportedVendorSpecificFeaturesIsSet() const;
  void unsetSupportedVendorSpecificFeatures();
  /// <summary>
  ///
  /// </summary>
  bool isOauth2Required() const;
  void setOauth2Required(bool const value);
  bool oauth2RequiredIsSet() const;
  void unsetOauth2Required();

  friend void to_json(nlohmann::json &j, const NFService &o);
  friend void from_json(const nlohmann::json &j, NFService &o);

protected:
  std::string m_ServiceInstanceId;

  ServiceName m_ServiceName;

  std::vector<NFServiceVersion> m_Versions;

  UriScheme m_Scheme;

  NFServiceStatus m_NfServiceStatus;

  std::string m_Fqdn;
  bool m_FqdnIsSet;
  std::string m_InterPlmnFqdn;
  bool m_InterPlmnFqdnIsSet;
  std::vector<IpEndPoint> m_IpEndPoints;
  bool m_IpEndPointsIsSet;
  std::string m_ApiPrefix;
  bool m_ApiPrefixIsSet;
  std::vector<DefaultNotificationSubscription>
      m_DefaultNotificationSubscriptions;
  bool m_DefaultNotificationSubscriptionsIsSet;
  std::vector<PlmnId> m_AllowedPlmns;
  bool m_AllowedPlmnsIsSet;
  std::vector<PlmnIdNid> m_AllowedSnpns;
  bool m_AllowedSnpnsIsSet;
  std::vector<NFType> m_AllowedNfTypes;
  bool m_AllowedNfTypesIsSet;
  std::vector<std::string> m_AllowedNfDomains;
  bool m_AllowedNfDomainsIsSet;
  std::vector<ExtSnssai> m_AllowedNssais;
  bool m_AllowedNssaisIsSet;
  std::map<std::string, std::vector<std::string>> m_AllowedOperationsPerNfType;
  bool m_AllowedOperationsPerNfTypeIsSet;
  std::map<std::string, std::vector<std::string>>
      m_AllowedOperationsPerNfInstance;
  bool m_AllowedOperationsPerNfInstanceIsSet;
  int32_t m_Priority;
  bool m_PriorityIsSet;
  int32_t m_Capacity;
  bool m_CapacityIsSet;
  int32_t m_Load;
  bool m_LoadIsSet;
  std::string m_LoadTimeStamp;
  bool m_LoadTimeStampIsSet;
  std::string m_RecoveryTime;
  bool m_RecoveryTimeIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::vector<std::string> m_NfServiceSetIdList;
  bool m_NfServiceSetIdListIsSet;
  std::vector<ExtSnssai> m_SNssais;
  bool m_SNssaisIsSet;
  std::vector<PlmnSnssai> m_PerPlmnSnssaiList;
  bool m_PerPlmnSnssaiListIsSet;
  std::string m_VendorId;
  bool m_VendorIdIsSet;
  std::map<std::string, std::vector<VendorSpecificFeature>>
      m_SupportedVendorSpecificFeatures;
  bool m_SupportedVendorSpecificFeaturesIsSet;
  bool m_Oauth2Required;
  bool m_Oauth2RequiredIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NFService_H_ */
