/**
 * M5_NetworkAssistance
 * 5GMS AF M5 Network Assistance API Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IpPacketFilterSet.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

IpPacketFilterSet::IpPacketFilterSet() {
  m_SrcIp = "";
  m_SrcIpIsSet = false;
  m_DstIp = "";
  m_DstIpIsSet = false;
  m_Protocol = 0;
  m_ProtocolIsSet = false;
  m_SrcPort = 0;
  m_SrcPortIsSet = false;
  m_DstPort = 0;
  m_DstPortIsSet = false;
  m_ToSTc = "";
  m_ToSTcIsSet = false;
  m_FlowLabel = 0;
  m_FlowLabelIsSet = false;
  m_Spi = 0;
  m_SpiIsSet = false;
  m_Direction = "";
}

IpPacketFilterSet::~IpPacketFilterSet() {}

void IpPacketFilterSet::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const IpPacketFilterSet &o) {
  j = nlohmann::json();
  if (o.srcIpIsSet())
    j["srcIp"] = o.m_SrcIp;
  if (o.dstIpIsSet())
    j["dstIp"] = o.m_DstIp;
  if (o.protocolIsSet())
    j["protocol"] = o.m_Protocol;
  if (o.srcPortIsSet())
    j["srcPort"] = o.m_SrcPort;
  if (o.dstPortIsSet())
    j["dstPort"] = o.m_DstPort;
  if (o.toSTcIsSet())
    j["toSTc"] = o.m_ToSTc;
  if (o.flowLabelIsSet())
    j["flowLabel"] = o.m_FlowLabel;
  if (o.spiIsSet())
    j["spi"] = o.m_Spi;
  j["direction"] = o.m_Direction;
}

void from_json(const nlohmann::json &j, IpPacketFilterSet &o) {
  if (j.find("srcIp") != j.end()) {
    j.at("srcIp").get_to(o.m_SrcIp);
    o.m_SrcIpIsSet = true;
  }
  if (j.find("dstIp") != j.end()) {
    j.at("dstIp").get_to(o.m_DstIp);
    o.m_DstIpIsSet = true;
  }
  if (j.find("protocol") != j.end()) {
    j.at("protocol").get_to(o.m_Protocol);
    o.m_ProtocolIsSet = true;
  }
  if (j.find("srcPort") != j.end()) {
    j.at("srcPort").get_to(o.m_SrcPort);
    o.m_SrcPortIsSet = true;
  }
  if (j.find("dstPort") != j.end()) {
    j.at("dstPort").get_to(o.m_DstPort);
    o.m_DstPortIsSet = true;
  }
  if (j.find("toSTc") != j.end()) {
    j.at("toSTc").get_to(o.m_ToSTc);
    o.m_ToSTcIsSet = true;
  }
  if (j.find("flowLabel") != j.end()) {
    j.at("flowLabel").get_to(o.m_FlowLabel);
    o.m_FlowLabelIsSet = true;
  }
  if (j.find("spi") != j.end()) {
    j.at("spi").get_to(o.m_Spi);
    o.m_SpiIsSet = true;
  }
  j.at("direction").get_to(o.m_Direction);
}

std::string IpPacketFilterSet::getSrcIp() const { return m_SrcIp; }
void IpPacketFilterSet::setSrcIp(std::string const &value) {
  m_SrcIp = value;
  m_SrcIpIsSet = true;
}
bool IpPacketFilterSet::srcIpIsSet() const { return m_SrcIpIsSet; }
void IpPacketFilterSet::unsetSrcIp() { m_SrcIpIsSet = false; }
std::string IpPacketFilterSet::getDstIp() const { return m_DstIp; }
void IpPacketFilterSet::setDstIp(std::string const &value) {
  m_DstIp = value;
  m_DstIpIsSet = true;
}
bool IpPacketFilterSet::dstIpIsSet() const { return m_DstIpIsSet; }
void IpPacketFilterSet::unsetDstIp() { m_DstIpIsSet = false; }
int32_t IpPacketFilterSet::getProtocol() const { return m_Protocol; }
void IpPacketFilterSet::setProtocol(int32_t const value) {
  m_Protocol = value;
  m_ProtocolIsSet = true;
}
bool IpPacketFilterSet::protocolIsSet() const { return m_ProtocolIsSet; }
void IpPacketFilterSet::unsetProtocol() { m_ProtocolIsSet = false; }
int32_t IpPacketFilterSet::getSrcPort() const { return m_SrcPort; }
void IpPacketFilterSet::setSrcPort(int32_t const value) {
  m_SrcPort = value;
  m_SrcPortIsSet = true;
}
bool IpPacketFilterSet::srcPortIsSet() const { return m_SrcPortIsSet; }
void IpPacketFilterSet::unsetSrcPort() { m_SrcPortIsSet = false; }
int32_t IpPacketFilterSet::getDstPort() const { return m_DstPort; }
void IpPacketFilterSet::setDstPort(int32_t const value) {
  m_DstPort = value;
  m_DstPortIsSet = true;
}
bool IpPacketFilterSet::dstPortIsSet() const { return m_DstPortIsSet; }
void IpPacketFilterSet::unsetDstPort() { m_DstPortIsSet = false; }
std::string IpPacketFilterSet::getToSTc() const { return m_ToSTc; }
void IpPacketFilterSet::setToSTc(std::string const &value) {
  m_ToSTc = value;
  m_ToSTcIsSet = true;
}
bool IpPacketFilterSet::toSTcIsSet() const { return m_ToSTcIsSet; }
void IpPacketFilterSet::unsetToSTc() { m_ToSTcIsSet = false; }
int32_t IpPacketFilterSet::getFlowLabel() const { return m_FlowLabel; }
void IpPacketFilterSet::setFlowLabel(int32_t const value) {
  m_FlowLabel = value;
  m_FlowLabelIsSet = true;
}
bool IpPacketFilterSet::flowLabelIsSet() const { return m_FlowLabelIsSet; }
void IpPacketFilterSet::unsetFlowLabel() { m_FlowLabelIsSet = false; }
int32_t IpPacketFilterSet::getSpi() const { return m_Spi; }
void IpPacketFilterSet::setSpi(int32_t const value) {
  m_Spi = value;
  m_SpiIsSet = true;
}
bool IpPacketFilterSet::spiIsSet() const { return m_SpiIsSet; }
void IpPacketFilterSet::unsetSpi() { m_SpiIsSet = false; }
std::string IpPacketFilterSet::getDirection() const { return m_Direction; }
void IpPacketFilterSet::setDirection(std::string const &value) {
  m_Direction = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
