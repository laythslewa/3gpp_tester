/**
 * Nhss_imsSDM
 * Nhss Subscriber Data Management Service for IMS. © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SgsnLocationData.h
 *
 *
 */

#ifndef SgsnLocationData_H_
#define SgsnLocationData_H_

#include "CsgInformation.h"
#include "PlmnId.h"
#include "RatType.h"
#include "UtraLocation.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SgsnLocationData {
public:
  SgsnLocationData();
  virtual ~SgsnLocationData();

  void validate();

  /////////////////////////////////////////////
  /// SgsnLocationData members

  /// <summary>
  ///
  /// </summary>
  std::string getSgsnNumber() const;
  void setSgsnNumber(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  PlmnId getPlmnId() const;
  void setPlmnId(PlmnId const &value);
  /// <summary>
  ///
  /// </summary>
  UtraLocation getSgsnLocation() const;
  void setSgsnLocation(UtraLocation const &value);
  bool sgsnLocationIsSet() const;
  void unsetSgsnLocation();
  /// <summary>
  ///
  /// </summary>
  CsgInformation getCsgInformation() const;
  void setCsgInformation(CsgInformation const &value);
  bool csgInformationIsSet() const;
  void unsetCsgInformation();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getTimeZone() const;
  void setTimeZone(std::string const &value);
  bool timeZoneIsSet() const;
  void unsetTimeZone();
  /// <summary>
  ///
  /// </summary>
  RatType getRatType() const;
  void setRatType(RatType const &value);
  bool ratTypeIsSet() const;
  void unsetRatType();

  friend void to_json(nlohmann::json &j, const SgsnLocationData &o);
  friend void from_json(const nlohmann::json &j, SgsnLocationData &o);

protected:
  std::string m_SgsnNumber;

  PlmnId m_PlmnId;

  UtraLocation m_SgsnLocation;
  bool m_SgsnLocationIsSet;
  CsgInformation m_CsgInformation;
  bool m_CsgInformationIsSet;
  std::string m_TimeZone;
  bool m_TimeZoneIsSet;
  RatType m_RatType;
  bool m_RatTypeIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SgsnLocationData_H_ */
