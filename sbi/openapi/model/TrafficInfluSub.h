/**
 * 3gpp-traffic-influence
 * API for AF traffic influence © 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TrafficInfluSub.h
 *
 * Represents a traffic influence subscription.
 */

#ifndef TrafficInfluSub_H_
#define TrafficInfluSub_H_

#include "DnaiChangeType.h"
#include "EthFlowDescription.h"
#include "FlowInfo.h"
#include "RouteToLocation.h"
#include "Snssai.h"
#include "SubscribedEvent.h"
#include "TemporalValidity.h"
#include "UserPlaneLatencyRequirements.h"
#include "WebsockNotifConfig.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a traffic influence subscription.
/// </summary>
class TrafficInfluSub {
public:
  TrafficInfluSub();
  virtual ~TrafficInfluSub();

  void validate();

  /////////////////////////////////////////////
  /// TrafficInfluSub members

  /// <summary>
  /// Identifies a service on behalf of which the AF is issuing the request.
  /// </summary>
  std::string getAfServiceId() const;
  void setAfServiceId(std::string const &value);
  bool afServiceIdIsSet() const;
  void unsetAfServiceId();
  /// <summary>
  /// Identifies an application.
  /// </summary>
  std::string getAfAppId() const;
  void setAfAppId(std::string const &value);
  bool afAppIdIsSet() const;
  void unsetAfAppId();
  /// <summary>
  /// Identifies an NEF Northbound interface transaction, generated by the AF.
  /// </summary>
  std::string getAfTransId() const;
  void setAfTransId(std::string const &value);
  bool afTransIdIsSet() const;
  void unsetAfTransId();
  /// <summary>
  /// Identifies whether an application can be relocated once a location of the
  /// application has been selected.
  /// </summary>
  bool isAppReloInd() const;
  void setAppReloInd(bool const value);
  bool appReloIndIsSet() const;
  void unsetAppReloInd();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more
  /// information.
  /// </summary>
  std::string getExternalGroupId() const;
  void setExternalGroupId(std::string const &value);
  bool externalGroupIdIsSet() const;
  void unsetExternalGroupId();
  /// <summary>
  /// Identifies whether the AF request applies to any UE. This attribute shall
  /// set to \&quot;true\&quot; if applicable for any UE, otherwise, set to
  /// \&quot;false\&quot;.
  /// </summary>
  bool isAnyUeInd() const;
  void setAnyUeInd(bool const value);
  bool anyUeIndIsSet() const;
  void unsetAnyUeInd();
  /// <summary>
  /// Identifies the requirement to be notified of the event(s).
  /// </summary>
  std::vector<SubscribedEvent> &getSubscribedEvents();
  void setSubscribedEvents(std::vector<SubscribedEvent> const &value);
  bool subscribedEventsIsSet() const;
  void unsetSubscribedEvents();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// string identifying a Ipv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in IETF RFC 1166.
  /// </summary>
  std::string getIpv4Addr() const;
  void setIpv4Addr(std::string const &value);
  bool ipv4AddrIsSet() const;
  void unsetIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  std::string getIpDomain() const;
  void setIpDomain(std::string const &value);
  bool ipDomainIsSet() const;
  void unsetIpDomain();
  /// <summary>
  /// string identifying a Ipv6 address formatted according to clause 4 in IETF
  /// RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC
  /// 5952 shall not be used.
  /// </summary>
  std::string getIpv6Addr() const;
  void setIpv6Addr(std::string const &value);
  bool ipv6AddrIsSet() const;
  void unsetIpv6Addr();
  /// <summary>
  /// String identifying a MAC address formatted in the hexadecimal notation
  /// according to clause 1.1 and clause 2.1 of RFC 7042
  /// </summary>
  std::string getMacAddr() const;
  void setMacAddr(std::string const &value);
  bool macAddrIsSet() const;
  void unsetMacAddr();
  /// <summary>
  ///
  /// </summary>
  DnaiChangeType getDnaiChgType() const;
  void setDnaiChgType(DnaiChangeType const &value);
  bool dnaiChgTypeIsSet() const;
  void unsetDnaiChgType();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getNotificationDestination() const;
  void setNotificationDestination(std::string const &value);
  bool notificationDestinationIsSet() const;
  void unsetNotificationDestination();
  /// <summary>
  /// Set to true by the SCS/AS to request the NEF to send a test notification
  /// as defined in subclause 5.2.5.3. Set to false or omitted otherwise.
  /// </summary>
  bool isRequestTestNotification() const;
  void setRequestTestNotification(bool const value);
  bool requestTestNotificationIsSet() const;
  void unsetRequestTestNotification();
  /// <summary>
  ///
  /// </summary>
  WebsockNotifConfig getWebsockNotifConfig() const;
  void setWebsockNotifConfig(WebsockNotifConfig const &value);
  bool websockNotifConfigIsSet() const;
  void unsetWebsockNotifConfig();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const &value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  /// Identifies IP packet filters.
  /// </summary>
  std::vector<FlowInfo> &getTrafficFilters();
  void setTrafficFilters(std::vector<FlowInfo> const &value);
  bool trafficFiltersIsSet() const;
  void unsetTrafficFilters();
  /// <summary>
  /// Identifies Ethernet packet filters.
  /// </summary>
  std::vector<EthFlowDescription> &getEthTrafficFilters();
  void setEthTrafficFilters(std::vector<EthFlowDescription> const &value);
  bool ethTrafficFiltersIsSet() const;
  void unsetEthTrafficFilters();
  /// <summary>
  /// Identifies the N6 traffic routing requirement.
  /// </summary>
  std::vector<RouteToLocation> &getTrafficRoutes();
  void setTrafficRoutes(std::vector<RouteToLocation> const &value);
  bool trafficRoutesIsSet() const;
  void unsetTrafficRoutes();
  /// <summary>
  ///
  /// </summary>
  bool isTfcCorrInd() const;
  void setTfcCorrInd(bool const value);
  bool tfcCorrIndIsSet() const;
  void unsetTfcCorrInd();
  /// <summary>
  ///
  /// </summary>
  std::vector<TemporalValidity> &getTempValidities();
  void setTempValidities(std::vector<TemporalValidity> const &value);
  bool tempValiditiesIsSet() const;
  void unsetTempValidities();
  /// <summary>
  /// Identifies a geographic zone that the AF request applies only to the
  /// traffic of UE(s) located in this specific zone.
  /// </summary>
  std::vector<std::string> &getValidGeoZoneIds();
  void setValidGeoZoneIds(std::vector<std::string> const &value);
  bool validGeoZoneIdsIsSet() const;
  void unsetValidGeoZoneIds();
  /// <summary>
  ///
  /// </summary>
  bool isAfAckInd() const;
  void setAfAckInd(bool const value);
  bool afAckIndIsSet() const;
  void unsetAfAckInd();
  /// <summary>
  ///
  /// </summary>
  bool isAddrPreserInd() const;
  void setAddrPreserInd(bool const value);
  bool addrPreserIndIsSet() const;
  void unsetAddrPreserInd();
  /// <summary>
  ///
  /// </summary>
  UserPlaneLatencyRequirements getUpLatReq() const;
  void setUpLatReq(UserPlaneLatencyRequirements const &value);
  bool upLatReqIsSet() const;
  void unsetUpLatReq();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();

  friend void to_json(nlohmann::json &j, const TrafficInfluSub &o);
  friend void from_json(const nlohmann::json &j, TrafficInfluSub &o);

protected:
  std::string m_AfServiceId;
  bool m_AfServiceIdIsSet;
  std::string m_AfAppId;
  bool m_AfAppIdIsSet;
  std::string m_AfTransId;
  bool m_AfTransIdIsSet;
  bool m_AppReloInd;
  bool m_AppReloIndIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  std::string m_ExternalGroupId;
  bool m_ExternalGroupIdIsSet;
  bool m_AnyUeInd;
  bool m_AnyUeIndIsSet;
  std::vector<SubscribedEvent> m_SubscribedEvents;
  bool m_SubscribedEventsIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_Ipv4Addr;
  bool m_Ipv4AddrIsSet;
  std::string m_IpDomain;
  bool m_IpDomainIsSet;
  std::string m_Ipv6Addr;
  bool m_Ipv6AddrIsSet;
  std::string m_MacAddr;
  bool m_MacAddrIsSet;
  DnaiChangeType m_DnaiChgType;
  bool m_DnaiChgTypeIsSet;
  std::string m_NotificationDestination;
  bool m_NotificationDestinationIsSet;
  bool m_RequestTestNotification;
  bool m_RequestTestNotificationIsSet;
  WebsockNotifConfig m_WebsockNotifConfig;
  bool m_WebsockNotifConfigIsSet;
  std::string m_Self;
  bool m_SelfIsSet;
  std::vector<FlowInfo> m_TrafficFilters;
  bool m_TrafficFiltersIsSet;
  std::vector<EthFlowDescription> m_EthTrafficFilters;
  bool m_EthTrafficFiltersIsSet;
  std::vector<RouteToLocation> m_TrafficRoutes;
  bool m_TrafficRoutesIsSet;
  bool m_TfcCorrInd;
  bool m_TfcCorrIndIsSet;
  std::vector<TemporalValidity> m_TempValidities;
  bool m_TempValiditiesIsSet;
  std::vector<std::string> m_ValidGeoZoneIds;
  bool m_ValidGeoZoneIdsIsSet;
  bool m_AfAckInd;
  bool m_AfAckIndIsSet;
  bool m_AddrPreserInd;
  bool m_AddrPreserIndIsSet;
  UserPlaneLatencyRequirements m_UpLatReq;
  bool m_UpLatReqIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* TrafficInfluSub_H_ */
