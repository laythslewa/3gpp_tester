/**
 * GMDviaMBMSbyMB2
 * API for Group Message Delivery via MBMS by MB2 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualTMGIAllocatinOperationApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

IndividualTMGIAllocatinOperationApi::IndividualTMGIAllocatinOperationApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void IndividualTMGIAllocatinOperationApi::init() { setupRoutes(); }

void IndividualTMGIAllocatinOperationApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Delete(*router, base + "/:scsAsId/tmgi-allocation/:tmgi",
                 Routes::bind(&IndividualTMGIAllocatinOperationApi::
                                  scs_as_id_tmgi_allocation_tmgi_delete_handler,
                              this));
  Routes::Get(*router, base + "/:scsAsId/tmgi-allocation/:tmgi",
              Routes::bind(&IndividualTMGIAllocatinOperationApi::
                               scs_as_id_tmgi_allocation_tmgi_get_handler,
                           this));
  Routes::Patch(*router, base + "/:scsAsId/tmgi-allocation/:tmgi",
                Routes::bind(&IndividualTMGIAllocatinOperationApi::
                                 scs_as_id_tmgi_allocation_tmgi_patch_handler,
                             this));
  Routes::Put(*router, base + "/:scsAsId/tmgi-allocation/:tmgi",
              Routes::bind(&IndividualTMGIAllocatinOperationApi::
                               scs_as_id_tmgi_allocation_tmgi_put_handler,
                           this));

  // Default handler, called when a route is not found
  router->addCustomHandler(
      Routes::bind(&IndividualTMGIAllocatinOperationApi::
                       individual_tmgi_allocatin_operation_api_default_handler,
                   this));
}

void IndividualTMGIAllocatinOperationApi::
    scs_as_id_tmgi_allocation_tmgi_delete_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto scsAsId = request.param(":scsAsId").as<std::string>();
  auto tmgi = request.param(":tmgi").as<std::string>();

  try {
    this->scs_as_id_tmgi_allocation_tmgi_delete(scsAsId, tmgi, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualTMGIAllocatinOperationApi::
    scs_as_id_tmgi_allocation_tmgi_get_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto scsAsId = request.param(":scsAsId").as<std::string>();
  auto tmgi = request.param(":tmgi").as<std::string>();

  try {
    this->scs_as_id_tmgi_allocation_tmgi_get(scsAsId, tmgi, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualTMGIAllocatinOperationApi::
    scs_as_id_tmgi_allocation_tmgi_patch_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto scsAsId = request.param(":scsAsId").as<std::string>();
  auto tmgi = request.param(":tmgi").as<std::string>();

  // Getting the body param

  TMGIAllocationPatch tMGIAllocationPatch;

  try {
    nlohmann::json::parse(request.body()).get_to(tMGIAllocationPatch);
    this->scs_as_id_tmgi_allocation_tmgi_patch(scsAsId, tmgi,
                                               tMGIAllocationPatch, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualTMGIAllocatinOperationApi::
    scs_as_id_tmgi_allocation_tmgi_put_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto scsAsId = request.param(":scsAsId").as<std::string>();
  auto tmgi = request.param(":tmgi").as<std::string>();

  // Getting the body param

  TMGIAllocation tMGIAllocation;

  try {
    nlohmann::json::parse(request.body()).get_to(tMGIAllocation);
    this->scs_as_id_tmgi_allocation_tmgi_put(scsAsId, tmgi, tMGIAllocation,
                                             response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void IndividualTMGIAllocatinOperationApi::
    individual_tmgi_allocatin_operation_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
