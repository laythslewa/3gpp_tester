/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.3.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EcgiRm.h
 *
 * This data type is defined in the same way as the \&quot;Ecgi\&quot; data
 * type, but with the OpenAPI \&quot;nullable&#x3D; true\&quot; property.
 */

#ifndef EcgiRm_H_
#define EcgiRm_H_

#include "Ecgi.h"
#include "NullValue.h"
#include "PlmnId.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// This data type is defined in the same way as the \&quot;Ecgi\&quot; data
/// type, but with the OpenAPI \&quot;nullable&#x3D; true\&quot; property.
/// </summary>
class EcgiRm {
public:
  EcgiRm();
  virtual ~EcgiRm();

  void validate();

  /////////////////////////////////////////////
  /// EcgiRm members

  /// <summary>
  ///
  /// </summary>
  PlmnId getPlmnId() const;
  void setPlmnId(PlmnId const &value);
  /// <summary>
  /// 28-bit string identifying an E-UTRA Cell Id as specified in clause 9.3.1.9
  /// of 3GPP TS 38.413, in hexadecimal representation. Each character in the
  /// string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;,
  /// \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot;
  /// and shall represent 4 bits. The most significant character representing
  /// the 4 most significant bits of the Cell Id shall appear first in the
  /// string, and the character representing the 4 least significant bit of the
  /// Cell Id shall appear last in the string.
  /// </summary>
  std::string getEutraCellId() const;
  void setEutraCellId(std::string const &value);
  /// <summary>
  /// This represents the Network Identifier, which together with a PLMN ID is
  /// used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501
  /// clause 5.30.2.1).
  /// </summary>
  std::string getNid() const;
  void setNid(std::string const &value);
  bool nidIsSet() const;
  void unsetNid();

  friend void to_json(nlohmann::json &j, const EcgiRm &o);
  friend void from_json(const nlohmann::json &j, EcgiRm &o);

protected:
  PlmnId m_PlmnId;

  std::string m_EutraCellId;

  std::string m_Nid;
  bool m_NidIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* EcgiRm_H_ */
