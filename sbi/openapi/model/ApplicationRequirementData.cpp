/**
 * VAE_ApplicationRequirement
 * API for VAE Application Requirement Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ApplicationRequirementData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ApplicationRequirementData::ApplicationRequirementData() {
  m_UeId = "";
  m_UeIdIsSet = false;
  m_GroupId = "";
  m_GroupIdIsSet = false;
  m_Duration = "";
  m_DurationIsSet = false;
  m_ServiceId = "";
  m_NotifUri = "";
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
}

ApplicationRequirementData::~ApplicationRequirementData() {}

void ApplicationRequirementData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ApplicationRequirementData &o) {
  j = nlohmann::json();
  if (o.ueIdIsSet())
    j["ueId"] = o.m_UeId;
  if (o.groupIdIsSet())
    j["groupId"] = o.m_GroupId;
  if (o.durationIsSet())
    j["duration"] = o.m_Duration;
  j["serviceId"] = o.m_ServiceId;
  j["appRequirement"] = o.m_AppRequirement;
  j["notifUri"] = o.m_NotifUri;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, ApplicationRequirementData &o) {
  if (j.find("ueId") != j.end()) {
    j.at("ueId").get_to(o.m_UeId);
    o.m_UeIdIsSet = true;
  }
  if (j.find("groupId") != j.end()) {
    j.at("groupId").get_to(o.m_GroupId);
    o.m_GroupIdIsSet = true;
  }
  if (j.find("duration") != j.end()) {
    j.at("duration").get_to(o.m_Duration);
    o.m_DurationIsSet = true;
  }
  j.at("serviceId").get_to(o.m_ServiceId);
  j.at("appRequirement").get_to(o.m_AppRequirement);
  j.at("notifUri").get_to(o.m_NotifUri);
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::string ApplicationRequirementData::getUeId() const { return m_UeId; }
void ApplicationRequirementData::setUeId(std::string const &value) {
  m_UeId = value;
  m_UeIdIsSet = true;
}
bool ApplicationRequirementData::ueIdIsSet() const { return m_UeIdIsSet; }
void ApplicationRequirementData::unsetUeId() { m_UeIdIsSet = false; }
std::string ApplicationRequirementData::getGroupId() const { return m_GroupId; }
void ApplicationRequirementData::setGroupId(std::string const &value) {
  m_GroupId = value;
  m_GroupIdIsSet = true;
}
bool ApplicationRequirementData::groupIdIsSet() const { return m_GroupIdIsSet; }
void ApplicationRequirementData::unsetGroupId() { m_GroupIdIsSet = false; }
std::string ApplicationRequirementData::getDuration() const {
  return m_Duration;
}
void ApplicationRequirementData::setDuration(std::string const &value) {
  m_Duration = value;
  m_DurationIsSet = true;
}
bool ApplicationRequirementData::durationIsSet() const {
  return m_DurationIsSet;
}
void ApplicationRequirementData::unsetDuration() { m_DurationIsSet = false; }
std::string ApplicationRequirementData::getServiceId() const {
  return m_ServiceId;
}
void ApplicationRequirementData::setServiceId(std::string const &value) {
  m_ServiceId = value;
}
ApplicationRequirement ApplicationRequirementData::getAppRequirement() const {
  return m_AppRequirement;
}
void ApplicationRequirementData::setAppRequirement(
    ApplicationRequirement const &value) {
  m_AppRequirement = value;
}
std::string ApplicationRequirementData::getNotifUri() const {
  return m_NotifUri;
}
void ApplicationRequirementData::setNotifUri(std::string const &value) {
  m_NotifUri = value;
}
bool ApplicationRequirementData::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void ApplicationRequirementData::setRequestTestNotification(bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool ApplicationRequirementData::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void ApplicationRequirementData::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig ApplicationRequirementData::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void ApplicationRequirementData::setWebsockNotifConfig(
    WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool ApplicationRequirementData::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void ApplicationRequirementData::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
std::string ApplicationRequirementData::getSuppFeat() const {
  return m_SuppFeat;
}
void ApplicationRequirementData::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool ApplicationRequirementData::suppFeatIsSet() const {
  return m_SuppFeatIsSet;
}
void ApplicationRequirementData::unsetSuppFeat() { m_SuppFeatIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
