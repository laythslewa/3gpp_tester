/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AnalyticsExposureSubsc.h
 *
 * Represents an analytics exposure subscription.
 */

#ifndef AnalyticsExposureSubsc_H_
#define AnalyticsExposureSubsc_H_

#include "AnalyticsEventNotif.h"
#include "AnalyticsEventSubsc.h"
#include "AnalyticsFailureEventInfo.h"
#include "ReportingInformation.h"
#include "WebsockNotifConfig.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an analytics exposure subscription.
/// </summary>
class AnalyticsExposureSubsc {
public:
  AnalyticsExposureSubsc();
  virtual ~AnalyticsExposureSubsc();

  void validate();

  /////////////////////////////////////////////
  /// AnalyticsExposureSubsc members

  /// <summary>
  ///
  /// </summary>
  std::vector<AnalyticsEventSubsc> &getAnalyEventsSubs();
  void setAnalyEventsSubs(std::vector<AnalyticsEventSubsc> const &value);
  /// <summary>
  ///
  /// </summary>
  ReportingInformation getAnalyRepInfo() const;
  void setAnalyRepInfo(ReportingInformation const &value);
  bool analyRepInfoIsSet() const;
  void unsetAnalyRepInfo();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNotifUri() const;
  void setNotifUri(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getNotifId() const;
  void setNotifId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<AnalyticsEventNotif> &getEventNotifis();
  void setEventNotifis(std::vector<AnalyticsEventNotif> const &value);
  bool eventNotifisIsSet() const;
  void unsetEventNotifis();
  /// <summary>
  ///
  /// </summary>
  std::vector<AnalyticsFailureEventInfo> &getFailEventReports();
  void setFailEventReports(std::vector<AnalyticsFailureEventInfo> const &value);
  bool failEventReportsIsSet() const;
  void unsetFailEventReports();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const &value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  /// Set to true by the AF to request the NEF to send a test notification as
  /// defined in subclause 5.2.5.3 of 3GPP TS 29.122. Set to false or omitted
  /// otherwise.
  /// </summary>
  bool isRequestTestNotification() const;
  void setRequestTestNotification(bool const value);
  bool requestTestNotificationIsSet() const;
  void unsetRequestTestNotification();
  /// <summary>
  ///
  /// </summary>
  WebsockNotifConfig getWebsockNotifConfig() const;
  void setWebsockNotifConfig(WebsockNotifConfig const &value);
  bool websockNotifConfigIsSet() const;
  void unsetWebsockNotifConfig();

  friend void to_json(nlohmann::json &j, const AnalyticsExposureSubsc &o);
  friend void from_json(const nlohmann::json &j, AnalyticsExposureSubsc &o);

protected:
  std::vector<AnalyticsEventSubsc> m_AnalyEventsSubs;

  ReportingInformation m_AnalyRepInfo;
  bool m_AnalyRepInfoIsSet;
  std::string m_NotifUri;

  std::string m_NotifId;

  std::vector<AnalyticsEventNotif> m_EventNotifis;
  bool m_EventNotifisIsSet;
  std::vector<AnalyticsFailureEventInfo> m_FailEventReports;
  bool m_FailEventReportsIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
  std::string m_Self;
  bool m_SelfIsSet;
  bool m_RequestTestNotification;
  bool m_RequestTestNotificationIsSet;
  WebsockNotifConfig m_WebsockNotifConfig;
  bool m_WebsockNotifConfigIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AnalyticsExposureSubsc_H_ */
