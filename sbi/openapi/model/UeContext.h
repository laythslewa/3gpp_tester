/**
 * Namf_Communication
 * AMF Communication Service © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UeContext.h
 *
 * Represents an individual ueContext resource
 */

#ifndef UeContext_H_
#define UeContext_H_

#include "Ambr.h"
#include "AnalyticsSubscription.h"
#include "Area.h"
#include "CagData.h"
#include "CoreNetworkType.h"
#include "EcRestrictionDataWb.h"
#include "ExtAmfEventSubscription.h"
#include "ImmediateMdtConf.h"
#include "MmContext.h"
#include "MoExpDataCounter.h"
#include "PduSessionContext.h"
#include "PolicyReqTrigger.h"
#include "ProseContext.h"
#include "RatType.h"
#include "SbiBindingLevel.h"
#include "SeafData.h"
#include "ServiceAreaRestriction.h"
#include "SmallDataRateStatusInfo.h"
#include "TraceData.h"
#include "V2xContext.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an individual ueContext resource
/// </summary>
class UeContext {
public:
  UeContext();
  virtual ~UeContext();

  void validate();

  /////////////////////////////////////////////
  /// UeContext members

  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  ///
  /// </summary>
  bool isSupiUnauthInd() const;
  void setSupiUnauthInd(bool const value);
  bool supiUnauthIndIsSet() const;
  void unsetSupiUnauthInd();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getGpsiList();
  void setGpsiList(std::vector<std::string> const &value);
  bool gpsiListIsSet() const;
  void unsetGpsiList();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  /// Identifier of a group of NFs.
  /// </summary>
  std::string getUdmGroupId() const;
  void setUdmGroupId(std::string const &value);
  bool udmGroupIdIsSet() const;
  void unsetUdmGroupId();
  /// <summary>
  /// Identifier of a group of NFs.
  /// </summary>
  std::string getAusfGroupId() const;
  void setAusfGroupId(std::string const &value);
  bool ausfGroupIdIsSet() const;
  void unsetAusfGroupId();
  /// <summary>
  /// Identifier of a group of NFs.
  /// </summary>
  std::string getPcfGroupId() const;
  void setPcfGroupId(std::string const &value);
  bool pcfGroupIdIsSet() const;
  void unsetPcfGroupId();
  /// <summary>
  ///
  /// </summary>
  std::string getRoutingIndicator() const;
  void setRoutingIndicator(std::string const &value);
  bool routingIndicatorIsSet() const;
  void unsetRoutingIndicator();
  /// <summary>
  ///
  /// </summary>
  int32_t getHNwPubKeyId() const;
  void setHNwPubKeyId(int32_t const value);
  bool hNwPubKeyIdIsSet() const;
  void unsetHNwPubKeyId();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getGroupList();
  void setGroupList(std::vector<std::string> const &value);
  bool groupListIsSet() const;
  void unsetGroupList();
  /// <summary>
  /// string with format \&quot;bytes\&quot; as defined in OpenAPI
  /// </summary>
  std::string getDrxParameter() const;
  void setDrxParameter(std::string const &value);
  bool drxParameterIsSet() const;
  void unsetDrxParameter();
  /// <summary>
  /// Unsigned integer representing the \&quot;Subscriber Profile ID for
  /// RAT/Frequency Priority\&quot; as specified in 3GPP TS 36.413.
  /// </summary>
  int32_t getSubRfsp() const;
  void setSubRfsp(int32_t const value);
  bool subRfspIsSet() const;
  void unsetSubRfsp();
  /// <summary>
  /// Unsigned integer representing the \&quot;Subscriber Profile ID for
  /// RAT/Frequency Priority\&quot; as specified in 3GPP TS 36.413.
  /// </summary>
  int32_t getUsedRfsp() const;
  void setUsedRfsp(int32_t const value);
  bool usedRfspIsSet() const;
  void unsetUsedRfsp();
  /// <summary>
  ///
  /// </summary>
  Ambr getSubUeAmbr() const;
  void setSubUeAmbr(Ambr const &value);
  bool subUeAmbrIsSet() const;
  void unsetSubUeAmbr();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getSmsfId() const;
  void setSmsfId(std::string const &value);
  bool smsfIdIsSet() const;
  void unsetSmsfId();
  /// <summary>
  ///
  /// </summary>
  SeafData getSeafData() const;
  void setSeafData(SeafData const &value);
  bool seafDataIsSet() const;
  void unsetSeafData();
  /// <summary>
  /// string with format \&quot;bytes\&quot; as defined in OpenAPI
  /// </summary>
  std::string getR5gMmCapability() const;
  void setR5gMmCapability(std::string const &value);
  bool r5gMmCapabilityIsSet() const;
  void unsetr_5gMmCapability();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getPcfId() const;
  void setPcfId(std::string const &value);
  bool pcfIdIsSet() const;
  void unsetPcfId();
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getPcfSetId() const;
  void setPcfSetId(std::string const &value);
  bool pcfSetIdIsSet() const;
  void unsetPcfSetId();
  /// <summary>
  /// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted
  /// as the following string  \&quot; set&lt;Set ID&gt;.sn&lt;Service
  /// Name&gt;.nfi&lt;NF Instance
  /// ID&gt;.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.sn&lt;ServiceName&gt;.nfi&lt;NFInstanceID&gt;.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition)  &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition)  &lt;NID&gt; encoded as defined
  /// in clause 5.4.2 (\&quot;Nid\&quot; data type definition)
  /// &lt;NFInstanceId&gt; encoded as defined in clause 5.3.2
  /// &lt;ServiceName&gt; encoded as defined in 3GPP TS 29.510 &lt;Set ID&gt;
  /// encoded as a string of characters consisting of alphabetic characters (A-Z
  /// and a-z), digits (0-9) and/or the hyphen (-) and that shall end with
  /// either an alphabetic character or a digit.
  /// </summary>
  std::string getPcfAmpServiceSetId() const;
  void setPcfAmpServiceSetId(std::string const &value);
  bool pcfAmpServiceSetIdIsSet() const;
  void unsetPcfAmpServiceSetId();
  /// <summary>
  /// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted
  /// as the following string  \&quot; set&lt;Set ID&gt;.sn&lt;Service
  /// Name&gt;.nfi&lt;NF Instance
  /// ID&gt;.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.sn&lt;ServiceName&gt;.nfi&lt;NFInstanceID&gt;.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition)  &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition)  &lt;NID&gt; encoded as defined
  /// in clause 5.4.2 (\&quot;Nid\&quot; data type definition)
  /// &lt;NFInstanceId&gt; encoded as defined in clause 5.3.2
  /// &lt;ServiceName&gt; encoded as defined in 3GPP TS 29.510 &lt;Set ID&gt;
  /// encoded as a string of characters consisting of alphabetic characters (A-Z
  /// and a-z), digits (0-9) and/or the hyphen (-) and that shall end with
  /// either an alphabetic character or a digit.
  /// </summary>
  std::string getPcfUepServiceSetId() const;
  void setPcfUepServiceSetId(std::string const &value);
  bool pcfUepServiceSetIdIsSet() const;
  void unsetPcfUepServiceSetId();
  /// <summary>
  ///
  /// </summary>
  SbiBindingLevel getPcfBinding() const;
  void setPcfBinding(SbiBindingLevel const &value);
  bool pcfBindingIsSet() const;
  void unsetPcfBinding();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getPcfAmPolicyUri() const;
  void setPcfAmPolicyUri(std::string const &value);
  bool pcfAmPolicyUriIsSet() const;
  void unsetPcfAmPolicyUri();
  /// <summary>
  ///
  /// </summary>
  std::vector<PolicyReqTrigger> &getAmPolicyReqTriggerList();
  void setAmPolicyReqTriggerList(std::vector<PolicyReqTrigger> const &value);
  bool amPolicyReqTriggerListIsSet() const;
  void unsetAmPolicyReqTriggerList();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getPcfUePolicyUri() const;
  void setPcfUePolicyUri(std::string const &value);
  bool pcfUePolicyUriIsSet() const;
  void unsetPcfUePolicyUri();
  /// <summary>
  ///
  /// </summary>
  std::vector<PolicyReqTrigger> &getUePolicyReqTriggerList();
  void setUePolicyReqTriggerList(std::vector<PolicyReqTrigger> const &value);
  bool uePolicyReqTriggerListIsSet() const;
  void unsetUePolicyReqTriggerList();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getHpcfId() const;
  void setHpcfId(std::string const &value);
  bool hpcfIdIsSet() const;
  void unsetHpcfId();
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getHpcfSetId() const;
  void setHpcfSetId(std::string const &value);
  bool hpcfSetIdIsSet() const;
  void unsetHpcfSetId();
  /// <summary>
  ///
  /// </summary>
  std::vector<RatType> &getRestrictedRatList();
  void setRestrictedRatList(std::vector<RatType> const &value);
  bool restrictedRatListIsSet() const;
  void unsetRestrictedRatList();
  /// <summary>
  ///
  /// </summary>
  std::vector<Area> &getForbiddenAreaList();
  void setForbiddenAreaList(std::vector<Area> const &value);
  bool forbiddenAreaListIsSet() const;
  void unsetForbiddenAreaList();
  /// <summary>
  ///
  /// </summary>
  ServiceAreaRestriction getServiceAreaRestriction() const;
  void setServiceAreaRestriction(ServiceAreaRestriction const &value);
  bool serviceAreaRestrictionIsSet() const;
  void unsetServiceAreaRestriction();
  /// <summary>
  ///
  /// </summary>
  std::vector<CoreNetworkType> &getRestrictedCoreNwTypeList();
  void setRestrictedCoreNwTypeList(std::vector<CoreNetworkType> const &value);
  bool restrictedCoreNwTypeListIsSet() const;
  void unsetRestrictedCoreNwTypeList();
  /// <summary>
  ///
  /// </summary>
  std::vector<ExtAmfEventSubscription> &getEventSubscriptionList();
  void
  setEventSubscriptionList(std::vector<ExtAmfEventSubscription> const &value);
  bool eventSubscriptionListIsSet() const;
  void unsetEventSubscriptionList();
  /// <summary>
  ///
  /// </summary>
  std::vector<MmContext> &getMmContextList();
  void setMmContextList(std::vector<MmContext> const &value);
  bool mmContextListIsSet() const;
  void unsetMmContextList();
  /// <summary>
  ///
  /// </summary>
  std::vector<PduSessionContext> &getSessionContextList();
  void setSessionContextList(std::vector<PduSessionContext> const &value);
  bool sessionContextListIsSet() const;
  void unsetSessionContextList();
  /// <summary>
  ///
  /// </summary>
  TraceData getTraceData() const;
  void setTraceData(TraceData const &value);
  bool traceDataIsSet() const;
  void unsetTraceData();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getServiceGapExpiryTime() const;
  void setServiceGapExpiryTime(std::string const &value);
  bool serviceGapExpiryTimeIsSet() const;
  void unsetServiceGapExpiryTime();
  /// <summary>
  /// String representing the STN-SR as defined in clause 18.6 of 3GPP
  /// TS 23.003.
  /// </summary>
  std::string getStnSr() const;
  void setStnSr(std::string const &value);
  bool stnSrIsSet() const;
  void unsetStnSr();
  /// <summary>
  /// String representing the C-MSISDN as defined in clause 18.7 of 3GPP
  /// TS 23.003.
  /// </summary>
  std::string getCMsisdn() const;
  void setCMsisdn(std::string const &value);
  bool cMsisdnIsSet() const;
  void unsetCMsisdn();
  /// <summary>
  /// string with format \&quot;bytes\&quot; as defined in OpenAPI
  /// </summary>
  std::string getMsClassmark2() const;
  void setMsClassmark2(std::string const &value);
  bool msClassmark2IsSet() const;
  void unsetMsClassmark2();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getSupportedCodecList();
  void setSupportedCodecList(std::vector<std::string> const &value);
  bool supportedCodecListIsSet() const;
  void unsetSupportedCodecList();
  /// <summary>
  ///
  /// </summary>
  std::vector<SmallDataRateStatusInfo> &getSmallDataRateStatusInfos();
  void setSmallDataRateStatusInfos(
      std::vector<SmallDataRateStatusInfo> const &value);
  bool smallDataRateStatusInfosIsSet() const;
  void unsetSmallDataRateStatusInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<RatType> &getRestrictedPrimaryRatList();
  void setRestrictedPrimaryRatList(std::vector<RatType> const &value);
  bool restrictedPrimaryRatListIsSet() const;
  void unsetRestrictedPrimaryRatList();
  /// <summary>
  ///
  /// </summary>
  std::vector<RatType> &getRestrictedSecondaryRatList();
  void setRestrictedSecondaryRatList(std::vector<RatType> const &value);
  bool restrictedSecondaryRatListIsSet() const;
  void unsetRestrictedSecondaryRatList();
  /// <summary>
  ///
  /// </summary>
  V2xContext getV2xContext() const;
  void setV2xContext(V2xContext const &value);
  bool v2xContextIsSet() const;
  void unsetV2xContext();
  /// <summary>
  ///
  /// </summary>
  bool isLteCatMInd() const;
  void setLteCatMInd(bool const value);
  bool lteCatMIndIsSet() const;
  void unsetLteCatMInd();
  /// <summary>
  ///
  /// </summary>
  MoExpDataCounter getMoExpDataCounter() const;
  void setMoExpDataCounter(MoExpDataCounter const &value);
  bool moExpDataCounterIsSet() const;
  void unsetMoExpDataCounter();
  /// <summary>
  ///
  /// </summary>
  CagData getCagData() const;
  void setCagData(CagData const &value);
  bool cagDataIsSet() const;
  void unsetCagData();
  /// <summary>
  ///
  /// </summary>
  bool isManagementMdtInd() const;
  void setManagementMdtInd(bool const value);
  bool managementMdtIndIsSet() const;
  void unsetManagementMdtInd();
  /// <summary>
  ///
  /// </summary>
  ImmediateMdtConf getImmediateMdtConf() const;
  void setImmediateMdtConf(ImmediateMdtConf const &value);
  bool immediateMdtConfIsSet() const;
  void unsetImmediateMdtConf();
  /// <summary>
  ///
  /// </summary>
  EcRestrictionDataWb getEcRestrictionDataWb() const;
  void setEcRestrictionDataWb(EcRestrictionDataWb const &value);
  bool ecRestrictionDataWbIsSet() const;
  void unsetEcRestrictionDataWb();
  /// <summary>
  ///
  /// </summary>
  bool isEcRestrictionDataNb() const;
  void setEcRestrictionDataNb(bool const value);
  bool ecRestrictionDataNbIsSet() const;
  void unsetEcRestrictionDataNb();
  /// <summary>
  ///
  /// </summary>
  bool isIabOperationAllowed() const;
  void setIabOperationAllowed(bool const value);
  bool iabOperationAllowedIsSet() const;
  void unsetIabOperationAllowed();
  /// <summary>
  ///
  /// </summary>
  ProseContext getProseContext() const;
  void setProseContext(ProseContext const &value);
  bool proseContextIsSet() const;
  void unsetProseContext();
  /// <summary>
  ///
  /// </summary>
  std::vector<AnalyticsSubscription> &getAnalyticsSubscriptionList();
  void
  setAnalyticsSubscriptionList(std::vector<AnalyticsSubscription> const &value);
  bool analyticsSubscriptionListIsSet() const;
  void unsetAnalyticsSubscriptionList();

  friend void to_json(nlohmann::json &j, const UeContext &o);
  friend void from_json(const nlohmann::json &j, UeContext &o);

protected:
  std::string m_Supi;
  bool m_SupiIsSet;
  bool m_SupiUnauthInd;
  bool m_SupiUnauthIndIsSet;
  std::vector<std::string> m_GpsiList;
  bool m_GpsiListIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  std::string m_UdmGroupId;
  bool m_UdmGroupIdIsSet;
  std::string m_AusfGroupId;
  bool m_AusfGroupIdIsSet;
  std::string m_PcfGroupId;
  bool m_PcfGroupIdIsSet;
  std::string m_RoutingIndicator;
  bool m_RoutingIndicatorIsSet;
  int32_t m_HNwPubKeyId;
  bool m_HNwPubKeyIdIsSet;
  std::vector<std::string> m_GroupList;
  bool m_GroupListIsSet;
  std::string m_DrxParameter;
  bool m_DrxParameterIsSet;
  int32_t m_SubRfsp;
  bool m_SubRfspIsSet;
  int32_t m_UsedRfsp;
  bool m_UsedRfspIsSet;
  Ambr m_SubUeAmbr;
  bool m_SubUeAmbrIsSet;
  std::string m_SmsfId;
  bool m_SmsfIdIsSet;
  SeafData m_SeafData;
  bool m_SeafDataIsSet;
  std::string m_r_5gMmCapability;
  bool m_r_5gMmCapabilityIsSet;
  std::string m_PcfId;
  bool m_PcfIdIsSet;
  std::string m_PcfSetId;
  bool m_PcfSetIdIsSet;
  std::string m_PcfAmpServiceSetId;
  bool m_PcfAmpServiceSetIdIsSet;
  std::string m_PcfUepServiceSetId;
  bool m_PcfUepServiceSetIdIsSet;
  SbiBindingLevel m_PcfBinding;
  bool m_PcfBindingIsSet;
  std::string m_PcfAmPolicyUri;
  bool m_PcfAmPolicyUriIsSet;
  std::vector<PolicyReqTrigger> m_AmPolicyReqTriggerList;
  bool m_AmPolicyReqTriggerListIsSet;
  std::string m_PcfUePolicyUri;
  bool m_PcfUePolicyUriIsSet;
  std::vector<PolicyReqTrigger> m_UePolicyReqTriggerList;
  bool m_UePolicyReqTriggerListIsSet;
  std::string m_HpcfId;
  bool m_HpcfIdIsSet;
  std::string m_HpcfSetId;
  bool m_HpcfSetIdIsSet;
  std::vector<RatType> m_RestrictedRatList;
  bool m_RestrictedRatListIsSet;
  std::vector<Area> m_ForbiddenAreaList;
  bool m_ForbiddenAreaListIsSet;
  ServiceAreaRestriction m_ServiceAreaRestriction;
  bool m_ServiceAreaRestrictionIsSet;
  std::vector<CoreNetworkType> m_RestrictedCoreNwTypeList;
  bool m_RestrictedCoreNwTypeListIsSet;
  std::vector<ExtAmfEventSubscription> m_EventSubscriptionList;
  bool m_EventSubscriptionListIsSet;
  std::vector<MmContext> m_MmContextList;
  bool m_MmContextListIsSet;
  std::vector<PduSessionContext> m_SessionContextList;
  bool m_SessionContextListIsSet;
  TraceData m_TraceData;
  bool m_TraceDataIsSet;
  std::string m_ServiceGapExpiryTime;
  bool m_ServiceGapExpiryTimeIsSet;
  std::string m_StnSr;
  bool m_StnSrIsSet;
  std::string m_CMsisdn;
  bool m_CMsisdnIsSet;
  std::string m_MsClassmark2;
  bool m_MsClassmark2IsSet;
  std::vector<std::string> m_SupportedCodecList;
  bool m_SupportedCodecListIsSet;
  std::vector<SmallDataRateStatusInfo> m_SmallDataRateStatusInfos;
  bool m_SmallDataRateStatusInfosIsSet;
  std::vector<RatType> m_RestrictedPrimaryRatList;
  bool m_RestrictedPrimaryRatListIsSet;
  std::vector<RatType> m_RestrictedSecondaryRatList;
  bool m_RestrictedSecondaryRatListIsSet;
  V2xContext m_V2xContext;
  bool m_V2xContextIsSet;
  bool m_LteCatMInd;
  bool m_LteCatMIndIsSet;
  MoExpDataCounter m_MoExpDataCounter;
  bool m_MoExpDataCounterIsSet;
  CagData m_CagData;
  bool m_CagDataIsSet;
  bool m_ManagementMdtInd;
  bool m_ManagementMdtIndIsSet;
  ImmediateMdtConf m_ImmediateMdtConf;
  bool m_ImmediateMdtConfIsSet;
  EcRestrictionDataWb m_EcRestrictionDataWb;
  bool m_EcRestrictionDataWbIsSet;
  bool m_EcRestrictionDataNb;
  bool m_EcRestrictionDataNbIsSet;
  bool m_IabOperationAllowed;
  bool m_IabOperationAllowedIsSet;
  ProseContext m_ProseContext;
  bool m_ProseContextIsSet;
  std::vector<AnalyticsSubscription> m_AnalyticsSubscriptionList;
  bool m_AnalyticsSubscriptionListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UeContext_H_ */
