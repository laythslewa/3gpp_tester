/**
 * VAE_DynamicGroup
 * VAE_Dynamic_Group Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualGroupConfigurationDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

IndividualGroupConfigurationDocumentApi::
    IndividualGroupConfigurationDocumentApi(
        std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void IndividualGroupConfigurationDocumentApi::init() { setupRoutes(); }

void IndividualGroupConfigurationDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Delete(*router, base + "/group-configurations/:configId",
                 Routes::bind(&IndividualGroupConfigurationDocumentApi::
                                  delete_group_configuration_handler,
                              this));
  Routes::Get(*router, base + "/group-configurations/:configId",
              Routes::bind(&IndividualGroupConfigurationDocumentApi::
                               read_dynamic_group_configuration_handler,
                           this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &IndividualGroupConfigurationDocumentApi::
          individual_group_configuration_document_api_default_handler,
      this));
}

void IndividualGroupConfigurationDocumentApi::
    delete_group_configuration_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto configId = request.param(":configId").as<std::string>();

  try {
    this->delete_group_configuration(configId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualGroupConfigurationDocumentApi::
    read_dynamic_group_configuration_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto configId = request.param(":configId").as<std::string>();

  try {
    this->read_dynamic_group_configuration(configId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void IndividualGroupConfigurationDocumentApi::
    individual_group_configuration_document_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
