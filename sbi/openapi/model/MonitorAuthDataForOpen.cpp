/**
 * N5g-ddnmf_Discovery API
 * N5g-ddnmf_Discovery Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MonitorAuthDataForOpen.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

MonitorAuthDataForOpen::MonitorAuthDataForOpen() {
  m_ProseAppCodesIsSet = false;
  m_ProseAppPrefix = "";
  m_ProseAppPrefixIsSet = false;
  m_Ttl = 0;
}

MonitorAuthDataForOpen::~MonitorAuthDataForOpen() {}

void MonitorAuthDataForOpen::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const MonitorAuthDataForOpen &o) {
  j = nlohmann::json();
  if (o.proseAppCodesIsSet() || !o.m_ProseAppCodes.empty())
    j["proseAppCodes"] = o.m_ProseAppCodes;
  if (o.proseAppPrefixIsSet())
    j["proseAppPrefix"] = o.m_ProseAppPrefix;
  j["proseAppMasks"] = o.m_ProseAppMasks;
  j["ttl"] = o.m_Ttl;
}

void from_json(const nlohmann::json &j, MonitorAuthDataForOpen &o) {
  if (j.find("proseAppCodes") != j.end()) {
    j.at("proseAppCodes").get_to(o.m_ProseAppCodes);
    o.m_ProseAppCodesIsSet = true;
  }
  if (j.find("proseAppPrefix") != j.end()) {
    j.at("proseAppPrefix").get_to(o.m_ProseAppPrefix);
    o.m_ProseAppPrefixIsSet = true;
  }
  j.at("proseAppMasks").get_to(o.m_ProseAppMasks);
  j.at("ttl").get_to(o.m_Ttl);
}

std::vector<std::string> &MonitorAuthDataForOpen::getProseAppCodes() {
  return m_ProseAppCodes;
}
void MonitorAuthDataForOpen::setProseAppCodes(
    std::vector<std::string> const &value) {
  m_ProseAppCodes = value;
  m_ProseAppCodesIsSet = true;
}
bool MonitorAuthDataForOpen::proseAppCodesIsSet() const {
  return m_ProseAppCodesIsSet;
}
void MonitorAuthDataForOpen::unsetProseAppCodes() {
  m_ProseAppCodesIsSet = false;
}
std::string MonitorAuthDataForOpen::getProseAppPrefix() const {
  return m_ProseAppPrefix;
}
void MonitorAuthDataForOpen::setProseAppPrefix(std::string const &value) {
  m_ProseAppPrefix = value;
  m_ProseAppPrefixIsSet = true;
}
bool MonitorAuthDataForOpen::proseAppPrefixIsSet() const {
  return m_ProseAppPrefixIsSet;
}
void MonitorAuthDataForOpen::unsetProseAppPrefix() {
  m_ProseAppPrefixIsSet = false;
}
std::vector<std::string> &MonitorAuthDataForOpen::getProseAppMasks() {
  return m_ProseAppMasks;
}
void MonitorAuthDataForOpen::setProseAppMasks(
    std::vector<std::string> const &value) {
  m_ProseAppMasks = value;
}
int32_t MonitorAuthDataForOpen::getTtl() const { return m_Ttl; }
void MonitorAuthDataForOpen::setTtl(int32_t const value) { m_Ttl = value; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
