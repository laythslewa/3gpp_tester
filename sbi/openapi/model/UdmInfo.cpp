/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UdmInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UdmInfo::UdmInfo() {
  m_GroupId = "";
  m_GroupIdIsSet = false;
  m_SupiRangesIsSet = false;
  m_GpsiRangesIsSet = false;
  m_ExternalGroupIdentifiersRangesIsSet = false;
  m_RoutingIndicatorsIsSet = false;
  m_InternalGroupIdentifiersRangesIsSet = false;
  m_SuciInfosIsSet = false;
}

UdmInfo::~UdmInfo() {}

void UdmInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UdmInfo &o) {
  j = nlohmann::json();
  if (o.groupIdIsSet())
    j["groupId"] = o.m_GroupId;
  if (o.supiRangesIsSet() || !o.m_SupiRanges.empty())
    j["supiRanges"] = o.m_SupiRanges;
  if (o.gpsiRangesIsSet() || !o.m_GpsiRanges.empty())
    j["gpsiRanges"] = o.m_GpsiRanges;
  if (o.externalGroupIdentifiersRangesIsSet() ||
      !o.m_ExternalGroupIdentifiersRanges.empty())
    j["externalGroupIdentifiersRanges"] = o.m_ExternalGroupIdentifiersRanges;
  if (o.routingIndicatorsIsSet() || !o.m_RoutingIndicators.empty())
    j["routingIndicators"] = o.m_RoutingIndicators;
  if (o.internalGroupIdentifiersRangesIsSet() ||
      !o.m_InternalGroupIdentifiersRanges.empty())
    j["internalGroupIdentifiersRanges"] = o.m_InternalGroupIdentifiersRanges;
  if (o.suciInfosIsSet() || !o.m_SuciInfos.empty())
    j["suciInfos"] = o.m_SuciInfos;
}

void from_json(const nlohmann::json &j, UdmInfo &o) {
  if (j.find("groupId") != j.end()) {
    j.at("groupId").get_to(o.m_GroupId);
    o.m_GroupIdIsSet = true;
  }
  if (j.find("supiRanges") != j.end()) {
    j.at("supiRanges").get_to(o.m_SupiRanges);
    o.m_SupiRangesIsSet = true;
  }
  if (j.find("gpsiRanges") != j.end()) {
    j.at("gpsiRanges").get_to(o.m_GpsiRanges);
    o.m_GpsiRangesIsSet = true;
  }
  if (j.find("externalGroupIdentifiersRanges") != j.end()) {
    j.at("externalGroupIdentifiersRanges")
        .get_to(o.m_ExternalGroupIdentifiersRanges);
    o.m_ExternalGroupIdentifiersRangesIsSet = true;
  }
  if (j.find("routingIndicators") != j.end()) {
    j.at("routingIndicators").get_to(o.m_RoutingIndicators);
    o.m_RoutingIndicatorsIsSet = true;
  }
  if (j.find("internalGroupIdentifiersRanges") != j.end()) {
    j.at("internalGroupIdentifiersRanges")
        .get_to(o.m_InternalGroupIdentifiersRanges);
    o.m_InternalGroupIdentifiersRangesIsSet = true;
  }
  if (j.find("suciInfos") != j.end()) {
    j.at("suciInfos").get_to(o.m_SuciInfos);
    o.m_SuciInfosIsSet = true;
  }
}

std::string UdmInfo::getGroupId() const { return m_GroupId; }
void UdmInfo::setGroupId(std::string const &value) {
  m_GroupId = value;
  m_GroupIdIsSet = true;
}
bool UdmInfo::groupIdIsSet() const { return m_GroupIdIsSet; }
void UdmInfo::unsetGroupId() { m_GroupIdIsSet = false; }
std::vector<SupiRange> &UdmInfo::getSupiRanges() { return m_SupiRanges; }
void UdmInfo::setSupiRanges(std::vector<SupiRange> const &value) {
  m_SupiRanges = value;
  m_SupiRangesIsSet = true;
}
bool UdmInfo::supiRangesIsSet() const { return m_SupiRangesIsSet; }
void UdmInfo::unsetSupiRanges() { m_SupiRangesIsSet = false; }
std::vector<IdentityRange> &UdmInfo::getGpsiRanges() { return m_GpsiRanges; }
void UdmInfo::setGpsiRanges(std::vector<IdentityRange> const &value) {
  m_GpsiRanges = value;
  m_GpsiRangesIsSet = true;
}
bool UdmInfo::gpsiRangesIsSet() const { return m_GpsiRangesIsSet; }
void UdmInfo::unsetGpsiRanges() { m_GpsiRangesIsSet = false; }
std::vector<IdentityRange> &UdmInfo::getExternalGroupIdentifiersRanges() {
  return m_ExternalGroupIdentifiersRanges;
}
void UdmInfo::setExternalGroupIdentifiersRanges(
    std::vector<IdentityRange> const &value) {
  m_ExternalGroupIdentifiersRanges = value;
  m_ExternalGroupIdentifiersRangesIsSet = true;
}
bool UdmInfo::externalGroupIdentifiersRangesIsSet() const {
  return m_ExternalGroupIdentifiersRangesIsSet;
}
void UdmInfo::unsetExternalGroupIdentifiersRanges() {
  m_ExternalGroupIdentifiersRangesIsSet = false;
}
std::vector<std::string> &UdmInfo::getRoutingIndicators() {
  return m_RoutingIndicators;
}
void UdmInfo::setRoutingIndicators(std::vector<std::string> const &value) {
  m_RoutingIndicators = value;
  m_RoutingIndicatorsIsSet = true;
}
bool UdmInfo::routingIndicatorsIsSet() const {
  return m_RoutingIndicatorsIsSet;
}
void UdmInfo::unsetRoutingIndicators() { m_RoutingIndicatorsIsSet = false; }
std::vector<InternalGroupIdRange> &
UdmInfo::getInternalGroupIdentifiersRanges() {
  return m_InternalGroupIdentifiersRanges;
}
void UdmInfo::setInternalGroupIdentifiersRanges(
    std::vector<InternalGroupIdRange> const &value) {
  m_InternalGroupIdentifiersRanges = value;
  m_InternalGroupIdentifiersRangesIsSet = true;
}
bool UdmInfo::internalGroupIdentifiersRangesIsSet() const {
  return m_InternalGroupIdentifiersRangesIsSet;
}
void UdmInfo::unsetInternalGroupIdentifiersRanges() {
  m_InternalGroupIdentifiersRangesIsSet = false;
}
std::vector<SuciInfo> &UdmInfo::getSuciInfos() { return m_SuciInfos; }
void UdmInfo::setSuciInfos(std::vector<SuciInfo> const &value) {
  m_SuciInfos = value;
  m_SuciInfosIsSet = true;
}
bool UdmInfo::suciInfosIsSet() const { return m_SuciInfosIsSet; }
void UdmInfo::unsetSuciInfos() { m_SuciInfosIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
