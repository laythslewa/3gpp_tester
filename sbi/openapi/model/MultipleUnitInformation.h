/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MultipleUnitInformation.h
 *
 *
 */

#ifndef MultipleUnitInformation_H_
#define MultipleUnitInformation_H_

#include "FinalUnitIndication.h"
#include "GrantedUnit.h"
#include "ResultCode.h"
#include "Trigger.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class MultipleUnitInformation {
public:
  MultipleUnitInformation();
  virtual ~MultipleUnitInformation();

  void validate();

  /////////////////////////////////////////////
  /// MultipleUnitInformation members

  /// <summary>
  ///
  /// </summary>
  ResultCode getResultCode() const;
  void setResultCode(ResultCode const &value);
  bool resultCodeIsSet() const;
  void unsetResultCode();
  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 32-bit integer.
  /// </summary>
  int32_t getRatingGroup() const;
  void setRatingGroup(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  GrantedUnit getGrantedUnit() const;
  void setGrantedUnit(GrantedUnit const &value);
  bool grantedUnitIsSet() const;
  void unsetGrantedUnit();
  /// <summary>
  ///
  /// </summary>
  std::vector<Trigger> &getTriggers();
  void setTriggers(std::vector<Trigger> const &value);
  bool triggersIsSet() const;
  void unsetTriggers();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getValidityTime() const;
  void setValidityTime(int32_t const value);
  bool validityTimeIsSet() const;
  void unsetValidityTime();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getQuotaHoldingTime() const;
  void setQuotaHoldingTime(int32_t const value);
  bool quotaHoldingTimeIsSet() const;
  void unsetQuotaHoldingTime();
  /// <summary>
  ///
  /// </summary>
  FinalUnitIndication getFinalUnitIndication() const;
  void setFinalUnitIndication(FinalUnitIndication const &value);
  bool finalUnitIndicationIsSet() const;
  void unsetFinalUnitIndication();
  /// <summary>
  ///
  /// </summary>
  int32_t getTimeQuotaThreshold() const;
  void setTimeQuotaThreshold(int32_t const value);
  bool timeQuotaThresholdIsSet() const;
  void unsetTimeQuotaThreshold();
  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 64-bit integer.
  /// </summary>
  int32_t getVolumeQuotaThreshold() const;
  void setVolumeQuotaThreshold(int32_t const value);
  bool volumeQuotaThresholdIsSet() const;
  void unsetVolumeQuotaThreshold();
  /// <summary>
  ///
  /// </summary>
  int32_t getUnitQuotaThreshold() const;
  void setUnitQuotaThreshold(int32_t const value);
  bool unitQuotaThresholdIsSet() const;
  void unsetUnitQuotaThreshold();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getUPFID() const;
  void setUPFID(std::string const &value);
  bool uPFIDIsSet() const;
  void unsetUPFID();

  friend void to_json(nlohmann::json &j, const MultipleUnitInformation &o);
  friend void from_json(const nlohmann::json &j, MultipleUnitInformation &o);

protected:
  ResultCode m_ResultCode;
  bool m_ResultCodeIsSet;
  int32_t m_RatingGroup;

  GrantedUnit m_GrantedUnit;
  bool m_GrantedUnitIsSet;
  std::vector<Trigger> m_Triggers;
  bool m_TriggersIsSet;
  int32_t m_ValidityTime;
  bool m_ValidityTimeIsSet;
  int32_t m_QuotaHoldingTime;
  bool m_QuotaHoldingTimeIsSet;
  FinalUnitIndication m_FinalUnitIndication;
  bool m_FinalUnitIndicationIsSet;
  int32_t m_TimeQuotaThreshold;
  bool m_TimeQuotaThresholdIsSet;
  int32_t m_VolumeQuotaThreshold;
  bool m_VolumeQuotaThresholdIsSet;
  int32_t m_UnitQuotaThreshold;
  bool m_UnitQuotaThresholdIsSet;
  std::string m_UPFID;
  bool m_UPFIDIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* MultipleUnitInformation_H_ */
