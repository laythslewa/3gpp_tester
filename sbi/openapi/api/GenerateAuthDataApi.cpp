/**
 * Nhss_imsUEAU
 * Nhss UE Authentication Service for IMS. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "GenerateAuthDataApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

GenerateAuthDataApi::GenerateAuthDataApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void GenerateAuthDataApi::init() { setupRoutes(); }

void GenerateAuthDataApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Post(
      *router, base + "/:impi/security-information/generate-sip-auth-data",
      Routes::bind(&GenerateAuthDataApi::generate_sip_auth_data_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &GenerateAuthDataApi::generate_auth_data_api_default_handler, this));
}

void GenerateAuthDataApi::generate_sip_auth_data_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto impi = request.param(":impi").as<std::string>();

  // Getting the body param

  SipAuthenticationInfoRequest sipAuthenticationInfoRequest;

  try {
    nlohmann::json::parse(request.body()).get_to(sipAuthenticationInfoRequest);
    this->generate_sip_auth_data(impi, sipAuthenticationInfoRequest, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void GenerateAuthDataApi::generate_auth_data_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
