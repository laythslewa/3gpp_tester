/**
 * Nnwdaf_AnalyticsInfo
 * Nnwdaf_AnalyticsInfo Service API. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EventFilter.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EventFilter::EventFilter() {
  m_AnySlice = false;
  m_AnySliceIsSet = false;
  m_SnssaisIsSet = false;
  m_AppIdsIsSet = false;
  m_DnnsIsSet = false;
  m_DnaisIsSet = false;
  m_NetworkAreaIsSet = false;
  m_NfInstanceIdsIsSet = false;
  m_NfSetIdsIsSet = false;
  m_NfTypesIsSet = false;
  m_NsiIdInfosIsSet = false;
  m_QosRequIsSet = false;
  m_NwPerfTypesIsSet = false;
  m_BwRequsIsSet = false;
  m_ExcepIdsIsSet = false;
  m_ExptAnaTypeIsSet = false;
  m_ExptUeBehavIsSet = false;
}

EventFilter::~EventFilter() {}

void EventFilter::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EventFilter &o) {
  j = nlohmann::json();
  if (o.anySliceIsSet())
    j["anySlice"] = o.m_AnySlice;
  if (o.snssaisIsSet() || !o.m_Snssais.empty())
    j["snssais"] = o.m_Snssais;
  if (o.appIdsIsSet() || !o.m_AppIds.empty())
    j["appIds"] = o.m_AppIds;
  if (o.dnnsIsSet() || !o.m_Dnns.empty())
    j["dnns"] = o.m_Dnns;
  if (o.dnaisIsSet() || !o.m_Dnais.empty())
    j["dnais"] = o.m_Dnais;
  if (o.networkAreaIsSet())
    j["networkArea"] = o.m_NetworkArea;
  if (o.nfInstanceIdsIsSet() || !o.m_NfInstanceIds.empty())
    j["nfInstanceIds"] = o.m_NfInstanceIds;
  if (o.nfSetIdsIsSet() || !o.m_NfSetIds.empty())
    j["nfSetIds"] = o.m_NfSetIds;
  if (o.nfTypesIsSet() || !o.m_NfTypes.empty())
    j["nfTypes"] = o.m_NfTypes;
  if (o.nsiIdInfosIsSet() || !o.m_NsiIdInfos.empty())
    j["nsiIdInfos"] = o.m_NsiIdInfos;
  if (o.qosRequIsSet())
    j["qosRequ"] = o.m_QosRequ;
  if (o.nwPerfTypesIsSet() || !o.m_NwPerfTypes.empty())
    j["nwPerfTypes"] = o.m_NwPerfTypes;
  if (o.bwRequsIsSet() || !o.m_BwRequs.empty())
    j["bwRequs"] = o.m_BwRequs;
  if (o.excepIdsIsSet() || !o.m_ExcepIds.empty())
    j["excepIds"] = o.m_ExcepIds;
  if (o.exptAnaTypeIsSet())
    j["exptAnaType"] = o.m_ExptAnaType;
  if (o.exptUeBehavIsSet())
    j["exptUeBehav"] = o.m_ExptUeBehav;
}

void from_json(const nlohmann::json &j, EventFilter &o) {
  if (j.find("anySlice") != j.end()) {
    j.at("anySlice").get_to(o.m_AnySlice);
    o.m_AnySliceIsSet = true;
  }
  if (j.find("snssais") != j.end()) {
    j.at("snssais").get_to(o.m_Snssais);
    o.m_SnssaisIsSet = true;
  }
  if (j.find("appIds") != j.end()) {
    j.at("appIds").get_to(o.m_AppIds);
    o.m_AppIdsIsSet = true;
  }
  if (j.find("dnns") != j.end()) {
    j.at("dnns").get_to(o.m_Dnns);
    o.m_DnnsIsSet = true;
  }
  if (j.find("dnais") != j.end()) {
    j.at("dnais").get_to(o.m_Dnais);
    o.m_DnaisIsSet = true;
  }
  if (j.find("networkArea") != j.end()) {
    j.at("networkArea").get_to(o.m_NetworkArea);
    o.m_NetworkAreaIsSet = true;
  }
  if (j.find("nfInstanceIds") != j.end()) {
    j.at("nfInstanceIds").get_to(o.m_NfInstanceIds);
    o.m_NfInstanceIdsIsSet = true;
  }
  if (j.find("nfSetIds") != j.end()) {
    j.at("nfSetIds").get_to(o.m_NfSetIds);
    o.m_NfSetIdsIsSet = true;
  }
  if (j.find("nfTypes") != j.end()) {
    j.at("nfTypes").get_to(o.m_NfTypes);
    o.m_NfTypesIsSet = true;
  }
  if (j.find("nsiIdInfos") != j.end()) {
    j.at("nsiIdInfos").get_to(o.m_NsiIdInfos);
    o.m_NsiIdInfosIsSet = true;
  }
  if (j.find("qosRequ") != j.end()) {
    j.at("qosRequ").get_to(o.m_QosRequ);
    o.m_QosRequIsSet = true;
  }
  if (j.find("nwPerfTypes") != j.end()) {
    j.at("nwPerfTypes").get_to(o.m_NwPerfTypes);
    o.m_NwPerfTypesIsSet = true;
  }
  if (j.find("bwRequs") != j.end()) {
    j.at("bwRequs").get_to(o.m_BwRequs);
    o.m_BwRequsIsSet = true;
  }
  if (j.find("excepIds") != j.end()) {
    j.at("excepIds").get_to(o.m_ExcepIds);
    o.m_ExcepIdsIsSet = true;
  }
  if (j.find("exptAnaType") != j.end()) {
    j.at("exptAnaType").get_to(o.m_ExptAnaType);
    o.m_ExptAnaTypeIsSet = true;
  }
  if (j.find("exptUeBehav") != j.end()) {
    j.at("exptUeBehav").get_to(o.m_ExptUeBehav);
    o.m_ExptUeBehavIsSet = true;
  }
}

bool EventFilter::isAnySlice() const { return m_AnySlice; }
void EventFilter::setAnySlice(bool const value) {
  m_AnySlice = value;
  m_AnySliceIsSet = true;
}
bool EventFilter::anySliceIsSet() const { return m_AnySliceIsSet; }
void EventFilter::unsetAnySlice() { m_AnySliceIsSet = false; }
std::vector<Snssai> &EventFilter::getSnssais() { return m_Snssais; }
void EventFilter::setSnssais(std::vector<Snssai> const &value) {
  m_Snssais = value;
  m_SnssaisIsSet = true;
}
bool EventFilter::snssaisIsSet() const { return m_SnssaisIsSet; }
void EventFilter::unsetSnssais() { m_SnssaisIsSet = false; }
std::vector<std::string> &EventFilter::getAppIds() { return m_AppIds; }
void EventFilter::setAppIds(std::vector<std::string> const &value) {
  m_AppIds = value;
  m_AppIdsIsSet = true;
}
bool EventFilter::appIdsIsSet() const { return m_AppIdsIsSet; }
void EventFilter::unsetAppIds() { m_AppIdsIsSet = false; }
std::vector<std::string> &EventFilter::getDnns() { return m_Dnns; }
void EventFilter::setDnns(std::vector<std::string> const &value) {
  m_Dnns = value;
  m_DnnsIsSet = true;
}
bool EventFilter::dnnsIsSet() const { return m_DnnsIsSet; }
void EventFilter::unsetDnns() { m_DnnsIsSet = false; }
std::vector<std::string> &EventFilter::getDnais() { return m_Dnais; }
void EventFilter::setDnais(std::vector<std::string> const &value) {
  m_Dnais = value;
  m_DnaisIsSet = true;
}
bool EventFilter::dnaisIsSet() const { return m_DnaisIsSet; }
void EventFilter::unsetDnais() { m_DnaisIsSet = false; }
NetworkAreaInfo EventFilter::getNetworkArea() const { return m_NetworkArea; }
void EventFilter::setNetworkArea(NetworkAreaInfo const &value) {
  m_NetworkArea = value;
  m_NetworkAreaIsSet = true;
}
bool EventFilter::networkAreaIsSet() const { return m_NetworkAreaIsSet; }
void EventFilter::unsetNetworkArea() { m_NetworkAreaIsSet = false; }
std::vector<std::string> &EventFilter::getNfInstanceIds() {
  return m_NfInstanceIds;
}
void EventFilter::setNfInstanceIds(std::vector<std::string> const &value) {
  m_NfInstanceIds = value;
  m_NfInstanceIdsIsSet = true;
}
bool EventFilter::nfInstanceIdsIsSet() const { return m_NfInstanceIdsIsSet; }
void EventFilter::unsetNfInstanceIds() { m_NfInstanceIdsIsSet = false; }
std::vector<std::string> &EventFilter::getNfSetIds() { return m_NfSetIds; }
void EventFilter::setNfSetIds(std::vector<std::string> const &value) {
  m_NfSetIds = value;
  m_NfSetIdsIsSet = true;
}
bool EventFilter::nfSetIdsIsSet() const { return m_NfSetIdsIsSet; }
void EventFilter::unsetNfSetIds() { m_NfSetIdsIsSet = false; }
std::vector<NFType> &EventFilter::getNfTypes() { return m_NfTypes; }
void EventFilter::setNfTypes(std::vector<NFType> const &value) {
  m_NfTypes = value;
  m_NfTypesIsSet = true;
}
bool EventFilter::nfTypesIsSet() const { return m_NfTypesIsSet; }
void EventFilter::unsetNfTypes() { m_NfTypesIsSet = false; }
std::vector<NsiIdInfo> &EventFilter::getNsiIdInfos() { return m_NsiIdInfos; }
void EventFilter::setNsiIdInfos(std::vector<NsiIdInfo> const &value) {
  m_NsiIdInfos = value;
  m_NsiIdInfosIsSet = true;
}
bool EventFilter::nsiIdInfosIsSet() const { return m_NsiIdInfosIsSet; }
void EventFilter::unsetNsiIdInfos() { m_NsiIdInfosIsSet = false; }
QosRequirement EventFilter::getQosRequ() const { return m_QosRequ; }
void EventFilter::setQosRequ(QosRequirement const &value) {
  m_QosRequ = value;
  m_QosRequIsSet = true;
}
bool EventFilter::qosRequIsSet() const { return m_QosRequIsSet; }
void EventFilter::unsetQosRequ() { m_QosRequIsSet = false; }
std::vector<NetworkPerfType> &EventFilter::getNwPerfTypes() {
  return m_NwPerfTypes;
}
void EventFilter::setNwPerfTypes(std::vector<NetworkPerfType> const &value) {
  m_NwPerfTypes = value;
  m_NwPerfTypesIsSet = true;
}
bool EventFilter::nwPerfTypesIsSet() const { return m_NwPerfTypesIsSet; }
void EventFilter::unsetNwPerfTypes() { m_NwPerfTypesIsSet = false; }
std::vector<BwRequirement> &EventFilter::getBwRequs() { return m_BwRequs; }
void EventFilter::setBwRequs(std::vector<BwRequirement> const &value) {
  m_BwRequs = value;
  m_BwRequsIsSet = true;
}
bool EventFilter::bwRequsIsSet() const { return m_BwRequsIsSet; }
void EventFilter::unsetBwRequs() { m_BwRequsIsSet = false; }
std::vector<ExceptionId> &EventFilter::getExcepIds() { return m_ExcepIds; }
void EventFilter::setExcepIds(std::vector<ExceptionId> const &value) {
  m_ExcepIds = value;
  m_ExcepIdsIsSet = true;
}
bool EventFilter::excepIdsIsSet() const { return m_ExcepIdsIsSet; }
void EventFilter::unsetExcepIds() { m_ExcepIdsIsSet = false; }
ExpectedAnalyticsType EventFilter::getExptAnaType() const {
  return m_ExptAnaType;
}
void EventFilter::setExptAnaType(ExpectedAnalyticsType const &value) {
  m_ExptAnaType = value;
  m_ExptAnaTypeIsSet = true;
}
bool EventFilter::exptAnaTypeIsSet() const { return m_ExptAnaTypeIsSet; }
void EventFilter::unsetExptAnaType() { m_ExptAnaTypeIsSet = false; }
ExpectedUeBehaviourData EventFilter::getExptUeBehav() const {
  return m_ExptUeBehav;
}
void EventFilter::setExptUeBehav(ExpectedUeBehaviourData const &value) {
  m_ExptUeBehav = value;
  m_ExptUeBehavIsSet = true;
}
bool EventFilter::exptUeBehavIsSet() const { return m_ExptUeBehavIsSet; }
void EventFilter::unsetExptUeBehav() { m_ExptUeBehavIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
