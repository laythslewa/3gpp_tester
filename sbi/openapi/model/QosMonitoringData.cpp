/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "QosMonitoringData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

QosMonitoringData::QosMonitoringData() {
  m_QmId = "";
  m_RepThreshDl = 0;
  m_RepThreshDlIsSet = false;
  m_RepThreshUl = 0;
  m_RepThreshUlIsSet = false;
  m_RepThreshRp = 0;
  m_RepThreshRpIsSet = false;
  m_WaitTime = 0;
  m_WaitTimeIsSet = false;
  m_RepPeriod = 0;
  m_RepPeriodIsSet = false;
  m_NotifyUri = "";
  m_NotifyUriIsSet = false;
  m_NotifyCorreId = "";
  m_NotifyCorreIdIsSet = false;
  m_DirectNotifInd = false;
  m_DirectNotifIndIsSet = false;
}

QosMonitoringData::~QosMonitoringData() {}

void QosMonitoringData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const QosMonitoringData &o) {
  j = nlohmann::json();
  j["qmId"] = o.m_QmId;
  j["reqQosMonParams"] = o.m_ReqQosMonParams;
  j["repFreqs"] = o.m_RepFreqs;
  if (o.repThreshDlIsSet())
    j["repThreshDl"] = o.m_RepThreshDl;
  if (o.repThreshUlIsSet())
    j["repThreshUl"] = o.m_RepThreshUl;
  if (o.repThreshRpIsSet())
    j["repThreshRp"] = o.m_RepThreshRp;
  if (o.waitTimeIsSet())
    j["waitTime"] = o.m_WaitTime;
  if (o.repPeriodIsSet())
    j["repPeriod"] = o.m_RepPeriod;
  if (o.notifyUriIsSet())
    j["notifyUri"] = o.m_NotifyUri;
  if (o.notifyCorreIdIsSet())
    j["notifyCorreId"] = o.m_NotifyCorreId;
  if (o.directNotifIndIsSet())
    j["directNotifInd"] = o.m_DirectNotifInd;
}

void from_json(const nlohmann::json &j, QosMonitoringData &o) {
  j.at("qmId").get_to(o.m_QmId);
  j.at("reqQosMonParams").get_to(o.m_ReqQosMonParams);
  j.at("repFreqs").get_to(o.m_RepFreqs);
  if (j.find("repThreshDl") != j.end()) {
    j.at("repThreshDl").get_to(o.m_RepThreshDl);
    o.m_RepThreshDlIsSet = true;
  }
  if (j.find("repThreshUl") != j.end()) {
    j.at("repThreshUl").get_to(o.m_RepThreshUl);
    o.m_RepThreshUlIsSet = true;
  }
  if (j.find("repThreshRp") != j.end()) {
    j.at("repThreshRp").get_to(o.m_RepThreshRp);
    o.m_RepThreshRpIsSet = true;
  }
  if (j.find("waitTime") != j.end()) {
    j.at("waitTime").get_to(o.m_WaitTime);
    o.m_WaitTimeIsSet = true;
  }
  if (j.find("repPeriod") != j.end()) {
    j.at("repPeriod").get_to(o.m_RepPeriod);
    o.m_RepPeriodIsSet = true;
  }
  if (j.find("notifyUri") != j.end()) {
    j.at("notifyUri").get_to(o.m_NotifyUri);
    o.m_NotifyUriIsSet = true;
  }
  if (j.find("notifyCorreId") != j.end()) {
    j.at("notifyCorreId").get_to(o.m_NotifyCorreId);
    o.m_NotifyCorreIdIsSet = true;
  }
  if (j.find("directNotifInd") != j.end()) {
    j.at("directNotifInd").get_to(o.m_DirectNotifInd);
    o.m_DirectNotifIndIsSet = true;
  }
}

std::string QosMonitoringData::getQmId() const { return m_QmId; }
void QosMonitoringData::setQmId(std::string const &value) { m_QmId = value; }
std::vector<RequestedQosMonitoringParameter> &
QosMonitoringData::getReqQosMonParams() {
  return m_ReqQosMonParams;
}
void QosMonitoringData::setReqQosMonParams(
    std::vector<RequestedQosMonitoringParameter> const &value) {
  m_ReqQosMonParams = value;
}
std::vector<ReportingFrequency> &QosMonitoringData::getRepFreqs() {
  return m_RepFreqs;
}
void QosMonitoringData::setRepFreqs(
    std::vector<ReportingFrequency> const &value) {
  m_RepFreqs = value;
}
int32_t QosMonitoringData::getRepThreshDl() const { return m_RepThreshDl; }
void QosMonitoringData::setRepThreshDl(int32_t const value) {
  m_RepThreshDl = value;
  m_RepThreshDlIsSet = true;
}
bool QosMonitoringData::repThreshDlIsSet() const { return m_RepThreshDlIsSet; }
void QosMonitoringData::unsetRepThreshDl() { m_RepThreshDlIsSet = false; }
int32_t QosMonitoringData::getRepThreshUl() const { return m_RepThreshUl; }
void QosMonitoringData::setRepThreshUl(int32_t const value) {
  m_RepThreshUl = value;
  m_RepThreshUlIsSet = true;
}
bool QosMonitoringData::repThreshUlIsSet() const { return m_RepThreshUlIsSet; }
void QosMonitoringData::unsetRepThreshUl() { m_RepThreshUlIsSet = false; }
int32_t QosMonitoringData::getRepThreshRp() const { return m_RepThreshRp; }
void QosMonitoringData::setRepThreshRp(int32_t const value) {
  m_RepThreshRp = value;
  m_RepThreshRpIsSet = true;
}
bool QosMonitoringData::repThreshRpIsSet() const { return m_RepThreshRpIsSet; }
void QosMonitoringData::unsetRepThreshRp() { m_RepThreshRpIsSet = false; }
int32_t QosMonitoringData::getWaitTime() const { return m_WaitTime; }
void QosMonitoringData::setWaitTime(int32_t const value) {
  m_WaitTime = value;
  m_WaitTimeIsSet = true;
}
bool QosMonitoringData::waitTimeIsSet() const { return m_WaitTimeIsSet; }
void QosMonitoringData::unsetWaitTime() { m_WaitTimeIsSet = false; }
int32_t QosMonitoringData::getRepPeriod() const { return m_RepPeriod; }
void QosMonitoringData::setRepPeriod(int32_t const value) {
  m_RepPeriod = value;
  m_RepPeriodIsSet = true;
}
bool QosMonitoringData::repPeriodIsSet() const { return m_RepPeriodIsSet; }
void QosMonitoringData::unsetRepPeriod() { m_RepPeriodIsSet = false; }
std::string QosMonitoringData::getNotifyUri() const { return m_NotifyUri; }
void QosMonitoringData::setNotifyUri(std::string const &value) {
  m_NotifyUri = value;
  m_NotifyUriIsSet = true;
}
bool QosMonitoringData::notifyUriIsSet() const { return m_NotifyUriIsSet; }
void QosMonitoringData::unsetNotifyUri() { m_NotifyUriIsSet = false; }
std::string QosMonitoringData::getNotifyCorreId() const {
  return m_NotifyCorreId;
}
void QosMonitoringData::setNotifyCorreId(std::string const &value) {
  m_NotifyCorreId = value;
  m_NotifyCorreIdIsSet = true;
}
bool QosMonitoringData::notifyCorreIdIsSet() const {
  return m_NotifyCorreIdIsSet;
}
void QosMonitoringData::unsetNotifyCorreId() { m_NotifyCorreIdIsSet = false; }
bool QosMonitoringData::isDirectNotifInd() const { return m_DirectNotifInd; }
void QosMonitoringData::setDirectNotifInd(bool const value) {
  m_DirectNotifInd = value;
  m_DirectNotifIndIsSet = true;
}
bool QosMonitoringData::directNotifIndIsSet() const {
  return m_DirectNotifIndIsSet;
}
void QosMonitoringData::unsetDirectNotifInd() { m_DirectNotifIndIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
