/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SmContextCreateError.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SmContextCreateError::SmContextCreateError() {
  m_N1SmMsgIsSet = false;
  m_N2SmInfoIsSet = false;
  m_N2SmInfoTypeIsSet = false;
  m_RecoveryTime = "";
  m_RecoveryTimeIsSet = false;
}

SmContextCreateError::~SmContextCreateError() {}

void SmContextCreateError::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SmContextCreateError &o) {
  j = nlohmann::json();
  j["error"] = o.m_Error;
  if (o.n1SmMsgIsSet())
    j["n1SmMsg"] = o.m_N1SmMsg;
  if (o.n2SmInfoIsSet())
    j["n2SmInfo"] = o.m_N2SmInfo;
  if (o.n2SmInfoTypeIsSet())
    j["n2SmInfoType"] = o.m_N2SmInfoType;
  if (o.recoveryTimeIsSet())
    j["recoveryTime"] = o.m_RecoveryTime;
}

void from_json(const nlohmann::json &j, SmContextCreateError &o) {
  j.at("error").get_to(o.m_Error);
  if (j.find("n1SmMsg") != j.end()) {
    j.at("n1SmMsg").get_to(o.m_N1SmMsg);
    o.m_N1SmMsgIsSet = true;
  }
  if (j.find("n2SmInfo") != j.end()) {
    j.at("n2SmInfo").get_to(o.m_N2SmInfo);
    o.m_N2SmInfoIsSet = true;
  }
  if (j.find("n2SmInfoType") != j.end()) {
    j.at("n2SmInfoType").get_to(o.m_N2SmInfoType);
    o.m_N2SmInfoTypeIsSet = true;
  }
  if (j.find("recoveryTime") != j.end()) {
    j.at("recoveryTime").get_to(o.m_RecoveryTime);
    o.m_RecoveryTimeIsSet = true;
  }
}

ExtProblemDetails SmContextCreateError::getError() const { return m_Error; }
void SmContextCreateError::setError(ExtProblemDetails const &value) {
  m_Error = value;
}
RefToBinaryData SmContextCreateError::getN1SmMsg() const { return m_N1SmMsg; }
void SmContextCreateError::setN1SmMsg(RefToBinaryData const &value) {
  m_N1SmMsg = value;
  m_N1SmMsgIsSet = true;
}
bool SmContextCreateError::n1SmMsgIsSet() const { return m_N1SmMsgIsSet; }
void SmContextCreateError::unsetN1SmMsg() { m_N1SmMsgIsSet = false; }
RefToBinaryData SmContextCreateError::getN2SmInfo() const { return m_N2SmInfo; }
void SmContextCreateError::setN2SmInfo(RefToBinaryData const &value) {
  m_N2SmInfo = value;
  m_N2SmInfoIsSet = true;
}
bool SmContextCreateError::n2SmInfoIsSet() const { return m_N2SmInfoIsSet; }
void SmContextCreateError::unsetN2SmInfo() { m_N2SmInfoIsSet = false; }
N2SmInfoType SmContextCreateError::getN2SmInfoType() const {
  return m_N2SmInfoType;
}
void SmContextCreateError::setN2SmInfoType(N2SmInfoType const &value) {
  m_N2SmInfoType = value;
  m_N2SmInfoTypeIsSet = true;
}
bool SmContextCreateError::n2SmInfoTypeIsSet() const {
  return m_N2SmInfoTypeIsSet;
}
void SmContextCreateError::unsetN2SmInfoType() { m_N2SmInfoTypeIsSet = false; }
std::string SmContextCreateError::getRecoveryTime() const {
  return m_RecoveryTime;
}
void SmContextCreateError::setRecoveryTime(std::string const &value) {
  m_RecoveryTime = value;
  m_RecoveryTimeIsSet = true;
}
bool SmContextCreateError::recoveryTimeIsSet() const {
  return m_RecoveryTimeIsSet;
}
void SmContextCreateError::unsetRecoveryTime() { m_RecoveryTimeIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
