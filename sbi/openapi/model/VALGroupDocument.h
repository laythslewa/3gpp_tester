/**
 * SS_GroupManagement
 * API for SEAL Group management. © 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * VALGroupDocument.h
 *
 * Represents details of the VAL group document information.
 */

#ifndef VALGroupDocument_H_
#define VALGroupDocument_H_

#include "LocationArea5G.h"
#include "LocationInfo.h"
#include "ValTargetUe.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents details of the VAL group document information.
/// </summary>
class VALGroupDocument {
public:
  VALGroupDocument();
  virtual ~VALGroupDocument();

  void validate();

  /////////////////////////////////////////////
  /// VALGroupDocument members

  /// <summary>
  /// The VAL group idenitity.
  /// </summary>
  std::string getValGroupId() const;
  void setValGroupId(std::string const &value);
  /// <summary>
  /// The text description of the VAL group.
  /// </summary>
  std::string getGrpDesc() const;
  void setGrpDesc(std::string const &value);
  bool grpDescIsSet() const;
  void unsetGrpDesc();
  /// <summary>
  /// The list of VAL User IDs or VAL UE IDs, which are members of the VAL
  /// group.
  /// </summary>
  std::vector<ValTargetUe> &getMembers();
  void setMembers(std::vector<ValTargetUe> const &value);
  bool membersIsSet() const;
  void unsetMembers();
  /// <summary>
  /// Configuration data for the VAL group.
  /// </summary>
  std::string getValGrpConf() const;
  void setValGrpConf(std::string const &value);
  bool valGrpConfIsSet() const;
  void unsetValGrpConf();
  /// <summary>
  /// The list of VAL services enabled on the group.
  /// </summary>
  std::vector<std::string> &getValServiceIds();
  void setValServiceIds(std::vector<std::string> const &value);
  bool valServiceIdsIsSet() const;
  void unsetValServiceIds();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();
  /// <summary>
  /// string providing an URI formatted according to IETF RFC 3986.
  /// </summary>
  std::string getResUri() const;
  void setResUri(std::string const &value);
  bool resUriIsSet() const;
  void unsetResUri();
  /// <summary>
  ///
  /// </summary>
  LocationInfo getLocInfo() const;
  void setLocInfo(LocationInfo const &value);
  bool locInfoIsSet() const;
  void unsetLocInfo();
  /// <summary>
  ///
  /// </summary>
  LocationArea5G getAddLocInfo() const;
  void setAddLocInfo(LocationArea5G const &value);
  bool addLocInfoIsSet() const;
  void unsetAddLocInfo();

  friend void to_json(nlohmann::json &j, const VALGroupDocument &o);
  friend void from_json(const nlohmann::json &j, VALGroupDocument &o);

protected:
  std::string m_ValGroupId;

  std::string m_GrpDesc;
  bool m_GrpDescIsSet;
  std::vector<ValTargetUe> m_Members;
  bool m_MembersIsSet;
  std::string m_ValGrpConf;
  bool m_ValGrpConfIsSet;
  std::vector<std::string> m_ValServiceIds;
  bool m_ValServiceIdsIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
  std::string m_ResUri;
  bool m_ResUriIsSet;
  LocationInfo m_LocInfo;
  bool m_LocInfoIsSet;
  LocationArea5G m_AddLocInfo;
  bool m_AddLocInfoIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* VALGroupDocument_H_ */
