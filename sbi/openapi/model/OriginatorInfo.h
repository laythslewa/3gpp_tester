/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * OriginatorInfo.h
 *
 *
 */

#ifndef OriginatorInfo_H_
#define OriginatorInfo_H_

#include "SMAddressInfo.h"
#include "SMInterface.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class OriginatorInfo {
public:
  OriginatorInfo();
  virtual ~OriginatorInfo();

  void validate();

  /////////////////////////////////////////////
  /// OriginatorInfo members

  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getOriginatorSUPI() const;
  void setOriginatorSUPI(std::string const &value);
  bool originatorSUPIIsSet() const;
  void unsetOriginatorSUPI();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getOriginatorGPSI() const;
  void setOriginatorGPSI(std::string const &value);
  bool originatorGPSIIsSet() const;
  void unsetOriginatorGPSI();
  /// <summary>
  ///
  /// </summary>
  SMAddressInfo getOriginatorOtherAddress() const;
  void setOriginatorOtherAddress(SMAddressInfo const &value);
  bool originatorOtherAddressIsSet() const;
  void unsetOriginatorOtherAddress();
  /// <summary>
  ///
  /// </summary>
  SMAddressInfo getOriginatorReceivedAddress() const;
  void setOriginatorReceivedAddress(SMAddressInfo const &value);
  bool originatorReceivedAddressIsSet() const;
  void unsetOriginatorReceivedAddress();
  /// <summary>
  ///
  /// </summary>
  std::string getOriginatorSCCPAddress() const;
  void setOriginatorSCCPAddress(std::string const &value);
  bool originatorSCCPAddressIsSet() const;
  void unsetOriginatorSCCPAddress();
  /// <summary>
  ///
  /// </summary>
  SMInterface getSMOriginatorInterface() const;
  void setSMOriginatorInterface(SMInterface const &value);
  bool sMOriginatorInterfaceIsSet() const;
  void unsetSMOriginatorInterface();
  /// <summary>
  ///
  /// </summary>
  std::string getSMOriginatorProtocolId() const;
  void setSMOriginatorProtocolId(std::string const &value);
  bool sMOriginatorProtocolIdIsSet() const;
  void unsetSMOriginatorProtocolId();

  friend void to_json(nlohmann::json &j, const OriginatorInfo &o);
  friend void from_json(const nlohmann::json &j, OriginatorInfo &o);

protected:
  std::string m_OriginatorSUPI;
  bool m_OriginatorSUPIIsSet;
  std::string m_OriginatorGPSI;
  bool m_OriginatorGPSIIsSet;
  SMAddressInfo m_OriginatorOtherAddress;
  bool m_OriginatorOtherAddressIsSet;
  SMAddressInfo m_OriginatorReceivedAddress;
  bool m_OriginatorReceivedAddressIsSet;
  std::string m_OriginatorSCCPAddress;
  bool m_OriginatorSCCPAddressIsSet;
  SMInterface m_SMOriginatorInterface;
  bool m_SMOriginatorInterfaceIsSet;
  std::string m_SMOriginatorProtocolId;
  bool m_SMOriginatorProtocolIdIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* OriginatorInfo_H_ */
