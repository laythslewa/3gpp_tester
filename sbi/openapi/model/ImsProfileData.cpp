/**
 * Nhss_imsSDM
 * Nhss Subscriber Data Management Service for IMS. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ImsProfileData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ImsProfileData::ImsProfileData() {
  m_ChargingInfoIsSet = false;
  m_ServiceLevelTraceInfoIsSet = false;
  m_ServicePriorityLevelListIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_MaxAllowedSimulReg = 0;
  m_MaxAllowedSimulRegIsSet = false;
}

ImsProfileData::~ImsProfileData() {}

void ImsProfileData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ImsProfileData &o) {
  j = nlohmann::json();
  j["imsServiceProfiles"] = o.m_ImsServiceProfiles;
  if (o.chargingInfoIsSet())
    j["chargingInfo"] = o.m_ChargingInfo;
  if (o.serviceLevelTraceInfoIsSet())
    j["serviceLevelTraceInfo"] = o.m_ServiceLevelTraceInfo;
  if (o.servicePriorityLevelListIsSet() ||
      !o.m_ServicePriorityLevelList.empty())
    j["servicePriorityLevelList"] = o.m_ServicePriorityLevelList;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.maxAllowedSimulRegIsSet())
    j["maxAllowedSimulReg"] = o.m_MaxAllowedSimulReg;
}

void from_json(const nlohmann::json &j, ImsProfileData &o) {
  j.at("imsServiceProfiles").get_to(o.m_ImsServiceProfiles);
  if (j.find("chargingInfo") != j.end()) {
    j.at("chargingInfo").get_to(o.m_ChargingInfo);
    o.m_ChargingInfoIsSet = true;
  }
  if (j.find("serviceLevelTraceInfo") != j.end()) {
    j.at("serviceLevelTraceInfo").get_to(o.m_ServiceLevelTraceInfo);
    o.m_ServiceLevelTraceInfoIsSet = true;
  }
  if (j.find("servicePriorityLevelList") != j.end()) {
    j.at("servicePriorityLevelList").get_to(o.m_ServicePriorityLevelList);
    o.m_ServicePriorityLevelListIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("maxAllowedSimulReg") != j.end()) {
    j.at("maxAllowedSimulReg").get_to(o.m_MaxAllowedSimulReg);
    o.m_MaxAllowedSimulRegIsSet = true;
  }
}

std::vector<ImsServiceProfile> &ImsProfileData::getImsServiceProfiles() {
  return m_ImsServiceProfiles;
}
void ImsProfileData::setImsServiceProfiles(
    std::vector<ImsServiceProfile> const &value) {
  m_ImsServiceProfiles = value;
}
ChargingInfo ImsProfileData::getChargingInfo() const { return m_ChargingInfo; }
void ImsProfileData::setChargingInfo(ChargingInfo const &value) {
  m_ChargingInfo = value;
  m_ChargingInfoIsSet = true;
}
bool ImsProfileData::chargingInfoIsSet() const { return m_ChargingInfoIsSet; }
void ImsProfileData::unsetChargingInfo() { m_ChargingInfoIsSet = false; }
ServiceLevelTraceInformation ImsProfileData::getServiceLevelTraceInfo() const {
  return m_ServiceLevelTraceInfo;
}
void ImsProfileData::setServiceLevelTraceInfo(
    ServiceLevelTraceInformation const &value) {
  m_ServiceLevelTraceInfo = value;
  m_ServiceLevelTraceInfoIsSet = true;
}
bool ImsProfileData::serviceLevelTraceInfoIsSet() const {
  return m_ServiceLevelTraceInfoIsSet;
}
void ImsProfileData::unsetServiceLevelTraceInfo() {
  m_ServiceLevelTraceInfoIsSet = false;
}
std::vector<std::string> &ImsProfileData::getServicePriorityLevelList() {
  return m_ServicePriorityLevelList;
}
void ImsProfileData::setServicePriorityLevelList(
    std::vector<std::string> const &value) {
  m_ServicePriorityLevelList = value;
  m_ServicePriorityLevelListIsSet = true;
}
bool ImsProfileData::servicePriorityLevelListIsSet() const {
  return m_ServicePriorityLevelListIsSet;
}
void ImsProfileData::unsetServicePriorityLevelList() {
  m_ServicePriorityLevelListIsSet = false;
}
std::string ImsProfileData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void ImsProfileData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool ImsProfileData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void ImsProfileData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
int32_t ImsProfileData::getMaxAllowedSimulReg() const {
  return m_MaxAllowedSimulReg;
}
void ImsProfileData::setMaxAllowedSimulReg(int32_t const value) {
  m_MaxAllowedSimulReg = value;
  m_MaxAllowedSimulRegIsSet = true;
}
bool ImsProfileData::maxAllowedSimulRegIsSet() const {
  return m_MaxAllowedSimulRegIsSet;
}
void ImsProfileData::unsetMaxAllowedSimulReg() {
  m_MaxAllowedSimulRegIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
