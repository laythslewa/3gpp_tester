/**
 * Nucmf_Provisioning
 * UCMF_Provisioning Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualUERadioCapabilityProvisioningDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

IndividualUERadioCapabilityProvisioningDocumentApi::
    IndividualUERadioCapabilityProvisioningDocumentApi(
        std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void IndividualUERadioCapabilityProvisioningDocumentApi::init() {
  setupRoutes();
}

void IndividualUERadioCapabilityProvisioningDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Get(*router, base + "/provisionings/:provisioningId",
              Routes::bind(&IndividualUERadioCapabilityProvisioningDocumentApi::
                               get_provisioning_handler,
                           this));
  Routes::Delete(
      *router, base + "/provisionings/:provisioningId",
      Routes::bind(&IndividualUERadioCapabilityProvisioningDocumentApi::
                       remove_provisioning_handler,
                   this));
  Routes::Put(*router, base + "/provisionings/:provisioningId",
              Routes::bind(&IndividualUERadioCapabilityProvisioningDocumentApi::
                               replace_provisioning_handler,
                           this));
  Routes::Patch(
      *router, base + "/provisionings/:provisioningId",
      Routes::bind(&IndividualUERadioCapabilityProvisioningDocumentApi::
                       update_provisioning_handler,
                   this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &IndividualUERadioCapabilityProvisioningDocumentApi::
          individual_ue_radio_capability_provisioning_document_api_default_handler,
      this));
}

void IndividualUERadioCapabilityProvisioningDocumentApi::
    get_provisioning_handler(const Pistache::Rest::Request &request,
                             Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto provisioningId = request.param(":provisioningId").as<std::string>();

  try {
    this->get_provisioning(provisioningId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualUERadioCapabilityProvisioningDocumentApi::
    remove_provisioning_handler(const Pistache::Rest::Request &request,
                                Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto provisioningId = request.param(":provisioningId").as<std::string>();

  try {
    this->remove_provisioning(provisioningId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualUERadioCapabilityProvisioningDocumentApi::
    replace_provisioning_handler(const Pistache::Rest::Request &request,
                                 Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto provisioningId = request.param(":provisioningId").as<std::string>();

  // Getting the body param

  RacsData racsData;

  try {
    nlohmann::json::parse(request.body()).get_to(racsData);
    this->replace_provisioning(provisioningId, racsData, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualUERadioCapabilityProvisioningDocumentApi::
    update_provisioning_handler(const Pistache::Rest::Request &request,
                                Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto provisioningId = request.param(":provisioningId").as<std::string>();

  // Getting the body param

  RacsDataPatch racsDataPatch;

  try {
    nlohmann::json::parse(request.body()).get_to(racsDataPatch);
    this->update_provisioning(provisioningId, racsDataPatch, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void IndividualUERadioCapabilityProvisioningDocumentApi::
    individual_ue_radio_capability_provisioning_document_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
