/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NotificationSubscription.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NotificationSubscription::NotificationSubscription() {
  m_CallbackReference = "";
  m_Expiry = "";
  m_ExpiryIsSet = false;
  m_SubFilterIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

NotificationSubscription::~NotificationSubscription() {}

void NotificationSubscription::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NotificationSubscription &o) {
  j = nlohmann::json();
  j["clientId"] = o.m_ClientId;
  j["callbackReference"] = o.m_CallbackReference;
  if (o.expiryIsSet())
    j["expiry"] = o.m_Expiry;
  if (o.subFilterIsSet())
    j["subFilter"] = o.m_SubFilter;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, NotificationSubscription &o) {
  j.at("clientId").get_to(o.m_ClientId);
  j.at("callbackReference").get_to(o.m_CallbackReference);
  if (j.find("expiry") != j.end()) {
    j.at("expiry").get_to(o.m_Expiry);
    o.m_ExpiryIsSet = true;
  }
  if (j.find("subFilter") != j.end()) {
    j.at("subFilter").get_to(o.m_SubFilter);
    o.m_SubFilterIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

ClientId NotificationSubscription::getClientId() const { return m_ClientId; }
void NotificationSubscription::setClientId(ClientId const &value) {
  m_ClientId = value;
}
std::string NotificationSubscription::getCallbackReference() const {
  return m_CallbackReference;
}
void NotificationSubscription::setCallbackReference(std::string const &value) {
  m_CallbackReference = value;
}
std::string NotificationSubscription::getExpiry() const { return m_Expiry; }
void NotificationSubscription::setExpiry(std::string const &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}
bool NotificationSubscription::expiryIsSet() const { return m_ExpiryIsSet; }
void NotificationSubscription::unsetExpiry() { m_ExpiryIsSet = false; }
SubscriptionFilter NotificationSubscription::getSubFilter() const {
  return m_SubFilter;
}
void NotificationSubscription::setSubFilter(SubscriptionFilter const &value) {
  m_SubFilter = value;
  m_SubFilterIsSet = true;
}
bool NotificationSubscription::subFilterIsSet() const {
  return m_SubFilterIsSet;
}
void NotificationSubscription::unsetSubFilter() { m_SubFilterIsSet = false; }
std::string NotificationSubscription::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void NotificationSubscription::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool NotificationSubscription::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void NotificationSubscription::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
