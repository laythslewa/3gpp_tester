/**
 * Unified Data Repository Service API file for policy data
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PolicyDataForIndividualUe.h
 *
 * Contains policy data for a given subscriber.
 */

#ifndef PolicyDataForIndividualUe_H_
#define PolicyDataForIndividualUe_H_

#include "AmPolicyData.h"
#include "OperatorSpecificDataContainer.h"
#include "SmPolicyData.h"
#include "UePolicySet.h"
#include "UsageMonData.h"
#include <map>
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains policy data for a given subscriber.
/// </summary>
class PolicyDataForIndividualUe {
public:
  PolicyDataForIndividualUe();
  virtual ~PolicyDataForIndividualUe();

  void validate();

  /////////////////////////////////////////////
  /// PolicyDataForIndividualUe members

  /// <summary>
  ///
  /// </summary>
  UePolicySet getUePolicyDataSet() const;
  void setUePolicyDataSet(UePolicySet const &value);
  bool uePolicyDataSetIsSet() const;
  void unsetUePolicyDataSet();
  /// <summary>
  ///
  /// </summary>
  SmPolicyData getSmPolicyDataSet() const;
  void setSmPolicyDataSet(SmPolicyData const &value);
  bool smPolicyDataSetIsSet() const;
  void unsetSmPolicyDataSet();
  /// <summary>
  ///
  /// </summary>
  AmPolicyData getAmPolicyDataSet() const;
  void setAmPolicyDataSet(AmPolicyData const &value);
  bool amPolicyDataSetIsSet() const;
  void unsetAmPolicyDataSet();
  /// <summary>
  /// Contains UM policies. The value of the limit identifier is used as the key
  /// of the map.
  /// </summary>
  std::map<std::string, UsageMonData> &getUmData();
  void setUmData(std::map<std::string, UsageMonData> const &value);
  bool umDataIsSet() const;
  void unsetUmData();
  /// <summary>
  /// Contains Operator Specific Data resource data. The key of the map is
  /// operator specific data element name and the value is the operator specific
  /// data of the UE.
  /// </summary>
  std::map<std::string, OperatorSpecificDataContainer> &
  getOperatorSpecificDataSet();
  void setOperatorSpecificDataSet(
      std::map<std::string, OperatorSpecificDataContainer> const &value);
  bool operatorSpecificDataSetIsSet() const;
  void unsetOperatorSpecificDataSet();

  friend void to_json(nlohmann::json &j, const PolicyDataForIndividualUe &o);
  friend void from_json(const nlohmann::json &j, PolicyDataForIndividualUe &o);

protected:
  UePolicySet m_UePolicyDataSet;
  bool m_UePolicyDataSetIsSet;
  SmPolicyData m_SmPolicyDataSet;
  bool m_SmPolicyDataSetIsSet;
  AmPolicyData m_AmPolicyDataSet;
  bool m_AmPolicyDataSetIsSet;
  std::map<std::string, UsageMonData> m_UmData;
  bool m_UmDataIsSet;
  std::map<std::string, OperatorSpecificDataContainer>
      m_OperatorSpecificDataSet;
  bool m_OperatorSpecificDataSetIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PolicyDataForIndividualUe_H_ */
