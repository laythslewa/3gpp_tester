/**
 * LMF Location
 * LMF Location Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * InputData.h
 *
 * Information within Determine Location Request.
 */

#ifndef InputData_H_
#define InputData_H_

#include "AreaEventInfo.h"
#include "Ecgi.h"
#include "ExternalClientType.h"
#include "LcsBroadcastAssistanceTypesData.h"
#include "LcsPriority.h"
#include "LdrType.h"
#include "LocationQoS.h"
#include "MotionEventInfo.h"
#include "Ncgi.h"
#include "PeriodicEventInfo.h"
#include "RefToBinaryData.h"
#include "ReportingAccessType.h"
#include "SupportedGADShapes.h"
#include "UeConnectivityState.h"
#include "UeLcsCapability.h"
#include "UeLocationServiceInd.h"
#include "VelocityRequested.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Information within Determine Location Request.
/// </summary>
class InputData {
public:
  InputData();
  virtual ~InputData();

  void validate();

  /////////////////////////////////////////////
  /// InputData members

  /// <summary>
  ///
  /// </summary>
  ExternalClientType getExternalClientType() const;
  void setExternalClientType(ExternalClientType const &value);
  bool externalClientTypeIsSet() const;
  void unsetExternalClientType();
  /// <summary>
  /// LCS Correlation ID.
  /// </summary>
  std::string getCorrelationID() const;
  void setCorrelationID(std::string const &value);
  bool correlationIDIsSet() const;
  void unsetCorrelationID();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getAmfId() const;
  void setAmfId(std::string const &value);
  bool amfIdIsSet() const;
  void unsetAmfId();
  /// <summary>
  ///
  /// </summary>
  LocationQoS getLocationQoS() const;
  void setLocationQoS(LocationQoS const &value);
  bool locationQoSIsSet() const;
  void unsetLocationQoS();
  /// <summary>
  ///
  /// </summary>
  std::vector<SupportedGADShapes> &getSupportedGADShapes();
  void setSupportedGADShapes(std::vector<SupportedGADShapes> const &value);
  bool supportedGADShapesIsSet() const;
  void unsetSupportedGADShapes();
  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  ///
  /// </summary>
  Ecgi getEcgi() const;
  void setEcgi(Ecgi const &value);
  bool ecgiIsSet() const;
  void unsetEcgi();
  /// <summary>
  ///
  /// </summary>
  Ecgi getEcgiOnSecondNode() const;
  void setEcgiOnSecondNode(Ecgi const &value);
  bool ecgiOnSecondNodeIsSet() const;
  void unsetEcgiOnSecondNode();
  /// <summary>
  ///
  /// </summary>
  Ncgi getNcgi() const;
  void setNcgi(Ncgi const &value);
  bool ncgiIsSet() const;
  void unsetNcgi();
  /// <summary>
  ///
  /// </summary>
  Ncgi getNcgiOnSecondNode() const;
  void setNcgiOnSecondNode(Ncgi const &value);
  bool ncgiOnSecondNodeIsSet() const;
  void unsetNcgiOnSecondNode();
  /// <summary>
  ///
  /// </summary>
  LcsPriority getPriority() const;
  void setPriority(LcsPriority const &value);
  bool priorityIsSet() const;
  void unsetPriority();
  /// <summary>
  ///
  /// </summary>
  VelocityRequested getVelocityRequested() const;
  void setVelocityRequested(VelocityRequested const &value);
  bool velocityRequestedIsSet() const;
  void unsetVelocityRequested();
  /// <summary>
  ///
  /// </summary>
  UeLcsCapability getUeLcsCap() const;
  void setUeLcsCap(UeLcsCapability const &value);
  bool ueLcsCapIsSet() const;
  void unsetUeLcsCap();
  /// <summary>
  /// LCS service type.
  /// </summary>
  int32_t getLcsServiceType() const;
  void setLcsServiceType(int32_t const value);
  bool lcsServiceTypeIsSet() const;
  void unsetLcsServiceType();
  /// <summary>
  ///
  /// </summary>
  LdrType getLdrType() const;
  void setLdrType(LdrType const &value);
  bool ldrTypeIsSet() const;
  void unsetLdrType();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getHgmlcCallBackURI() const;
  void setHgmlcCallBackURI(std::string const &value);
  bool hgmlcCallBackURIIsSet() const;
  void unsetHgmlcCallBackURI();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getVgmlcAddress() const;
  void setVgmlcAddress(std::string const &value);
  bool vgmlcAddressIsSet() const;
  void unsetVgmlcAddress();
  /// <summary>
  /// LDR Reference.
  /// </summary>
  std::string getLdrReference() const;
  void setLdrReference(std::string const &value);
  bool ldrReferenceIsSet() const;
  void unsetLdrReference();
  /// <summary>
  ///
  /// </summary>
  PeriodicEventInfo getPeriodicEventInfo() const;
  void setPeriodicEventInfo(PeriodicEventInfo const &value);
  bool periodicEventInfoIsSet() const;
  void unsetPeriodicEventInfo();
  /// <summary>
  ///
  /// </summary>
  AreaEventInfo getAreaEventInfo() const;
  void setAreaEventInfo(AreaEventInfo const &value);
  bool areaEventInfoIsSet() const;
  void unsetAreaEventInfo();
  /// <summary>
  ///
  /// </summary>
  MotionEventInfo getMotionEventInfo() const;
  void setMotionEventInfo(MotionEventInfo const &value);
  bool motionEventInfoIsSet() const;
  void unsetMotionEventInfo();
  /// <summary>
  /// Indicates access types of event reporting.
  /// </summary>
  std::vector<ReportingAccessType> &getReportingAccessTypes();
  void setReportingAccessTypes(std::vector<ReportingAccessType> const &value);
  bool reportingAccessTypesIsSet() const;
  void unsetReportingAccessTypes();
  /// <summary>
  ///
  /// </summary>
  UeConnectivityState getUeConnectivityStates() const;
  void setUeConnectivityStates(UeConnectivityState const &value);
  bool ueConnectivityStatesIsSet() const;
  void unsetUeConnectivityStates();
  /// <summary>
  ///
  /// </summary>
  UeLocationServiceInd getUeLocationServiceInd() const;
  void setUeLocationServiceInd(UeLocationServiceInd const &value);
  bool ueLocationServiceIndIsSet() const;
  void unsetUeLocationServiceInd();
  /// <summary>
  ///
  /// </summary>
  LcsBroadcastAssistanceTypesData getMoAssistanceDataTypes() const;
  void setMoAssistanceDataTypes(LcsBroadcastAssistanceTypesData const &value);
  bool moAssistanceDataTypesIsSet() const;
  void unsetMoAssistanceDataTypes();
  /// <summary>
  ///
  /// </summary>
  RefToBinaryData getLppMessage() const;
  void setLppMessage(RefToBinaryData const &value);
  bool lppMessageIsSet() const;
  void unsetLppMessage();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  friend void to_json(nlohmann::json &j, const InputData &o);
  friend void from_json(const nlohmann::json &j, InputData &o);

protected:
  ExternalClientType m_ExternalClientType;
  bool m_ExternalClientTypeIsSet;
  std::string m_CorrelationID;
  bool m_CorrelationIDIsSet;
  std::string m_AmfId;
  bool m_AmfIdIsSet;
  LocationQoS m_LocationQoS;
  bool m_LocationQoSIsSet;
  std::vector<SupportedGADShapes> m_SupportedGADShapes;
  bool m_SupportedGADShapesIsSet;
  std::string m_Supi;
  bool m_SupiIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  Ecgi m_Ecgi;
  bool m_EcgiIsSet;
  Ecgi m_EcgiOnSecondNode;
  bool m_EcgiOnSecondNodeIsSet;
  Ncgi m_Ncgi;
  bool m_NcgiIsSet;
  Ncgi m_NcgiOnSecondNode;
  bool m_NcgiOnSecondNodeIsSet;
  LcsPriority m_Priority;
  bool m_PriorityIsSet;
  VelocityRequested m_VelocityRequested;
  bool m_VelocityRequestedIsSet;
  UeLcsCapability m_UeLcsCap;
  bool m_UeLcsCapIsSet;
  int32_t m_LcsServiceType;
  bool m_LcsServiceTypeIsSet;
  LdrType m_LdrType;
  bool m_LdrTypeIsSet;
  std::string m_HgmlcCallBackURI;
  bool m_HgmlcCallBackURIIsSet;
  std::string m_VgmlcAddress;
  bool m_VgmlcAddressIsSet;
  std::string m_LdrReference;
  bool m_LdrReferenceIsSet;
  PeriodicEventInfo m_PeriodicEventInfo;
  bool m_PeriodicEventInfoIsSet;
  AreaEventInfo m_AreaEventInfo;
  bool m_AreaEventInfoIsSet;
  MotionEventInfo m_MotionEventInfo;
  bool m_MotionEventInfoIsSet;
  std::vector<ReportingAccessType> m_ReportingAccessTypes;
  bool m_ReportingAccessTypesIsSet;
  UeConnectivityState m_UeConnectivityStates;
  bool m_UeConnectivityStatesIsSet;
  UeLocationServiceInd m_UeLocationServiceInd;
  bool m_UeLocationServiceIndIsSet;
  LcsBroadcastAssistanceTypesData m_MoAssistanceDataTypes;
  bool m_MoAssistanceDataTypesIsSet;
  RefToBinaryData m_LppMessage;
  bool m_LppMessageIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* InputData_H_ */
