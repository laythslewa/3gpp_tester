/**
 * 3gpp-device-triggering
 * API for device trigger. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DeviceTriggering.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

DeviceTriggering::DeviceTriggering() {
  m_Self = "";
  m_SelfIsSet = false;
  m_ExternalId = "";
  m_ExternalIdIsSet = false;
  m_Msisdn = "";
  m_MsisdnIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_ValidityPeriod = 0;
  m_ApplicationPortId = 0;
  m_AppSrcPortId = 0;
  m_AppSrcPortIdIsSet = false;
  m_TriggerPayload = "";
  m_NotificationDestination = "";
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
  m_DeliveryResultIsSet = false;
}

DeviceTriggering::~DeviceTriggering() {}

void DeviceTriggering::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const DeviceTriggering &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  if (o.externalIdIsSet())
    j["externalId"] = o.m_ExternalId;
  if (o.msisdnIsSet())
    j["msisdn"] = o.m_Msisdn;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  j["validityPeriod"] = o.m_ValidityPeriod;
  j["priority"] = o.m_Priority;
  j["applicationPortId"] = o.m_ApplicationPortId;
  if (o.appSrcPortIdIsSet())
    j["appSrcPortId"] = o.m_AppSrcPortId;
  j["triggerPayload"] = o.m_TriggerPayload;
  j["notificationDestination"] = o.m_NotificationDestination;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  if (o.deliveryResultIsSet())
    j["deliveryResult"] = o.m_DeliveryResult;
}

void from_json(const nlohmann::json &j, DeviceTriggering &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("externalId") != j.end()) {
    j.at("externalId").get_to(o.m_ExternalId);
    o.m_ExternalIdIsSet = true;
  }
  if (j.find("msisdn") != j.end()) {
    j.at("msisdn").get_to(o.m_Msisdn);
    o.m_MsisdnIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  j.at("validityPeriod").get_to(o.m_ValidityPeriod);
  j.at("priority").get_to(o.m_Priority);
  j.at("applicationPortId").get_to(o.m_ApplicationPortId);
  if (j.find("appSrcPortId") != j.end()) {
    j.at("appSrcPortId").get_to(o.m_AppSrcPortId);
    o.m_AppSrcPortIdIsSet = true;
  }
  j.at("triggerPayload").get_to(o.m_TriggerPayload);
  j.at("notificationDestination").get_to(o.m_NotificationDestination);
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  if (j.find("deliveryResult") != j.end()) {
    j.at("deliveryResult").get_to(o.m_DeliveryResult);
    o.m_DeliveryResultIsSet = true;
  }
}

std::string DeviceTriggering::getSelf() const { return m_Self; }
void DeviceTriggering::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool DeviceTriggering::selfIsSet() const { return m_SelfIsSet; }
void DeviceTriggering::unsetSelf() { m_SelfIsSet = false; }
std::string DeviceTriggering::getExternalId() const { return m_ExternalId; }
void DeviceTriggering::setExternalId(std::string const &value) {
  m_ExternalId = value;
  m_ExternalIdIsSet = true;
}
bool DeviceTriggering::externalIdIsSet() const { return m_ExternalIdIsSet; }
void DeviceTriggering::unsetExternalId() { m_ExternalIdIsSet = false; }
std::string DeviceTriggering::getMsisdn() const { return m_Msisdn; }
void DeviceTriggering::setMsisdn(std::string const &value) {
  m_Msisdn = value;
  m_MsisdnIsSet = true;
}
bool DeviceTriggering::msisdnIsSet() const { return m_MsisdnIsSet; }
void DeviceTriggering::unsetMsisdn() { m_MsisdnIsSet = false; }
std::string DeviceTriggering::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void DeviceTriggering::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool DeviceTriggering::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void DeviceTriggering::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
int32_t DeviceTriggering::getValidityPeriod() const { return m_ValidityPeriod; }
void DeviceTriggering::setValidityPeriod(int32_t const value) {
  m_ValidityPeriod = value;
}
Priority DeviceTriggering::getPriority() const { return m_Priority; }
void DeviceTriggering::setPriority(Priority const &value) {
  m_Priority = value;
}
int32_t DeviceTriggering::getApplicationPortId() const {
  return m_ApplicationPortId;
}
void DeviceTriggering::setApplicationPortId(int32_t const value) {
  m_ApplicationPortId = value;
}
int32_t DeviceTriggering::getAppSrcPortId() const { return m_AppSrcPortId; }
void DeviceTriggering::setAppSrcPortId(int32_t const value) {
  m_AppSrcPortId = value;
  m_AppSrcPortIdIsSet = true;
}
bool DeviceTriggering::appSrcPortIdIsSet() const { return m_AppSrcPortIdIsSet; }
void DeviceTriggering::unsetAppSrcPortId() { m_AppSrcPortIdIsSet = false; }
std::string DeviceTriggering::getTriggerPayload() const {
  return m_TriggerPayload;
}
void DeviceTriggering::setTriggerPayload(std::string const &value) {
  m_TriggerPayload = value;
}
std::string DeviceTriggering::getNotificationDestination() const {
  return m_NotificationDestination;
}
void DeviceTriggering::setNotificationDestination(std::string const &value) {
  m_NotificationDestination = value;
}
bool DeviceTriggering::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void DeviceTriggering::setRequestTestNotification(bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool DeviceTriggering::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void DeviceTriggering::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig DeviceTriggering::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void DeviceTriggering::setWebsockNotifConfig(WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool DeviceTriggering::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void DeviceTriggering::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
DeliveryResult DeviceTriggering::getDeliveryResult() const {
  return m_DeliveryResult;
}
void DeviceTriggering::setDeliveryResult(DeliveryResult const &value) {
  m_DeliveryResult = value;
  m_DeliveryResultIsSet = true;
}
bool DeviceTriggering::deliveryResultIsSet() const {
  return m_DeliveryResultIsSet;
}
void DeviceTriggering::unsetDeliveryResult() { m_DeliveryResultIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
