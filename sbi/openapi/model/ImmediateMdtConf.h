/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ImmediateMdtConf.h
 *
 * Immediate MDT Configuration
 */

#ifndef ImmediateMdtConf_H_
#define ImmediateMdtConf_H_

#include "AreaScope.h"
#include "CollectionPeriodRmmLteMdt.h"
#include "CollectionPeriodRmmNrMdt.h"
#include "JobType.h"
#include "MeasurementLteForMdt.h"
#include "MeasurementNrForMdt.h"
#include "MeasurementPeriodLteMdt.h"
#include "PlmnId.h"
#include "PositioningMethodMdt.h"
#include "ReportAmountMdt.h"
#include "ReportIntervalMdt.h"
#include "ReportIntervalNrMdt.h"
#include "ReportingTrigger.h"
#include "SensorMeasurement.h"
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Immediate MDT Configuration
/// </summary>
class ImmediateMdtConf {
public:
  ImmediateMdtConf();
  virtual ~ImmediateMdtConf();

  void validate();

  /////////////////////////////////////////////
  /// ImmediateMdtConf members

  /// <summary>
  ///
  /// </summary>
  JobType getJobType() const;
  void setJobType(JobType const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<MeasurementLteForMdt> &getMeasurementLteList();
  void setMeasurementLteList(std::vector<MeasurementLteForMdt> const &value);
  bool measurementLteListIsSet() const;
  void unsetMeasurementLteList();
  /// <summary>
  ///
  /// </summary>
  std::vector<MeasurementNrForMdt> &getMeasurementNrList();
  void setMeasurementNrList(std::vector<MeasurementNrForMdt> const &value);
  bool measurementNrListIsSet() const;
  void unsetMeasurementNrList();
  /// <summary>
  ///
  /// </summary>
  std::vector<ReportingTrigger> &getReportingTriggerList();
  void setReportingTriggerList(std::vector<ReportingTrigger> const &value);
  bool reportingTriggerListIsSet() const;
  void unsetReportingTriggerList();
  /// <summary>
  ///
  /// </summary>
  ReportIntervalMdt getReportInterval() const;
  void setReportInterval(ReportIntervalMdt const &value);
  bool reportIntervalIsSet() const;
  void unsetReportInterval();
  /// <summary>
  ///
  /// </summary>
  ReportIntervalNrMdt getReportIntervalNr() const;
  void setReportIntervalNr(ReportIntervalNrMdt const &value);
  bool reportIntervalNrIsSet() const;
  void unsetReportIntervalNr();
  /// <summary>
  ///
  /// </summary>
  ReportAmountMdt getReportAmount() const;
  void setReportAmount(ReportAmountMdt const &value);
  bool reportAmountIsSet() const;
  void unsetReportAmount();
  /// <summary>
  ///
  /// </summary>
  int32_t getEventThresholdRsrp() const;
  void setEventThresholdRsrp(int32_t const value);
  bool eventThresholdRsrpIsSet() const;
  void unsetEventThresholdRsrp();
  /// <summary>
  ///
  /// </summary>
  int32_t getEventThresholdRsrq() const;
  void setEventThresholdRsrq(int32_t const value);
  bool eventThresholdRsrqIsSet() const;
  void unsetEventThresholdRsrq();
  /// <summary>
  ///
  /// </summary>
  int32_t getEventThresholdRsrpNr() const;
  void setEventThresholdRsrpNr(int32_t const value);
  bool eventThresholdRsrpNrIsSet() const;
  void unsetEventThresholdRsrpNr();
  /// <summary>
  ///
  /// </summary>
  int32_t getEventThresholdRsrqNr() const;
  void setEventThresholdRsrqNr(int32_t const value);
  bool eventThresholdRsrqNrIsSet() const;
  void unsetEventThresholdRsrqNr();
  /// <summary>
  ///
  /// </summary>
  CollectionPeriodRmmLteMdt getCollectionPeriodRmmLte() const;
  void setCollectionPeriodRmmLte(CollectionPeriodRmmLteMdt const &value);
  bool collectionPeriodRmmLteIsSet() const;
  void unsetCollectionPeriodRmmLte();
  /// <summary>
  ///
  /// </summary>
  CollectionPeriodRmmNrMdt getCollectionPeriodRmmNr() const;
  void setCollectionPeriodRmmNr(CollectionPeriodRmmNrMdt const &value);
  bool collectionPeriodRmmNrIsSet() const;
  void unsetCollectionPeriodRmmNr();
  /// <summary>
  ///
  /// </summary>
  MeasurementPeriodLteMdt getMeasurementPeriodLte() const;
  void setMeasurementPeriodLte(MeasurementPeriodLteMdt const &value);
  bool measurementPeriodLteIsSet() const;
  void unsetMeasurementPeriodLte();
  /// <summary>
  ///
  /// </summary>
  AreaScope getAreaScope() const;
  void setAreaScope(AreaScope const &value);
  bool areaScopeIsSet() const;
  void unsetAreaScope();
  /// <summary>
  ///
  /// </summary>
  PositioningMethodMdt getPositioningMethod() const;
  void setPositioningMethod(PositioningMethodMdt const &value);
  bool positioningMethodIsSet() const;
  void unsetPositioningMethod();
  /// <summary>
  ///
  /// </summary>
  std::vector<PositioningMethodMdt> &getAddPositioningMethodList();
  void
  setAddPositioningMethodList(std::vector<PositioningMethodMdt> const &value);
  bool addPositioningMethodListIsSet() const;
  void unsetAddPositioningMethodList();
  /// <summary>
  ///
  /// </summary>
  std::vector<PlmnId> &getMdtAllowedPlmnIdList();
  void setMdtAllowedPlmnIdList(std::vector<PlmnId> const &value);
  bool mdtAllowedPlmnIdListIsSet() const;
  void unsetMdtAllowedPlmnIdList();
  /// <summary>
  ///
  /// </summary>
  std::vector<SensorMeasurement> &getSensorMeasurementList();
  void setSensorMeasurementList(std::vector<SensorMeasurement> const &value);
  bool sensorMeasurementListIsSet() const;
  void unsetSensorMeasurementList();

  friend void to_json(nlohmann::json &j, const ImmediateMdtConf &o);
  friend void from_json(const nlohmann::json &j, ImmediateMdtConf &o);

protected:
  JobType m_JobType;

  std::vector<MeasurementLteForMdt> m_MeasurementLteList;
  bool m_MeasurementLteListIsSet;
  std::vector<MeasurementNrForMdt> m_MeasurementNrList;
  bool m_MeasurementNrListIsSet;
  std::vector<ReportingTrigger> m_ReportingTriggerList;
  bool m_ReportingTriggerListIsSet;
  ReportIntervalMdt m_ReportInterval;
  bool m_ReportIntervalIsSet;
  ReportIntervalNrMdt m_ReportIntervalNr;
  bool m_ReportIntervalNrIsSet;
  ReportAmountMdt m_ReportAmount;
  bool m_ReportAmountIsSet;
  int32_t m_EventThresholdRsrp;
  bool m_EventThresholdRsrpIsSet;
  int32_t m_EventThresholdRsrq;
  bool m_EventThresholdRsrqIsSet;
  int32_t m_EventThresholdRsrpNr;
  bool m_EventThresholdRsrpNrIsSet;
  int32_t m_EventThresholdRsrqNr;
  bool m_EventThresholdRsrqNrIsSet;
  CollectionPeriodRmmLteMdt m_CollectionPeriodRmmLte;
  bool m_CollectionPeriodRmmLteIsSet;
  CollectionPeriodRmmNrMdt m_CollectionPeriodRmmNr;
  bool m_CollectionPeriodRmmNrIsSet;
  MeasurementPeriodLteMdt m_MeasurementPeriodLte;
  bool m_MeasurementPeriodLteIsSet;
  AreaScope m_AreaScope;
  bool m_AreaScopeIsSet;
  PositioningMethodMdt m_PositioningMethod;
  bool m_PositioningMethodIsSet;
  std::vector<PositioningMethodMdt> m_AddPositioningMethodList;
  bool m_AddPositioningMethodListIsSet;
  std::vector<PlmnId> m_MdtAllowedPlmnIdList;
  bool m_MdtAllowedPlmnIdListIsSet;
  std::vector<SensorMeasurement> m_SensorMeasurementList;
  bool m_SensorMeasurementListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ImmediateMdtConf_H_ */
