/**
 * Nnwdaf_AnalyticsInfo
 * Nnwdaf_AnalyticsInfo Service API. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NWDAFAnalyticsDocumentApi.h
 *
 *
 */

#ifndef NWDAFAnalyticsDocumentApi_H_
#define NWDAFAnalyticsDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "AnalyticsData.h"
#include "EventFilter.h"
#include "EventId.h"
#include "EventReportingRequirement.h"
#include "ProblemDetails.h"
#include "ProblemDetailsAnalyticsInfoRequest.h"
#include "TargetUeInformation.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class NWDAFAnalyticsDocumentApi {
public:
  NWDAFAnalyticsDocumentApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~NWDAFAnalyticsDocumentApi() {}
  void init();

  const std::string base = "/nnwdaf-analyticsinfo/v1";

private:
  void setupRoutes();

  void get_nwdaf_analytics_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response);
  void nwdaf_analytics_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Read a NWDAF Analytics
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="eventId">Identify the analytics.</param>
  /// <param name="anaReq">Identifies the analytics reporting requirement
  /// information. (optional, default to EventReportingRequirement())</param>
  /// <param name="eventFilter">Identify the analytics. (optional, default to
  /// EventFilter())</param> <param name="supportedFeatures">To filter
  /// irrelevant responses related to unsupported features (optional, default to
  /// &quot;&quot;)</param> <param name="tgtUe">Identify the target UE
  /// information. (optional, default to TargetUeInformation())</param>
  virtual void get_nwdaf_analytics(
      const Pistache::Optional<EventId> &eventId,
      const Pistache::Optional<EventReportingRequirement> &anaReq,
      const Pistache::Optional<EventFilter> &eventFilter,
      const Pistache::Optional<std::string> &supportedFeatures,
      const Pistache::Optional<TargetUeInformation> &tgtUe,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NWDAFAnalyticsDocumentApi_H_ */
