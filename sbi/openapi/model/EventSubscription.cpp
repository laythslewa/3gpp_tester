/**
 * SS_Events
 * API for SEAL Events management. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EventSubscription.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EventSubscription::EventSubscription() {
  m_ValGroupsIsSet = false;
  m_IdentitiesIsSet = false;
}

EventSubscription::~EventSubscription() {}

void EventSubscription::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EventSubscription &o) {
  j = nlohmann::json();
  j["eventId"] = o.m_EventId;
  if (o.valGroupsIsSet() || !o.m_ValGroups.empty())
    j["valGroups"] = o.m_ValGroups;
  if (o.identitiesIsSet() || !o.m_Identities.empty())
    j["identities"] = o.m_Identities;
}

void from_json(const nlohmann::json &j, EventSubscription &o) {
  j.at("eventId").get_to(o.m_EventId);
  if (j.find("valGroups") != j.end()) {
    j.at("valGroups").get_to(o.m_ValGroups);
    o.m_ValGroupsIsSet = true;
  }
  if (j.find("identities") != j.end()) {
    j.at("identities").get_to(o.m_Identities);
    o.m_IdentitiesIsSet = true;
  }
}

SEALEvent EventSubscription::getEventId() const { return m_EventId; }
void EventSubscription::setEventId(SEALEvent const &value) {
  m_EventId = value;
}
std::vector<VALGroupFilter> &EventSubscription::getValGroups() {
  return m_ValGroups;
}
void EventSubscription::setValGroups(std::vector<VALGroupFilter> const &value) {
  m_ValGroups = value;
  m_ValGroupsIsSet = true;
}
bool EventSubscription::valGroupsIsSet() const { return m_ValGroupsIsSet; }
void EventSubscription::unsetValGroups() { m_ValGroupsIsSet = false; }
std::vector<IdentityFilter> &EventSubscription::getIdentities() {
  return m_Identities;
}
void EventSubscription::setIdentities(
    std::vector<IdentityFilter> const &value) {
  m_Identities = value;
  m_IdentitiesIsSet = true;
}
bool EventSubscription::identitiesIsSet() const { return m_IdentitiesIsSet; }
void EventSubscription::unsetIdentities() { m_IdentitiesIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
