/**
 * 3gpp-nidd
 * API for non IP data delivery. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NiddUplinkDataNotification.h
 *
 * Represents NIDD uplink data to be notified to the SCS/AS.
 */

#ifndef NiddUplinkDataNotification_H_
#define NiddUplinkDataNotification_H_

#include "RdsPort.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents NIDD uplink data to be notified to the SCS/AS.
/// </summary>
class NiddUplinkDataNotification {
public:
  NiddUplinkDataNotification();
  virtual ~NiddUplinkDataNotification();

  void validate();

  /////////////////////////////////////////////
  /// NiddUplinkDataNotification members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getNiddConfiguration() const;
  void setNiddConfiguration(std::string const &value);
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clause 4.6.2 of 3GPP TS 23.682 for more information.
  /// </summary>
  std::string getExternalId() const;
  void setExternalId(std::string const &value);
  bool externalIdIsSet() const;
  void unsetExternalId();
  /// <summary>
  /// string formatted according to subclause 3.3 of 3GPP TS 23.003 that
  /// describes an MSISDN.
  /// </summary>
  std::string getMsisdn() const;
  void setMsisdn(std::string const &value);
  bool msisdnIsSet() const;
  void unsetMsisdn();
  /// <summary>
  /// String with format \&quot;byte\&quot; as defined in OpenAPI Specification,
  /// i.e, base64-encoded characters.
  /// </summary>
  std::string getData() const;
  void setData(std::string const &value);
  /// <summary>
  /// Indicates whether the reliable data service is enabled.
  /// </summary>
  bool isReliableDataService() const;
  void setReliableDataService(bool const value);
  bool reliableDataServiceIsSet() const;
  void unsetReliableDataService();
  /// <summary>
  ///
  /// </summary>
  RdsPort getRdsPort() const;
  void setRdsPort(RdsPort const &value);
  bool rdsPortIsSet() const;
  void unsetRdsPort();

  friend void to_json(nlohmann::json &j, const NiddUplinkDataNotification &o);
  friend void from_json(const nlohmann::json &j, NiddUplinkDataNotification &o);

protected:
  std::string m_NiddConfiguration;

  std::string m_ExternalId;
  bool m_ExternalIdIsSet;
  std::string m_Msisdn;
  bool m_MsisdnIsSet;
  std::string m_Data;

  bool m_ReliableDataService;
  bool m_ReliableDataServiceIsSet;
  RdsPort m_RdsPort;
  bool m_RdsPortIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NiddUplinkDataNotification_H_ */
