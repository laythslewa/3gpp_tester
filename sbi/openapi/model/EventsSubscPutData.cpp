/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EventsSubscPutData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EventsSubscPutData::EventsSubscPutData() {
  m_NotifUri = "";
  m_NotifUriIsSet = false;
  m_ReqQosMonParamsIsSet = false;
  m_QosMonIsSet = false;
  m_ReqAnisIsSet = false;
  m_UsgThresIsSet = false;
  m_NotifCorreId = "";
  m_NotifCorreIdIsSet = false;
  m_AfAppIdsIsSet = false;
  m_DirectNotifInd = false;
  m_DirectNotifIndIsSet = false;
  m_AdReportsIsSet = false;
  m_AccessTypeIsSet = false;
  m_AddAccessInfoIsSet = false;
  m_RelAccessInfoIsSet = false;
  m_AnChargAddrIsSet = false;
  m_AnChargIdsIsSet = false;
  m_AnGwAddrIsSet = false;
  m_EvSubsUri = "";
  m_FailedResourcAllocReportsIsSet = false;
  m_SuccResourcAllocReportsIsSet = false;
  m_NoNetLocSuppIsSet = false;
  m_OutOfCredReportsIsSet = false;
  m_PlmnIdIsSet = false;
  m_QncReportsIsSet = false;
  m_QosMonReportsIsSet = false;
  m_RanNasRelCausesIsSet = false;
  m_RatTypeIsSet = false;
  m_SatBackhaulCategoryIsSet = false;
  m_UeLocIsSet = false;
  m_UeTimeZone = "";
  m_UeTimeZoneIsSet = false;
  m_UsgRepIsSet = false;
  m_TsnBridgeManContIsSet = false;
  m_TsnPortManContDsttIsSet = false;
  m_TsnPortManContNwttsIsSet = false;
}

EventsSubscPutData::~EventsSubscPutData() {}

void EventsSubscPutData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EventsSubscPutData &o) {
  j = nlohmann::json();
  j["events"] = o.m_Events;
  if (o.notifUriIsSet())
    j["notifUri"] = o.m_NotifUri;
  if (o.reqQosMonParamsIsSet() || !o.m_ReqQosMonParams.empty())
    j["reqQosMonParams"] = o.m_ReqQosMonParams;
  if (o.qosMonIsSet())
    j["qosMon"] = o.m_QosMon;
  if (o.reqAnisIsSet() || !o.m_ReqAnis.empty())
    j["reqAnis"] = o.m_ReqAnis;
  if (o.usgThresIsSet())
    j["usgThres"] = o.m_UsgThres;
  if (o.notifCorreIdIsSet())
    j["notifCorreId"] = o.m_NotifCorreId;
  if (o.afAppIdsIsSet() || !o.m_AfAppIds.empty())
    j["afAppIds"] = o.m_AfAppIds;
  if (o.directNotifIndIsSet())
    j["directNotifInd"] = o.m_DirectNotifInd;
  if (o.adReportsIsSet() || !o.m_AdReports.empty())
    j["adReports"] = o.m_AdReports;
  if (o.accessTypeIsSet())
    j["accessType"] = o.m_AccessType;
  if (o.addAccessInfoIsSet())
    j["addAccessInfo"] = o.m_AddAccessInfo;
  if (o.relAccessInfoIsSet())
    j["relAccessInfo"] = o.m_RelAccessInfo;
  if (o.anChargAddrIsSet())
    j["anChargAddr"] = o.m_AnChargAddr;
  if (o.anChargIdsIsSet() || !o.m_AnChargIds.empty())
    j["anChargIds"] = o.m_AnChargIds;
  if (o.anGwAddrIsSet())
    j["anGwAddr"] = o.m_AnGwAddr;
  j["evSubsUri"] = o.m_EvSubsUri;
  j["evNotifs"] = o.m_EvNotifs;
  if (o.failedResourcAllocReportsIsSet() ||
      !o.m_FailedResourcAllocReports.empty())
    j["failedResourcAllocReports"] = o.m_FailedResourcAllocReports;
  if (o.succResourcAllocReportsIsSet() || !o.m_SuccResourcAllocReports.empty())
    j["succResourcAllocReports"] = o.m_SuccResourcAllocReports;
  if (o.noNetLocSuppIsSet())
    j["noNetLocSupp"] = o.m_NoNetLocSupp;
  if (o.outOfCredReportsIsSet() || !o.m_OutOfCredReports.empty())
    j["outOfCredReports"] = o.m_OutOfCredReports;
  if (o.plmnIdIsSet())
    j["plmnId"] = o.m_PlmnId;
  if (o.qncReportsIsSet() || !o.m_QncReports.empty())
    j["qncReports"] = o.m_QncReports;
  if (o.qosMonReportsIsSet() || !o.m_QosMonReports.empty())
    j["qosMonReports"] = o.m_QosMonReports;
  if (o.ranNasRelCausesIsSet() || !o.m_RanNasRelCauses.empty())
    j["ranNasRelCauses"] = o.m_RanNasRelCauses;
  if (o.ratTypeIsSet())
    j["ratType"] = o.m_RatType;
  if (o.satBackhaulCategoryIsSet())
    j["satBackhaulCategory"] = o.m_SatBackhaulCategory;
  if (o.ueLocIsSet())
    j["ueLoc"] = o.m_UeLoc;
  if (o.ueTimeZoneIsSet())
    j["ueTimeZone"] = o.m_UeTimeZone;
  if (o.usgRepIsSet())
    j["usgRep"] = o.m_UsgRep;
  if (o.tsnBridgeManContIsSet())
    j["tsnBridgeManCont"] = o.m_TsnBridgeManCont;
  if (o.tsnPortManContDsttIsSet())
    j["tsnPortManContDstt"] = o.m_TsnPortManContDstt;
  if (o.tsnPortManContNwttsIsSet() || !o.m_TsnPortManContNwtts.empty())
    j["tsnPortManContNwtts"] = o.m_TsnPortManContNwtts;
}

void from_json(const nlohmann::json &j, EventsSubscPutData &o) {
  j.at("events").get_to(o.m_Events);
  if (j.find("notifUri") != j.end()) {
    j.at("notifUri").get_to(o.m_NotifUri);
    o.m_NotifUriIsSet = true;
  }
  if (j.find("reqQosMonParams") != j.end()) {
    j.at("reqQosMonParams").get_to(o.m_ReqQosMonParams);
    o.m_ReqQosMonParamsIsSet = true;
  }
  if (j.find("qosMon") != j.end()) {
    j.at("qosMon").get_to(o.m_QosMon);
    o.m_QosMonIsSet = true;
  }
  if (j.find("reqAnis") != j.end()) {
    j.at("reqAnis").get_to(o.m_ReqAnis);
    o.m_ReqAnisIsSet = true;
  }
  if (j.find("usgThres") != j.end()) {
    j.at("usgThres").get_to(o.m_UsgThres);
    o.m_UsgThresIsSet = true;
  }
  if (j.find("notifCorreId") != j.end()) {
    j.at("notifCorreId").get_to(o.m_NotifCorreId);
    o.m_NotifCorreIdIsSet = true;
  }
  if (j.find("afAppIds") != j.end()) {
    j.at("afAppIds").get_to(o.m_AfAppIds);
    o.m_AfAppIdsIsSet = true;
  }
  if (j.find("directNotifInd") != j.end()) {
    j.at("directNotifInd").get_to(o.m_DirectNotifInd);
    o.m_DirectNotifIndIsSet = true;
  }
  if (j.find("adReports") != j.end()) {
    j.at("adReports").get_to(o.m_AdReports);
    o.m_AdReportsIsSet = true;
  }
  if (j.find("accessType") != j.end()) {
    j.at("accessType").get_to(o.m_AccessType);
    o.m_AccessTypeIsSet = true;
  }
  if (j.find("addAccessInfo") != j.end()) {
    j.at("addAccessInfo").get_to(o.m_AddAccessInfo);
    o.m_AddAccessInfoIsSet = true;
  }
  if (j.find("relAccessInfo") != j.end()) {
    j.at("relAccessInfo").get_to(o.m_RelAccessInfo);
    o.m_RelAccessInfoIsSet = true;
  }
  if (j.find("anChargAddr") != j.end()) {
    j.at("anChargAddr").get_to(o.m_AnChargAddr);
    o.m_AnChargAddrIsSet = true;
  }
  if (j.find("anChargIds") != j.end()) {
    j.at("anChargIds").get_to(o.m_AnChargIds);
    o.m_AnChargIdsIsSet = true;
  }
  if (j.find("anGwAddr") != j.end()) {
    j.at("anGwAddr").get_to(o.m_AnGwAddr);
    o.m_AnGwAddrIsSet = true;
  }
  j.at("evSubsUri").get_to(o.m_EvSubsUri);
  j.at("evNotifs").get_to(o.m_EvNotifs);
  if (j.find("failedResourcAllocReports") != j.end()) {
    j.at("failedResourcAllocReports").get_to(o.m_FailedResourcAllocReports);
    o.m_FailedResourcAllocReportsIsSet = true;
  }
  if (j.find("succResourcAllocReports") != j.end()) {
    j.at("succResourcAllocReports").get_to(o.m_SuccResourcAllocReports);
    o.m_SuccResourcAllocReportsIsSet = true;
  }
  if (j.find("noNetLocSupp") != j.end()) {
    j.at("noNetLocSupp").get_to(o.m_NoNetLocSupp);
    o.m_NoNetLocSuppIsSet = true;
  }
  if (j.find("outOfCredReports") != j.end()) {
    j.at("outOfCredReports").get_to(o.m_OutOfCredReports);
    o.m_OutOfCredReportsIsSet = true;
  }
  if (j.find("plmnId") != j.end()) {
    j.at("plmnId").get_to(o.m_PlmnId);
    o.m_PlmnIdIsSet = true;
  }
  if (j.find("qncReports") != j.end()) {
    j.at("qncReports").get_to(o.m_QncReports);
    o.m_QncReportsIsSet = true;
  }
  if (j.find("qosMonReports") != j.end()) {
    j.at("qosMonReports").get_to(o.m_QosMonReports);
    o.m_QosMonReportsIsSet = true;
  }
  if (j.find("ranNasRelCauses") != j.end()) {
    j.at("ranNasRelCauses").get_to(o.m_RanNasRelCauses);
    o.m_RanNasRelCausesIsSet = true;
  }
  if (j.find("ratType") != j.end()) {
    j.at("ratType").get_to(o.m_RatType);
    o.m_RatTypeIsSet = true;
  }
  if (j.find("satBackhaulCategory") != j.end()) {
    j.at("satBackhaulCategory").get_to(o.m_SatBackhaulCategory);
    o.m_SatBackhaulCategoryIsSet = true;
  }
  if (j.find("ueLoc") != j.end()) {
    j.at("ueLoc").get_to(o.m_UeLoc);
    o.m_UeLocIsSet = true;
  }
  if (j.find("ueTimeZone") != j.end()) {
    j.at("ueTimeZone").get_to(o.m_UeTimeZone);
    o.m_UeTimeZoneIsSet = true;
  }
  if (j.find("usgRep") != j.end()) {
    j.at("usgRep").get_to(o.m_UsgRep);
    o.m_UsgRepIsSet = true;
  }
  if (j.find("tsnBridgeManCont") != j.end()) {
    j.at("tsnBridgeManCont").get_to(o.m_TsnBridgeManCont);
    o.m_TsnBridgeManContIsSet = true;
  }
  if (j.find("tsnPortManContDstt") != j.end()) {
    j.at("tsnPortManContDstt").get_to(o.m_TsnPortManContDstt);
    o.m_TsnPortManContDsttIsSet = true;
  }
  if (j.find("tsnPortManContNwtts") != j.end()) {
    j.at("tsnPortManContNwtts").get_to(o.m_TsnPortManContNwtts);
    o.m_TsnPortManContNwttsIsSet = true;
  }
}

std::vector<AfEventSubscription> &EventsSubscPutData::getEvents() {
  return m_Events;
}
void EventsSubscPutData::setEvents(
    std::vector<AfEventSubscription> const &value) {
  m_Events = value;
}
std::string EventsSubscPutData::getNotifUri() const { return m_NotifUri; }
void EventsSubscPutData::setNotifUri(std::string const &value) {
  m_NotifUri = value;
  m_NotifUriIsSet = true;
}
bool EventsSubscPutData::notifUriIsSet() const { return m_NotifUriIsSet; }
void EventsSubscPutData::unsetNotifUri() { m_NotifUriIsSet = false; }
std::vector<RequestedQosMonitoringParameter> &
EventsSubscPutData::getReqQosMonParams() {
  return m_ReqQosMonParams;
}
void EventsSubscPutData::setReqQosMonParams(
    std::vector<RequestedQosMonitoringParameter> const &value) {
  m_ReqQosMonParams = value;
  m_ReqQosMonParamsIsSet = true;
}
bool EventsSubscPutData::reqQosMonParamsIsSet() const {
  return m_ReqQosMonParamsIsSet;
}
void EventsSubscPutData::unsetReqQosMonParams() {
  m_ReqQosMonParamsIsSet = false;
}
QosMonitoringInformation EventsSubscPutData::getQosMon() const {
  return m_QosMon;
}
void EventsSubscPutData::setQosMon(QosMonitoringInformation const &value) {
  m_QosMon = value;
  m_QosMonIsSet = true;
}
bool EventsSubscPutData::qosMonIsSet() const { return m_QosMonIsSet; }
void EventsSubscPutData::unsetQosMon() { m_QosMonIsSet = false; }
std::vector<RequiredAccessInfo> &EventsSubscPutData::getReqAnis() {
  return m_ReqAnis;
}
void EventsSubscPutData::setReqAnis(
    std::vector<RequiredAccessInfo> const &value) {
  m_ReqAnis = value;
  m_ReqAnisIsSet = true;
}
bool EventsSubscPutData::reqAnisIsSet() const { return m_ReqAnisIsSet; }
void EventsSubscPutData::unsetReqAnis() { m_ReqAnisIsSet = false; }
UsageThreshold EventsSubscPutData::getUsgThres() const { return m_UsgThres; }
void EventsSubscPutData::setUsgThres(UsageThreshold const &value) {
  m_UsgThres = value;
  m_UsgThresIsSet = true;
}
bool EventsSubscPutData::usgThresIsSet() const { return m_UsgThresIsSet; }
void EventsSubscPutData::unsetUsgThres() { m_UsgThresIsSet = false; }
std::string EventsSubscPutData::getNotifCorreId() const {
  return m_NotifCorreId;
}
void EventsSubscPutData::setNotifCorreId(std::string const &value) {
  m_NotifCorreId = value;
  m_NotifCorreIdIsSet = true;
}
bool EventsSubscPutData::notifCorreIdIsSet() const {
  return m_NotifCorreIdIsSet;
}
void EventsSubscPutData::unsetNotifCorreId() { m_NotifCorreIdIsSet = false; }
std::vector<std::string> &EventsSubscPutData::getAfAppIds() {
  return m_AfAppIds;
}
void EventsSubscPutData::setAfAppIds(std::vector<std::string> const &value) {
  m_AfAppIds = value;
  m_AfAppIdsIsSet = true;
}
bool EventsSubscPutData::afAppIdsIsSet() const { return m_AfAppIdsIsSet; }
void EventsSubscPutData::unsetAfAppIds() { m_AfAppIdsIsSet = false; }
bool EventsSubscPutData::isDirectNotifInd() const { return m_DirectNotifInd; }
void EventsSubscPutData::setDirectNotifInd(bool const value) {
  m_DirectNotifInd = value;
  m_DirectNotifIndIsSet = true;
}
bool EventsSubscPutData::directNotifIndIsSet() const {
  return m_DirectNotifIndIsSet;
}
void EventsSubscPutData::unsetDirectNotifInd() {
  m_DirectNotifIndIsSet = false;
}
std::vector<AppDetectionReport> &EventsSubscPutData::getAdReports() {
  return m_AdReports;
}
void EventsSubscPutData::setAdReports(
    std::vector<AppDetectionReport> const &value) {
  m_AdReports = value;
  m_AdReportsIsSet = true;
}
bool EventsSubscPutData::adReportsIsSet() const { return m_AdReportsIsSet; }
void EventsSubscPutData::unsetAdReports() { m_AdReportsIsSet = false; }
AccessType EventsSubscPutData::getAccessType() const { return m_AccessType; }
void EventsSubscPutData::setAccessType(AccessType const &value) {
  m_AccessType = value;
  m_AccessTypeIsSet = true;
}
bool EventsSubscPutData::accessTypeIsSet() const { return m_AccessTypeIsSet; }
void EventsSubscPutData::unsetAccessType() { m_AccessTypeIsSet = false; }
AdditionalAccessInfo EventsSubscPutData::getAddAccessInfo() const {
  return m_AddAccessInfo;
}
void EventsSubscPutData::setAddAccessInfo(AdditionalAccessInfo const &value) {
  m_AddAccessInfo = value;
  m_AddAccessInfoIsSet = true;
}
bool EventsSubscPutData::addAccessInfoIsSet() const {
  return m_AddAccessInfoIsSet;
}
void EventsSubscPutData::unsetAddAccessInfo() { m_AddAccessInfoIsSet = false; }
AdditionalAccessInfo EventsSubscPutData::getRelAccessInfo() const {
  return m_RelAccessInfo;
}
void EventsSubscPutData::setRelAccessInfo(AdditionalAccessInfo const &value) {
  m_RelAccessInfo = value;
  m_RelAccessInfoIsSet = true;
}
bool EventsSubscPutData::relAccessInfoIsSet() const {
  return m_RelAccessInfoIsSet;
}
void EventsSubscPutData::unsetRelAccessInfo() { m_RelAccessInfoIsSet = false; }
AccNetChargingAddress EventsSubscPutData::getAnChargAddr() const {
  return m_AnChargAddr;
}
void EventsSubscPutData::setAnChargAddr(AccNetChargingAddress const &value) {
  m_AnChargAddr = value;
  m_AnChargAddrIsSet = true;
}
bool EventsSubscPutData::anChargAddrIsSet() const { return m_AnChargAddrIsSet; }
void EventsSubscPutData::unsetAnChargAddr() { m_AnChargAddrIsSet = false; }
std::vector<AccessNetChargingIdentifier> &EventsSubscPutData::getAnChargIds() {
  return m_AnChargIds;
}
void EventsSubscPutData::setAnChargIds(
    std::vector<AccessNetChargingIdentifier> const &value) {
  m_AnChargIds = value;
  m_AnChargIdsIsSet = true;
}
bool EventsSubscPutData::anChargIdsIsSet() const { return m_AnChargIdsIsSet; }
void EventsSubscPutData::unsetAnChargIds() { m_AnChargIdsIsSet = false; }
AnGwAddress EventsSubscPutData::getAnGwAddr() const { return m_AnGwAddr; }
void EventsSubscPutData::setAnGwAddr(AnGwAddress const &value) {
  m_AnGwAddr = value;
  m_AnGwAddrIsSet = true;
}
bool EventsSubscPutData::anGwAddrIsSet() const { return m_AnGwAddrIsSet; }
void EventsSubscPutData::unsetAnGwAddr() { m_AnGwAddrIsSet = false; }
std::string EventsSubscPutData::getEvSubsUri() const { return m_EvSubsUri; }
void EventsSubscPutData::setEvSubsUri(std::string const &value) {
  m_EvSubsUri = value;
}
std::vector<AfEventNotification> &EventsSubscPutData::getEvNotifs() {
  return m_EvNotifs;
}
void EventsSubscPutData::setEvNotifs(
    std::vector<AfEventNotification> const &value) {
  m_EvNotifs = value;
}
std::vector<ResourcesAllocationInfo> &
EventsSubscPutData::getFailedResourcAllocReports() {
  return m_FailedResourcAllocReports;
}
void EventsSubscPutData::setFailedResourcAllocReports(
    std::vector<ResourcesAllocationInfo> const &value) {
  m_FailedResourcAllocReports = value;
  m_FailedResourcAllocReportsIsSet = true;
}
bool EventsSubscPutData::failedResourcAllocReportsIsSet() const {
  return m_FailedResourcAllocReportsIsSet;
}
void EventsSubscPutData::unsetFailedResourcAllocReports() {
  m_FailedResourcAllocReportsIsSet = false;
}
std::vector<ResourcesAllocationInfo> &
EventsSubscPutData::getSuccResourcAllocReports() {
  return m_SuccResourcAllocReports;
}
void EventsSubscPutData::setSuccResourcAllocReports(
    std::vector<ResourcesAllocationInfo> const &value) {
  m_SuccResourcAllocReports = value;
  m_SuccResourcAllocReportsIsSet = true;
}
bool EventsSubscPutData::succResourcAllocReportsIsSet() const {
  return m_SuccResourcAllocReportsIsSet;
}
void EventsSubscPutData::unsetSuccResourcAllocReports() {
  m_SuccResourcAllocReportsIsSet = false;
}
NetLocAccessSupport EventsSubscPutData::getNoNetLocSupp() const {
  return m_NoNetLocSupp;
}
void EventsSubscPutData::setNoNetLocSupp(NetLocAccessSupport const &value) {
  m_NoNetLocSupp = value;
  m_NoNetLocSuppIsSet = true;
}
bool EventsSubscPutData::noNetLocSuppIsSet() const {
  return m_NoNetLocSuppIsSet;
}
void EventsSubscPutData::unsetNoNetLocSupp() { m_NoNetLocSuppIsSet = false; }
std::vector<OutOfCreditInformation> &EventsSubscPutData::getOutOfCredReports() {
  return m_OutOfCredReports;
}
void EventsSubscPutData::setOutOfCredReports(
    std::vector<OutOfCreditInformation> const &value) {
  m_OutOfCredReports = value;
  m_OutOfCredReportsIsSet = true;
}
bool EventsSubscPutData::outOfCredReportsIsSet() const {
  return m_OutOfCredReportsIsSet;
}
void EventsSubscPutData::unsetOutOfCredReports() {
  m_OutOfCredReportsIsSet = false;
}
PlmnIdNid EventsSubscPutData::getPlmnId() const { return m_PlmnId; }
void EventsSubscPutData::setPlmnId(PlmnIdNid const &value) {
  m_PlmnId = value;
  m_PlmnIdIsSet = true;
}
bool EventsSubscPutData::plmnIdIsSet() const { return m_PlmnIdIsSet; }
void EventsSubscPutData::unsetPlmnId() { m_PlmnIdIsSet = false; }
std::vector<QosNotificationControlInfo> &EventsSubscPutData::getQncReports() {
  return m_QncReports;
}
void EventsSubscPutData::setQncReports(
    std::vector<QosNotificationControlInfo> const &value) {
  m_QncReports = value;
  m_QncReportsIsSet = true;
}
bool EventsSubscPutData::qncReportsIsSet() const { return m_QncReportsIsSet; }
void EventsSubscPutData::unsetQncReports() { m_QncReportsIsSet = false; }
std::vector<QosMonitoringReport> &EventsSubscPutData::getQosMonReports() {
  return m_QosMonReports;
}
void EventsSubscPutData::setQosMonReports(
    std::vector<QosMonitoringReport> const &value) {
  m_QosMonReports = value;
  m_QosMonReportsIsSet = true;
}
bool EventsSubscPutData::qosMonReportsIsSet() const {
  return m_QosMonReportsIsSet;
}
void EventsSubscPutData::unsetQosMonReports() { m_QosMonReportsIsSet = false; }
std::vector<RanNasRelCause> &EventsSubscPutData::getRanNasRelCauses() {
  return m_RanNasRelCauses;
}
void EventsSubscPutData::setRanNasRelCauses(
    std::vector<RanNasRelCause> const &value) {
  m_RanNasRelCauses = value;
  m_RanNasRelCausesIsSet = true;
}
bool EventsSubscPutData::ranNasRelCausesIsSet() const {
  return m_RanNasRelCausesIsSet;
}
void EventsSubscPutData::unsetRanNasRelCauses() {
  m_RanNasRelCausesIsSet = false;
}
RatType EventsSubscPutData::getRatType() const { return m_RatType; }
void EventsSubscPutData::setRatType(RatType const &value) {
  m_RatType = value;
  m_RatTypeIsSet = true;
}
bool EventsSubscPutData::ratTypeIsSet() const { return m_RatTypeIsSet; }
void EventsSubscPutData::unsetRatType() { m_RatTypeIsSet = false; }
SatelliteBackhaulCategory EventsSubscPutData::getSatBackhaulCategory() const {
  return m_SatBackhaulCategory;
}
void EventsSubscPutData::setSatBackhaulCategory(
    SatelliteBackhaulCategory const &value) {
  m_SatBackhaulCategory = value;
  m_SatBackhaulCategoryIsSet = true;
}
bool EventsSubscPutData::satBackhaulCategoryIsSet() const {
  return m_SatBackhaulCategoryIsSet;
}
void EventsSubscPutData::unsetSatBackhaulCategory() {
  m_SatBackhaulCategoryIsSet = false;
}
UserLocation EventsSubscPutData::getUeLoc() const { return m_UeLoc; }
void EventsSubscPutData::setUeLoc(UserLocation const &value) {
  m_UeLoc = value;
  m_UeLocIsSet = true;
}
bool EventsSubscPutData::ueLocIsSet() const { return m_UeLocIsSet; }
void EventsSubscPutData::unsetUeLoc() { m_UeLocIsSet = false; }
std::string EventsSubscPutData::getUeTimeZone() const { return m_UeTimeZone; }
void EventsSubscPutData::setUeTimeZone(std::string const &value) {
  m_UeTimeZone = value;
  m_UeTimeZoneIsSet = true;
}
bool EventsSubscPutData::ueTimeZoneIsSet() const { return m_UeTimeZoneIsSet; }
void EventsSubscPutData::unsetUeTimeZone() { m_UeTimeZoneIsSet = false; }
AccumulatedUsage EventsSubscPutData::getUsgRep() const { return m_UsgRep; }
void EventsSubscPutData::setUsgRep(AccumulatedUsage const &value) {
  m_UsgRep = value;
  m_UsgRepIsSet = true;
}
bool EventsSubscPutData::usgRepIsSet() const { return m_UsgRepIsSet; }
void EventsSubscPutData::unsetUsgRep() { m_UsgRepIsSet = false; }
BridgeManagementContainer EventsSubscPutData::getTsnBridgeManCont() const {
  return m_TsnBridgeManCont;
}
void EventsSubscPutData::setTsnBridgeManCont(
    BridgeManagementContainer const &value) {
  m_TsnBridgeManCont = value;
  m_TsnBridgeManContIsSet = true;
}
bool EventsSubscPutData::tsnBridgeManContIsSet() const {
  return m_TsnBridgeManContIsSet;
}
void EventsSubscPutData::unsetTsnBridgeManCont() {
  m_TsnBridgeManContIsSet = false;
}
PortManagementContainer EventsSubscPutData::getTsnPortManContDstt() const {
  return m_TsnPortManContDstt;
}
void EventsSubscPutData::setTsnPortManContDstt(
    PortManagementContainer const &value) {
  m_TsnPortManContDstt = value;
  m_TsnPortManContDsttIsSet = true;
}
bool EventsSubscPutData::tsnPortManContDsttIsSet() const {
  return m_TsnPortManContDsttIsSet;
}
void EventsSubscPutData::unsetTsnPortManContDstt() {
  m_TsnPortManContDsttIsSet = false;
}
std::vector<PortManagementContainer> &
EventsSubscPutData::getTsnPortManContNwtts() {
  return m_TsnPortManContNwtts;
}
void EventsSubscPutData::setTsnPortManContNwtts(
    std::vector<PortManagementContainer> const &value) {
  m_TsnPortManContNwtts = value;
  m_TsnPortManContNwttsIsSet = true;
}
bool EventsSubscPutData::tsnPortManContNwttsIsSet() const {
  return m_TsnPortManContNwttsIsSet;
}
void EventsSubscPutData::unsetTsnPortManContNwtts() {
  m_TsnPortManContNwttsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
