/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ScpInfo.h
 *
 * Information of an SCP Instance
 */

#ifndef ScpInfo_H_
#define ScpInfo_H_

#include "IpReachability.h"
#include "Ipv4AddressRange.h"
#include "Ipv6Prefix.h"
#include "Ipv6PrefixRange.h"
#include "PlmnId.h"
#include "ScpCapability.h"
#include "ScpDomainInfo.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Information of an SCP Instance
/// </summary>
class ScpInfo {
public:
  ScpInfo();
  virtual ~ScpInfo();

  void validate();

  /////////////////////////////////////////////
  /// ScpInfo members

  /// <summary>
  /// A map (list of key-value pairs) where the key of the map shall be the
  /// string identifying an SCP domain
  /// </summary>
  std::map<std::string, std::vector<ScpDomainInfo>> &getScpDomainInfoList();
  void setScpDomainInfoList(
      std::map<std::string, std::vector<ScpDomainInfo>> const &value);
  bool scpDomainInfoListIsSet() const;
  void unsetScpDomainInfoList();
  /// <summary>
  ///
  /// </summary>
  std::string getScpPrefix() const;
  void setScpPrefix(std::string const &value);
  bool scpPrefixIsSet() const;
  void unsetScpPrefix();
  /// <summary>
  /// Port numbers for HTTP and HTTPS. The key of the map shall be
  /// \&quot;http\&quot; or \&quot;https\&quot;
  /// </summary>
  std::map<std::string, int32_t> &getScpPorts();
  void setScpPorts(std::map<std::string, int32_t> const value);
  bool scpPortsIsSet() const;
  void unsetScpPorts();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getAddressDomains();
  void setAddressDomains(std::vector<std::string> const &value);
  bool addressDomainsIsSet() const;
  void unsetAddressDomains();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getIpv4Addresses();
  void setIpv4Addresses(std::vector<std::string> const &value);
  bool ipv4AddressesIsSet() const;
  void unsetIpv4Addresses();
  /// <summary>
  ///
  /// </summary>
  std::vector<Ipv6Prefix> &getIpv6Prefixes();
  void setIpv6Prefixes(std::vector<Ipv6Prefix> const &value);
  bool ipv6PrefixesIsSet() const;
  void unsetIpv6Prefixes();
  /// <summary>
  ///
  /// </summary>
  std::vector<Ipv4AddressRange> &getIpv4AddrRanges();
  void setIpv4AddrRanges(std::vector<Ipv4AddressRange> const &value);
  bool ipv4AddrRangesIsSet() const;
  void unsetIpv4AddrRanges();
  /// <summary>
  ///
  /// </summary>
  std::vector<Ipv6PrefixRange> &getIpv6PrefixRanges();
  void setIpv6PrefixRanges(std::vector<Ipv6PrefixRange> const &value);
  bool ipv6PrefixRangesIsSet() const;
  void unsetIpv6PrefixRanges();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getServedNfSetIdList();
  void setServedNfSetIdList(std::vector<std::string> const &value);
  bool servedNfSetIdListIsSet() const;
  void unsetServedNfSetIdList();
  /// <summary>
  ///
  /// </summary>
  std::vector<PlmnId> &getRemotePlmnList();
  void setRemotePlmnList(std::vector<PlmnId> const &value);
  bool remotePlmnListIsSet() const;
  void unsetRemotePlmnList();
  /// <summary>
  ///
  /// </summary>
  IpReachability getIpReachability() const;
  void setIpReachability(IpReachability const &value);
  bool ipReachabilityIsSet() const;
  void unsetIpReachability();
  /// <summary>
  ///
  /// </summary>
  std::vector<ScpCapability> &getScpCapabilities();
  void setScpCapabilities(std::vector<ScpCapability> const &value);
  bool scpCapabilitiesIsSet() const;
  void unsetScpCapabilities();

  friend void to_json(nlohmann::json &j, const ScpInfo &o);
  friend void from_json(const nlohmann::json &j, ScpInfo &o);

protected:
  std::map<std::string, std::vector<ScpDomainInfo>> m_ScpDomainInfoList;
  bool m_ScpDomainInfoListIsSet;
  std::string m_ScpPrefix;
  bool m_ScpPrefixIsSet;
  std::map<std::string, int32_t> m_ScpPorts;
  bool m_ScpPortsIsSet;
  std::vector<std::string> m_AddressDomains;
  bool m_AddressDomainsIsSet;
  std::vector<std::string> m_Ipv4Addresses;
  bool m_Ipv4AddressesIsSet;
  std::vector<Ipv6Prefix> m_Ipv6Prefixes;
  bool m_Ipv6PrefixesIsSet;
  std::vector<Ipv4AddressRange> m_Ipv4AddrRanges;
  bool m_Ipv4AddrRangesIsSet;
  std::vector<Ipv6PrefixRange> m_Ipv6PrefixRanges;
  bool m_Ipv6PrefixRangesIsSet;
  std::vector<std::string> m_ServedNfSetIdList;
  bool m_ServedNfSetIdListIsSet;
  std::vector<PlmnId> m_RemotePlmnList;
  bool m_RemotePlmnListIsSet;
  IpReachability m_IpReachability;
  bool m_IpReachabilityIsSet;
  std::vector<ScpCapability> m_ScpCapabilities;
  bool m_ScpCapabilitiesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ScpInfo_H_ */
