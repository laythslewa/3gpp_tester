/**
 * Unified Data Repository Service API file for policy data
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PolicyDataForIndividualUe.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PolicyDataForIndividualUe::PolicyDataForIndividualUe() {
  m_UePolicyDataSetIsSet = false;
  m_SmPolicyDataSetIsSet = false;
  m_AmPolicyDataSetIsSet = false;
  m_UmDataIsSet = false;
  m_OperatorSpecificDataSetIsSet = false;
}

PolicyDataForIndividualUe::~PolicyDataForIndividualUe() {}

void PolicyDataForIndividualUe::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PolicyDataForIndividualUe &o) {
  j = nlohmann::json();
  if (o.uePolicyDataSetIsSet())
    j["uePolicyDataSet"] = o.m_UePolicyDataSet;
  if (o.smPolicyDataSetIsSet())
    j["smPolicyDataSet"] = o.m_SmPolicyDataSet;
  if (o.amPolicyDataSetIsSet())
    j["amPolicyDataSet"] = o.m_AmPolicyDataSet;
  if (o.umDataIsSet() || !o.m_UmData.empty())
    j["umData"] = o.m_UmData;
  if (o.operatorSpecificDataSetIsSet() || !o.m_OperatorSpecificDataSet.empty())
    j["operatorSpecificDataSet"] = o.m_OperatorSpecificDataSet;
}

void from_json(const nlohmann::json &j, PolicyDataForIndividualUe &o) {
  if (j.find("uePolicyDataSet") != j.end()) {
    j.at("uePolicyDataSet").get_to(o.m_UePolicyDataSet);
    o.m_UePolicyDataSetIsSet = true;
  }
  if (j.find("smPolicyDataSet") != j.end()) {
    j.at("smPolicyDataSet").get_to(o.m_SmPolicyDataSet);
    o.m_SmPolicyDataSetIsSet = true;
  }
  if (j.find("amPolicyDataSet") != j.end()) {
    j.at("amPolicyDataSet").get_to(o.m_AmPolicyDataSet);
    o.m_AmPolicyDataSetIsSet = true;
  }
  if (j.find("umData") != j.end()) {
    j.at("umData").get_to(o.m_UmData);
    o.m_UmDataIsSet = true;
  }
  if (j.find("operatorSpecificDataSet") != j.end()) {
    j.at("operatorSpecificDataSet").get_to(o.m_OperatorSpecificDataSet);
    o.m_OperatorSpecificDataSetIsSet = true;
  }
}

UePolicySet PolicyDataForIndividualUe::getUePolicyDataSet() const {
  return m_UePolicyDataSet;
}
void PolicyDataForIndividualUe::setUePolicyDataSet(UePolicySet const &value) {
  m_UePolicyDataSet = value;
  m_UePolicyDataSetIsSet = true;
}
bool PolicyDataForIndividualUe::uePolicyDataSetIsSet() const {
  return m_UePolicyDataSetIsSet;
}
void PolicyDataForIndividualUe::unsetUePolicyDataSet() {
  m_UePolicyDataSetIsSet = false;
}
SmPolicyData PolicyDataForIndividualUe::getSmPolicyDataSet() const {
  return m_SmPolicyDataSet;
}
void PolicyDataForIndividualUe::setSmPolicyDataSet(SmPolicyData const &value) {
  m_SmPolicyDataSet = value;
  m_SmPolicyDataSetIsSet = true;
}
bool PolicyDataForIndividualUe::smPolicyDataSetIsSet() const {
  return m_SmPolicyDataSetIsSet;
}
void PolicyDataForIndividualUe::unsetSmPolicyDataSet() {
  m_SmPolicyDataSetIsSet = false;
}
AmPolicyData PolicyDataForIndividualUe::getAmPolicyDataSet() const {
  return m_AmPolicyDataSet;
}
void PolicyDataForIndividualUe::setAmPolicyDataSet(AmPolicyData const &value) {
  m_AmPolicyDataSet = value;
  m_AmPolicyDataSetIsSet = true;
}
bool PolicyDataForIndividualUe::amPolicyDataSetIsSet() const {
  return m_AmPolicyDataSetIsSet;
}
void PolicyDataForIndividualUe::unsetAmPolicyDataSet() {
  m_AmPolicyDataSetIsSet = false;
}
std::map<std::string, UsageMonData> &PolicyDataForIndividualUe::getUmData() {
  return m_UmData;
}
void PolicyDataForIndividualUe::setUmData(
    std::map<std::string, UsageMonData> const &value) {
  m_UmData = value;
  m_UmDataIsSet = true;
}
bool PolicyDataForIndividualUe::umDataIsSet() const { return m_UmDataIsSet; }
void PolicyDataForIndividualUe::unsetUmData() { m_UmDataIsSet = false; }
std::map<std::string, OperatorSpecificDataContainer> &
PolicyDataForIndividualUe::getOperatorSpecificDataSet() {
  return m_OperatorSpecificDataSet;
}
void PolicyDataForIndividualUe::setOperatorSpecificDataSet(
    std::map<std::string, OperatorSpecificDataContainer> const &value) {
  m_OperatorSpecificDataSet = value;
  m_OperatorSpecificDataSetIsSet = true;
}
bool PolicyDataForIndividualUe::operatorSpecificDataSetIsSet() const {
  return m_OperatorSpecificDataSetIsSet;
}
void PolicyDataForIndividualUe::unsetOperatorSpecificDataSet() {
  m_OperatorSpecificDataSetIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
