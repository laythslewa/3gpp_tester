/**
 * LMF Location
 * LMF Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PointAltitudeUncertainty.h
 *
 * Ellipsoid point with altitude and uncertainty ellipsoid.
 */

#ifndef PointAltitudeUncertainty_H_
#define PointAltitudeUncertainty_H_

#include "GADShape.h"
#include "GeographicalCoordinates.h"
#include "PointAltitudeUncertainty_allOf.h"
#include "SupportedGADShapes.h"
#include "UncertaintyEllipse.h"
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Ellipsoid point with altitude and uncertainty ellipsoid.
/// </summary>
class PointAltitudeUncertainty {
public:
  PointAltitudeUncertainty();
  virtual ~PointAltitudeUncertainty();

  void validate();

  /////////////////////////////////////////////
  /// PointAltitudeUncertainty members

  /// <summary>
  ///
  /// </summary>
  SupportedGADShapes getShape() const;
  void setShape(SupportedGADShapes const &value);
  /// <summary>
  ///
  /// </summary>
  GeographicalCoordinates getPoint() const;
  void setPoint(GeographicalCoordinates const &value);
  /// <summary>
  /// Indicates value of altitude.
  /// </summary>
  double getAltitude() const;
  void setAltitude(double const value);
  /// <summary>
  ///
  /// </summary>
  UncertaintyEllipse getUncertaintyEllipse() const;
  void setUncertaintyEllipse(UncertaintyEllipse const &value);
  /// <summary>
  /// Indicates value of uncertainty.
  /// </summary>
  float getUncertaintyAltitude() const;
  void setUncertaintyAltitude(float const value);
  /// <summary>
  /// Indicates value of confidence.
  /// </summary>
  int32_t getConfidence() const;
  void setConfidence(int32_t const value);

  friend void to_json(nlohmann::json &j, const PointAltitudeUncertainty &o);
  friend void from_json(const nlohmann::json &j, PointAltitudeUncertainty &o);

protected:
  SupportedGADShapes m_Shape;

  GeographicalCoordinates m_Point;

  double m_Altitude;

  UncertaintyEllipse m_UncertaintyEllipse;

  float m_UncertaintyAltitude;

  int32_t m_Confidence;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PointAltitudeUncertainty_H_ */
