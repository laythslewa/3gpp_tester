/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AmfEventSubscriptionAddInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AmfEventSubscriptionAddInfo::AmfEventSubscriptionAddInfo() {
  m_BindingInfoIsSet = false;
  m_SubscribingNfTypeIsSet = false;
}

AmfEventSubscriptionAddInfo::~AmfEventSubscriptionAddInfo() {}

void AmfEventSubscriptionAddInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AmfEventSubscriptionAddInfo &o) {
  j = nlohmann::json();
  if (o.bindingInfoIsSet() || !o.m_BindingInfo.empty())
    j["bindingInfo"] = o.m_BindingInfo;
  if (o.subscribingNfTypeIsSet())
    j["subscribingNfType"] = o.m_SubscribingNfType;
}

void from_json(const nlohmann::json &j, AmfEventSubscriptionAddInfo &o) {
  if (j.find("bindingInfo") != j.end()) {
    j.at("bindingInfo").get_to(o.m_BindingInfo);
    o.m_BindingInfoIsSet = true;
  }
  if (j.find("subscribingNfType") != j.end()) {
    j.at("subscribingNfType").get_to(o.m_SubscribingNfType);
    o.m_SubscribingNfTypeIsSet = true;
  }
}

std::vector<std::string> &AmfEventSubscriptionAddInfo::getBindingInfo() {
  return m_BindingInfo;
}
void AmfEventSubscriptionAddInfo::setBindingInfo(
    std::vector<std::string> const &value) {
  m_BindingInfo = value;
  m_BindingInfoIsSet = true;
}
bool AmfEventSubscriptionAddInfo::bindingInfoIsSet() const {
  return m_BindingInfoIsSet;
}
void AmfEventSubscriptionAddInfo::unsetBindingInfo() {
  m_BindingInfoIsSet = false;
}
NFType AmfEventSubscriptionAddInfo::getSubscribingNfType() const {
  return m_SubscribingNfType;
}
void AmfEventSubscriptionAddInfo::setSubscribingNfType(NFType const &value) {
  m_SubscribingNfType = value;
  m_SubscribingNfTypeIsSet = true;
}
bool AmfEventSubscriptionAddInfo::subscribingNfTypeIsSet() const {
  return m_SubscribingNfTypeIsSet;
}
void AmfEventSubscriptionAddInfo::unsetSubscribingNfType() {
  m_SubscribingNfTypeIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
