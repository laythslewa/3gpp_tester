/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * QosMonitoringData.h
 *
 * Contains QoS monitoring related control information.
 */

#ifndef QosMonitoringData_H_
#define QosMonitoringData_H_

#include "ReportingFrequency.h"
#include "RequestedQosMonitoringParameter.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains QoS monitoring related control information.
/// </summary>
class QosMonitoringData {
public:
  QosMonitoringData();
  virtual ~QosMonitoringData();

  void validate();

  /////////////////////////////////////////////
  /// QosMonitoringData members

  /// <summary>
  /// Univocally identifies the QoS monitoring policy data within a PDU session.
  /// </summary>
  std::string getQmId() const;
  void setQmId(std::string const &value);
  /// <summary>
  /// indicates the UL packet delay, DL packet delay and/or round trip packet
  /// delay between the UE and the UPF is to be monitored when the QoS
  /// Monitoring for URLLC is enabled for the service data flow.
  /// </summary>
  std::vector<RequestedQosMonitoringParameter> &getReqQosMonParams();
  void
  setReqQosMonParams(std::vector<RequestedQosMonitoringParameter> const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<ReportingFrequency> &getRepFreqs();
  void setRepFreqs(std::vector<ReportingFrequency> const &value);
  /// <summary>
  /// Unsigned integer identifying a period of time in units of miliiseconds for
  /// DL packet delay.
  /// </summary>
  int32_t getRepThreshDl() const;
  void setRepThreshDl(int32_t const value);
  bool repThreshDlIsSet() const;
  void unsetRepThreshDl();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of miliiseconds for
  /// UL packet delay.
  /// </summary>
  int32_t getRepThreshUl() const;
  void setRepThreshUl(int32_t const value);
  bool repThreshUlIsSet() const;
  void unsetRepThreshUl();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of miliiseconds for
  /// round trip packet delay.
  /// </summary>
  int32_t getRepThreshRp() const;
  void setRepThreshRp(int32_t const value);
  bool repThreshRpIsSet() const;
  void unsetRepThreshRp();
  /// <summary>
  /// indicating a time in seconds with OpenAPI defined
  /// \&quot;nullable&#x3D;true\&quot; property.
  /// </summary>
  int32_t getWaitTime() const;
  void setWaitTime(int32_t const value);
  bool waitTimeIsSet() const;
  void unsetWaitTime();
  /// <summary>
  /// indicating a time in seconds with OpenAPI defined
  /// \&quot;nullable&#x3D;true\&quot; property.
  /// </summary>
  int32_t getRepPeriod() const;
  void setRepPeriod(int32_t const value);
  bool repPeriodIsSet() const;
  void unsetRepPeriod();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986 with the OpenAPI
  /// \&quot;nullable&#x3D; true\&quot; property.
  /// </summary>
  std::string getNotifyUri() const;
  void setNotifyUri(std::string const &value);
  bool notifyUriIsSet() const;
  void unsetNotifyUri();
  /// <summary>
  ///
  /// </summary>
  std::string getNotifyCorreId() const;
  void setNotifyCorreId(std::string const &value);
  bool notifyCorreIdIsSet() const;
  void unsetNotifyCorreId();
  /// <summary>
  /// Indicates that the direct event notification sent by UPF to the Local NEF
  /// or AF is requested if it is included and set to true.
  /// </summary>
  bool isDirectNotifInd() const;
  void setDirectNotifInd(bool const value);
  bool directNotifIndIsSet() const;
  void unsetDirectNotifInd();

  friend void to_json(nlohmann::json &j, const QosMonitoringData &o);
  friend void from_json(const nlohmann::json &j, QosMonitoringData &o);

protected:
  std::string m_QmId;

  std::vector<RequestedQosMonitoringParameter> m_ReqQosMonParams;

  std::vector<ReportingFrequency> m_RepFreqs;

  int32_t m_RepThreshDl;
  bool m_RepThreshDlIsSet;
  int32_t m_RepThreshUl;
  bool m_RepThreshUlIsSet;
  int32_t m_RepThreshRp;
  bool m_RepThreshRpIsSet;
  int32_t m_WaitTime;
  bool m_WaitTimeIsSet;
  int32_t m_RepPeriod;
  bool m_RepPeriodIsSet;
  std::string m_NotifyUri;
  bool m_NotifyUriIsSet;
  std::string m_NotifyCorreId;
  bool m_NotifyCorreIdIsSet;
  bool m_DirectNotifInd;
  bool m_DirectNotifIndIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* QosMonitoringData_H_ */
