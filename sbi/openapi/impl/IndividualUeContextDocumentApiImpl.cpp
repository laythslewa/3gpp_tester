/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualUeContextDocumentApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

IndividualUeContextDocumentApiImpl::IndividualUeContextDocumentApiImpl(
    std::shared_ptr<Pistache::Rest::Router> rtr)
    : IndividualUeContextDocumentApi(rtr) {}

void IndividualUeContextDocumentApiImpl::cancel_relocate_ue_context(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualUeContextDocumentApiImpl::create_ue_context(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualUeContextDocumentApiImpl::e_bi_assignment(
    const std::string &ueContextId, const AssignEbiData &assignEbiData,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualUeContextDocumentApiImpl::registration_status_update(
    const std::string &ueContextId,
    const UeRegStatusUpdateReqData &ueRegStatusUpdateReqData,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualUeContextDocumentApiImpl::release_ue_context(
    const std::string &ueContextId, const UEContextRelease &uEContextRelease,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualUeContextDocumentApiImpl::relocate_ue_context(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualUeContextDocumentApiImpl::u_e_context_transfer(
    const std::string &ueContextId,
    const UeContextTransferReqData &ueContextTransferReqData,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
