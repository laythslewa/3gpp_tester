/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AppSessionContextReqData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AppSessionContextReqData::AppSessionContextReqData() {
  m_AfAppId = "";
  m_AfAppIdIsSet = false;
  m_AfChargId = "";
  m_AfChargIdIsSet = false;
  m_AfReqDataIsSet = false;
  m_AfRoutReqIsSet = false;
  m_AspId = "";
  m_AspIdIsSet = false;
  m_BdtRefId = "";
  m_BdtRefIdIsSet = false;
  m_Dnn = "";
  m_DnnIsSet = false;
  m_EvSubscIsSet = false;
  m_McpttId = "";
  m_McpttIdIsSet = false;
  m_McVideoId = "";
  m_McVideoIdIsSet = false;
  m_MedComponentsIsSet = false;
  m_IpDomain = "";
  m_IpDomainIsSet = false;
  m_MpsActionIsSet = false;
  m_MpsId = "";
  m_MpsIdIsSet = false;
  m_McsId = "";
  m_McsIdIsSet = false;
  m_PreemptControlInfoIsSet = false;
  m_ResPrioIsSet = false;
  m_ServInfStatusIsSet = false;
  m_NotifUri = "";
  m_ServUrn = "";
  m_ServUrnIsSet = false;
  m_SliceInfoIsSet = false;
  m_SponId = "";
  m_SponIdIsSet = false;
  m_SponStatusIsSet = false;
  m_Supi = "";
  m_SupiIsSet = false;
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_SuppFeat = "";
  m_UeIpv4 = "";
  m_UeIpv4IsSet = false;
  m_UeIpv6IsSet = false;
  m_UeMac = "";
  m_UeMacIsSet = false;
  m_TsnBridgeManContIsSet = false;
  m_TsnPortManContDsttIsSet = false;
  m_TsnPortManContNwttsIsSet = false;
}

AppSessionContextReqData::~AppSessionContextReqData() {}

void AppSessionContextReqData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AppSessionContextReqData &o) {
  j = nlohmann::json();
  if (o.afAppIdIsSet())
    j["afAppId"] = o.m_AfAppId;
  if (o.afChargIdIsSet())
    j["afChargId"] = o.m_AfChargId;
  if (o.afReqDataIsSet())
    j["afReqData"] = o.m_AfReqData;
  if (o.afRoutReqIsSet())
    j["afRoutReq"] = o.m_AfRoutReq;
  if (o.aspIdIsSet())
    j["aspId"] = o.m_AspId;
  if (o.bdtRefIdIsSet())
    j["bdtRefId"] = o.m_BdtRefId;
  if (o.dnnIsSet())
    j["dnn"] = o.m_Dnn;
  if (o.evSubscIsSet())
    j["evSubsc"] = o.m_EvSubsc;
  if (o.mcpttIdIsSet())
    j["mcpttId"] = o.m_McpttId;
  if (o.mcVideoIdIsSet())
    j["mcVideoId"] = o.m_McVideoId;
  if (o.medComponentsIsSet() || !o.m_MedComponents.empty())
    j["medComponents"] = o.m_MedComponents;
  if (o.ipDomainIsSet())
    j["ipDomain"] = o.m_IpDomain;
  if (o.mpsActionIsSet())
    j["mpsAction"] = o.m_MpsAction;
  if (o.mpsIdIsSet())
    j["mpsId"] = o.m_MpsId;
  if (o.mcsIdIsSet())
    j["mcsId"] = o.m_McsId;
  if (o.preemptControlInfoIsSet())
    j["preemptControlInfo"] = o.m_PreemptControlInfo;
  if (o.resPrioIsSet())
    j["resPrio"] = o.m_ResPrio;
  if (o.servInfStatusIsSet())
    j["servInfStatus"] = o.m_ServInfStatus;
  j["notifUri"] = o.m_NotifUri;
  if (o.servUrnIsSet())
    j["servUrn"] = o.m_ServUrn;
  if (o.sliceInfoIsSet())
    j["sliceInfo"] = o.m_SliceInfo;
  if (o.sponIdIsSet())
    j["sponId"] = o.m_SponId;
  if (o.sponStatusIsSet())
    j["sponStatus"] = o.m_SponStatus;
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  j["suppFeat"] = o.m_SuppFeat;
  if (o.ueIpv4IsSet())
    j["ueIpv4"] = o.m_UeIpv4;
  if (o.ueIpv6IsSet())
    j["ueIpv6"] = o.m_UeIpv6;
  if (o.ueMacIsSet())
    j["ueMac"] = o.m_UeMac;
  if (o.tsnBridgeManContIsSet())
    j["tsnBridgeManCont"] = o.m_TsnBridgeManCont;
  if (o.tsnPortManContDsttIsSet())
    j["tsnPortManContDstt"] = o.m_TsnPortManContDstt;
  if (o.tsnPortManContNwttsIsSet() || !o.m_TsnPortManContNwtts.empty())
    j["tsnPortManContNwtts"] = o.m_TsnPortManContNwtts;
}

void from_json(const nlohmann::json &j, AppSessionContextReqData &o) {
  if (j.find("afAppId") != j.end()) {
    j.at("afAppId").get_to(o.m_AfAppId);
    o.m_AfAppIdIsSet = true;
  }
  if (j.find("afChargId") != j.end()) {
    j.at("afChargId").get_to(o.m_AfChargId);
    o.m_AfChargIdIsSet = true;
  }
  if (j.find("afReqData") != j.end()) {
    j.at("afReqData").get_to(o.m_AfReqData);
    o.m_AfReqDataIsSet = true;
  }
  if (j.find("afRoutReq") != j.end()) {
    j.at("afRoutReq").get_to(o.m_AfRoutReq);
    o.m_AfRoutReqIsSet = true;
  }
  if (j.find("aspId") != j.end()) {
    j.at("aspId").get_to(o.m_AspId);
    o.m_AspIdIsSet = true;
  }
  if (j.find("bdtRefId") != j.end()) {
    j.at("bdtRefId").get_to(o.m_BdtRefId);
    o.m_BdtRefIdIsSet = true;
  }
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
  if (j.find("evSubsc") != j.end()) {
    j.at("evSubsc").get_to(o.m_EvSubsc);
    o.m_EvSubscIsSet = true;
  }
  if (j.find("mcpttId") != j.end()) {
    j.at("mcpttId").get_to(o.m_McpttId);
    o.m_McpttIdIsSet = true;
  }
  if (j.find("mcVideoId") != j.end()) {
    j.at("mcVideoId").get_to(o.m_McVideoId);
    o.m_McVideoIdIsSet = true;
  }
  if (j.find("medComponents") != j.end()) {
    j.at("medComponents").get_to(o.m_MedComponents);
    o.m_MedComponentsIsSet = true;
  }
  if (j.find("ipDomain") != j.end()) {
    j.at("ipDomain").get_to(o.m_IpDomain);
    o.m_IpDomainIsSet = true;
  }
  if (j.find("mpsAction") != j.end()) {
    j.at("mpsAction").get_to(o.m_MpsAction);
    o.m_MpsActionIsSet = true;
  }
  if (j.find("mpsId") != j.end()) {
    j.at("mpsId").get_to(o.m_MpsId);
    o.m_MpsIdIsSet = true;
  }
  if (j.find("mcsId") != j.end()) {
    j.at("mcsId").get_to(o.m_McsId);
    o.m_McsIdIsSet = true;
  }
  if (j.find("preemptControlInfo") != j.end()) {
    j.at("preemptControlInfo").get_to(o.m_PreemptControlInfo);
    o.m_PreemptControlInfoIsSet = true;
  }
  if (j.find("resPrio") != j.end()) {
    j.at("resPrio").get_to(o.m_ResPrio);
    o.m_ResPrioIsSet = true;
  }
  if (j.find("servInfStatus") != j.end()) {
    j.at("servInfStatus").get_to(o.m_ServInfStatus);
    o.m_ServInfStatusIsSet = true;
  }
  j.at("notifUri").get_to(o.m_NotifUri);
  if (j.find("servUrn") != j.end()) {
    j.at("servUrn").get_to(o.m_ServUrn);
    o.m_ServUrnIsSet = true;
  }
  if (j.find("sliceInfo") != j.end()) {
    j.at("sliceInfo").get_to(o.m_SliceInfo);
    o.m_SliceInfoIsSet = true;
  }
  if (j.find("sponId") != j.end()) {
    j.at("sponId").get_to(o.m_SponId);
    o.m_SponIdIsSet = true;
  }
  if (j.find("sponStatus") != j.end()) {
    j.at("sponStatus").get_to(o.m_SponStatus);
    o.m_SponStatusIsSet = true;
  }
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  j.at("suppFeat").get_to(o.m_SuppFeat);
  if (j.find("ueIpv4") != j.end()) {
    j.at("ueIpv4").get_to(o.m_UeIpv4);
    o.m_UeIpv4IsSet = true;
  }
  if (j.find("ueIpv6") != j.end()) {
    j.at("ueIpv6").get_to(o.m_UeIpv6);
    o.m_UeIpv6IsSet = true;
  }
  if (j.find("ueMac") != j.end()) {
    j.at("ueMac").get_to(o.m_UeMac);
    o.m_UeMacIsSet = true;
  }
  if (j.find("tsnBridgeManCont") != j.end()) {
    j.at("tsnBridgeManCont").get_to(o.m_TsnBridgeManCont);
    o.m_TsnBridgeManContIsSet = true;
  }
  if (j.find("tsnPortManContDstt") != j.end()) {
    j.at("tsnPortManContDstt").get_to(o.m_TsnPortManContDstt);
    o.m_TsnPortManContDsttIsSet = true;
  }
  if (j.find("tsnPortManContNwtts") != j.end()) {
    j.at("tsnPortManContNwtts").get_to(o.m_TsnPortManContNwtts);
    o.m_TsnPortManContNwttsIsSet = true;
  }
}

std::string AppSessionContextReqData::getAfAppId() const { return m_AfAppId; }
void AppSessionContextReqData::setAfAppId(std::string const &value) {
  m_AfAppId = value;
  m_AfAppIdIsSet = true;
}
bool AppSessionContextReqData::afAppIdIsSet() const { return m_AfAppIdIsSet; }
void AppSessionContextReqData::unsetAfAppId() { m_AfAppIdIsSet = false; }
std::string AppSessionContextReqData::getAfChargId() const {
  return m_AfChargId;
}
void AppSessionContextReqData::setAfChargId(std::string const &value) {
  m_AfChargId = value;
  m_AfChargIdIsSet = true;
}
bool AppSessionContextReqData::afChargIdIsSet() const {
  return m_AfChargIdIsSet;
}
void AppSessionContextReqData::unsetAfChargId() { m_AfChargIdIsSet = false; }
AfRequestedData AppSessionContextReqData::getAfReqData() const {
  return m_AfReqData;
}
void AppSessionContextReqData::setAfReqData(AfRequestedData const &value) {
  m_AfReqData = value;
  m_AfReqDataIsSet = true;
}
bool AppSessionContextReqData::afReqDataIsSet() const {
  return m_AfReqDataIsSet;
}
void AppSessionContextReqData::unsetAfReqData() { m_AfReqDataIsSet = false; }
AfRoutingRequirement AppSessionContextReqData::getAfRoutReq() const {
  return m_AfRoutReq;
}
void AppSessionContextReqData::setAfRoutReq(AfRoutingRequirement const &value) {
  m_AfRoutReq = value;
  m_AfRoutReqIsSet = true;
}
bool AppSessionContextReqData::afRoutReqIsSet() const {
  return m_AfRoutReqIsSet;
}
void AppSessionContextReqData::unsetAfRoutReq() { m_AfRoutReqIsSet = false; }
std::string AppSessionContextReqData::getAspId() const { return m_AspId; }
void AppSessionContextReqData::setAspId(std::string const &value) {
  m_AspId = value;
  m_AspIdIsSet = true;
}
bool AppSessionContextReqData::aspIdIsSet() const { return m_AspIdIsSet; }
void AppSessionContextReqData::unsetAspId() { m_AspIdIsSet = false; }
std::string AppSessionContextReqData::getBdtRefId() const { return m_BdtRefId; }
void AppSessionContextReqData::setBdtRefId(std::string const &value) {
  m_BdtRefId = value;
  m_BdtRefIdIsSet = true;
}
bool AppSessionContextReqData::bdtRefIdIsSet() const { return m_BdtRefIdIsSet; }
void AppSessionContextReqData::unsetBdtRefId() { m_BdtRefIdIsSet = false; }
std::string AppSessionContextReqData::getDnn() const { return m_Dnn; }
void AppSessionContextReqData::setDnn(std::string const &value) {
  m_Dnn = value;
  m_DnnIsSet = true;
}
bool AppSessionContextReqData::dnnIsSet() const { return m_DnnIsSet; }
void AppSessionContextReqData::unsetDnn() { m_DnnIsSet = false; }
EventsSubscReqData AppSessionContextReqData::getEvSubsc() const {
  return m_EvSubsc;
}
void AppSessionContextReqData::setEvSubsc(EventsSubscReqData const &value) {
  m_EvSubsc = value;
  m_EvSubscIsSet = true;
}
bool AppSessionContextReqData::evSubscIsSet() const { return m_EvSubscIsSet; }
void AppSessionContextReqData::unsetEvSubsc() { m_EvSubscIsSet = false; }
std::string AppSessionContextReqData::getMcpttId() const { return m_McpttId; }
void AppSessionContextReqData::setMcpttId(std::string const &value) {
  m_McpttId = value;
  m_McpttIdIsSet = true;
}
bool AppSessionContextReqData::mcpttIdIsSet() const { return m_McpttIdIsSet; }
void AppSessionContextReqData::unsetMcpttId() { m_McpttIdIsSet = false; }
std::string AppSessionContextReqData::getMcVideoId() const {
  return m_McVideoId;
}
void AppSessionContextReqData::setMcVideoId(std::string const &value) {
  m_McVideoId = value;
  m_McVideoIdIsSet = true;
}
bool AppSessionContextReqData::mcVideoIdIsSet() const {
  return m_McVideoIdIsSet;
}
void AppSessionContextReqData::unsetMcVideoId() { m_McVideoIdIsSet = false; }
std::map<std::string, MediaComponent> &
AppSessionContextReqData::getMedComponents() {
  return m_MedComponents;
}
void AppSessionContextReqData::setMedComponents(
    std::map<std::string, MediaComponent> const &value) {
  m_MedComponents = value;
  m_MedComponentsIsSet = true;
}
bool AppSessionContextReqData::medComponentsIsSet() const {
  return m_MedComponentsIsSet;
}
void AppSessionContextReqData::unsetMedComponents() {
  m_MedComponentsIsSet = false;
}
std::string AppSessionContextReqData::getIpDomain() const { return m_IpDomain; }
void AppSessionContextReqData::setIpDomain(std::string const &value) {
  m_IpDomain = value;
  m_IpDomainIsSet = true;
}
bool AppSessionContextReqData::ipDomainIsSet() const { return m_IpDomainIsSet; }
void AppSessionContextReqData::unsetIpDomain() { m_IpDomainIsSet = false; }
MpsAction AppSessionContextReqData::getMpsAction() const { return m_MpsAction; }
void AppSessionContextReqData::setMpsAction(MpsAction const &value) {
  m_MpsAction = value;
  m_MpsActionIsSet = true;
}
bool AppSessionContextReqData::mpsActionIsSet() const {
  return m_MpsActionIsSet;
}
void AppSessionContextReqData::unsetMpsAction() { m_MpsActionIsSet = false; }
std::string AppSessionContextReqData::getMpsId() const { return m_MpsId; }
void AppSessionContextReqData::setMpsId(std::string const &value) {
  m_MpsId = value;
  m_MpsIdIsSet = true;
}
bool AppSessionContextReqData::mpsIdIsSet() const { return m_MpsIdIsSet; }
void AppSessionContextReqData::unsetMpsId() { m_MpsIdIsSet = false; }
std::string AppSessionContextReqData::getMcsId() const { return m_McsId; }
void AppSessionContextReqData::setMcsId(std::string const &value) {
  m_McsId = value;
  m_McsIdIsSet = true;
}
bool AppSessionContextReqData::mcsIdIsSet() const { return m_McsIdIsSet; }
void AppSessionContextReqData::unsetMcsId() { m_McsIdIsSet = false; }
PreemptionControlInformation
AppSessionContextReqData::getPreemptControlInfo() const {
  return m_PreemptControlInfo;
}
void AppSessionContextReqData::setPreemptControlInfo(
    PreemptionControlInformation const &value) {
  m_PreemptControlInfo = value;
  m_PreemptControlInfoIsSet = true;
}
bool AppSessionContextReqData::preemptControlInfoIsSet() const {
  return m_PreemptControlInfoIsSet;
}
void AppSessionContextReqData::unsetPreemptControlInfo() {
  m_PreemptControlInfoIsSet = false;
}
ReservPriority AppSessionContextReqData::getResPrio() const {
  return m_ResPrio;
}
void AppSessionContextReqData::setResPrio(ReservPriority const &value) {
  m_ResPrio = value;
  m_ResPrioIsSet = true;
}
bool AppSessionContextReqData::resPrioIsSet() const { return m_ResPrioIsSet; }
void AppSessionContextReqData::unsetResPrio() { m_ResPrioIsSet = false; }
ServiceInfoStatus AppSessionContextReqData::getServInfStatus() const {
  return m_ServInfStatus;
}
void AppSessionContextReqData::setServInfStatus(
    ServiceInfoStatus const &value) {
  m_ServInfStatus = value;
  m_ServInfStatusIsSet = true;
}
bool AppSessionContextReqData::servInfStatusIsSet() const {
  return m_ServInfStatusIsSet;
}
void AppSessionContextReqData::unsetServInfStatus() {
  m_ServInfStatusIsSet = false;
}
std::string AppSessionContextReqData::getNotifUri() const { return m_NotifUri; }
void AppSessionContextReqData::setNotifUri(std::string const &value) {
  m_NotifUri = value;
}
std::string AppSessionContextReqData::getServUrn() const { return m_ServUrn; }
void AppSessionContextReqData::setServUrn(std::string const &value) {
  m_ServUrn = value;
  m_ServUrnIsSet = true;
}
bool AppSessionContextReqData::servUrnIsSet() const { return m_ServUrnIsSet; }
void AppSessionContextReqData::unsetServUrn() { m_ServUrnIsSet = false; }
Snssai AppSessionContextReqData::getSliceInfo() const { return m_SliceInfo; }
void AppSessionContextReqData::setSliceInfo(Snssai const &value) {
  m_SliceInfo = value;
  m_SliceInfoIsSet = true;
}
bool AppSessionContextReqData::sliceInfoIsSet() const {
  return m_SliceInfoIsSet;
}
void AppSessionContextReqData::unsetSliceInfo() { m_SliceInfoIsSet = false; }
std::string AppSessionContextReqData::getSponId() const { return m_SponId; }
void AppSessionContextReqData::setSponId(std::string const &value) {
  m_SponId = value;
  m_SponIdIsSet = true;
}
bool AppSessionContextReqData::sponIdIsSet() const { return m_SponIdIsSet; }
void AppSessionContextReqData::unsetSponId() { m_SponIdIsSet = false; }
SponsoringStatus AppSessionContextReqData::getSponStatus() const {
  return m_SponStatus;
}
void AppSessionContextReqData::setSponStatus(SponsoringStatus const &value) {
  m_SponStatus = value;
  m_SponStatusIsSet = true;
}
bool AppSessionContextReqData::sponStatusIsSet() const {
  return m_SponStatusIsSet;
}
void AppSessionContextReqData::unsetSponStatus() { m_SponStatusIsSet = false; }
std::string AppSessionContextReqData::getSupi() const { return m_Supi; }
void AppSessionContextReqData::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool AppSessionContextReqData::supiIsSet() const { return m_SupiIsSet; }
void AppSessionContextReqData::unsetSupi() { m_SupiIsSet = false; }
std::string AppSessionContextReqData::getGpsi() const { return m_Gpsi; }
void AppSessionContextReqData::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool AppSessionContextReqData::gpsiIsSet() const { return m_GpsiIsSet; }
void AppSessionContextReqData::unsetGpsi() { m_GpsiIsSet = false; }
std::string AppSessionContextReqData::getSuppFeat() const { return m_SuppFeat; }
void AppSessionContextReqData::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
}
std::string AppSessionContextReqData::getUeIpv4() const { return m_UeIpv4; }
void AppSessionContextReqData::setUeIpv4(std::string const &value) {
  m_UeIpv4 = value;
  m_UeIpv4IsSet = true;
}
bool AppSessionContextReqData::ueIpv4IsSet() const { return m_UeIpv4IsSet; }
void AppSessionContextReqData::unsetUeIpv4() { m_UeIpv4IsSet = false; }
Ipv6Addr AppSessionContextReqData::getUeIpv6() const { return m_UeIpv6; }
void AppSessionContextReqData::setUeIpv6(Ipv6Addr const &value) {
  m_UeIpv6 = value;
  m_UeIpv6IsSet = true;
}
bool AppSessionContextReqData::ueIpv6IsSet() const { return m_UeIpv6IsSet; }
void AppSessionContextReqData::unsetUeIpv6() { m_UeIpv6IsSet = false; }
std::string AppSessionContextReqData::getUeMac() const { return m_UeMac; }
void AppSessionContextReqData::setUeMac(std::string const &value) {
  m_UeMac = value;
  m_UeMacIsSet = true;
}
bool AppSessionContextReqData::ueMacIsSet() const { return m_UeMacIsSet; }
void AppSessionContextReqData::unsetUeMac() { m_UeMacIsSet = false; }
BridgeManagementContainer
AppSessionContextReqData::getTsnBridgeManCont() const {
  return m_TsnBridgeManCont;
}
void AppSessionContextReqData::setTsnBridgeManCont(
    BridgeManagementContainer const &value) {
  m_TsnBridgeManCont = value;
  m_TsnBridgeManContIsSet = true;
}
bool AppSessionContextReqData::tsnBridgeManContIsSet() const {
  return m_TsnBridgeManContIsSet;
}
void AppSessionContextReqData::unsetTsnBridgeManCont() {
  m_TsnBridgeManContIsSet = false;
}
PortManagementContainer
AppSessionContextReqData::getTsnPortManContDstt() const {
  return m_TsnPortManContDstt;
}
void AppSessionContextReqData::setTsnPortManContDstt(
    PortManagementContainer const &value) {
  m_TsnPortManContDstt = value;
  m_TsnPortManContDsttIsSet = true;
}
bool AppSessionContextReqData::tsnPortManContDsttIsSet() const {
  return m_TsnPortManContDsttIsSet;
}
void AppSessionContextReqData::unsetTsnPortManContDstt() {
  m_TsnPortManContDsttIsSet = false;
}
std::vector<PortManagementContainer> &
AppSessionContextReqData::getTsnPortManContNwtts() {
  return m_TsnPortManContNwtts;
}
void AppSessionContextReqData::setTsnPortManContNwtts(
    std::vector<PortManagementContainer> const &value) {
  m_TsnPortManContNwtts = value;
  m_TsnPortManContNwttsIsSet = true;
}
bool AppSessionContextReqData::tsnPortManContNwttsIsSet() const {
  return m_TsnPortManContNwttsIsSet;
}
void AppSessionContextReqData::unsetTsnPortManContNwtts() {
  m_TsnPortManContNwttsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
