/**
 * Nbsf_Management
 * Binding Support Management Service API. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PCFBindingsCollectionApi.h
 *
 *
 */

#ifndef PCFBindingsCollectionApi_H_
#define PCFBindingsCollectionApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "ExtProblemDetails.h"
#include "Ipv6Prefix.h"
#include "PcfBinding.h"
#include "ProblemDetails.h"
#include "Snssai.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class PCFBindingsCollectionApi {
public:
  PCFBindingsCollectionApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~PCFBindingsCollectionApi() {}
  void init();

  const std::string base = "/nbsf-management/v1";

private:
  void setupRoutes();

  void create_pcf_binding_handler(const Pistache::Rest::Request &request,
                                  Pistache::Http::ResponseWriter response);
  void get_pcf_bindings_handler(const Pistache::Rest::Request &request,
                                Pistache::Http::ResponseWriter response);
  void pcf_bindings_collection_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Create a new Individual PCF binding information
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="pcfBinding"></param>
  virtual void create_pcf_binding(const PcfBinding &pcfBinding,
                                  Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Read PCF Bindings information
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ipv4Addr">The IPv4 Address of the served UE. (optional,
  /// default to &quot;&quot;)</param> <param name="ipv6Prefix">The IPv6 Address
  /// of the served UE. The NF service consumer shall append &#39;/128&#39; to
  /// the IPv6 address in the attribute value. E.g.
  /// &#39;2001:db8:85a3::8a2e:370:7334/128&#39;. (optional, default to
  /// Ipv6Prefix())</param> <param name="macAddr48">The MAC Address of the
  /// served UE. (optional, default to &quot;&quot;)</param> <param
  /// name="dnn">DNN. (optional, default to &quot;&quot;)</param> <param
  /// name="supi">Subscription Permanent Identifier. (optional, default to
  /// &quot;&quot;)</param> <param name="gpsi">Generic Public Subscription
  /// Identifier (optional, default to &quot;&quot;)</param> <param
  /// name="snssai">The identification of slice. (optional, default to
  /// Snssai())</param> <param name="ipDomain">The IPv4 address domain
  /// identifier. (optional, default to &quot;&quot;)</param> <param
  /// name="suppFeat">To filter irrelevant responses related to unsupported
  /// features (optional, default to &quot;&quot;)</param>
  virtual void
  get_pcf_bindings(const Pistache::Optional<std::string> &ipv4Addr,
                   const Pistache::Optional<Ipv6Prefix> &ipv6Prefix,
                   const Pistache::Optional<std::string> &macAddr48,
                   const Pistache::Optional<std::string> &dnn,
                   const Pistache::Optional<std::string> &supi,
                   const Pistache::Optional<std::string> &gpsi,
                   const Pistache::Optional<Snssai> &snssai,
                   const Pistache::Optional<std::string> &ipDomain,
                   const Pistache::Optional<std::string> &suppFeat,
                   Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PCFBindingsCollectionApi_H_ */
