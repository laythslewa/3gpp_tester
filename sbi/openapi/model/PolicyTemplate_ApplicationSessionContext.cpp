/**
 * M1_PolicyTemplatesProvisioning
 * 5GMS AF M1 Policy Templates Provisioning API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PolicyTemplate_ApplicationSessionContext.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PolicyTemplate_ApplicationSessionContext::
    PolicyTemplate_ApplicationSessionContext() {
  m_AfAppId = "";
  m_AfAppIdIsSet = false;
  m_SliceInfoIsSet = false;
  m_Dnn = "";
  m_DnnIsSet = false;
  m_AspId = "";
  m_AspIdIsSet = false;
}

PolicyTemplate_ApplicationSessionContext::
    ~PolicyTemplate_ApplicationSessionContext() {}

void PolicyTemplate_ApplicationSessionContext::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j,
             const PolicyTemplate_ApplicationSessionContext &o) {
  j = nlohmann::json();
  if (o.afAppIdIsSet())
    j["afAppId"] = o.m_AfAppId;
  if (o.sliceInfoIsSet())
    j["sliceInfo"] = o.m_SliceInfo;
  if (o.dnnIsSet())
    j["dnn"] = o.m_Dnn;
  if (o.aspIdIsSet())
    j["aspId"] = o.m_AspId;
}

void from_json(const nlohmann::json &j,
               PolicyTemplate_ApplicationSessionContext &o) {
  if (j.find("afAppId") != j.end()) {
    j.at("afAppId").get_to(o.m_AfAppId);
    o.m_AfAppIdIsSet = true;
  }
  if (j.find("sliceInfo") != j.end()) {
    j.at("sliceInfo").get_to(o.m_SliceInfo);
    o.m_SliceInfoIsSet = true;
  }
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
  if (j.find("aspId") != j.end()) {
    j.at("aspId").get_to(o.m_AspId);
    o.m_AspIdIsSet = true;
  }
}

std::string PolicyTemplate_ApplicationSessionContext::getAfAppId() const {
  return m_AfAppId;
}
void PolicyTemplate_ApplicationSessionContext::setAfAppId(
    std::string const &value) {
  m_AfAppId = value;
  m_AfAppIdIsSet = true;
}
bool PolicyTemplate_ApplicationSessionContext::afAppIdIsSet() const {
  return m_AfAppIdIsSet;
}
void PolicyTemplate_ApplicationSessionContext::unsetAfAppId() {
  m_AfAppIdIsSet = false;
}
Snssai PolicyTemplate_ApplicationSessionContext::getSliceInfo() const {
  return m_SliceInfo;
}
void PolicyTemplate_ApplicationSessionContext::setSliceInfo(
    Snssai const &value) {
  m_SliceInfo = value;
  m_SliceInfoIsSet = true;
}
bool PolicyTemplate_ApplicationSessionContext::sliceInfoIsSet() const {
  return m_SliceInfoIsSet;
}
void PolicyTemplate_ApplicationSessionContext::unsetSliceInfo() {
  m_SliceInfoIsSet = false;
}
std::string PolicyTemplate_ApplicationSessionContext::getDnn() const {
  return m_Dnn;
}
void PolicyTemplate_ApplicationSessionContext::setDnn(
    std::string const &value) {
  m_Dnn = value;
  m_DnnIsSet = true;
}
bool PolicyTemplate_ApplicationSessionContext::dnnIsSet() const {
  return m_DnnIsSet;
}
void PolicyTemplate_ApplicationSessionContext::unsetDnn() {
  m_DnnIsSet = false;
}
std::string PolicyTemplate_ApplicationSessionContext::getAspId() const {
  return m_AspId;
}
void PolicyTemplate_ApplicationSessionContext::setAspId(
    std::string const &value) {
  m_AspId = value;
  m_AspIdIsSet = true;
}
bool PolicyTemplate_ApplicationSessionContext::aspIdIsSet() const {
  return m_AspIdIsSet;
}
void PolicyTemplate_ApplicationSessionContext::unsetAspId() {
  m_AspIdIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
