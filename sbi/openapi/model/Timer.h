/**
 * Nudsf_Timer
 * Nudsf Timer Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Timer.h
 *
 * Represents a timer.
 */

#ifndef Timer_H_
#define Timer_H_

#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a timer.
/// </summary>
class Timer {
public:
  Timer();
  virtual ~Timer();

  void validate();

  /////////////////////////////////////////////
  /// Timer members

  /// <summary>
  /// Represents the identifier of a timer.
  /// </summary>
  std::string getTimerId() const;
  void setTimerId(std::string const &value);
  bool timerIdIsSet() const;
  void unsetTimerId();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getExpires() const;
  void setExpires(std::string const &value);
  /// <summary>
  /// A map (list of key-value pairs where a tagName of type string serves as
  /// key) of tagValue lists
  /// </summary>
  std::map<std::string, std::vector<std::string>> &getMetaTags();
  void
  setMetaTags(std::map<std::string, std::vector<std::string>> const &value);
  bool metaTagsIsSet() const;
  void unsetMetaTags();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getCallbackReference() const;
  void setCallbackReference(std::string const &value);
  bool callbackReferenceIsSet() const;
  void unsetCallbackReference();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getDeleteAfter() const;
  void setDeleteAfter(int32_t const value);
  bool deleteAfterIsSet() const;
  void unsetDeleteAfter();

  friend void to_json(nlohmann::json &j, const Timer &o);
  friend void from_json(const nlohmann::json &j, Timer &o);

protected:
  std::string m_TimerId;
  bool m_TimerIdIsSet;
  std::string m_Expires;

  std::map<std::string, std::vector<std::string>> m_MetaTags;
  bool m_MetaTagsIsSet;
  std::string m_CallbackReference;
  bool m_CallbackReferenceIsSet;
  int32_t m_DeleteAfter;
  bool m_DeleteAfterIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* Timer_H_ */
