/**
 * AUSF API
 * AUSF UE Authentication Service. © 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AuthenticationInfo.h
 *
 * Contains the UE id (i.e. SUCI or SUPI) and the Serving Network Name.
 */

#ifndef AuthenticationInfo_H_
#define AuthenticationInfo_H_

#include "ResynchronizationInfo.h"
#include "TraceData.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the UE id (i.e. SUCI or SUPI) and the Serving Network Name.
/// </summary>
class AuthenticationInfo {
public:
  AuthenticationInfo();
  virtual ~AuthenticationInfo();

  void validate();

  /////////////////////////////////////////////
  /// AuthenticationInfo members

  /// <summary>
  /// String identifying a SUPI or a SUCI.
  /// </summary>
  std::string getSupiOrSuci() const;
  void setSupiOrSuci(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getServingNetworkName() const;
  void setServingNetworkName(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  ResynchronizationInfo getResynchronizationInfo() const;
  void setResynchronizationInfo(ResynchronizationInfo const &value);
  bool resynchronizationInfoIsSet() const;
  void unsetResynchronizationInfo();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  ///
  /// </summary>
  TraceData getTraceData() const;
  void setTraceData(TraceData const &value);
  bool traceDataIsSet() const;
  void unsetTraceData();
  /// <summary>
  /// Identifier of a group of NFs.
  /// </summary>
  std::string getUdmGroupId() const;
  void setUdmGroupId(std::string const &value);
  bool udmGroupIdIsSet() const;
  void unsetUdmGroupId();
  /// <summary>
  ///
  /// </summary>
  std::string getRoutingIndicator() const;
  void setRoutingIndicator(std::string const &value);
  bool routingIndicatorIsSet() const;
  void unsetRoutingIndicator();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getCellCagInfo();
  void setCellCagInfo(std::vector<std::string> const &value);
  bool cellCagInfoIsSet() const;
  void unsetCellCagInfo();
  /// <summary>
  ///
  /// </summary>
  bool isN5gcInd() const;
  void setN5gcInd(bool const value);
  bool n5gcIndIsSet() const;
  void unsetN5gcInd();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  friend void to_json(nlohmann::json &j, const AuthenticationInfo &o);
  friend void from_json(const nlohmann::json &j, AuthenticationInfo &o);

protected:
  std::string m_SupiOrSuci;

  std::string m_ServingNetworkName;

  ResynchronizationInfo m_ResynchronizationInfo;
  bool m_ResynchronizationInfoIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  TraceData m_TraceData;
  bool m_TraceDataIsSet;
  std::string m_UdmGroupId;
  bool m_UdmGroupIdIsSet;
  std::string m_RoutingIndicator;
  bool m_RoutingIndicatorIsSet;
  std::vector<std::string> m_CellCagInfo;
  bool m_CellCagInfoIsSet;
  bool m_N5gcInd;
  bool m_N5gcIndIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AuthenticationInfo_H_ */
