/**
 * Namf_Location
 * AMF Location Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RequestPosInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestPosInfo::RequestPosInfo() {
  m_Supi = "";
  m_SupiIsSet = false;
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_PriorityIsSet = false;
  m_LcsQoSIsSet = false;
  m_VelocityRequestedIsSet = false;
  m_LcsSupportedGADShapesIsSet = false;
  m_AdditionalLcsSuppGADShapesIsSet = false;
  m_LocationNotificationUri = "";
  m_LocationNotificationUriIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_OldGuamiIsSet = false;
  m_Pei = "";
  m_PeiIsSet = false;
  m_LcsServiceType = 0;
  m_LcsServiceTypeIsSet = false;
  m_LdrTypeIsSet = false;
  m_HgmlcCallBackURI = "";
  m_HgmlcCallBackURIIsSet = false;
  m_LdrReference = "";
  m_LdrReferenceIsSet = false;
  m_PeriodicEventInfoIsSet = false;
  m_AreaEventInfoIsSet = false;
  m_MotionEventInfoIsSet = false;
  m_ExternalClientIdentification = "";
  m_ExternalClientIdentificationIsSet = false;
  m_AfID = "";
  m_AfIDIsSet = false;
  m_CodeWord = "";
  m_CodeWordIsSet = false;
  m_UePrivacyRequirementsIsSet = false;
}

RequestPosInfo::~RequestPosInfo() {}

void RequestPosInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const RequestPosInfo &o) {
  j = nlohmann::json();
  j["lcsClientType"] = o.m_LcsClientType;
  j["lcsLocation"] = o.m_LcsLocation;
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  if (o.priorityIsSet())
    j["priority"] = o.m_Priority;
  if (o.lcsQoSIsSet())
    j["lcsQoS"] = o.m_LcsQoS;
  if (o.velocityRequestedIsSet())
    j["velocityRequested"] = o.m_VelocityRequested;
  if (o.lcsSupportedGADShapesIsSet())
    j["lcsSupportedGADShapes"] = o.m_LcsSupportedGADShapes;
  if (o.additionalLcsSuppGADShapesIsSet() ||
      !o.m_AdditionalLcsSuppGADShapes.empty())
    j["additionalLcsSuppGADShapes"] = o.m_AdditionalLcsSuppGADShapes;
  if (o.locationNotificationUriIsSet())
    j["locationNotificationUri"] = o.m_LocationNotificationUri;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.oldGuamiIsSet())
    j["oldGuami"] = o.m_OldGuami;
  if (o.peiIsSet())
    j["pei"] = o.m_Pei;
  if (o.lcsServiceTypeIsSet())
    j["lcsServiceType"] = o.m_LcsServiceType;
  if (o.ldrTypeIsSet())
    j["ldrType"] = o.m_LdrType;
  if (o.hgmlcCallBackURIIsSet())
    j["hgmlcCallBackURI"] = o.m_HgmlcCallBackURI;
  if (o.ldrReferenceIsSet())
    j["ldrReference"] = o.m_LdrReference;
  if (o.periodicEventInfoIsSet())
    j["periodicEventInfo"] = o.m_PeriodicEventInfo;
  if (o.areaEventInfoIsSet())
    j["areaEventInfo"] = o.m_AreaEventInfo;
  if (o.motionEventInfoIsSet())
    j["motionEventInfo"] = o.m_MotionEventInfo;
  if (o.externalClientIdentificationIsSet())
    j["externalClientIdentification"] = o.m_ExternalClientIdentification;
  if (o.afIDIsSet())
    j["afID"] = o.m_AfID;
  if (o.codeWordIsSet())
    j["codeWord"] = o.m_CodeWord;
  if (o.uePrivacyRequirementsIsSet())
    j["uePrivacyRequirements"] = o.m_UePrivacyRequirements;
}

void from_json(const nlohmann::json &j, RequestPosInfo &o) {
  j.at("lcsClientType").get_to(o.m_LcsClientType);
  j.at("lcsLocation").get_to(o.m_LcsLocation);
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("priority") != j.end()) {
    j.at("priority").get_to(o.m_Priority);
    o.m_PriorityIsSet = true;
  }
  if (j.find("lcsQoS") != j.end()) {
    j.at("lcsQoS").get_to(o.m_LcsQoS);
    o.m_LcsQoSIsSet = true;
  }
  if (j.find("velocityRequested") != j.end()) {
    j.at("velocityRequested").get_to(o.m_VelocityRequested);
    o.m_VelocityRequestedIsSet = true;
  }
  if (j.find("lcsSupportedGADShapes") != j.end()) {
    j.at("lcsSupportedGADShapes").get_to(o.m_LcsSupportedGADShapes);
    o.m_LcsSupportedGADShapesIsSet = true;
  }
  if (j.find("additionalLcsSuppGADShapes") != j.end()) {
    j.at("additionalLcsSuppGADShapes").get_to(o.m_AdditionalLcsSuppGADShapes);
    o.m_AdditionalLcsSuppGADShapesIsSet = true;
  }
  if (j.find("locationNotificationUri") != j.end()) {
    j.at("locationNotificationUri").get_to(o.m_LocationNotificationUri);
    o.m_LocationNotificationUriIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("oldGuami") != j.end()) {
    j.at("oldGuami").get_to(o.m_OldGuami);
    o.m_OldGuamiIsSet = true;
  }
  if (j.find("pei") != j.end()) {
    j.at("pei").get_to(o.m_Pei);
    o.m_PeiIsSet = true;
  }
  if (j.find("lcsServiceType") != j.end()) {
    j.at("lcsServiceType").get_to(o.m_LcsServiceType);
    o.m_LcsServiceTypeIsSet = true;
  }
  if (j.find("ldrType") != j.end()) {
    j.at("ldrType").get_to(o.m_LdrType);
    o.m_LdrTypeIsSet = true;
  }
  if (j.find("hgmlcCallBackURI") != j.end()) {
    j.at("hgmlcCallBackURI").get_to(o.m_HgmlcCallBackURI);
    o.m_HgmlcCallBackURIIsSet = true;
  }
  if (j.find("ldrReference") != j.end()) {
    j.at("ldrReference").get_to(o.m_LdrReference);
    o.m_LdrReferenceIsSet = true;
  }
  if (j.find("periodicEventInfo") != j.end()) {
    j.at("periodicEventInfo").get_to(o.m_PeriodicEventInfo);
    o.m_PeriodicEventInfoIsSet = true;
  }
  if (j.find("areaEventInfo") != j.end()) {
    j.at("areaEventInfo").get_to(o.m_AreaEventInfo);
    o.m_AreaEventInfoIsSet = true;
  }
  if (j.find("motionEventInfo") != j.end()) {
    j.at("motionEventInfo").get_to(o.m_MotionEventInfo);
    o.m_MotionEventInfoIsSet = true;
  }
  if (j.find("externalClientIdentification") != j.end()) {
    j.at("externalClientIdentification")
        .get_to(o.m_ExternalClientIdentification);
    o.m_ExternalClientIdentificationIsSet = true;
  }
  if (j.find("afID") != j.end()) {
    j.at("afID").get_to(o.m_AfID);
    o.m_AfIDIsSet = true;
  }
  if (j.find("codeWord") != j.end()) {
    j.at("codeWord").get_to(o.m_CodeWord);
    o.m_CodeWordIsSet = true;
  }
  if (j.find("uePrivacyRequirements") != j.end()) {
    j.at("uePrivacyRequirements").get_to(o.m_UePrivacyRequirements);
    o.m_UePrivacyRequirementsIsSet = true;
  }
}

ExternalClientType RequestPosInfo::getLcsClientType() const {
  return m_LcsClientType;
}
void RequestPosInfo::setLcsClientType(ExternalClientType const &value) {
  m_LcsClientType = value;
}
LocationType RequestPosInfo::getLcsLocation() const { return m_LcsLocation; }
void RequestPosInfo::setLcsLocation(LocationType const &value) {
  m_LcsLocation = value;
}
std::string RequestPosInfo::getSupi() const { return m_Supi; }
void RequestPosInfo::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool RequestPosInfo::supiIsSet() const { return m_SupiIsSet; }
void RequestPosInfo::unsetSupi() { m_SupiIsSet = false; }
std::string RequestPosInfo::getGpsi() const { return m_Gpsi; }
void RequestPosInfo::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool RequestPosInfo::gpsiIsSet() const { return m_GpsiIsSet; }
void RequestPosInfo::unsetGpsi() { m_GpsiIsSet = false; }
LcsPriority RequestPosInfo::getPriority() const { return m_Priority; }
void RequestPosInfo::setPriority(LcsPriority const &value) {
  m_Priority = value;
  m_PriorityIsSet = true;
}
bool RequestPosInfo::priorityIsSet() const { return m_PriorityIsSet; }
void RequestPosInfo::unsetPriority() { m_PriorityIsSet = false; }
LocationQoS RequestPosInfo::getLcsQoS() const { return m_LcsQoS; }
void RequestPosInfo::setLcsQoS(LocationQoS const &value) {
  m_LcsQoS = value;
  m_LcsQoSIsSet = true;
}
bool RequestPosInfo::lcsQoSIsSet() const { return m_LcsQoSIsSet; }
void RequestPosInfo::unsetLcsQoS() { m_LcsQoSIsSet = false; }
VelocityRequested RequestPosInfo::getVelocityRequested() const {
  return m_VelocityRequested;
}
void RequestPosInfo::setVelocityRequested(VelocityRequested const &value) {
  m_VelocityRequested = value;
  m_VelocityRequestedIsSet = true;
}
bool RequestPosInfo::velocityRequestedIsSet() const {
  return m_VelocityRequestedIsSet;
}
void RequestPosInfo::unsetVelocityRequested() {
  m_VelocityRequestedIsSet = false;
}
SupportedGADShapes RequestPosInfo::getLcsSupportedGADShapes() const {
  return m_LcsSupportedGADShapes;
}
void RequestPosInfo::setLcsSupportedGADShapes(SupportedGADShapes const &value) {
  m_LcsSupportedGADShapes = value;
  m_LcsSupportedGADShapesIsSet = true;
}
bool RequestPosInfo::lcsSupportedGADShapesIsSet() const {
  return m_LcsSupportedGADShapesIsSet;
}
void RequestPosInfo::unsetLcsSupportedGADShapes() {
  m_LcsSupportedGADShapesIsSet = false;
}
std::vector<SupportedGADShapes> &
RequestPosInfo::getAdditionalLcsSuppGADShapes() {
  return m_AdditionalLcsSuppGADShapes;
}
void RequestPosInfo::setAdditionalLcsSuppGADShapes(
    std::vector<SupportedGADShapes> const &value) {
  m_AdditionalLcsSuppGADShapes = value;
  m_AdditionalLcsSuppGADShapesIsSet = true;
}
bool RequestPosInfo::additionalLcsSuppGADShapesIsSet() const {
  return m_AdditionalLcsSuppGADShapesIsSet;
}
void RequestPosInfo::unsetAdditionalLcsSuppGADShapes() {
  m_AdditionalLcsSuppGADShapesIsSet = false;
}
std::string RequestPosInfo::getLocationNotificationUri() const {
  return m_LocationNotificationUri;
}
void RequestPosInfo::setLocationNotificationUri(std::string const &value) {
  m_LocationNotificationUri = value;
  m_LocationNotificationUriIsSet = true;
}
bool RequestPosInfo::locationNotificationUriIsSet() const {
  return m_LocationNotificationUriIsSet;
}
void RequestPosInfo::unsetLocationNotificationUri() {
  m_LocationNotificationUriIsSet = false;
}
std::string RequestPosInfo::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void RequestPosInfo::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool RequestPosInfo::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void RequestPosInfo::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
Guami RequestPosInfo::getOldGuami() const { return m_OldGuami; }
void RequestPosInfo::setOldGuami(Guami const &value) {
  m_OldGuami = value;
  m_OldGuamiIsSet = true;
}
bool RequestPosInfo::oldGuamiIsSet() const { return m_OldGuamiIsSet; }
void RequestPosInfo::unsetOldGuami() { m_OldGuamiIsSet = false; }
std::string RequestPosInfo::getPei() const { return m_Pei; }
void RequestPosInfo::setPei(std::string const &value) {
  m_Pei = value;
  m_PeiIsSet = true;
}
bool RequestPosInfo::peiIsSet() const { return m_PeiIsSet; }
void RequestPosInfo::unsetPei() { m_PeiIsSet = false; }
int32_t RequestPosInfo::getLcsServiceType() const { return m_LcsServiceType; }
void RequestPosInfo::setLcsServiceType(int32_t const value) {
  m_LcsServiceType = value;
  m_LcsServiceTypeIsSet = true;
}
bool RequestPosInfo::lcsServiceTypeIsSet() const {
  return m_LcsServiceTypeIsSet;
}
void RequestPosInfo::unsetLcsServiceType() { m_LcsServiceTypeIsSet = false; }
LdrType RequestPosInfo::getLdrType() const { return m_LdrType; }
void RequestPosInfo::setLdrType(LdrType const &value) {
  m_LdrType = value;
  m_LdrTypeIsSet = true;
}
bool RequestPosInfo::ldrTypeIsSet() const { return m_LdrTypeIsSet; }
void RequestPosInfo::unsetLdrType() { m_LdrTypeIsSet = false; }
std::string RequestPosInfo::getHgmlcCallBackURI() const {
  return m_HgmlcCallBackURI;
}
void RequestPosInfo::setHgmlcCallBackURI(std::string const &value) {
  m_HgmlcCallBackURI = value;
  m_HgmlcCallBackURIIsSet = true;
}
bool RequestPosInfo::hgmlcCallBackURIIsSet() const {
  return m_HgmlcCallBackURIIsSet;
}
void RequestPosInfo::unsetHgmlcCallBackURI() {
  m_HgmlcCallBackURIIsSet = false;
}
std::string RequestPosInfo::getLdrReference() const { return m_LdrReference; }
void RequestPosInfo::setLdrReference(std::string const &value) {
  m_LdrReference = value;
  m_LdrReferenceIsSet = true;
}
bool RequestPosInfo::ldrReferenceIsSet() const { return m_LdrReferenceIsSet; }
void RequestPosInfo::unsetLdrReference() { m_LdrReferenceIsSet = false; }
PeriodicEventInfo RequestPosInfo::getPeriodicEventInfo() const {
  return m_PeriodicEventInfo;
}
void RequestPosInfo::setPeriodicEventInfo(PeriodicEventInfo const &value) {
  m_PeriodicEventInfo = value;
  m_PeriodicEventInfoIsSet = true;
}
bool RequestPosInfo::periodicEventInfoIsSet() const {
  return m_PeriodicEventInfoIsSet;
}
void RequestPosInfo::unsetPeriodicEventInfo() {
  m_PeriodicEventInfoIsSet = false;
}
AreaEventInfo RequestPosInfo::getAreaEventInfo() const {
  return m_AreaEventInfo;
}
void RequestPosInfo::setAreaEventInfo(AreaEventInfo const &value) {
  m_AreaEventInfo = value;
  m_AreaEventInfoIsSet = true;
}
bool RequestPosInfo::areaEventInfoIsSet() const { return m_AreaEventInfoIsSet; }
void RequestPosInfo::unsetAreaEventInfo() { m_AreaEventInfoIsSet = false; }
MotionEventInfo RequestPosInfo::getMotionEventInfo() const {
  return m_MotionEventInfo;
}
void RequestPosInfo::setMotionEventInfo(MotionEventInfo const &value) {
  m_MotionEventInfo = value;
  m_MotionEventInfoIsSet = true;
}
bool RequestPosInfo::motionEventInfoIsSet() const {
  return m_MotionEventInfoIsSet;
}
void RequestPosInfo::unsetMotionEventInfo() { m_MotionEventInfoIsSet = false; }
std::string RequestPosInfo::getExternalClientIdentification() const {
  return m_ExternalClientIdentification;
}
void RequestPosInfo::setExternalClientIdentification(std::string const &value) {
  m_ExternalClientIdentification = value;
  m_ExternalClientIdentificationIsSet = true;
}
bool RequestPosInfo::externalClientIdentificationIsSet() const {
  return m_ExternalClientIdentificationIsSet;
}
void RequestPosInfo::unsetExternalClientIdentification() {
  m_ExternalClientIdentificationIsSet = false;
}
std::string RequestPosInfo::getAfID() const { return m_AfID; }
void RequestPosInfo::setAfID(std::string const &value) {
  m_AfID = value;
  m_AfIDIsSet = true;
}
bool RequestPosInfo::afIDIsSet() const { return m_AfIDIsSet; }
void RequestPosInfo::unsetAfID() { m_AfIDIsSet = false; }
std::string RequestPosInfo::getCodeWord() const { return m_CodeWord; }
void RequestPosInfo::setCodeWord(std::string const &value) {
  m_CodeWord = value;
  m_CodeWordIsSet = true;
}
bool RequestPosInfo::codeWordIsSet() const { return m_CodeWordIsSet; }
void RequestPosInfo::unsetCodeWord() { m_CodeWordIsSet = false; }
UePrivacyRequirements RequestPosInfo::getUePrivacyRequirements() const {
  return m_UePrivacyRequirements;
}
void RequestPosInfo::setUePrivacyRequirements(
    UePrivacyRequirements const &value) {
  m_UePrivacyRequirements = value;
  m_UePrivacyRequirementsIsSet = true;
}
bool RequestPosInfo::uePrivacyRequirementsIsSet() const {
  return m_UePrivacyRequirementsIsSet;
}
void RequestPosInfo::unsetUePrivacyRequirements() {
  m_UePrivacyRequirementsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
