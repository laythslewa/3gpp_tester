/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NefInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NefInfo::NefInfo() {
  m_NefId = "";
  m_NefIdIsSet = false;
  m_PfdDataIsSet = false;
  m_AfEeDataIsSet = false;
  m_GpsiRangesIsSet = false;
  m_ExternalGroupIdentifiersRangesIsSet = false;
  m_ServedFqdnListIsSet = false;
}

NefInfo::~NefInfo() {}

void NefInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NefInfo &o) {
  j = nlohmann::json();
  if (o.nefIdIsSet())
    j["nefId"] = o.m_NefId;
  if (o.pfdDataIsSet())
    j["pfdData"] = o.m_PfdData;
  if (o.afEeDataIsSet())
    j["afEeData"] = o.m_AfEeData;
  if (o.gpsiRangesIsSet() || !o.m_GpsiRanges.empty())
    j["gpsiRanges"] = o.m_GpsiRanges;
  if (o.externalGroupIdentifiersRangesIsSet() ||
      !o.m_ExternalGroupIdentifiersRanges.empty())
    j["externalGroupIdentifiersRanges"] = o.m_ExternalGroupIdentifiersRanges;
  if (o.servedFqdnListIsSet() || !o.m_ServedFqdnList.empty())
    j["servedFqdnList"] = o.m_ServedFqdnList;
}

void from_json(const nlohmann::json &j, NefInfo &o) {
  if (j.find("nefId") != j.end()) {
    j.at("nefId").get_to(o.m_NefId);
    o.m_NefIdIsSet = true;
  }
  if (j.find("pfdData") != j.end()) {
    j.at("pfdData").get_to(o.m_PfdData);
    o.m_PfdDataIsSet = true;
  }
  if (j.find("afEeData") != j.end()) {
    j.at("afEeData").get_to(o.m_AfEeData);
    o.m_AfEeDataIsSet = true;
  }
  if (j.find("gpsiRanges") != j.end()) {
    j.at("gpsiRanges").get_to(o.m_GpsiRanges);
    o.m_GpsiRangesIsSet = true;
  }
  if (j.find("externalGroupIdentifiersRanges") != j.end()) {
    j.at("externalGroupIdentifiersRanges")
        .get_to(o.m_ExternalGroupIdentifiersRanges);
    o.m_ExternalGroupIdentifiersRangesIsSet = true;
  }
  if (j.find("servedFqdnList") != j.end()) {
    j.at("servedFqdnList").get_to(o.m_ServedFqdnList);
    o.m_ServedFqdnListIsSet = true;
  }
}

std::string NefInfo::getNefId() const { return m_NefId; }
void NefInfo::setNefId(std::string const &value) {
  m_NefId = value;
  m_NefIdIsSet = true;
}
bool NefInfo::nefIdIsSet() const { return m_NefIdIsSet; }
void NefInfo::unsetNefId() { m_NefIdIsSet = false; }
PfdData NefInfo::getPfdData() const { return m_PfdData; }
void NefInfo::setPfdData(PfdData const &value) {
  m_PfdData = value;
  m_PfdDataIsSet = true;
}
bool NefInfo::pfdDataIsSet() const { return m_PfdDataIsSet; }
void NefInfo::unsetPfdData() { m_PfdDataIsSet = false; }
AfEventExposureData NefInfo::getAfEeData() const { return m_AfEeData; }
void NefInfo::setAfEeData(AfEventExposureData const &value) {
  m_AfEeData = value;
  m_AfEeDataIsSet = true;
}
bool NefInfo::afEeDataIsSet() const { return m_AfEeDataIsSet; }
void NefInfo::unsetAfEeData() { m_AfEeDataIsSet = false; }
std::vector<IdentityRange> &NefInfo::getGpsiRanges() { return m_GpsiRanges; }
void NefInfo::setGpsiRanges(std::vector<IdentityRange> const &value) {
  m_GpsiRanges = value;
  m_GpsiRangesIsSet = true;
}
bool NefInfo::gpsiRangesIsSet() const { return m_GpsiRangesIsSet; }
void NefInfo::unsetGpsiRanges() { m_GpsiRangesIsSet = false; }
std::vector<IdentityRange> &NefInfo::getExternalGroupIdentifiersRanges() {
  return m_ExternalGroupIdentifiersRanges;
}
void NefInfo::setExternalGroupIdentifiersRanges(
    std::vector<IdentityRange> const &value) {
  m_ExternalGroupIdentifiersRanges = value;
  m_ExternalGroupIdentifiersRangesIsSet = true;
}
bool NefInfo::externalGroupIdentifiersRangesIsSet() const {
  return m_ExternalGroupIdentifiersRangesIsSet;
}
void NefInfo::unsetExternalGroupIdentifiersRanges() {
  m_ExternalGroupIdentifiersRangesIsSet = false;
}
std::vector<std::string> &NefInfo::getServedFqdnList() {
  return m_ServedFqdnList;
}
void NefInfo::setServedFqdnList(std::vector<std::string> const &value) {
  m_ServedFqdnList = value;
  m_ServedFqdnListIsSet = true;
}
bool NefInfo::servedFqdnListIsSet() const { return m_ServedFqdnListIsSet; }
void NefInfo::unsetServedFqdnList() { m_ServedFqdnListIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
