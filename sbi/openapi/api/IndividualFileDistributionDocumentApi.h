/**
 * VAE_FileDistribution
 * API for VAE File Distribution Service Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualFileDistributionDocumentApi.h
 *
 *
 */

#ifndef IndividualFileDistributionDocumentApi_H_
#define IndividualFileDistributionDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "FileDistributionData.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class IndividualFileDistributionDocumentApi {
public:
  IndividualFileDistributionDocumentApi(
      std::shared_ptr<Pistache::Rest::Router>);
  virtual ~IndividualFileDistributionDocumentApi() {}
  void init();

  const std::string base = "/vae-file-distribution/v1";

private:
  void setupRoutes();

  void
  delete_file_distribution_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response);
  void read_individual_file_distribution_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void individual_file_distribution_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// VAE File Distribution resource delete service Operation
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="distributionId">Unique ID of the file distribution to be
  /// deleted</param>
  virtual void
  delete_file_distribution(const std::string &distributionId,
                           Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Get an existing individual file distribution resource
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="distributionId">Identifier of a file distribution
  /// resource</param>
  virtual void read_individual_file_distribution(
      const std::string &distributionId,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IndividualFileDistributionDocumentApi_H_ */
