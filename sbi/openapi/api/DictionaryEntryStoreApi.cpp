/**
 * Nucmf_UECapabilityManagement
 * Nucmf_UECapabilityManagement Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DictionaryEntryStoreApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

DictionaryEntryStoreApi::DictionaryEntryStoreApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void DictionaryEntryStoreApi::init() { setupRoutes(); }

void DictionaryEntryStoreApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Get(
      *router, base + "/dic-entries",
      Routes::bind(&DictionaryEntryStoreApi::retrieve_dictionary_entry_handler,
                   this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &DictionaryEntryStoreApi::dictionary_entry_store_api_default_handler,
      this));
}

void DictionaryEntryStoreApi::retrieve_dictionary_entry_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {

  // Getting the query params
  auto ueRadioCapaIdQuery = request.query().get("ue-radio-capa-id");
  Pistache::Optional<UeRadioCapaId> ueRadioCapaId;
  if (!ueRadioCapaIdQuery.isEmpty()) {
    UeRadioCapaId valueQuery_instance;
    if (fromStringValue(ueRadioCapaIdQuery.get(), valueQuery_instance)) {
      ueRadioCapaId = Pistache::Some(valueQuery_instance);
    }
  }
  auto racFormatQuery = request.query().get("rac-format");
  Pistache::Optional<RacFormat> racFormat;
  if (!racFormatQuery.isEmpty()) {
    RacFormat valueQuery_instance;
    if (fromStringValue(racFormatQuery.get(), valueQuery_instance)) {
      racFormat = Pistache::Some(valueQuery_instance);
    }
  }
  auto supportedFeaturesQuery = request.query().get("supported-features");
  Pistache::Optional<std::string> supportedFeatures;
  if (!supportedFeaturesQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(supportedFeaturesQuery.get(), valueQuery_instance)) {
      supportedFeatures = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->retrieve_dictionary_entry(ueRadioCapaId, racFormat, supportedFeatures,
                                    response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void DictionaryEntryStoreApi::dictionary_entry_store_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
