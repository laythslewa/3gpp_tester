/**
 * 3gpp-as-session-with-qos
 * API for setting us an AS session with required QoS. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AsSessionWithQoSAPISubscriptionLevelPATCHOperationApi.h
 *
 *
 */

#ifndef AsSessionWithQoSAPISubscriptionLevelPATCHOperationApi_H_
#define AsSessionWithQoSAPISubscriptionLevelPATCHOperationApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "AsSessionWithQoSSubscription.h"
#include "AsSessionWithQoSSubscriptionPatch.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class AsSessionWithQoSAPISubscriptionLevelPATCHOperationApi {
public:
  AsSessionWithQoSAPISubscriptionLevelPATCHOperationApi(
      std::shared_ptr<Pistache::Rest::Router>);
  virtual ~AsSessionWithQoSAPISubscriptionLevelPATCHOperationApi() {}
  void init();

  const std::string base = "/3gpp-as-session-with-qos/v1";

private:
  void setupRoutes();

  void scs_as_id_subscriptions_subscription_id_patch_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void
  as_session_with_qo_sapi_subscription_level_patch_operation_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Updates/replaces an existing subscription resource
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="scsAsId">Identifier of the SCS/AS</param>
  /// <param name="subscriptionId">Identifier of the subscription
  /// resource</param> <param name="asSessionWithQoSSubscriptionPatch"></param>
  virtual void scs_as_id_subscriptions_subscription_id_patch(
      const std::string &scsAsId, const std::string &subscriptionId,
      const AsSessionWithQoSSubscriptionPatch
          &asSessionWithQoSSubscriptionPatch,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AsSessionWithQoSAPISubscriptionLevelPATCHOperationApi_H_ */
