/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    © 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * N2ConnectionChargingInformation.h
 *
 *
 */

#ifndef N2ConnectionChargingInformation_H_
#define N2ConnectionChargingInformation_H_

#include "Area.h"
#include "CoreNetworkType.h"
#include "GlobalRanNodeId.h"
#include "PSCellInformation.h"
#include "RatType.h"
#include "ServiceAreaRestriction.h"
#include "Snssai.h"
#include "UserInformation.h"
#include "UserLocation.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class N2ConnectionChargingInformation {
public:
  N2ConnectionChargingInformation();
  virtual ~N2ConnectionChargingInformation();

  void validate();

  /////////////////////////////////////////////
  /// N2ConnectionChargingInformation members

  /// <summary>
  ///
  /// </summary>
  int32_t getN2ConnectionMessageType() const;
  void setN2ConnectionMessageType(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  UserInformation getUserInformation() const;
  void setUserInformation(UserInformation const &value);
  bool userInformationIsSet() const;
  void unsetUserInformation();
  /// <summary>
  ///
  /// </summary>
  UserLocation getUserLocationinfo() const;
  void setUserLocationinfo(UserLocation const &value);
  bool userLocationinfoIsSet() const;
  void unsetUserLocationinfo();
  /// <summary>
  ///
  /// </summary>
  PSCellInformation getPSCellInformation() const;
  void setPSCellInformation(PSCellInformation const &value);
  bool pSCellInformationIsSet() const;
  void unsetPSCellInformation();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getUetimeZone() const;
  void setUetimeZone(std::string const &value);
  bool uetimeZoneIsSet() const;
  void unsetUetimeZone();
  /// <summary>
  ///
  /// </summary>
  RatType getRATType() const;
  void setRATType(RatType const &value);
  bool rATTypeIsSet() const;
  void unsetRATType();
  /// <summary>
  ///
  /// </summary>
  int32_t getAmfUeNgapId() const;
  void setAmfUeNgapId(int32_t const value);
  bool amfUeNgapIdIsSet() const;
  void unsetAmfUeNgapId();
  /// <summary>
  ///
  /// </summary>
  int32_t getRanUeNgapId() const;
  void setRanUeNgapId(int32_t const value);
  bool ranUeNgapIdIsSet() const;
  void unsetRanUeNgapId();
  /// <summary>
  ///
  /// </summary>
  GlobalRanNodeId getRanNodeId() const;
  void setRanNodeId(GlobalRanNodeId const &value);
  bool ranNodeIdIsSet() const;
  void unsetRanNodeId();
  /// <summary>
  ///
  /// </summary>
  std::vector<RatType> &getRestrictedRatList();
  void setRestrictedRatList(std::vector<RatType> const &value);
  bool restrictedRatListIsSet() const;
  void unsetRestrictedRatList();
  /// <summary>
  ///
  /// </summary>
  std::vector<Area> &getForbiddenAreaList();
  void setForbiddenAreaList(std::vector<Area> const &value);
  bool forbiddenAreaListIsSet() const;
  void unsetForbiddenAreaList();
  /// <summary>
  ///
  /// </summary>
  std::vector<ServiceAreaRestriction> &getServiceAreaRestriction();
  void
  setServiceAreaRestriction(std::vector<ServiceAreaRestriction> const &value);
  bool serviceAreaRestrictionIsSet() const;
  void unsetServiceAreaRestriction();
  /// <summary>
  ///
  /// </summary>
  std::vector<CoreNetworkType> &getRestrictedCnList();
  void setRestrictedCnList(std::vector<CoreNetworkType> const &value);
  bool restrictedCnListIsSet() const;
  void unsetRestrictedCnList();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getAllowedNSSAI();
  void setAllowedNSSAI(std::vector<Snssai> const &value);
  bool allowedNSSAIIsSet() const;
  void unsetAllowedNSSAI();
  /// <summary>
  ///
  /// </summary>
  std::string getRrcEstCause() const;
  void setRrcEstCause(std::string const &value);
  bool rrcEstCauseIsSet() const;
  void unsetRrcEstCause();

  friend void to_json(nlohmann::json &j,
                      const N2ConnectionChargingInformation &o);
  friend void from_json(const nlohmann::json &j,
                        N2ConnectionChargingInformation &o);

protected:
  int32_t m_N2ConnectionMessageType;

  UserInformation m_UserInformation;
  bool m_UserInformationIsSet;
  UserLocation m_UserLocationinfo;
  bool m_UserLocationinfoIsSet;
  PSCellInformation m_PSCellInformation;
  bool m_PSCellInformationIsSet;
  std::string m_UetimeZone;
  bool m_UetimeZoneIsSet;
  RatType m_RATType;
  bool m_RATTypeIsSet;
  int32_t m_AmfUeNgapId;
  bool m_AmfUeNgapIdIsSet;
  int32_t m_RanUeNgapId;
  bool m_RanUeNgapIdIsSet;
  GlobalRanNodeId m_RanNodeId;
  bool m_RanNodeIdIsSet;
  std::vector<RatType> m_RestrictedRatList;
  bool m_RestrictedRatListIsSet;
  std::vector<Area> m_ForbiddenAreaList;
  bool m_ForbiddenAreaListIsSet;
  std::vector<ServiceAreaRestriction> m_ServiceAreaRestriction;
  bool m_ServiceAreaRestrictionIsSet;
  std::vector<CoreNetworkType> m_RestrictedCnList;
  bool m_RestrictedCnListIsSet;
  std::vector<Snssai> m_AllowedNSSAI;
  bool m_AllowedNSSAIIsSet;
  std::string m_RrcEstCause;
  bool m_RrcEstCauseIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* N2ConnectionChargingInformation_H_ */
