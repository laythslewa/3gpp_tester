/**
 * 3gpp-cp-parameter-provisioning
 * API for provisioning communication pattern parameters. © 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CpInfo.h
 *
 * Represents the resources for communication pattern parameter provisioning.
 */

#ifndef CpInfo_H_
#define CpInfo_H_

#include "CpParameterSet.h"
#include "CpReport.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the resources for communication pattern parameter provisioning.
/// </summary>
class CpInfo {
public:
  CpInfo();
  virtual ~CpInfo();

  void validate();

  /////////////////////////////////////////////
  /// CpInfo members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const &value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  /// Identifies the MTC Service Provider and/or MTC Application.
  /// </summary>
  std::string getMtcProviderId() const;
  void setMtcProviderId(std::string const &value);
  bool mtcProviderIdIsSet() const;
  void unsetMtcProviderId();
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clause 4.6.2 of 3GPP TS 23.682 for more information.
  /// </summary>
  std::string getExternalId() const;
  void setExternalId(std::string const &value);
  bool externalIdIsSet() const;
  void unsetExternalId();
  /// <summary>
  /// string formatted according to subclause 3.3 of 3GPP TS 23.003 that
  /// describes an MSISDN.
  /// </summary>
  std::string getMsisdn() const;
  void setMsisdn(std::string const &value);
  bool msisdnIsSet() const;
  void unsetMsisdn();
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more
  /// information.
  /// </summary>
  std::string getExternalGroupId() const;
  void setExternalGroupId(std::string const &value);
  bool externalGroupIdIsSet() const;
  void unsetExternalGroupId();
  /// <summary>
  /// Identifies a set of CP parameter information that may be part of this
  /// CpInfo structure. Any string value can be used as a key of the map.
  /// </summary>
  std::map<std::string, CpParameterSet> &getCpParameterSets();
  void setCpParameterSets(std::map<std::string, CpParameterSet> const &value);
  /// <summary>
  /// Supplied by the SCEF and contains the CP set identifiers for which CP
  /// parameter(s) are not added or modified successfully. The failure reason is
  /// also included. Each element provides the related information for one or
  /// more CP set identifier(s) and is identified in the map via the failure
  /// identifier as key.
  /// </summary>
  std::map<std::string, CpReport> &getCpReports();
  void setCpReports(std::map<std::string, CpReport> const &value);
  bool cpReportsIsSet() const;
  void unsetCpReports();

  friend void to_json(nlohmann::json &j, const CpInfo &o);
  friend void from_json(const nlohmann::json &j, CpInfo &o);

protected:
  std::string m_Self;
  bool m_SelfIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::string m_MtcProviderId;
  bool m_MtcProviderIdIsSet;
  std::string m_ExternalId;
  bool m_ExternalIdIsSet;
  std::string m_Msisdn;
  bool m_MsisdnIsSet;
  std::string m_ExternalGroupId;
  bool m_ExternalGroupIdIsSet;
  std::map<std::string, CpParameterSet> m_CpParameterSets;

  std::map<std::string, CpReport> m_CpReports;
  bool m_CpReportsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* CpInfo_H_ */
