/**
 * Nhss_imsSDM
 * Nhss Subscriber Data Management Service for IMS. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SgsnLocationData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SgsnLocationData::SgsnLocationData() {
  m_SgsnNumber = "";
  m_SgsnLocationIsSet = false;
  m_CsgInformationIsSet = false;
  m_TimeZone = "";
  m_TimeZoneIsSet = false;
  m_RatTypeIsSet = false;
}

SgsnLocationData::~SgsnLocationData() {}

void SgsnLocationData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SgsnLocationData &o) {
  j = nlohmann::json();
  j["sgsnNumber"] = o.m_SgsnNumber;
  j["plmnId"] = o.m_PlmnId;
  if (o.sgsnLocationIsSet())
    j["sgsnLocation"] = o.m_SgsnLocation;
  if (o.csgInformationIsSet())
    j["csgInformation"] = o.m_CsgInformation;
  if (o.timeZoneIsSet())
    j["timeZone"] = o.m_TimeZone;
  if (o.ratTypeIsSet())
    j["ratType"] = o.m_RatType;
}

void from_json(const nlohmann::json &j, SgsnLocationData &o) {
  j.at("sgsnNumber").get_to(o.m_SgsnNumber);
  j.at("plmnId").get_to(o.m_PlmnId);
  if (j.find("sgsnLocation") != j.end()) {
    j.at("sgsnLocation").get_to(o.m_SgsnLocation);
    o.m_SgsnLocationIsSet = true;
  }
  if (j.find("csgInformation") != j.end()) {
    j.at("csgInformation").get_to(o.m_CsgInformation);
    o.m_CsgInformationIsSet = true;
  }
  if (j.find("timeZone") != j.end()) {
    j.at("timeZone").get_to(o.m_TimeZone);
    o.m_TimeZoneIsSet = true;
  }
  if (j.find("ratType") != j.end()) {
    j.at("ratType").get_to(o.m_RatType);
    o.m_RatTypeIsSet = true;
  }
}

std::string SgsnLocationData::getSgsnNumber() const { return m_SgsnNumber; }
void SgsnLocationData::setSgsnNumber(std::string const &value) {
  m_SgsnNumber = value;
}
PlmnId SgsnLocationData::getPlmnId() const { return m_PlmnId; }
void SgsnLocationData::setPlmnId(PlmnId const &value) { m_PlmnId = value; }
UtraLocation SgsnLocationData::getSgsnLocation() const {
  return m_SgsnLocation;
}
void SgsnLocationData::setSgsnLocation(UtraLocation const &value) {
  m_SgsnLocation = value;
  m_SgsnLocationIsSet = true;
}
bool SgsnLocationData::sgsnLocationIsSet() const { return m_SgsnLocationIsSet; }
void SgsnLocationData::unsetSgsnLocation() { m_SgsnLocationIsSet = false; }
CsgInformation SgsnLocationData::getCsgInformation() const {
  return m_CsgInformation;
}
void SgsnLocationData::setCsgInformation(CsgInformation const &value) {
  m_CsgInformation = value;
  m_CsgInformationIsSet = true;
}
bool SgsnLocationData::csgInformationIsSet() const {
  return m_CsgInformationIsSet;
}
void SgsnLocationData::unsetCsgInformation() { m_CsgInformationIsSet = false; }
std::string SgsnLocationData::getTimeZone() const { return m_TimeZone; }
void SgsnLocationData::setTimeZone(std::string const &value) {
  m_TimeZone = value;
  m_TimeZoneIsSet = true;
}
bool SgsnLocationData::timeZoneIsSet() const { return m_TimeZoneIsSet; }
void SgsnLocationData::unsetTimeZone() { m_TimeZoneIsSet = false; }
RatType SgsnLocationData::getRatType() const { return m_RatType; }
void SgsnLocationData::setRatType(RatType const &value) {
  m_RatType = value;
  m_RatTypeIsSet = true;
}
bool SgsnLocationData::ratTypeIsSet() const { return m_RatTypeIsSet; }
void SgsnLocationData::unsetRatType() { m_RatTypeIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
