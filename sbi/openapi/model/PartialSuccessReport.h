/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PartialSuccessReport.h
 *
 * Includes the information reported by the SMF when some of the PCC rules
 * and/or session rules are not successfully installed/activated.
 */

#ifndef PartialSuccessReport_H_
#define PartialSuccessReport_H_

#include "FailureCause.h"
#include "InvalidParam.h"
#include "PolicyDecisionFailureCode.h"
#include "RuleReport.h"
#include "SessionRuleReport.h"
#include "UeCampingRep.h"
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Includes the information reported by the SMF when some of the PCC rules
/// and/or session rules are not successfully installed/activated.
/// </summary>
class PartialSuccessReport {
public:
  PartialSuccessReport();
  virtual ~PartialSuccessReport();

  void validate();

  /////////////////////////////////////////////
  /// PartialSuccessReport members

  /// <summary>
  ///
  /// </summary>
  FailureCause getFailureCause() const;
  void setFailureCause(FailureCause const &value);
  /// <summary>
  /// Information about the PCC rules provisioned by the PCF not successfully
  /// installed/activated.
  /// </summary>
  std::vector<RuleReport> &getRuleReports();
  void setRuleReports(std::vector<RuleReport> const &value);
  bool ruleReportsIsSet() const;
  void unsetRuleReports();
  /// <summary>
  /// Information about the session rules provisioned by the PCF not
  /// successfully installed.
  /// </summary>
  std::vector<SessionRuleReport> &getSessRuleReports();
  void setSessRuleReports(std::vector<SessionRuleReport> const &value);
  bool sessRuleReportsIsSet() const;
  void unsetSessRuleReports();
  /// <summary>
  ///
  /// </summary>
  UeCampingRep getUeCampingRep() const;
  void setUeCampingRep(UeCampingRep const &value);
  bool ueCampingRepIsSet() const;
  void unsetUeCampingRep();
  /// <summary>
  /// Contains the type(s) of failed policy decision and/or condition data.
  /// </summary>
  std::vector<PolicyDecisionFailureCode> &getPolicyDecFailureReports();
  void setPolicyDecFailureReports(
      std::vector<PolicyDecisionFailureCode> const &value);
  bool policyDecFailureReportsIsSet() const;
  void unsetPolicyDecFailureReports();
  /// <summary>
  /// Indicates the invalid parameters for the reported type(s) of the failed
  /// policy decision and/or condition data.
  /// </summary>
  std::vector<InvalidParam> &getInvalidPolicyDecs();
  void setInvalidPolicyDecs(std::vector<InvalidParam> const &value);
  bool invalidPolicyDecsIsSet() const;
  void unsetInvalidPolicyDecs();

  friend void to_json(nlohmann::json &j, const PartialSuccessReport &o);
  friend void from_json(const nlohmann::json &j, PartialSuccessReport &o);

protected:
  FailureCause m_FailureCause;

  std::vector<RuleReport> m_RuleReports;
  bool m_RuleReportsIsSet;
  std::vector<SessionRuleReport> m_SessRuleReports;
  bool m_SessRuleReportsIsSet;
  UeCampingRep m_UeCampingRep;
  bool m_UeCampingRepIsSet;
  std::vector<PolicyDecisionFailureCode> m_PolicyDecFailureReports;
  bool m_PolicyDecFailureReportsIsSet;
  std::vector<InvalidParam> m_InvalidPolicyDecs;
  bool m_InvalidPolicyDecsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PartialSuccessReport_H_ */
