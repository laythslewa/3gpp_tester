/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SMSChargingInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SMSChargingInformation::SMSChargingInformation() {
  m_OriginatorInfoIsSet = false;
  m_RecipientInfoIsSet = false;
  m_UserEquipmentInfo = "";
  m_UserEquipmentInfoIsSet = false;
  m_RoamerInOutIsSet = false;
  m_UserLocationinfoIsSet = false;
  m_UetimeZone = "";
  m_UetimeZoneIsSet = false;
  m_RATTypeIsSet = false;
  m_SMSCAddress = "";
  m_SMSCAddressIsSet = false;
  m_SMDataCodingScheme = 0;
  m_SMDataCodingSchemeIsSet = false;
  m_SMMessageTypeIsSet = false;
  m_SMReplyPathRequestedIsSet = false;
  m_SMUserDataHeader = "";
  m_SMUserDataHeaderIsSet = false;
  m_SMStatus = "";
  m_SMStatusIsSet = false;
  m_SMDischargeTime = "";
  m_SMDischargeTimeIsSet = false;
  m_NumberofMessagesSent = 0;
  m_NumberofMessagesSentIsSet = false;
  m_SMServiceTypeIsSet = false;
  m_SMSequenceNumber = 0;
  m_SMSequenceNumberIsSet = false;
  m_SMSresult = 0;
  m_SMSresultIsSet = false;
  m_SubmissionTime = "";
  m_SubmissionTimeIsSet = false;
  m_SMPriorityIsSet = false;
  m_MessageReference = "";
  m_MessageReferenceIsSet = false;
  m_MessageSize = 0;
  m_MessageSizeIsSet = false;
  m_MessageClassIsSet = false;
  m_DeliveryReportRequestedIsSet = false;
}

SMSChargingInformation::~SMSChargingInformation() {}

void SMSChargingInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SMSChargingInformation &o) {
  j = nlohmann::json();
  if (o.originatorInfoIsSet())
    j["originatorInfo"] = o.m_OriginatorInfo;
  if (o.recipientInfoIsSet() || !o.m_RecipientInfo.empty())
    j["recipientInfo"] = o.m_RecipientInfo;
  if (o.userEquipmentInfoIsSet())
    j["userEquipmentInfo"] = o.m_UserEquipmentInfo;
  if (o.roamerInOutIsSet())
    j["roamerInOut"] = o.m_RoamerInOut;
  if (o.userLocationinfoIsSet())
    j["userLocationinfo"] = o.m_UserLocationinfo;
  if (o.uetimeZoneIsSet())
    j["uetimeZone"] = o.m_UetimeZone;
  if (o.rATTypeIsSet())
    j["rATType"] = o.m_RATType;
  if (o.sMSCAddressIsSet())
    j["sMSCAddress"] = o.m_SMSCAddress;
  if (o.sMDataCodingSchemeIsSet())
    j["sMDataCodingScheme"] = o.m_SMDataCodingScheme;
  if (o.sMMessageTypeIsSet())
    j["sMMessageType"] = o.m_SMMessageType;
  if (o.sMReplyPathRequestedIsSet())
    j["sMReplyPathRequested"] = o.m_SMReplyPathRequested;
  if (o.sMUserDataHeaderIsSet())
    j["sMUserDataHeader"] = o.m_SMUserDataHeader;
  if (o.sMStatusIsSet())
    j["sMStatus"] = o.m_SMStatus;
  if (o.sMDischargeTimeIsSet())
    j["sMDischargeTime"] = o.m_SMDischargeTime;
  if (o.numberofMessagesSentIsSet())
    j["numberofMessagesSent"] = o.m_NumberofMessagesSent;
  if (o.sMServiceTypeIsSet())
    j["sMServiceType"] = o.m_SMServiceType;
  if (o.sMSequenceNumberIsSet())
    j["sMSequenceNumber"] = o.m_SMSequenceNumber;
  if (o.sMSresultIsSet())
    j["sMSresult"] = o.m_SMSresult;
  if (o.submissionTimeIsSet())
    j["submissionTime"] = o.m_SubmissionTime;
  if (o.sMPriorityIsSet())
    j["sMPriority"] = o.m_SMPriority;
  if (o.messageReferenceIsSet())
    j["messageReference"] = o.m_MessageReference;
  if (o.messageSizeIsSet())
    j["messageSize"] = o.m_MessageSize;
  if (o.messageClassIsSet())
    j["messageClass"] = o.m_MessageClass;
  if (o.deliveryReportRequestedIsSet())
    j["deliveryReportRequested"] = o.m_DeliveryReportRequested;
}

void from_json(const nlohmann::json &j, SMSChargingInformation &o) {
  if (j.find("originatorInfo") != j.end()) {
    j.at("originatorInfo").get_to(o.m_OriginatorInfo);
    o.m_OriginatorInfoIsSet = true;
  }
  if (j.find("recipientInfo") != j.end()) {
    j.at("recipientInfo").get_to(o.m_RecipientInfo);
    o.m_RecipientInfoIsSet = true;
  }
  if (j.find("userEquipmentInfo") != j.end()) {
    j.at("userEquipmentInfo").get_to(o.m_UserEquipmentInfo);
    o.m_UserEquipmentInfoIsSet = true;
  }
  if (j.find("roamerInOut") != j.end()) {
    j.at("roamerInOut").get_to(o.m_RoamerInOut);
    o.m_RoamerInOutIsSet = true;
  }
  if (j.find("userLocationinfo") != j.end()) {
    j.at("userLocationinfo").get_to(o.m_UserLocationinfo);
    o.m_UserLocationinfoIsSet = true;
  }
  if (j.find("uetimeZone") != j.end()) {
    j.at("uetimeZone").get_to(o.m_UetimeZone);
    o.m_UetimeZoneIsSet = true;
  }
  if (j.find("rATType") != j.end()) {
    j.at("rATType").get_to(o.m_RATType);
    o.m_RATTypeIsSet = true;
  }
  if (j.find("sMSCAddress") != j.end()) {
    j.at("sMSCAddress").get_to(o.m_SMSCAddress);
    o.m_SMSCAddressIsSet = true;
  }
  if (j.find("sMDataCodingScheme") != j.end()) {
    j.at("sMDataCodingScheme").get_to(o.m_SMDataCodingScheme);
    o.m_SMDataCodingSchemeIsSet = true;
  }
  if (j.find("sMMessageType") != j.end()) {
    j.at("sMMessageType").get_to(o.m_SMMessageType);
    o.m_SMMessageTypeIsSet = true;
  }
  if (j.find("sMReplyPathRequested") != j.end()) {
    j.at("sMReplyPathRequested").get_to(o.m_SMReplyPathRequested);
    o.m_SMReplyPathRequestedIsSet = true;
  }
  if (j.find("sMUserDataHeader") != j.end()) {
    j.at("sMUserDataHeader").get_to(o.m_SMUserDataHeader);
    o.m_SMUserDataHeaderIsSet = true;
  }
  if (j.find("sMStatus") != j.end()) {
    j.at("sMStatus").get_to(o.m_SMStatus);
    o.m_SMStatusIsSet = true;
  }
  if (j.find("sMDischargeTime") != j.end()) {
    j.at("sMDischargeTime").get_to(o.m_SMDischargeTime);
    o.m_SMDischargeTimeIsSet = true;
  }
  if (j.find("numberofMessagesSent") != j.end()) {
    j.at("numberofMessagesSent").get_to(o.m_NumberofMessagesSent);
    o.m_NumberofMessagesSentIsSet = true;
  }
  if (j.find("sMServiceType") != j.end()) {
    j.at("sMServiceType").get_to(o.m_SMServiceType);
    o.m_SMServiceTypeIsSet = true;
  }
  if (j.find("sMSequenceNumber") != j.end()) {
    j.at("sMSequenceNumber").get_to(o.m_SMSequenceNumber);
    o.m_SMSequenceNumberIsSet = true;
  }
  if (j.find("sMSresult") != j.end()) {
    j.at("sMSresult").get_to(o.m_SMSresult);
    o.m_SMSresultIsSet = true;
  }
  if (j.find("submissionTime") != j.end()) {
    j.at("submissionTime").get_to(o.m_SubmissionTime);
    o.m_SubmissionTimeIsSet = true;
  }
  if (j.find("sMPriority") != j.end()) {
    j.at("sMPriority").get_to(o.m_SMPriority);
    o.m_SMPriorityIsSet = true;
  }
  if (j.find("messageReference") != j.end()) {
    j.at("messageReference").get_to(o.m_MessageReference);
    o.m_MessageReferenceIsSet = true;
  }
  if (j.find("messageSize") != j.end()) {
    j.at("messageSize").get_to(o.m_MessageSize);
    o.m_MessageSizeIsSet = true;
  }
  if (j.find("messageClass") != j.end()) {
    j.at("messageClass").get_to(o.m_MessageClass);
    o.m_MessageClassIsSet = true;
  }
  if (j.find("deliveryReportRequested") != j.end()) {
    j.at("deliveryReportRequested").get_to(o.m_DeliveryReportRequested);
    o.m_DeliveryReportRequestedIsSet = true;
  }
}

OriginatorInfo SMSChargingInformation::getOriginatorInfo() const {
  return m_OriginatorInfo;
}
void SMSChargingInformation::setOriginatorInfo(OriginatorInfo const &value) {
  m_OriginatorInfo = value;
  m_OriginatorInfoIsSet = true;
}
bool SMSChargingInformation::originatorInfoIsSet() const {
  return m_OriginatorInfoIsSet;
}
void SMSChargingInformation::unsetOriginatorInfo() {
  m_OriginatorInfoIsSet = false;
}
std::vector<RecipientInfo> &SMSChargingInformation::getRecipientInfo() {
  return m_RecipientInfo;
}
void SMSChargingInformation::setRecipientInfo(
    std::vector<RecipientInfo> const &value) {
  m_RecipientInfo = value;
  m_RecipientInfoIsSet = true;
}
bool SMSChargingInformation::recipientInfoIsSet() const {
  return m_RecipientInfoIsSet;
}
void SMSChargingInformation::unsetRecipientInfo() {
  m_RecipientInfoIsSet = false;
}
std::string SMSChargingInformation::getUserEquipmentInfo() const {
  return m_UserEquipmentInfo;
}
void SMSChargingInformation::setUserEquipmentInfo(std::string const &value) {
  m_UserEquipmentInfo = value;
  m_UserEquipmentInfoIsSet = true;
}
bool SMSChargingInformation::userEquipmentInfoIsSet() const {
  return m_UserEquipmentInfoIsSet;
}
void SMSChargingInformation::unsetUserEquipmentInfo() {
  m_UserEquipmentInfoIsSet = false;
}
RoamerInOut SMSChargingInformation::getRoamerInOut() const {
  return m_RoamerInOut;
}
void SMSChargingInformation::setRoamerInOut(RoamerInOut const &value) {
  m_RoamerInOut = value;
  m_RoamerInOutIsSet = true;
}
bool SMSChargingInformation::roamerInOutIsSet() const {
  return m_RoamerInOutIsSet;
}
void SMSChargingInformation::unsetRoamerInOut() { m_RoamerInOutIsSet = false; }
UserLocation SMSChargingInformation::getUserLocationinfo() const {
  return m_UserLocationinfo;
}
void SMSChargingInformation::setUserLocationinfo(UserLocation const &value) {
  m_UserLocationinfo = value;
  m_UserLocationinfoIsSet = true;
}
bool SMSChargingInformation::userLocationinfoIsSet() const {
  return m_UserLocationinfoIsSet;
}
void SMSChargingInformation::unsetUserLocationinfo() {
  m_UserLocationinfoIsSet = false;
}
std::string SMSChargingInformation::getUetimeZone() const {
  return m_UetimeZone;
}
void SMSChargingInformation::setUetimeZone(std::string const &value) {
  m_UetimeZone = value;
  m_UetimeZoneIsSet = true;
}
bool SMSChargingInformation::uetimeZoneIsSet() const {
  return m_UetimeZoneIsSet;
}
void SMSChargingInformation::unsetUetimeZone() { m_UetimeZoneIsSet = false; }
RatType SMSChargingInformation::getRATType() const { return m_RATType; }
void SMSChargingInformation::setRATType(RatType const &value) {
  m_RATType = value;
  m_RATTypeIsSet = true;
}
bool SMSChargingInformation::rATTypeIsSet() const { return m_RATTypeIsSet; }
void SMSChargingInformation::unsetRATType() { m_RATTypeIsSet = false; }
std::string SMSChargingInformation::getSMSCAddress() const {
  return m_SMSCAddress;
}
void SMSChargingInformation::setSMSCAddress(std::string const &value) {
  m_SMSCAddress = value;
  m_SMSCAddressIsSet = true;
}
bool SMSChargingInformation::sMSCAddressIsSet() const {
  return m_SMSCAddressIsSet;
}
void SMSChargingInformation::unsetSMSCAddress() { m_SMSCAddressIsSet = false; }
int32_t SMSChargingInformation::getSMDataCodingScheme() const {
  return m_SMDataCodingScheme;
}
void SMSChargingInformation::setSMDataCodingScheme(int32_t const value) {
  m_SMDataCodingScheme = value;
  m_SMDataCodingSchemeIsSet = true;
}
bool SMSChargingInformation::sMDataCodingSchemeIsSet() const {
  return m_SMDataCodingSchemeIsSet;
}
void SMSChargingInformation::unsetSMDataCodingScheme() {
  m_SMDataCodingSchemeIsSet = false;
}
SMMessageType SMSChargingInformation::getSMMessageType() const {
  return m_SMMessageType;
}
void SMSChargingInformation::setSMMessageType(SMMessageType const &value) {
  m_SMMessageType = value;
  m_SMMessageTypeIsSet = true;
}
bool SMSChargingInformation::sMMessageTypeIsSet() const {
  return m_SMMessageTypeIsSet;
}
void SMSChargingInformation::unsetSMMessageType() {
  m_SMMessageTypeIsSet = false;
}
ReplyPathRequested SMSChargingInformation::getSMReplyPathRequested() const {
  return m_SMReplyPathRequested;
}
void SMSChargingInformation::setSMReplyPathRequested(
    ReplyPathRequested const &value) {
  m_SMReplyPathRequested = value;
  m_SMReplyPathRequestedIsSet = true;
}
bool SMSChargingInformation::sMReplyPathRequestedIsSet() const {
  return m_SMReplyPathRequestedIsSet;
}
void SMSChargingInformation::unsetSMReplyPathRequested() {
  m_SMReplyPathRequestedIsSet = false;
}
std::string SMSChargingInformation::getSMUserDataHeader() const {
  return m_SMUserDataHeader;
}
void SMSChargingInformation::setSMUserDataHeader(std::string const &value) {
  m_SMUserDataHeader = value;
  m_SMUserDataHeaderIsSet = true;
}
bool SMSChargingInformation::sMUserDataHeaderIsSet() const {
  return m_SMUserDataHeaderIsSet;
}
void SMSChargingInformation::unsetSMUserDataHeader() {
  m_SMUserDataHeaderIsSet = false;
}
std::string SMSChargingInformation::getSMStatus() const { return m_SMStatus; }
void SMSChargingInformation::setSMStatus(std::string const &value) {
  m_SMStatus = value;
  m_SMStatusIsSet = true;
}
bool SMSChargingInformation::sMStatusIsSet() const { return m_SMStatusIsSet; }
void SMSChargingInformation::unsetSMStatus() { m_SMStatusIsSet = false; }
std::string SMSChargingInformation::getSMDischargeTime() const {
  return m_SMDischargeTime;
}
void SMSChargingInformation::setSMDischargeTime(std::string const &value) {
  m_SMDischargeTime = value;
  m_SMDischargeTimeIsSet = true;
}
bool SMSChargingInformation::sMDischargeTimeIsSet() const {
  return m_SMDischargeTimeIsSet;
}
void SMSChargingInformation::unsetSMDischargeTime() {
  m_SMDischargeTimeIsSet = false;
}
int32_t SMSChargingInformation::getNumberofMessagesSent() const {
  return m_NumberofMessagesSent;
}
void SMSChargingInformation::setNumberofMessagesSent(int32_t const value) {
  m_NumberofMessagesSent = value;
  m_NumberofMessagesSentIsSet = true;
}
bool SMSChargingInformation::numberofMessagesSentIsSet() const {
  return m_NumberofMessagesSentIsSet;
}
void SMSChargingInformation::unsetNumberofMessagesSent() {
  m_NumberofMessagesSentIsSet = false;
}
SMServiceType SMSChargingInformation::getSMServiceType() const {
  return m_SMServiceType;
}
void SMSChargingInformation::setSMServiceType(SMServiceType const &value) {
  m_SMServiceType = value;
  m_SMServiceTypeIsSet = true;
}
bool SMSChargingInformation::sMServiceTypeIsSet() const {
  return m_SMServiceTypeIsSet;
}
void SMSChargingInformation::unsetSMServiceType() {
  m_SMServiceTypeIsSet = false;
}
int32_t SMSChargingInformation::getSMSequenceNumber() const {
  return m_SMSequenceNumber;
}
void SMSChargingInformation::setSMSequenceNumber(int32_t const value) {
  m_SMSequenceNumber = value;
  m_SMSequenceNumberIsSet = true;
}
bool SMSChargingInformation::sMSequenceNumberIsSet() const {
  return m_SMSequenceNumberIsSet;
}
void SMSChargingInformation::unsetSMSequenceNumber() {
  m_SMSequenceNumberIsSet = false;
}
int32_t SMSChargingInformation::getSMSresult() const { return m_SMSresult; }
void SMSChargingInformation::setSMSresult(int32_t const value) {
  m_SMSresult = value;
  m_SMSresultIsSet = true;
}
bool SMSChargingInformation::sMSresultIsSet() const { return m_SMSresultIsSet; }
void SMSChargingInformation::unsetSMSresult() { m_SMSresultIsSet = false; }
std::string SMSChargingInformation::getSubmissionTime() const {
  return m_SubmissionTime;
}
void SMSChargingInformation::setSubmissionTime(std::string const &value) {
  m_SubmissionTime = value;
  m_SubmissionTimeIsSet = true;
}
bool SMSChargingInformation::submissionTimeIsSet() const {
  return m_SubmissionTimeIsSet;
}
void SMSChargingInformation::unsetSubmissionTime() {
  m_SubmissionTimeIsSet = false;
}
SMPriority SMSChargingInformation::getSMPriority() const {
  return m_SMPriority;
}
void SMSChargingInformation::setSMPriority(SMPriority const &value) {
  m_SMPriority = value;
  m_SMPriorityIsSet = true;
}
bool SMSChargingInformation::sMPriorityIsSet() const {
  return m_SMPriorityIsSet;
}
void SMSChargingInformation::unsetSMPriority() { m_SMPriorityIsSet = false; }
std::string SMSChargingInformation::getMessageReference() const {
  return m_MessageReference;
}
void SMSChargingInformation::setMessageReference(std::string const &value) {
  m_MessageReference = value;
  m_MessageReferenceIsSet = true;
}
bool SMSChargingInformation::messageReferenceIsSet() const {
  return m_MessageReferenceIsSet;
}
void SMSChargingInformation::unsetMessageReference() {
  m_MessageReferenceIsSet = false;
}
int32_t SMSChargingInformation::getMessageSize() const { return m_MessageSize; }
void SMSChargingInformation::setMessageSize(int32_t const value) {
  m_MessageSize = value;
  m_MessageSizeIsSet = true;
}
bool SMSChargingInformation::messageSizeIsSet() const {
  return m_MessageSizeIsSet;
}
void SMSChargingInformation::unsetMessageSize() { m_MessageSizeIsSet = false; }
MessageClass SMSChargingInformation::getMessageClass() const {
  return m_MessageClass;
}
void SMSChargingInformation::setMessageClass(MessageClass const &value) {
  m_MessageClass = value;
  m_MessageClassIsSet = true;
}
bool SMSChargingInformation::messageClassIsSet() const {
  return m_MessageClassIsSet;
}
void SMSChargingInformation::unsetMessageClass() {
  m_MessageClassIsSet = false;
}
DeliveryReportRequested
SMSChargingInformation::getDeliveryReportRequested() const {
  return m_DeliveryReportRequested;
}
void SMSChargingInformation::setDeliveryReportRequested(
    DeliveryReportRequested const &value) {
  m_DeliveryReportRequested = value;
  m_DeliveryReportRequestedIsSet = true;
}
bool SMSChargingInformation::deliveryReportRequestedIsSet() const {
  return m_DeliveryReportRequestedIsSet;
}
void SMSChargingInformation::unsetDeliveryReportRequested() {
  m_DeliveryReportRequestedIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
