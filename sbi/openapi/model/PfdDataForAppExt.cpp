/**
 * Unified Data Repository Service API file for Application Data
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PfdDataForAppExt.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PfdDataForAppExt::PfdDataForAppExt() {
  m_ApplicationId = "";
  m_PfdsIsSet = false;
  m_CachingTime = "";
  m_CachingTimeIsSet = false;
  m_PfdTimestamp = "";
  m_PfdTimestampIsSet = false;
  m_PartialFlag = false;
  m_PartialFlagIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
}

PfdDataForAppExt::~PfdDataForAppExt() {}

void PfdDataForAppExt::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PfdDataForAppExt &o) {
  j = nlohmann::json();
  j["applicationId"] = o.m_ApplicationId;
  if (o.pfdsIsSet() || !o.m_Pfds.empty())
    j["pfds"] = o.m_Pfds;
  if (o.cachingTimeIsSet())
    j["cachingTime"] = o.m_CachingTime;
  if (o.pfdTimestampIsSet())
    j["pfdTimestamp"] = o.m_PfdTimestamp;
  if (o.partialFlagIsSet())
    j["partialFlag"] = o.m_PartialFlag;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, PfdDataForAppExt &o) {
  j.at("applicationId").get_to(o.m_ApplicationId);
  if (j.find("pfds") != j.end()) {
    j.at("pfds").get_to(o.m_Pfds);
    o.m_PfdsIsSet = true;
  }
  if (j.find("cachingTime") != j.end()) {
    j.at("cachingTime").get_to(o.m_CachingTime);
    o.m_CachingTimeIsSet = true;
  }
  if (j.find("pfdTimestamp") != j.end()) {
    j.at("pfdTimestamp").get_to(o.m_PfdTimestamp);
    o.m_PfdTimestampIsSet = true;
  }
  if (j.find("partialFlag") != j.end()) {
    j.at("partialFlag").get_to(o.m_PartialFlag);
    o.m_PartialFlagIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::string PfdDataForAppExt::getApplicationId() const {
  return m_ApplicationId;
}
void PfdDataForAppExt::setApplicationId(std::string const &value) {
  m_ApplicationId = value;
}
std::vector<PfdContent> &PfdDataForAppExt::getPfds() { return m_Pfds; }
void PfdDataForAppExt::setPfds(std::vector<PfdContent> const &value) {
  m_Pfds = value;
  m_PfdsIsSet = true;
}
bool PfdDataForAppExt::pfdsIsSet() const { return m_PfdsIsSet; }
void PfdDataForAppExt::unsetPfds() { m_PfdsIsSet = false; }
std::string PfdDataForAppExt::getCachingTime() const { return m_CachingTime; }
void PfdDataForAppExt::setCachingTime(std::string const &value) {
  m_CachingTime = value;
  m_CachingTimeIsSet = true;
}
bool PfdDataForAppExt::cachingTimeIsSet() const { return m_CachingTimeIsSet; }
void PfdDataForAppExt::unsetCachingTime() { m_CachingTimeIsSet = false; }
std::string PfdDataForAppExt::getPfdTimestamp() const { return m_PfdTimestamp; }
void PfdDataForAppExt::setPfdTimestamp(std::string const &value) {
  m_PfdTimestamp = value;
  m_PfdTimestampIsSet = true;
}
bool PfdDataForAppExt::pfdTimestampIsSet() const { return m_PfdTimestampIsSet; }
void PfdDataForAppExt::unsetPfdTimestamp() { m_PfdTimestampIsSet = false; }
bool PfdDataForAppExt::isPartialFlag() const { return m_PartialFlag; }
void PfdDataForAppExt::setPartialFlag(bool const value) {
  m_PartialFlag = value;
  m_PartialFlagIsSet = true;
}
bool PfdDataForAppExt::partialFlagIsSet() const { return m_PartialFlagIsSet; }
void PfdDataForAppExt::unsetPartialFlag() { m_PartialFlagIsSet = false; }
std::string PfdDataForAppExt::getSuppFeat() const { return m_SuppFeat; }
void PfdDataForAppExt::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool PfdDataForAppExt::suppFeatIsSet() const { return m_SuppFeatIsSet; }
void PfdDataForAppExt::unsetSuppFeat() { m_SuppFeatIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
