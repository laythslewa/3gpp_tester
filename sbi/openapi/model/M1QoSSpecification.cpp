/**
 * M1_PolicyTemplatesProvisioning
 * 5GMS AF M1 Policy Templates Provisioning API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "M1QoSSpecification.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

M1QoSSpecification::M1QoSSpecification() {
  m_QosReference = "";
  m_QosReferenceIsSet = false;
  m_MaxBtrUl = "";
  m_MaxBtrUlIsSet = false;
  m_MaxBtrDl = "";
  m_MaxBtrDlIsSet = false;
  m_MaxAuthBtrUl = "";
  m_MaxAuthBtrUlIsSet = false;
  m_MaxAuthBtrDl = "";
  m_MaxAuthBtrDlIsSet = false;
  m_DefPacketLossRateDl = 0;
  m_DefPacketLossRateDlIsSet = false;
  m_DefPacketLossRateUl = 0;
  m_DefPacketLossRateUlIsSet = false;
}

M1QoSSpecification::~M1QoSSpecification() {}

void M1QoSSpecification::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const M1QoSSpecification &o) {
  j = nlohmann::json();
  if (o.qosReferenceIsSet())
    j["qosReference"] = o.m_QosReference;
  if (o.maxBtrUlIsSet())
    j["maxBtrUl"] = o.m_MaxBtrUl;
  if (o.maxBtrDlIsSet())
    j["maxBtrDl"] = o.m_MaxBtrDl;
  if (o.maxAuthBtrUlIsSet())
    j["maxAuthBtrUl"] = o.m_MaxAuthBtrUl;
  if (o.maxAuthBtrDlIsSet())
    j["maxAuthBtrDl"] = o.m_MaxAuthBtrDl;
  if (o.defPacketLossRateDlIsSet())
    j["defPacketLossRateDl"] = o.m_DefPacketLossRateDl;
  if (o.defPacketLossRateUlIsSet())
    j["defPacketLossRateUl"] = o.m_DefPacketLossRateUl;
}

void from_json(const nlohmann::json &j, M1QoSSpecification &o) {
  if (j.find("qosReference") != j.end()) {
    j.at("qosReference").get_to(o.m_QosReference);
    o.m_QosReferenceIsSet = true;
  }
  if (j.find("maxBtrUl") != j.end()) {
    j.at("maxBtrUl").get_to(o.m_MaxBtrUl);
    o.m_MaxBtrUlIsSet = true;
  }
  if (j.find("maxBtrDl") != j.end()) {
    j.at("maxBtrDl").get_to(o.m_MaxBtrDl);
    o.m_MaxBtrDlIsSet = true;
  }
  if (j.find("maxAuthBtrUl") != j.end()) {
    j.at("maxAuthBtrUl").get_to(o.m_MaxAuthBtrUl);
    o.m_MaxAuthBtrUlIsSet = true;
  }
  if (j.find("maxAuthBtrDl") != j.end()) {
    j.at("maxAuthBtrDl").get_to(o.m_MaxAuthBtrDl);
    o.m_MaxAuthBtrDlIsSet = true;
  }
  if (j.find("defPacketLossRateDl") != j.end()) {
    j.at("defPacketLossRateDl").get_to(o.m_DefPacketLossRateDl);
    o.m_DefPacketLossRateDlIsSet = true;
  }
  if (j.find("defPacketLossRateUl") != j.end()) {
    j.at("defPacketLossRateUl").get_to(o.m_DefPacketLossRateUl);
    o.m_DefPacketLossRateUlIsSet = true;
  }
}

std::string M1QoSSpecification::getQosReference() const {
  return m_QosReference;
}
void M1QoSSpecification::setQosReference(std::string const &value) {
  m_QosReference = value;
  m_QosReferenceIsSet = true;
}
bool M1QoSSpecification::qosReferenceIsSet() const {
  return m_QosReferenceIsSet;
}
void M1QoSSpecification::unsetQosReference() { m_QosReferenceIsSet = false; }
std::string M1QoSSpecification::getMaxBtrUl() const { return m_MaxBtrUl; }
void M1QoSSpecification::setMaxBtrUl(std::string const &value) {
  m_MaxBtrUl = value;
  m_MaxBtrUlIsSet = true;
}
bool M1QoSSpecification::maxBtrUlIsSet() const { return m_MaxBtrUlIsSet; }
void M1QoSSpecification::unsetMaxBtrUl() { m_MaxBtrUlIsSet = false; }
std::string M1QoSSpecification::getMaxBtrDl() const { return m_MaxBtrDl; }
void M1QoSSpecification::setMaxBtrDl(std::string const &value) {
  m_MaxBtrDl = value;
  m_MaxBtrDlIsSet = true;
}
bool M1QoSSpecification::maxBtrDlIsSet() const { return m_MaxBtrDlIsSet; }
void M1QoSSpecification::unsetMaxBtrDl() { m_MaxBtrDlIsSet = false; }
std::string M1QoSSpecification::getMaxAuthBtrUl() const {
  return m_MaxAuthBtrUl;
}
void M1QoSSpecification::setMaxAuthBtrUl(std::string const &value) {
  m_MaxAuthBtrUl = value;
  m_MaxAuthBtrUlIsSet = true;
}
bool M1QoSSpecification::maxAuthBtrUlIsSet() const {
  return m_MaxAuthBtrUlIsSet;
}
void M1QoSSpecification::unsetMaxAuthBtrUl() { m_MaxAuthBtrUlIsSet = false; }
std::string M1QoSSpecification::getMaxAuthBtrDl() const {
  return m_MaxAuthBtrDl;
}
void M1QoSSpecification::setMaxAuthBtrDl(std::string const &value) {
  m_MaxAuthBtrDl = value;
  m_MaxAuthBtrDlIsSet = true;
}
bool M1QoSSpecification::maxAuthBtrDlIsSet() const {
  return m_MaxAuthBtrDlIsSet;
}
void M1QoSSpecification::unsetMaxAuthBtrDl() { m_MaxAuthBtrDlIsSet = false; }
int32_t M1QoSSpecification::getDefPacketLossRateDl() const {
  return m_DefPacketLossRateDl;
}
void M1QoSSpecification::setDefPacketLossRateDl(int32_t const value) {
  m_DefPacketLossRateDl = value;
  m_DefPacketLossRateDlIsSet = true;
}
bool M1QoSSpecification::defPacketLossRateDlIsSet() const {
  return m_DefPacketLossRateDlIsSet;
}
void M1QoSSpecification::unsetDefPacketLossRateDl() {
  m_DefPacketLossRateDlIsSet = false;
}
int32_t M1QoSSpecification::getDefPacketLossRateUl() const {
  return m_DefPacketLossRateUl;
}
void M1QoSSpecification::setDefPacketLossRateUl(int32_t const value) {
  m_DefPacketLossRateUl = value;
  m_DefPacketLossRateUlIsSet = true;
}
bool M1QoSSpecification::defPacketLossRateUlIsSet() const {
  return m_DefPacketLossRateUlIsSet;
}
void M1QoSSpecification::unsetDefPacketLossRateUl() {
  m_DefPacketLossRateUlIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
