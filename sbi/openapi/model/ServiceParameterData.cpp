/**
 * 3gpp-service-parameter
 * API for AF service paramter Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ServiceParameterData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ServiceParameterData::ServiceParameterData() {
  m_AfServiceId = "";
  m_AfServiceIdIsSet = false;
  m_AppId = "";
  m_AppIdIsSet = false;
  m_Dnn = "";
  m_DnnIsSet = false;
  m_SnssaiIsSet = false;
  m_ExternalGroupId = "";
  m_ExternalGroupIdIsSet = false;
  m_AnyUeInd = false;
  m_AnyUeIndIsSet = false;
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_UeIpv4 = "";
  m_UeIpv4IsSet = false;
  m_UeIpv6IsSet = false;
  m_UeMac = "";
  m_UeMacIsSet = false;
  m_Self = "";
  m_SelfIsSet = false;
  m_ParamOverPc5 = "";
  m_ParamOverPc5IsSet = false;
  m_ParamOverUu = "";
  m_ParamOverUuIsSet = false;
  m_ParamForProSeDd = "";
  m_ParamForProSeDdIsSet = false;
  m_ParamForProSeDc = "";
  m_ParamForProSeDcIsSet = false;
  m_ParamForProSeU2N = "";
  m_ParamForProSeU2NIsSet = false;
  m_ParamForProSeUsageRep = "";
  m_ParamForProSeUsageRepIsSet = false;
  m_ParamForProSeServPathSel = "";
  m_ParamForProSeServPathSelIsSet = false;
  m_UrspInfluenceIsSet = false;
  m_MtcProviderId = "";
  m_MtcProviderIdIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
}

ServiceParameterData::~ServiceParameterData() {}

void ServiceParameterData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ServiceParameterData &o) {
  j = nlohmann::json();
  if (o.afServiceIdIsSet())
    j["afServiceId"] = o.m_AfServiceId;
  if (o.appIdIsSet())
    j["appId"] = o.m_AppId;
  if (o.dnnIsSet())
    j["dnn"] = o.m_Dnn;
  if (o.snssaiIsSet())
    j["snssai"] = o.m_Snssai;
  if (o.externalGroupIdIsSet())
    j["externalGroupId"] = o.m_ExternalGroupId;
  if (o.anyUeIndIsSet())
    j["anyUeInd"] = o.m_AnyUeInd;
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  if (o.ueIpv4IsSet())
    j["ueIpv4"] = o.m_UeIpv4;
  if (o.ueIpv6IsSet())
    j["ueIpv6"] = o.m_UeIpv6;
  if (o.ueMacIsSet())
    j["ueMac"] = o.m_UeMac;
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  if (o.paramOverPc5IsSet())
    j["paramOverPc5"] = o.m_ParamOverPc5;
  if (o.paramOverUuIsSet())
    j["paramOverUu"] = o.m_ParamOverUu;
  if (o.paramForProSeDdIsSet())
    j["paramForProSeDd"] = o.m_ParamForProSeDd;
  if (o.paramForProSeDcIsSet())
    j["paramForProSeDc"] = o.m_ParamForProSeDc;
  if (o.paramForProSeU2NIsSet())
    j["paramForProSeU2N"] = o.m_ParamForProSeU2N;
  if (o.paramForProSeUsageRepIsSet())
    j["paramForProSeUsageRep"] = o.m_ParamForProSeUsageRep;
  if (o.paramForProSeServPathSelIsSet())
    j["paramForProSeServPathSel"] = o.m_ParamForProSeServPathSel;
  if (o.urspInfluenceIsSet() || !o.m_UrspInfluence.empty())
    j["urspInfluence"] = o.m_UrspInfluence;
  if (o.mtcProviderIdIsSet())
    j["mtcProviderId"] = o.m_MtcProviderId;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, ServiceParameterData &o) {
  if (j.find("afServiceId") != j.end()) {
    j.at("afServiceId").get_to(o.m_AfServiceId);
    o.m_AfServiceIdIsSet = true;
  }
  if (j.find("appId") != j.end()) {
    j.at("appId").get_to(o.m_AppId);
    o.m_AppIdIsSet = true;
  }
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
  if (j.find("snssai") != j.end()) {
    j.at("snssai").get_to(o.m_Snssai);
    o.m_SnssaiIsSet = true;
  }
  if (j.find("externalGroupId") != j.end()) {
    j.at("externalGroupId").get_to(o.m_ExternalGroupId);
    o.m_ExternalGroupIdIsSet = true;
  }
  if (j.find("anyUeInd") != j.end()) {
    j.at("anyUeInd").get_to(o.m_AnyUeInd);
    o.m_AnyUeIndIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("ueIpv4") != j.end()) {
    j.at("ueIpv4").get_to(o.m_UeIpv4);
    o.m_UeIpv4IsSet = true;
  }
  if (j.find("ueIpv6") != j.end()) {
    j.at("ueIpv6").get_to(o.m_UeIpv6);
    o.m_UeIpv6IsSet = true;
  }
  if (j.find("ueMac") != j.end()) {
    j.at("ueMac").get_to(o.m_UeMac);
    o.m_UeMacIsSet = true;
  }
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("paramOverPc5") != j.end()) {
    j.at("paramOverPc5").get_to(o.m_ParamOverPc5);
    o.m_ParamOverPc5IsSet = true;
  }
  if (j.find("paramOverUu") != j.end()) {
    j.at("paramOverUu").get_to(o.m_ParamOverUu);
    o.m_ParamOverUuIsSet = true;
  }
  if (j.find("paramForProSeDd") != j.end()) {
    j.at("paramForProSeDd").get_to(o.m_ParamForProSeDd);
    o.m_ParamForProSeDdIsSet = true;
  }
  if (j.find("paramForProSeDc") != j.end()) {
    j.at("paramForProSeDc").get_to(o.m_ParamForProSeDc);
    o.m_ParamForProSeDcIsSet = true;
  }
  if (j.find("paramForProSeU2N") != j.end()) {
    j.at("paramForProSeU2N").get_to(o.m_ParamForProSeU2N);
    o.m_ParamForProSeU2NIsSet = true;
  }
  if (j.find("paramForProSeUsageRep") != j.end()) {
    j.at("paramForProSeUsageRep").get_to(o.m_ParamForProSeUsageRep);
    o.m_ParamForProSeUsageRepIsSet = true;
  }
  if (j.find("paramForProSeServPathSel") != j.end()) {
    j.at("paramForProSeServPathSel").get_to(o.m_ParamForProSeServPathSel);
    o.m_ParamForProSeServPathSelIsSet = true;
  }
  if (j.find("urspInfluence") != j.end()) {
    j.at("urspInfluence").get_to(o.m_UrspInfluence);
    o.m_UrspInfluenceIsSet = true;
  }
  if (j.find("mtcProviderId") != j.end()) {
    j.at("mtcProviderId").get_to(o.m_MtcProviderId);
    o.m_MtcProviderIdIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::string ServiceParameterData::getAfServiceId() const {
  return m_AfServiceId;
}
void ServiceParameterData::setAfServiceId(std::string const &value) {
  m_AfServiceId = value;
  m_AfServiceIdIsSet = true;
}
bool ServiceParameterData::afServiceIdIsSet() const {
  return m_AfServiceIdIsSet;
}
void ServiceParameterData::unsetAfServiceId() { m_AfServiceIdIsSet = false; }
std::string ServiceParameterData::getAppId() const { return m_AppId; }
void ServiceParameterData::setAppId(std::string const &value) {
  m_AppId = value;
  m_AppIdIsSet = true;
}
bool ServiceParameterData::appIdIsSet() const { return m_AppIdIsSet; }
void ServiceParameterData::unsetAppId() { m_AppIdIsSet = false; }
std::string ServiceParameterData::getDnn() const { return m_Dnn; }
void ServiceParameterData::setDnn(std::string const &value) {
  m_Dnn = value;
  m_DnnIsSet = true;
}
bool ServiceParameterData::dnnIsSet() const { return m_DnnIsSet; }
void ServiceParameterData::unsetDnn() { m_DnnIsSet = false; }
Snssai ServiceParameterData::getSnssai() const { return m_Snssai; }
void ServiceParameterData::setSnssai(Snssai const &value) {
  m_Snssai = value;
  m_SnssaiIsSet = true;
}
bool ServiceParameterData::snssaiIsSet() const { return m_SnssaiIsSet; }
void ServiceParameterData::unsetSnssai() { m_SnssaiIsSet = false; }
std::string ServiceParameterData::getExternalGroupId() const {
  return m_ExternalGroupId;
}
void ServiceParameterData::setExternalGroupId(std::string const &value) {
  m_ExternalGroupId = value;
  m_ExternalGroupIdIsSet = true;
}
bool ServiceParameterData::externalGroupIdIsSet() const {
  return m_ExternalGroupIdIsSet;
}
void ServiceParameterData::unsetExternalGroupId() {
  m_ExternalGroupIdIsSet = false;
}
bool ServiceParameterData::isAnyUeInd() const { return m_AnyUeInd; }
void ServiceParameterData::setAnyUeInd(bool const value) {
  m_AnyUeInd = value;
  m_AnyUeIndIsSet = true;
}
bool ServiceParameterData::anyUeIndIsSet() const { return m_AnyUeIndIsSet; }
void ServiceParameterData::unsetAnyUeInd() { m_AnyUeIndIsSet = false; }
std::string ServiceParameterData::getGpsi() const { return m_Gpsi; }
void ServiceParameterData::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool ServiceParameterData::gpsiIsSet() const { return m_GpsiIsSet; }
void ServiceParameterData::unsetGpsi() { m_GpsiIsSet = false; }
std::string ServiceParameterData::getUeIpv4() const { return m_UeIpv4; }
void ServiceParameterData::setUeIpv4(std::string const &value) {
  m_UeIpv4 = value;
  m_UeIpv4IsSet = true;
}
bool ServiceParameterData::ueIpv4IsSet() const { return m_UeIpv4IsSet; }
void ServiceParameterData::unsetUeIpv4() { m_UeIpv4IsSet = false; }
Ipv6Addr ServiceParameterData::getUeIpv6() const { return m_UeIpv6; }
void ServiceParameterData::setUeIpv6(Ipv6Addr const &value) {
  m_UeIpv6 = value;
  m_UeIpv6IsSet = true;
}
bool ServiceParameterData::ueIpv6IsSet() const { return m_UeIpv6IsSet; }
void ServiceParameterData::unsetUeIpv6() { m_UeIpv6IsSet = false; }
std::string ServiceParameterData::getUeMac() const { return m_UeMac; }
void ServiceParameterData::setUeMac(std::string const &value) {
  m_UeMac = value;
  m_UeMacIsSet = true;
}
bool ServiceParameterData::ueMacIsSet() const { return m_UeMacIsSet; }
void ServiceParameterData::unsetUeMac() { m_UeMacIsSet = false; }
std::string ServiceParameterData::getSelf() const { return m_Self; }
void ServiceParameterData::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool ServiceParameterData::selfIsSet() const { return m_SelfIsSet; }
void ServiceParameterData::unsetSelf() { m_SelfIsSet = false; }
std::string ServiceParameterData::getParamOverPc5() const {
  return m_ParamOverPc5;
}
void ServiceParameterData::setParamOverPc5(std::string const &value) {
  m_ParamOverPc5 = value;
  m_ParamOverPc5IsSet = true;
}
bool ServiceParameterData::paramOverPc5IsSet() const {
  return m_ParamOverPc5IsSet;
}
void ServiceParameterData::unsetParamOverPc5() { m_ParamOverPc5IsSet = false; }
std::string ServiceParameterData::getParamOverUu() const {
  return m_ParamOverUu;
}
void ServiceParameterData::setParamOverUu(std::string const &value) {
  m_ParamOverUu = value;
  m_ParamOverUuIsSet = true;
}
bool ServiceParameterData::paramOverUuIsSet() const {
  return m_ParamOverUuIsSet;
}
void ServiceParameterData::unsetParamOverUu() { m_ParamOverUuIsSet = false; }
std::string ServiceParameterData::getParamForProSeDd() const {
  return m_ParamForProSeDd;
}
void ServiceParameterData::setParamForProSeDd(std::string const &value) {
  m_ParamForProSeDd = value;
  m_ParamForProSeDdIsSet = true;
}
bool ServiceParameterData::paramForProSeDdIsSet() const {
  return m_ParamForProSeDdIsSet;
}
void ServiceParameterData::unsetParamForProSeDd() {
  m_ParamForProSeDdIsSet = false;
}
std::string ServiceParameterData::getParamForProSeDc() const {
  return m_ParamForProSeDc;
}
void ServiceParameterData::setParamForProSeDc(std::string const &value) {
  m_ParamForProSeDc = value;
  m_ParamForProSeDcIsSet = true;
}
bool ServiceParameterData::paramForProSeDcIsSet() const {
  return m_ParamForProSeDcIsSet;
}
void ServiceParameterData::unsetParamForProSeDc() {
  m_ParamForProSeDcIsSet = false;
}
std::string ServiceParameterData::getParamForProSeU2N() const {
  return m_ParamForProSeU2N;
}
void ServiceParameterData::setParamForProSeU2N(std::string const &value) {
  m_ParamForProSeU2N = value;
  m_ParamForProSeU2NIsSet = true;
}
bool ServiceParameterData::paramForProSeU2NIsSet() const {
  return m_ParamForProSeU2NIsSet;
}
void ServiceParameterData::unsetParamForProSeU2N() {
  m_ParamForProSeU2NIsSet = false;
}
std::string ServiceParameterData::getParamForProSeUsageRep() const {
  return m_ParamForProSeUsageRep;
}
void ServiceParameterData::setParamForProSeUsageRep(std::string const &value) {
  m_ParamForProSeUsageRep = value;
  m_ParamForProSeUsageRepIsSet = true;
}
bool ServiceParameterData::paramForProSeUsageRepIsSet() const {
  return m_ParamForProSeUsageRepIsSet;
}
void ServiceParameterData::unsetParamForProSeUsageRep() {
  m_ParamForProSeUsageRepIsSet = false;
}
std::string ServiceParameterData::getParamForProSeServPathSel() const {
  return m_ParamForProSeServPathSel;
}
void ServiceParameterData::setParamForProSeServPathSel(
    std::string const &value) {
  m_ParamForProSeServPathSel = value;
  m_ParamForProSeServPathSelIsSet = true;
}
bool ServiceParameterData::paramForProSeServPathSelIsSet() const {
  return m_ParamForProSeServPathSelIsSet;
}
void ServiceParameterData::unsetParamForProSeServPathSel() {
  m_ParamForProSeServPathSelIsSet = false;
}
std::vector<UrspRuleRequest> &ServiceParameterData::getUrspInfluence() {
  return m_UrspInfluence;
}
void ServiceParameterData::setUrspInfluence(
    std::vector<UrspRuleRequest> const &value) {
  m_UrspInfluence = value;
  m_UrspInfluenceIsSet = true;
}
bool ServiceParameterData::urspInfluenceIsSet() const {
  return m_UrspInfluenceIsSet;
}
void ServiceParameterData::unsetUrspInfluence() {
  m_UrspInfluenceIsSet = false;
}
std::string ServiceParameterData::getMtcProviderId() const {
  return m_MtcProviderId;
}
void ServiceParameterData::setMtcProviderId(std::string const &value) {
  m_MtcProviderId = value;
  m_MtcProviderIdIsSet = true;
}
bool ServiceParameterData::mtcProviderIdIsSet() const {
  return m_MtcProviderIdIsSet;
}
void ServiceParameterData::unsetMtcProviderId() {
  m_MtcProviderIdIsSet = false;
}
std::string ServiceParameterData::getSuppFeat() const { return m_SuppFeat; }
void ServiceParameterData::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool ServiceParameterData::suppFeatIsSet() const { return m_SuppFeatIsSet; }
void ServiceParameterData::unsetSuppFeat() { m_SuppFeatIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
