/**
 * Nhss_imsUECM
 * Nhss UE Context Management Service for IMS. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RestorationInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RestorationInfo::RestorationInfo() {
  m_Path = "";
  m_Contact = "";
  m_InitialCSeqSequenceNumber = 0;
  m_InitialCSeqSequenceNumberIsSet = false;
  m_CallIdSipHeader = "";
  m_CallIdSipHeaderIsSet = false;
  m_UesubscriptionInfoIsSet = false;
  m_PcscfSubscriptionInfoIsSet = false;
  m_ImsSdmSubscriptionsIsSet = false;
}

RestorationInfo::~RestorationInfo() {}

void RestorationInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const RestorationInfo &o) {
  j = nlohmann::json();
  j["path"] = o.m_Path;
  j["contact"] = o.m_Contact;
  if (o.initialCSeqSequenceNumberIsSet())
    j["initialCSeqSequenceNumber"] = o.m_InitialCSeqSequenceNumber;
  if (o.callIdSipHeaderIsSet())
    j["callIdSipHeader"] = o.m_CallIdSipHeader;
  if (o.uesubscriptionInfoIsSet())
    j["uesubscriptionInfo"] = o.m_UesubscriptionInfo;
  if (o.pcscfSubscriptionInfoIsSet())
    j["pcscfSubscriptionInfo"] = o.m_PcscfSubscriptionInfo;
  if (o.imsSdmSubscriptionsIsSet() || !o.m_ImsSdmSubscriptions.empty())
    j["imsSdmSubscriptions"] = o.m_ImsSdmSubscriptions;
}

void from_json(const nlohmann::json &j, RestorationInfo &o) {
  j.at("path").get_to(o.m_Path);
  j.at("contact").get_to(o.m_Contact);
  if (j.find("initialCSeqSequenceNumber") != j.end()) {
    j.at("initialCSeqSequenceNumber").get_to(o.m_InitialCSeqSequenceNumber);
    o.m_InitialCSeqSequenceNumberIsSet = true;
  }
  if (j.find("callIdSipHeader") != j.end()) {
    j.at("callIdSipHeader").get_to(o.m_CallIdSipHeader);
    o.m_CallIdSipHeaderIsSet = true;
  }
  if (j.find("uesubscriptionInfo") != j.end()) {
    j.at("uesubscriptionInfo").get_to(o.m_UesubscriptionInfo);
    o.m_UesubscriptionInfoIsSet = true;
  }
  if (j.find("pcscfSubscriptionInfo") != j.end()) {
    j.at("pcscfSubscriptionInfo").get_to(o.m_PcscfSubscriptionInfo);
    o.m_PcscfSubscriptionInfoIsSet = true;
  }
  if (j.find("imsSdmSubscriptions") != j.end()) {
    j.at("imsSdmSubscriptions").get_to(o.m_ImsSdmSubscriptions);
    o.m_ImsSdmSubscriptionsIsSet = true;
  }
}

std::string RestorationInfo::getPath() const { return m_Path; }
void RestorationInfo::setPath(std::string const &value) { m_Path = value; }
std::string RestorationInfo::getContact() const { return m_Contact; }
void RestorationInfo::setContact(std::string const &value) {
  m_Contact = value;
}
int32_t RestorationInfo::getInitialCSeqSequenceNumber() const {
  return m_InitialCSeqSequenceNumber;
}
void RestorationInfo::setInitialCSeqSequenceNumber(int32_t const value) {
  m_InitialCSeqSequenceNumber = value;
  m_InitialCSeqSequenceNumberIsSet = true;
}
bool RestorationInfo::initialCSeqSequenceNumberIsSet() const {
  return m_InitialCSeqSequenceNumberIsSet;
}
void RestorationInfo::unsetInitialCSeqSequenceNumber() {
  m_InitialCSeqSequenceNumberIsSet = false;
}
std::string RestorationInfo::getCallIdSipHeader() const {
  return m_CallIdSipHeader;
}
void RestorationInfo::setCallIdSipHeader(std::string const &value) {
  m_CallIdSipHeader = value;
  m_CallIdSipHeaderIsSet = true;
}
bool RestorationInfo::callIdSipHeaderIsSet() const {
  return m_CallIdSipHeaderIsSet;
}
void RestorationInfo::unsetCallIdSipHeader() { m_CallIdSipHeaderIsSet = false; }
UeSubscriptionInfo RestorationInfo::getUesubscriptionInfo() const {
  return m_UesubscriptionInfo;
}
void RestorationInfo::setUesubscriptionInfo(UeSubscriptionInfo const &value) {
  m_UesubscriptionInfo = value;
  m_UesubscriptionInfoIsSet = true;
}
bool RestorationInfo::uesubscriptionInfoIsSet() const {
  return m_UesubscriptionInfoIsSet;
}
void RestorationInfo::unsetUesubscriptionInfo() {
  m_UesubscriptionInfoIsSet = false;
}
PcscfSubscriptionInfo RestorationInfo::getPcscfSubscriptionInfo() const {
  return m_PcscfSubscriptionInfo;
}
void RestorationInfo::setPcscfSubscriptionInfo(
    PcscfSubscriptionInfo const &value) {
  m_PcscfSubscriptionInfo = value;
  m_PcscfSubscriptionInfoIsSet = true;
}
bool RestorationInfo::pcscfSubscriptionInfoIsSet() const {
  return m_PcscfSubscriptionInfoIsSet;
}
void RestorationInfo::unsetPcscfSubscriptionInfo() {
  m_PcscfSubscriptionInfoIsSet = false;
}
std::map<std::string, ImsSdmSubscription> &
RestorationInfo::getImsSdmSubscriptions() {
  return m_ImsSdmSubscriptions;
}
void RestorationInfo::setImsSdmSubscriptions(
    std::map<std::string, ImsSdmSubscription> const &value) {
  m_ImsSdmSubscriptions = value;
  m_ImsSdmSubscriptionsIsSet = true;
}
bool RestorationInfo::imsSdmSubscriptionsIsSet() const {
  return m_ImsSdmSubscriptionsIsSet;
}
void RestorationInfo::unsetImsSdmSubscriptions() {
  m_ImsSdmSubscriptionsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
