/**
 * GMDviaMBMSbyxMB
 * API for Group Message Delivery via MBMS by xMB Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "GMDViaMBMSByxMB.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

GMDViaMBMSByxMB::GMDViaMBMSByxMB() {
  m_Self = "";
  m_SelfIsSet = false;
  m_NotificationDestination = "";
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
  m_MbmsLocAreaIsSet = false;
  m_MessageDeliveryStartTime = "";
  m_MessageDeliveryStartTimeIsSet = false;
  m_MessageDeliveryStopTime = "";
  m_MessageDeliveryStopTimeIsSet = false;
  m_GroupMessagePayload = "";
  m_GroupMessagePayloadIsSet = false;
  m_ScefMessageDeliveryIPv4 = "";
  m_ScefMessageDeliveryIPv4IsSet = false;
  m_ScefMessageDeliveryIPv6 = "";
  m_ScefMessageDeliveryIPv6IsSet = false;
  m_ScefMessageDeliveryPort = 0;
  m_ScefMessageDeliveryPortIsSet = false;
}

GMDViaMBMSByxMB::~GMDViaMBMSByxMB() {}

void GMDViaMBMSByxMB::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const GMDViaMBMSByxMB &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  j["notificationDestination"] = o.m_NotificationDestination;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  if (o.mbmsLocAreaIsSet())
    j["mbmsLocArea"] = o.m_MbmsLocArea;
  if (o.messageDeliveryStartTimeIsSet())
    j["messageDeliveryStartTime"] = o.m_MessageDeliveryStartTime;
  if (o.messageDeliveryStopTimeIsSet())
    j["messageDeliveryStopTime"] = o.m_MessageDeliveryStopTime;
  if (o.groupMessagePayloadIsSet())
    j["groupMessagePayload"] = o.m_GroupMessagePayload;
  if (o.scefMessageDeliveryIPv4IsSet())
    j["scefMessageDeliveryIPv4"] = o.m_ScefMessageDeliveryIPv4;
  if (o.scefMessageDeliveryIPv6IsSet())
    j["scefMessageDeliveryIPv6"] = o.m_ScefMessageDeliveryIPv6;
  if (o.scefMessageDeliveryPortIsSet())
    j["scefMessageDeliveryPort"] = o.m_ScefMessageDeliveryPort;
}

void from_json(const nlohmann::json &j, GMDViaMBMSByxMB &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  j.at("notificationDestination").get_to(o.m_NotificationDestination);
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  if (j.find("mbmsLocArea") != j.end()) {
    j.at("mbmsLocArea").get_to(o.m_MbmsLocArea);
    o.m_MbmsLocAreaIsSet = true;
  }
  if (j.find("messageDeliveryStartTime") != j.end()) {
    j.at("messageDeliveryStartTime").get_to(o.m_MessageDeliveryStartTime);
    o.m_MessageDeliveryStartTimeIsSet = true;
  }
  if (j.find("messageDeliveryStopTime") != j.end()) {
    j.at("messageDeliveryStopTime").get_to(o.m_MessageDeliveryStopTime);
    o.m_MessageDeliveryStopTimeIsSet = true;
  }
  if (j.find("groupMessagePayload") != j.end()) {
    j.at("groupMessagePayload").get_to(o.m_GroupMessagePayload);
    o.m_GroupMessagePayloadIsSet = true;
  }
  if (j.find("scefMessageDeliveryIPv4") != j.end()) {
    j.at("scefMessageDeliveryIPv4").get_to(o.m_ScefMessageDeliveryIPv4);
    o.m_ScefMessageDeliveryIPv4IsSet = true;
  }
  if (j.find("scefMessageDeliveryIPv6") != j.end()) {
    j.at("scefMessageDeliveryIPv6").get_to(o.m_ScefMessageDeliveryIPv6);
    o.m_ScefMessageDeliveryIPv6IsSet = true;
  }
  if (j.find("scefMessageDeliveryPort") != j.end()) {
    j.at("scefMessageDeliveryPort").get_to(o.m_ScefMessageDeliveryPort);
    o.m_ScefMessageDeliveryPortIsSet = true;
  }
}

std::string GMDViaMBMSByxMB::getSelf() const { return m_Self; }
void GMDViaMBMSByxMB::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool GMDViaMBMSByxMB::selfIsSet() const { return m_SelfIsSet; }
void GMDViaMBMSByxMB::unsetSelf() { m_SelfIsSet = false; }
std::string GMDViaMBMSByxMB::getNotificationDestination() const {
  return m_NotificationDestination;
}
void GMDViaMBMSByxMB::setNotificationDestination(std::string const &value) {
  m_NotificationDestination = value;
}
bool GMDViaMBMSByxMB::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void GMDViaMBMSByxMB::setRequestTestNotification(bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool GMDViaMBMSByxMB::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void GMDViaMBMSByxMB::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig GMDViaMBMSByxMB::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void GMDViaMBMSByxMB::setWebsockNotifConfig(WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool GMDViaMBMSByxMB::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void GMDViaMBMSByxMB::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
MbmsLocArea GMDViaMBMSByxMB::getMbmsLocArea() const { return m_MbmsLocArea; }
void GMDViaMBMSByxMB::setMbmsLocArea(MbmsLocArea const &value) {
  m_MbmsLocArea = value;
  m_MbmsLocAreaIsSet = true;
}
bool GMDViaMBMSByxMB::mbmsLocAreaIsSet() const { return m_MbmsLocAreaIsSet; }
void GMDViaMBMSByxMB::unsetMbmsLocArea() { m_MbmsLocAreaIsSet = false; }
std::string GMDViaMBMSByxMB::getMessageDeliveryStartTime() const {
  return m_MessageDeliveryStartTime;
}
void GMDViaMBMSByxMB::setMessageDeliveryStartTime(std::string const &value) {
  m_MessageDeliveryStartTime = value;
  m_MessageDeliveryStartTimeIsSet = true;
}
bool GMDViaMBMSByxMB::messageDeliveryStartTimeIsSet() const {
  return m_MessageDeliveryStartTimeIsSet;
}
void GMDViaMBMSByxMB::unsetMessageDeliveryStartTime() {
  m_MessageDeliveryStartTimeIsSet = false;
}
std::string GMDViaMBMSByxMB::getMessageDeliveryStopTime() const {
  return m_MessageDeliveryStopTime;
}
void GMDViaMBMSByxMB::setMessageDeliveryStopTime(std::string const &value) {
  m_MessageDeliveryStopTime = value;
  m_MessageDeliveryStopTimeIsSet = true;
}
bool GMDViaMBMSByxMB::messageDeliveryStopTimeIsSet() const {
  return m_MessageDeliveryStopTimeIsSet;
}
void GMDViaMBMSByxMB::unsetMessageDeliveryStopTime() {
  m_MessageDeliveryStopTimeIsSet = false;
}
std::string GMDViaMBMSByxMB::getGroupMessagePayload() const {
  return m_GroupMessagePayload;
}
void GMDViaMBMSByxMB::setGroupMessagePayload(std::string const &value) {
  m_GroupMessagePayload = value;
  m_GroupMessagePayloadIsSet = true;
}
bool GMDViaMBMSByxMB::groupMessagePayloadIsSet() const {
  return m_GroupMessagePayloadIsSet;
}
void GMDViaMBMSByxMB::unsetGroupMessagePayload() {
  m_GroupMessagePayloadIsSet = false;
}
std::string GMDViaMBMSByxMB::getScefMessageDeliveryIPv4() const {
  return m_ScefMessageDeliveryIPv4;
}
void GMDViaMBMSByxMB::setScefMessageDeliveryIPv4(std::string const &value) {
  m_ScefMessageDeliveryIPv4 = value;
  m_ScefMessageDeliveryIPv4IsSet = true;
}
bool GMDViaMBMSByxMB::scefMessageDeliveryIPv4IsSet() const {
  return m_ScefMessageDeliveryIPv4IsSet;
}
void GMDViaMBMSByxMB::unsetScefMessageDeliveryIPv4() {
  m_ScefMessageDeliveryIPv4IsSet = false;
}
std::string GMDViaMBMSByxMB::getScefMessageDeliveryIPv6() const {
  return m_ScefMessageDeliveryIPv6;
}
void GMDViaMBMSByxMB::setScefMessageDeliveryIPv6(std::string const &value) {
  m_ScefMessageDeliveryIPv6 = value;
  m_ScefMessageDeliveryIPv6IsSet = true;
}
bool GMDViaMBMSByxMB::scefMessageDeliveryIPv6IsSet() const {
  return m_ScefMessageDeliveryIPv6IsSet;
}
void GMDViaMBMSByxMB::unsetScefMessageDeliveryIPv6() {
  m_ScefMessageDeliveryIPv6IsSet = false;
}
int32_t GMDViaMBMSByxMB::getScefMessageDeliveryPort() const {
  return m_ScefMessageDeliveryPort;
}
void GMDViaMBMSByxMB::setScefMessageDeliveryPort(int32_t const value) {
  m_ScefMessageDeliveryPort = value;
  m_ScefMessageDeliveryPortIsSet = true;
}
bool GMDViaMBMSByxMB::scefMessageDeliveryPortIsSet() const {
  return m_ScefMessageDeliveryPortIsSet;
}
void GMDViaMBMSByxMB::unsetScefMessageDeliveryPort() {
  m_ScefMessageDeliveryPortIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
