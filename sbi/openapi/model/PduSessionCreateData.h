/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PduSessionCreateData.h
 *
 * Data within Create Request
 */

#ifndef PduSessionCreateData_H_
#define PduSessionCreateData_H_

#include "AccessType.h"
#include "ApnRateStatus.h"
#include "DnnSelectionMode.h"
#include "EpsInterworkingIndication.h"
#include "Guami.h"
#include "MaxIntegrityProtectedDataRate.h"
#include "PlmnIdNid.h"
#include "PresenceState.h"
#include "RatType.h"
#include "RefToBinaryData.h"
#include "RequestType.h"
#include "RoamingChargingProfile.h"
#include "SecondaryRatUsageInfo.h"
#include "SmallDataRateStatus.h"
#include "Snssai.h"
#include "TunnelInfo.h"
#include "UpSecurityInfo.h"
#include "UserLocation.h"
#include "VplmnQos.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within Create Request
/// </summary>
class PduSessionCreateData {
public:
  PduSessionCreateData();
  virtual ~PduSessionCreateData();

  void validate();

  /////////////////////////////////////////////
  /// PduSessionCreateData members

  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  ///
  /// </summary>
  bool isUnauthenticatedSupi() const;
  void setUnauthenticatedSupi(bool const value);
  bool unauthenticatedSupiIsSet() const;
  void unsetUnauthenticatedSupi();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  /// Unsigned integer identifying a PDU session, within the range 0 to 255, as
  /// specified in clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU
  /// Session ID is allocated by the Core Network for UEs not supporting N1
  /// mode, reserved range 64 to 95 is used. PDU Session ID within the reserved
  /// range is only visible in the Core Network.
  /// </summary>
  int32_t getPduSessionId() const;
  void setPduSessionId(int32_t const value);
  bool pduSessionIdIsSet() const;
  void unsetPduSessionId();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getSelectedDnn() const;
  void setSelectedDnn(std::string const &value);
  bool selectedDnnIsSet() const;
  void unsetSelectedDnn();
  /// <summary>
  ///
  /// </summary>
  Snssai getSNssai() const;
  void setSNssai(Snssai const &value);
  bool sNssaiIsSet() const;
  void unsetSNssai();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getVsmfId() const;
  void setVsmfId(std::string const &value);
  bool vsmfIdIsSet() const;
  void unsetVsmfId();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getIsmfId() const;
  void setIsmfId(std::string const &value);
  bool ismfIdIsSet() const;
  void unsetIsmfId();
  /// <summary>
  ///
  /// </summary>
  PlmnIdNid getServingNetwork() const;
  void setServingNetwork(PlmnIdNid const &value);
  /// <summary>
  ///
  /// </summary>
  RequestType getRequestType() const;
  void setRequestType(RequestType const &value);
  bool requestTypeIsSet() const;
  void unsetRequestType();
  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t> &getEpsBearerId();
  void setEpsBearerId(std::vector<int32_t> const value);
  bool epsBearerIdIsSet() const;
  void unsetEpsBearerId();
  /// <summary>
  /// string with format \&quot;bytes\&quot; as defined in OpenAPI
  /// </summary>
  std::string getPgwS8cFteid() const;
  void setPgwS8cFteid(std::string const &value);
  bool pgwS8cFteidIsSet() const;
  void unsetPgwS8cFteid();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getVsmfPduSessionUri() const;
  void setVsmfPduSessionUri(std::string const &value);
  bool vsmfPduSessionUriIsSet() const;
  void unsetVsmfPduSessionUri();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getIsmfPduSessionUri() const;
  void setIsmfPduSessionUri(std::string const &value);
  bool ismfPduSessionUriIsSet() const;
  void unsetIsmfPduSessionUri();
  /// <summary>
  ///
  /// </summary>
  TunnelInfo getVcnTunnelInfo() const;
  void setVcnTunnelInfo(TunnelInfo const &value);
  bool vcnTunnelInfoIsSet() const;
  void unsetVcnTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  TunnelInfo getIcnTunnelInfo() const;
  void setIcnTunnelInfo(TunnelInfo const &value);
  bool icnTunnelInfoIsSet() const;
  void unsetIcnTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  TunnelInfo getN9ForwardingTunnelInfo() const;
  void setN9ForwardingTunnelInfo(TunnelInfo const &value);
  bool n9ForwardingTunnelInfoIsSet() const;
  void unsetN9ForwardingTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  TunnelInfo getAdditionalCnTunnelInfo() const;
  void setAdditionalCnTunnelInfo(TunnelInfo const &value);
  bool additionalCnTunnelInfoIsSet() const;
  void unsetAdditionalCnTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  AccessType getAnType() const;
  void setAnType(AccessType const &value);
  /// <summary>
  ///
  /// </summary>
  AccessType getAdditionalAnType() const;
  void setAdditionalAnType(AccessType const &value);
  bool additionalAnTypeIsSet() const;
  void unsetAdditionalAnType();
  /// <summary>
  ///
  /// </summary>
  RatType getRatType() const;
  void setRatType(RatType const &value);
  bool ratTypeIsSet() const;
  void unsetRatType();
  /// <summary>
  ///
  /// </summary>
  UserLocation getUeLocation() const;
  void setUeLocation(UserLocation const &value);
  bool ueLocationIsSet() const;
  void unsetUeLocation();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getUeTimeZone() const;
  void setUeTimeZone(std::string const &value);
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();
  /// <summary>
  ///
  /// </summary>
  UserLocation getAddUeLocation() const;
  void setAddUeLocation(UserLocation const &value);
  bool addUeLocationIsSet() const;
  void unsetAddUeLocation();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  ///
  /// </summary>
  RefToBinaryData getN1SmInfoFromUe() const;
  void setN1SmInfoFromUe(RefToBinaryData const &value);
  bool n1SmInfoFromUeIsSet() const;
  void unsetN1SmInfoFromUe();
  /// <summary>
  ///
  /// </summary>
  RefToBinaryData getUnknownN1SmInfo() const;
  void setUnknownN1SmInfo(RefToBinaryData const &value);
  bool unknownN1SmInfoIsSet() const;
  void unsetUnknownN1SmInfo();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getHPcfId() const;
  void setHPcfId(std::string const &value);
  bool hPcfIdIsSet() const;
  void unsetHPcfId();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getPcfId() const;
  void setPcfId(std::string const &value);
  bool pcfIdIsSet() const;
  void unsetPcfId();
  /// <summary>
  /// Identifier of a group of NFs.
  /// </summary>
  std::string getPcfGroupId() const;
  void setPcfGroupId(std::string const &value);
  bool pcfGroupIdIsSet() const;
  void unsetPcfGroupId();
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getPcfSetId() const;
  void setPcfSetId(std::string const &value);
  bool pcfSetIdIsSet() const;
  void unsetPcfSetId();
  /// <summary>
  ///
  /// </summary>
  bool isHoPreparationIndication() const;
  void setHoPreparationIndication(bool const value);
  bool hoPreparationIndicationIsSet() const;
  void unsetHoPreparationIndication();
  /// <summary>
  ///
  /// </summary>
  DnnSelectionMode getSelMode() const;
  void setSelMode(DnnSelectionMode const &value);
  bool selModeIsSet() const;
  void unsetSelMode();
  /// <summary>
  ///
  /// </summary>
  bool isAlwaysOnRequested() const;
  void setAlwaysOnRequested(bool const value);
  bool alwaysOnRequestedIsSet() const;
  void unsetAlwaysOnRequested();
  /// <summary>
  /// Identifier of a group of NFs.
  /// </summary>
  std::string getUdmGroupId() const;
  void setUdmGroupId(std::string const &value);
  bool udmGroupIdIsSet() const;
  void unsetUdmGroupId();
  /// <summary>
  ///
  /// </summary>
  std::string getRoutingIndicator() const;
  void setRoutingIndicator(std::string const &value);
  bool routingIndicatorIsSet() const;
  void unsetRoutingIndicator();
  /// <summary>
  ///
  /// </summary>
  int32_t getHNwPubKeyId() const;
  void setHNwPubKeyId(int32_t const value);
  bool hNwPubKeyIdIsSet() const;
  void unsetHNwPubKeyId();
  /// <summary>
  ///
  /// </summary>
  EpsInterworkingIndication getEpsInterworkingInd() const;
  void setEpsInterworkingInd(EpsInterworkingIndication const &value);
  bool epsInterworkingIndIsSet() const;
  void unsetEpsInterworkingInd();
  /// <summary>
  ///
  /// </summary>
  std::string getVSmfServiceInstanceId() const;
  void setVSmfServiceInstanceId(std::string const &value);
  bool vSmfServiceInstanceIdIsSet() const;
  void unsetVSmfServiceInstanceId();
  /// <summary>
  ///
  /// </summary>
  std::string getISmfServiceInstanceId() const;
  void setISmfServiceInstanceId(std::string const &value);
  bool iSmfServiceInstanceIdIsSet() const;
  void unsetISmfServiceInstanceId();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getRecoveryTime() const;
  void setRecoveryTime(std::string const &value);
  bool recoveryTimeIsSet() const;
  void unsetRecoveryTime();
  /// <summary>
  ///
  /// </summary>
  RoamingChargingProfile getRoamingChargingProfile() const;
  void setRoamingChargingProfile(RoamingChargingProfile const &value);
  bool roamingChargingProfileIsSet() const;
  void unsetRoamingChargingProfile();
  /// <summary>
  ///
  /// </summary>
  std::string getChargingId() const;
  void setChargingId(std::string const &value);
  bool chargingIdIsSet() const;
  void unsetChargingId();
  /// <summary>
  /// Unsigned integer identifying a PDU session, within the range 0 to 255, as
  /// specified in clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU
  /// Session ID is allocated by the Core Network for UEs not supporting N1
  /// mode, reserved range 64 to 95 is used. PDU Session ID within the reserved
  /// range is only visible in the Core Network.
  /// </summary>
  int32_t getOldPduSessionId() const;
  void setOldPduSessionId(int32_t const value);
  bool oldPduSessionIdIsSet() const;
  void unsetOldPduSessionId();
  /// <summary>
  /// EPS bearer context status
  /// </summary>
  std::string getEpsBearerCtxStatus() const;
  void setEpsBearerCtxStatus(std::string const &value);
  bool epsBearerCtxStatusIsSet() const;
  void unsetEpsBearerCtxStatus();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getAmfNfId() const;
  void setAmfNfId(std::string const &value);
  bool amfNfIdIsSet() const;
  void unsetAmfNfId();
  /// <summary>
  ///
  /// </summary>
  Guami getGuami() const;
  void setGuami(Guami const &value);
  bool guamiIsSet() const;
  void unsetGuami();
  /// <summary>
  ///
  /// </summary>
  MaxIntegrityProtectedDataRate getMaxIntegrityProtectedDataRateUl() const;
  void setMaxIntegrityProtectedDataRateUl(
      MaxIntegrityProtectedDataRate const &value);
  bool maxIntegrityProtectedDataRateUlIsSet() const;
  void unsetMaxIntegrityProtectedDataRateUl();
  /// <summary>
  ///
  /// </summary>
  MaxIntegrityProtectedDataRate getMaxIntegrityProtectedDataRateDl() const;
  void setMaxIntegrityProtectedDataRateDl(
      MaxIntegrityProtectedDataRate const &value);
  bool maxIntegrityProtectedDataRateDlIsSet() const;
  void unsetMaxIntegrityProtectedDataRateDl();
  /// <summary>
  ///
  /// </summary>
  bool isCpCiotEnabled() const;
  void setCpCiotEnabled(bool const value);
  bool cpCiotEnabledIsSet() const;
  void unsetCpCiotEnabled();
  /// <summary>
  ///
  /// </summary>
  bool isCpOnlyInd() const;
  void setCpOnlyInd(bool const value);
  bool cpOnlyIndIsSet() const;
  void unsetCpOnlyInd();
  /// <summary>
  ///
  /// </summary>
  bool isInvokeNef() const;
  void setInvokeNef(bool const value);
  bool invokeNefIsSet() const;
  void unsetInvokeNef();
  /// <summary>
  ///
  /// </summary>
  bool isMaRequestInd() const;
  void setMaRequestInd(bool const value);
  bool maRequestIndIsSet() const;
  void unsetMaRequestInd();
  /// <summary>
  ///
  /// </summary>
  bool isMaNwUpgradeInd() const;
  void setMaNwUpgradeInd(bool const value);
  bool maNwUpgradeIndIsSet() const;
  void unsetMaNwUpgradeInd();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getDnaiList();
  void setDnaiList(std::vector<std::string> const &value);
  bool dnaiListIsSet() const;
  void unsetDnaiList();
  /// <summary>
  ///
  /// </summary>
  PresenceState getPresenceInLadn() const;
  void setPresenceInLadn(PresenceState const &value);
  bool presenceInLadnIsSet() const;
  void unsetPresenceInLadn();
  /// <summary>
  ///
  /// </summary>
  std::vector<SecondaryRatUsageInfo> &getSecondaryRatUsageInfo();
  void
  setSecondaryRatUsageInfo(std::vector<SecondaryRatUsageInfo> const &value);
  bool secondaryRatUsageInfoIsSet() const;
  void unsetSecondaryRatUsageInfo();
  /// <summary>
  ///
  /// </summary>
  SmallDataRateStatus getSmallDataRateStatus() const;
  void setSmallDataRateStatus(SmallDataRateStatus const &value);
  bool smallDataRateStatusIsSet() const;
  void unsetSmallDataRateStatus();
  /// <summary>
  ///
  /// </summary>
  ApnRateStatus getApnRateStatus() const;
  void setApnRateStatus(ApnRateStatus const &value);
  bool apnRateStatusIsSet() const;
  void unsetApnRateStatus();
  /// <summary>
  ///
  /// </summary>
  int32_t getDlServingPlmnRateCtl() const;
  void setDlServingPlmnRateCtl(int32_t const value);
  bool dlServingPlmnRateCtlIsSet() const;
  void unsetDlServingPlmnRateCtl();
  /// <summary>
  ///
  /// </summary>
  UpSecurityInfo getUpSecurityInfo() const;
  void setUpSecurityInfo(UpSecurityInfo const &value);
  bool upSecurityInfoIsSet() const;
  void unsetUpSecurityInfo();
  /// <summary>
  ///
  /// </summary>
  VplmnQos getVplmnQos() const;
  void setVplmnQos(VplmnQos const &value);
  bool vplmnQosIsSet() const;
  void unsetVplmnQos();
  /// <summary>
  ///
  /// </summary>
  bool isIvSmfRestoration() const;
  void setIvSmfRestoration(bool const value);
  bool ivSmfRestorationIsSet() const;
  void unsetIvSmfRestoration();

  friend void to_json(nlohmann::json &j, const PduSessionCreateData &o);
  friend void from_json(const nlohmann::json &j, PduSessionCreateData &o);

protected:
  std::string m_Supi;
  bool m_SupiIsSet;
  bool m_UnauthenticatedSupi;
  bool m_UnauthenticatedSupiIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  int32_t m_PduSessionId;
  bool m_PduSessionIdIsSet;
  std::string m_Dnn;

  std::string m_SelectedDnn;
  bool m_SelectedDnnIsSet;
  Snssai m_SNssai;
  bool m_SNssaiIsSet;
  std::string m_VsmfId;
  bool m_VsmfIdIsSet;
  std::string m_IsmfId;
  bool m_IsmfIdIsSet;
  PlmnIdNid m_ServingNetwork;

  RequestType m_RequestType;
  bool m_RequestTypeIsSet;
  std::vector<int32_t> m_EpsBearerId;
  bool m_EpsBearerIdIsSet;
  std::string m_PgwS8cFteid;
  bool m_PgwS8cFteidIsSet;
  std::string m_VsmfPduSessionUri;
  bool m_VsmfPduSessionUriIsSet;
  std::string m_IsmfPduSessionUri;
  bool m_IsmfPduSessionUriIsSet;
  TunnelInfo m_VcnTunnelInfo;
  bool m_VcnTunnelInfoIsSet;
  TunnelInfo m_IcnTunnelInfo;
  bool m_IcnTunnelInfoIsSet;
  TunnelInfo m_N9ForwardingTunnelInfo;
  bool m_N9ForwardingTunnelInfoIsSet;
  TunnelInfo m_AdditionalCnTunnelInfo;
  bool m_AdditionalCnTunnelInfoIsSet;
  AccessType m_AnType;

  AccessType m_AdditionalAnType;
  bool m_AdditionalAnTypeIsSet;
  RatType m_RatType;
  bool m_RatTypeIsSet;
  UserLocation m_UeLocation;
  bool m_UeLocationIsSet;
  std::string m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  UserLocation m_AddUeLocation;
  bool m_AddUeLocationIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  RefToBinaryData m_N1SmInfoFromUe;
  bool m_N1SmInfoFromUeIsSet;
  RefToBinaryData m_UnknownN1SmInfo;
  bool m_UnknownN1SmInfoIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::string m_HPcfId;
  bool m_HPcfIdIsSet;
  std::string m_PcfId;
  bool m_PcfIdIsSet;
  std::string m_PcfGroupId;
  bool m_PcfGroupIdIsSet;
  std::string m_PcfSetId;
  bool m_PcfSetIdIsSet;
  bool m_HoPreparationIndication;
  bool m_HoPreparationIndicationIsSet;
  DnnSelectionMode m_SelMode;
  bool m_SelModeIsSet;
  bool m_AlwaysOnRequested;
  bool m_AlwaysOnRequestedIsSet;
  std::string m_UdmGroupId;
  bool m_UdmGroupIdIsSet;
  std::string m_RoutingIndicator;
  bool m_RoutingIndicatorIsSet;
  int32_t m_HNwPubKeyId;
  bool m_HNwPubKeyIdIsSet;
  EpsInterworkingIndication m_EpsInterworkingInd;
  bool m_EpsInterworkingIndIsSet;
  std::string m_VSmfServiceInstanceId;
  bool m_VSmfServiceInstanceIdIsSet;
  std::string m_ISmfServiceInstanceId;
  bool m_ISmfServiceInstanceIdIsSet;
  std::string m_RecoveryTime;
  bool m_RecoveryTimeIsSet;
  RoamingChargingProfile m_RoamingChargingProfile;
  bool m_RoamingChargingProfileIsSet;
  std::string m_ChargingId;
  bool m_ChargingIdIsSet;
  int32_t m_OldPduSessionId;
  bool m_OldPduSessionIdIsSet;
  std::string m_EpsBearerCtxStatus;
  bool m_EpsBearerCtxStatusIsSet;
  std::string m_AmfNfId;
  bool m_AmfNfIdIsSet;
  Guami m_Guami;
  bool m_GuamiIsSet;
  MaxIntegrityProtectedDataRate m_MaxIntegrityProtectedDataRateUl;
  bool m_MaxIntegrityProtectedDataRateUlIsSet;
  MaxIntegrityProtectedDataRate m_MaxIntegrityProtectedDataRateDl;
  bool m_MaxIntegrityProtectedDataRateDlIsSet;
  bool m_CpCiotEnabled;
  bool m_CpCiotEnabledIsSet;
  bool m_CpOnlyInd;
  bool m_CpOnlyIndIsSet;
  bool m_InvokeNef;
  bool m_InvokeNefIsSet;
  bool m_MaRequestInd;
  bool m_MaRequestIndIsSet;
  bool m_MaNwUpgradeInd;
  bool m_MaNwUpgradeIndIsSet;
  std::vector<std::string> m_DnaiList;
  bool m_DnaiListIsSet;
  PresenceState m_PresenceInLadn;
  bool m_PresenceInLadnIsSet;
  std::vector<SecondaryRatUsageInfo> m_SecondaryRatUsageInfo;
  bool m_SecondaryRatUsageInfoIsSet;
  SmallDataRateStatus m_SmallDataRateStatus;
  bool m_SmallDataRateStatusIsSet;
  ApnRateStatus m_ApnRateStatus;
  bool m_ApnRateStatusIsSet;
  int32_t m_DlServingPlmnRateCtl;
  bool m_DlServingPlmnRateCtlIsSet;
  UpSecurityInfo m_UpSecurityInfo;
  bool m_UpSecurityInfoIsSet;
  VplmnQos m_VplmnQos;
  bool m_VplmnQosIsSet;
  bool m_IvSmfRestoration;
  bool m_IvSmfRestorationIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PduSessionCreateData_H_ */
