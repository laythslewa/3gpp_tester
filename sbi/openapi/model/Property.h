/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.3.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Property.h
 *
 *
 */

#ifndef Property_H_
#define Property_H_

#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class Property {
public:
  Property();
  virtual ~Property();

  void validate();

  /////////////////////////////////////////////
  /// Property members

  /// <summary>
  /// The name of the property
  /// </summary>
  std::string getName() const;
  void setName(std::string const &value);
  /// <summary>
  /// Indicates whether the property is required – true&#x3D; required -
  /// false(default)&#x3D; not required
  /// </summary>
  bool isRequired() const;
  void setRequired(bool const value);
  bool requiredIsSet() const;
  void unsetRequired();
  /// <summary>
  /// A regular expression string to be applied to the value of the property.
  /// </summary>
  std::string getRegex() const;
  void setRegex(std::string const &value);
  bool regexIsSet() const;
  void unsetRegex();
  /// <summary>
  /// The property value. When present, it shall be a valid JSON string.
  /// </summary>
  std::string getValue() const;
  void setValue(std::string const &value);
  bool valueIsSet() const;
  void unsetValue();

  friend void to_json(nlohmann::json &j, const Property &o);
  friend void from_json(const nlohmann::json &j, Property &o);

protected:
  std::string m_Name;

  bool m_Required;
  bool m_RequiredIsSet;
  std::string m_Regex;
  bool m_RegexIsSet;
  std::string m_Value;
  bool m_ValueIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* Property_H_ */
