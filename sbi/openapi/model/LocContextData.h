/**
 * LMF Location
 * LMF Location Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * LocContextData.h
 *
 * Information within Transfer Location Context Request.
 */

#ifndef LocContextData_H_
#define LocContextData_H_

#include "AreaEventInfo.h"
#include "Ecgi.h"
#include "EventReportMessage.h"
#include "EventReportingStatus.h"
#include "Guami.h"
#include "LdrType.h"
#include "LocationQoS.h"
#include "MotionEventInfo.h"
#include "Ncgi.h"
#include "PeriodicEventInfo.h"
#include "SupportedGADShapes.h"
#include "UELocationInfo.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Information within Transfer Location Context Request.
/// </summary>
class LocContextData {
public:
  LocContextData();
  virtual ~LocContextData();

  void validate();

  /////////////////////////////////////////////
  /// LocContextData members

  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getAmfId() const;
  void setAmfId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  LocationQoS getLocationQoS() const;
  void setLocationQoS(LocationQoS const &value);
  bool locationQoSIsSet() const;
  void unsetLocationQoS();
  /// <summary>
  ///
  /// </summary>
  std::vector<SupportedGADShapes> &getSupportedGADShapes();
  void setSupportedGADShapes(std::vector<SupportedGADShapes> const &value);
  bool supportedGADShapesIsSet() const;
  void unsetSupportedGADShapes();
  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  ///
  /// </summary>
  LdrType getLdrType() const;
  void setLdrType(LdrType const &value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getHgmlcCallBackURI() const;
  void setHgmlcCallBackURI(std::string const &value);
  /// <summary>
  /// LDR Reference.
  /// </summary>
  std::string getLdrReference() const;
  void setLdrReference(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  PeriodicEventInfo getPeriodicEventInfo() const;
  void setPeriodicEventInfo(PeriodicEventInfo const &value);
  bool periodicEventInfoIsSet() const;
  void unsetPeriodicEventInfo();
  /// <summary>
  ///
  /// </summary>
  AreaEventInfo getAreaEventInfo() const;
  void setAreaEventInfo(AreaEventInfo const &value);
  bool areaEventInfoIsSet() const;
  void unsetAreaEventInfo();
  /// <summary>
  ///
  /// </summary>
  MotionEventInfo getMotionEventInfo() const;
  void setMotionEventInfo(MotionEventInfo const &value);
  bool motionEventInfoIsSet() const;
  void unsetMotionEventInfo();
  /// <summary>
  ///
  /// </summary>
  EventReportMessage getEventReportMessage() const;
  void setEventReportMessage(EventReportMessage const &value);
  /// <summary>
  ///
  /// </summary>
  EventReportingStatus getEventReportingStatus() const;
  void setEventReportingStatus(EventReportingStatus const &value);
  bool eventReportingStatusIsSet() const;
  void unsetEventReportingStatus();
  /// <summary>
  ///
  /// </summary>
  UELocationInfo getUeLocationInfo() const;
  void setUeLocationInfo(UELocationInfo const &value);
  bool ueLocationInfoIsSet() const;
  void unsetUeLocationInfo();
  /// <summary>
  ///
  /// </summary>
  bool isCIoT5GSOptimisation() const;
  void setCIoT5GSOptimisation(bool const value);
  bool cIoT5GSOptimisationIsSet() const;
  void unsetCIoT5GSOptimisation();
  /// <summary>
  ///
  /// </summary>
  Ecgi getEcgi() const;
  void setEcgi(Ecgi const &value);
  bool ecgiIsSet() const;
  void unsetEcgi();
  /// <summary>
  ///
  /// </summary>
  Ncgi getNcgi() const;
  void setNcgi(Ncgi const &value);
  bool ncgiIsSet() const;
  void unsetNcgi();
  /// <summary>
  ///
  /// </summary>
  Guami getGuami() const;
  void setGuami(Guami const &value);
  bool guamiIsSet() const;
  void unsetGuami();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  friend void to_json(nlohmann::json &j, const LocContextData &o);
  friend void from_json(const nlohmann::json &j, LocContextData &o);

protected:
  std::string m_AmfId;

  LocationQoS m_LocationQoS;
  bool m_LocationQoSIsSet;
  std::vector<SupportedGADShapes> m_SupportedGADShapes;
  bool m_SupportedGADShapesIsSet;
  std::string m_Supi;
  bool m_SupiIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  LdrType m_LdrType;

  std::string m_HgmlcCallBackURI;

  std::string m_LdrReference;

  PeriodicEventInfo m_PeriodicEventInfo;
  bool m_PeriodicEventInfoIsSet;
  AreaEventInfo m_AreaEventInfo;
  bool m_AreaEventInfoIsSet;
  MotionEventInfo m_MotionEventInfo;
  bool m_MotionEventInfoIsSet;
  EventReportMessage m_EventReportMessage;

  EventReportingStatus m_EventReportingStatus;
  bool m_EventReportingStatusIsSet;
  UELocationInfo m_UeLocationInfo;
  bool m_UeLocationInfoIsSet;
  bool m_CIoT5GSOptimisation;
  bool m_CIoT5GSOptimisationIsSet;
  Ecgi m_Ecgi;
  bool m_EcgiIsSet;
  Ncgi m_Ncgi;
  bool m_NcgiIsSet;
  Guami m_Guami;
  bool m_GuamiIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* LocContextData_H_ */
