/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * VsmfUpdateData.h
 *
 * Data within Update Request towards V-SMF, or from SMF to I-SMF
 */

#ifndef VsmfUpdateData_H_
#define VsmfUpdateData_H_

#include "Ambr.h"
#include "Arp.h"
#include "Cause.h"
#include "EbiArpMapping.h"
#include "EpsBearerInfo.h"
#include "EpsPdnCnxInfo.h"
#include "MaReleaseIndication.h"
#include "N4Information.h"
#include "QosFlowAddModifyRequestItem.h"
#include "QosFlowReleaseRequestItem.h"
#include "QosMonitoringInfo.h"
#include "RefToBinaryData.h"
#include "RequestIndication.h"
#include "TunnelInfo.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within Update Request towards V-SMF, or from SMF to I-SMF
/// </summary>
class VsmfUpdateData {
public:
  VsmfUpdateData();
  virtual ~VsmfUpdateData();

  void validate();

  /////////////////////////////////////////////
  /// VsmfUpdateData members

  /// <summary>
  ///
  /// </summary>
  RequestIndication getRequestIndication() const;
  void setRequestIndication(RequestIndication const &value);
  /// <summary>
  ///
  /// </summary>
  Ambr getSessionAmbr() const;
  void setSessionAmbr(Ambr const &value);
  bool sessionAmbrIsSet() const;
  void unsetSessionAmbr();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosFlowAddModifyRequestItem> &getQosFlowsAddModRequestList();
  void setQosFlowsAddModRequestList(
      std::vector<QosFlowAddModifyRequestItem> const &value);
  bool qosFlowsAddModRequestListIsSet() const;
  void unsetQosFlowsAddModRequestList();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosFlowReleaseRequestItem> &getQosFlowsRelRequestList();
  void setQosFlowsRelRequestList(
      std::vector<QosFlowReleaseRequestItem> const &value);
  bool qosFlowsRelRequestListIsSet() const;
  void unsetQosFlowsRelRequestList();
  /// <summary>
  ///
  /// </summary>
  std::vector<EpsBearerInfo> &getEpsBearerInfo();
  void setEpsBearerInfo(std::vector<EpsBearerInfo> const &value);
  bool epsBearerInfoIsSet() const;
  void unsetEpsBearerInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<Arp> &getAssignEbiList();
  void setAssignEbiList(std::vector<Arp> const &value);
  bool assignEbiListIsSet() const;
  void unsetAssignEbiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t> &getRevokeEbiList();
  void setRevokeEbiList(std::vector<int32_t> const value);
  bool revokeEbiListIsSet() const;
  void unsetRevokeEbiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<EbiArpMapping> &getModifiedEbiList();
  void setModifiedEbiList(std::vector<EbiArpMapping> const &value);
  bool modifiedEbiListIsSet() const;
  void unsetModifiedEbiList();
  /// <summary>
  /// Procedure Transaction Identifier
  /// </summary>
  int32_t getPti() const;
  void setPti(int32_t const value);
  bool ptiIsSet() const;
  void unsetPti();
  /// <summary>
  ///
  /// </summary>
  RefToBinaryData getN1SmInfoToUe() const;
  void setN1SmInfoToUe(RefToBinaryData const &value);
  bool n1SmInfoToUeIsSet() const;
  void unsetN1SmInfoToUe();
  /// <summary>
  ///
  /// </summary>
  bool isAlwaysOnGranted() const;
  void setAlwaysOnGranted(bool const value);
  bool alwaysOnGrantedIsSet() const;
  void unsetAlwaysOnGranted();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getHsmfPduSessionUri() const;
  void setHsmfPduSessionUri(std::string const &value);
  bool hsmfPduSessionUriIsSet() const;
  void unsetHsmfPduSessionUri();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  Cause getCause() const;
  void setCause(Cause const &value);
  bool causeIsSet() const;
  void unsetCause();
  /// <summary>
  ///
  /// </summary>
  std::string getN1smCause() const;
  void setN1smCause(std::string const &value);
  bool n1smCauseIsSet() const;
  void unsetN1smCause();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getBackOffTimer() const;
  void setBackOffTimer(int32_t const value);
  bool backOffTimerIsSet() const;
  void unsetBackOffTimer();
  /// <summary>
  ///
  /// </summary>
  MaReleaseIndication getMaReleaseInd() const;
  void setMaReleaseInd(MaReleaseIndication const &value);
  bool maReleaseIndIsSet() const;
  void unsetMaReleaseInd();
  /// <summary>
  ///
  /// </summary>
  bool isMaAcceptedInd() const;
  void setMaAcceptedInd(bool const value);
  bool maAcceptedIndIsSet() const;
  void unsetMaAcceptedInd();
  /// <summary>
  ///
  /// </summary>
  TunnelInfo getAdditionalCnTunnelInfo() const;
  void setAdditionalCnTunnelInfo(TunnelInfo const &value);
  bool additionalCnTunnelInfoIsSet() const;
  void unsetAdditionalCnTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getDnaiList();
  void setDnaiList(std::vector<std::string> const &value);
  bool dnaiListIsSet() const;
  void unsetDnaiList();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4Info() const;
  void setN4Info(N4Information const &value);
  bool n4InfoIsSet() const;
  void unsetN4Info();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4InfoExt1() const;
  void setN4InfoExt1(N4Information const &value);
  bool n4InfoExt1IsSet() const;
  void unsetN4InfoExt1();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4InfoExt2() const;
  void setN4InfoExt2(N4Information const &value);
  bool n4InfoExt2IsSet() const;
  void unsetN4InfoExt2();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4InfoExt3() const;
  void setN4InfoExt3(N4Information const &value);
  bool n4InfoExt3IsSet() const;
  void unsetN4InfoExt3();
  /// <summary>
  ///
  /// </summary>
  bool isSmallDataRateControlEnabled() const;
  void setSmallDataRateControlEnabled(bool const value);
  bool smallDataRateControlEnabledIsSet() const;
  void unsetSmallDataRateControlEnabled();
  /// <summary>
  ///
  /// </summary>
  QosMonitoringInfo getQosMonitoringInfo() const;
  void setQosMonitoringInfo(QosMonitoringInfo const &value);
  bool qosMonitoringInfoIsSet() const;
  void unsetQosMonitoringInfo();
  /// <summary>
  ///
  /// </summary>
  EpsPdnCnxInfo getEpsPdnCnxInfo() const;
  void setEpsPdnCnxInfo(EpsPdnCnxInfo const &value);
  bool epsPdnCnxInfoIsSet() const;
  void unsetEpsPdnCnxInfo();

  friend void to_json(nlohmann::json &j, const VsmfUpdateData &o);
  friend void from_json(const nlohmann::json &j, VsmfUpdateData &o);

protected:
  RequestIndication m_RequestIndication;

  Ambr m_SessionAmbr;
  bool m_SessionAmbrIsSet;
  std::vector<QosFlowAddModifyRequestItem> m_QosFlowsAddModRequestList;
  bool m_QosFlowsAddModRequestListIsSet;
  std::vector<QosFlowReleaseRequestItem> m_QosFlowsRelRequestList;
  bool m_QosFlowsRelRequestListIsSet;
  std::vector<EpsBearerInfo> m_EpsBearerInfo;
  bool m_EpsBearerInfoIsSet;
  std::vector<Arp> m_AssignEbiList;
  bool m_AssignEbiListIsSet;
  std::vector<int32_t> m_RevokeEbiList;
  bool m_RevokeEbiListIsSet;
  std::vector<EbiArpMapping> m_ModifiedEbiList;
  bool m_ModifiedEbiListIsSet;
  int32_t m_Pti;
  bool m_PtiIsSet;
  RefToBinaryData m_N1SmInfoToUe;
  bool m_N1SmInfoToUeIsSet;
  bool m_AlwaysOnGranted;
  bool m_AlwaysOnGrantedIsSet;
  std::string m_HsmfPduSessionUri;
  bool m_HsmfPduSessionUriIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  Cause m_Cause;
  bool m_CauseIsSet;
  std::string m_N1smCause;
  bool m_N1smCauseIsSet;
  int32_t m_BackOffTimer;
  bool m_BackOffTimerIsSet;
  MaReleaseIndication m_MaReleaseInd;
  bool m_MaReleaseIndIsSet;
  bool m_MaAcceptedInd;
  bool m_MaAcceptedIndIsSet;
  TunnelInfo m_AdditionalCnTunnelInfo;
  bool m_AdditionalCnTunnelInfoIsSet;
  std::vector<std::string> m_DnaiList;
  bool m_DnaiListIsSet;
  N4Information m_N4Info;
  bool m_N4InfoIsSet;
  N4Information m_N4InfoExt1;
  bool m_N4InfoExt1IsSet;
  N4Information m_N4InfoExt2;
  bool m_N4InfoExt2IsSet;
  N4Information m_N4InfoExt3;
  bool m_N4InfoExt3IsSet;
  bool m_SmallDataRateControlEnabled;
  bool m_SmallDataRateControlEnabledIsSet;
  QosMonitoringInfo m_QosMonitoringInfo;
  bool m_QosMonitoringInfoIsSet;
  EpsPdnCnxInfo m_EpsPdnCnxInfo;
  bool m_EpsPdnCnxInfoIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* VsmfUpdateData_H_ */
