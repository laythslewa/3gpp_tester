/**
 * Namf_Communication
 * AMF Communication Service © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UeContextCreateData.h
 *
 * Data within a request to create an individual ueContext resource
 */

#ifndef UeContextCreateData_H_
#define UeContextCreateData_H_

#include "N2InfoContent.h"
#include "N2SmInformation.h"
#include "NgApCause.h"
#include "NgRanTargetId.h"
#include "PlmnIdNid.h"
#include "UeContext.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within a request to create an individual ueContext resource
/// </summary>
class UeContextCreateData {
public:
  UeContextCreateData();
  virtual ~UeContextCreateData();

  void validate();

  /////////////////////////////////////////////
  /// UeContextCreateData members

  /// <summary>
  ///
  /// </summary>
  UeContext getUeContext() const;
  void setUeContext(UeContext const &value);
  /// <summary>
  ///
  /// </summary>
  NgRanTargetId getTargetId() const;
  void setTargetId(NgRanTargetId const &value);
  /// <summary>
  ///
  /// </summary>
  N2InfoContent getSourceToTargetData() const;
  void setSourceToTargetData(N2InfoContent const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<N2SmInformation> &getPduSessionList();
  void setPduSessionList(std::vector<N2SmInformation> const &value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getN2NotifyUri() const;
  void setN2NotifyUri(std::string const &value);
  bool n2NotifyUriIsSet() const;
  void unsetN2NotifyUri();
  /// <summary>
  ///
  /// </summary>
  N2InfoContent getUeRadioCapability() const;
  void setUeRadioCapability(N2InfoContent const &value);
  bool ueRadioCapabilityIsSet() const;
  void unsetUeRadioCapability();
  /// <summary>
  ///
  /// </summary>
  NgApCause getNgapCause() const;
  void setNgapCause(NgApCause const &value);
  bool ngapCauseIsSet() const;
  void unsetNgapCause();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  PlmnIdNid getServingNetwork() const;
  void setServingNetwork(PlmnIdNid const &value);
  bool servingNetworkIsSet() const;
  void unsetServingNetwork();

  friend void to_json(nlohmann::json &j, const UeContextCreateData &o);
  friend void from_json(const nlohmann::json &j, UeContextCreateData &o);

protected:
  UeContext m_UeContext;

  NgRanTargetId m_TargetId;

  N2InfoContent m_SourceToTargetData;

  std::vector<N2SmInformation> m_PduSessionList;

  std::string m_N2NotifyUri;
  bool m_N2NotifyUriIsSet;
  N2InfoContent m_UeRadioCapability;
  bool m_UeRadioCapabilityIsSet;
  NgApCause m_NgapCause;
  bool m_NgapCauseIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  PlmnIdNid m_ServingNetwork;
  bool m_ServingNetworkIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UeContextCreateData_H_ */
