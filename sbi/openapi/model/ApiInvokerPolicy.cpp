/**
 * CAPIF_Events_API
 * API for event subscription management. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ApiInvokerPolicy.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ApiInvokerPolicy::ApiInvokerPolicy() {
  m_ApiInvokerId = "";
  m_AllowedTotalInvocations = 0;
  m_AllowedTotalInvocationsIsSet = false;
  m_AllowedInvocationsPerSecond = 0;
  m_AllowedInvocationsPerSecondIsSet = false;
  m_AllowedInvocationTimeRangeListIsSet = false;
}

ApiInvokerPolicy::~ApiInvokerPolicy() {}

void ApiInvokerPolicy::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ApiInvokerPolicy &o) {
  j = nlohmann::json();
  j["apiInvokerId"] = o.m_ApiInvokerId;
  if (o.allowedTotalInvocationsIsSet())
    j["allowedTotalInvocations"] = o.m_AllowedTotalInvocations;
  if (o.allowedInvocationsPerSecondIsSet())
    j["allowedInvocationsPerSecond"] = o.m_AllowedInvocationsPerSecond;
  if (o.allowedInvocationTimeRangeListIsSet() ||
      !o.m_AllowedInvocationTimeRangeList.empty())
    j["allowedInvocationTimeRangeList"] = o.m_AllowedInvocationTimeRangeList;
}

void from_json(const nlohmann::json &j, ApiInvokerPolicy &o) {
  j.at("apiInvokerId").get_to(o.m_ApiInvokerId);
  if (j.find("allowedTotalInvocations") != j.end()) {
    j.at("allowedTotalInvocations").get_to(o.m_AllowedTotalInvocations);
    o.m_AllowedTotalInvocationsIsSet = true;
  }
  if (j.find("allowedInvocationsPerSecond") != j.end()) {
    j.at("allowedInvocationsPerSecond").get_to(o.m_AllowedInvocationsPerSecond);
    o.m_AllowedInvocationsPerSecondIsSet = true;
  }
  if (j.find("allowedInvocationTimeRangeList") != j.end()) {
    j.at("allowedInvocationTimeRangeList")
        .get_to(o.m_AllowedInvocationTimeRangeList);
    o.m_AllowedInvocationTimeRangeListIsSet = true;
  }
}

std::string ApiInvokerPolicy::getApiInvokerId() const { return m_ApiInvokerId; }
void ApiInvokerPolicy::setApiInvokerId(std::string const &value) {
  m_ApiInvokerId = value;
}
int32_t ApiInvokerPolicy::getAllowedTotalInvocations() const {
  return m_AllowedTotalInvocations;
}
void ApiInvokerPolicy::setAllowedTotalInvocations(int32_t const value) {
  m_AllowedTotalInvocations = value;
  m_AllowedTotalInvocationsIsSet = true;
}
bool ApiInvokerPolicy::allowedTotalInvocationsIsSet() const {
  return m_AllowedTotalInvocationsIsSet;
}
void ApiInvokerPolicy::unsetAllowedTotalInvocations() {
  m_AllowedTotalInvocationsIsSet = false;
}
int32_t ApiInvokerPolicy::getAllowedInvocationsPerSecond() const {
  return m_AllowedInvocationsPerSecond;
}
void ApiInvokerPolicy::setAllowedInvocationsPerSecond(int32_t const value) {
  m_AllowedInvocationsPerSecond = value;
  m_AllowedInvocationsPerSecondIsSet = true;
}
bool ApiInvokerPolicy::allowedInvocationsPerSecondIsSet() const {
  return m_AllowedInvocationsPerSecondIsSet;
}
void ApiInvokerPolicy::unsetAllowedInvocationsPerSecond() {
  m_AllowedInvocationsPerSecondIsSet = false;
}
std::vector<TimeRangeList> &
ApiInvokerPolicy::getAllowedInvocationTimeRangeList() {
  return m_AllowedInvocationTimeRangeList;
}
void ApiInvokerPolicy::setAllowedInvocationTimeRangeList(
    std::vector<TimeRangeList> const &value) {
  m_AllowedInvocationTimeRangeList = value;
  m_AllowedInvocationTimeRangeListIsSet = true;
}
bool ApiInvokerPolicy::allowedInvocationTimeRangeListIsSet() const {
  return m_AllowedInvocationTimeRangeListIsSet;
}
void ApiInvokerPolicy::unsetAllowedInvocationTimeRangeList() {
  m_AllowedInvocationTimeRangeListIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
