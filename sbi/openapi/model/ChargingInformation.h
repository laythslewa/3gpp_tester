/**
 * Unified Data Repository Service API file for policy data
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ChargingInformation.h
 *
 * Contains the addresses of the charging functions.
 */

#ifndef ChargingInformation_H_
#define ChargingInformation_H_

#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the addresses of the charging functions.
/// </summary>
class ChargingInformation {
public:
  ChargingInformation();
  virtual ~ChargingInformation();

  void validate();

  /////////////////////////////////////////////
  /// ChargingInformation members

  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getPrimaryChfAddress() const;
  void setPrimaryChfAddress(std::string const &value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getSecondaryChfAddress() const;
  void setSecondaryChfAddress(std::string const &value);
  bool secondaryChfAddressIsSet() const;
  void unsetSecondaryChfAddress();
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getPrimaryChfSetId() const;
  void setPrimaryChfSetId(std::string const &value);
  bool primaryChfSetIdIsSet() const;
  void unsetPrimaryChfSetId();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getPrimaryChfInstanceId() const;
  void setPrimaryChfInstanceId(std::string const &value);
  bool primaryChfInstanceIdIsSet() const;
  void unsetPrimaryChfInstanceId();
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getSecondaryChfSetId() const;
  void setSecondaryChfSetId(std::string const &value);
  bool secondaryChfSetIdIsSet() const;
  void unsetSecondaryChfSetId();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getSecondaryChfInstanceId() const;
  void setSecondaryChfInstanceId(std::string const &value);
  bool secondaryChfInstanceIdIsSet() const;
  void unsetSecondaryChfInstanceId();

  friend void to_json(nlohmann::json &j, const ChargingInformation &o);
  friend void from_json(const nlohmann::json &j, ChargingInformation &o);

protected:
  std::string m_PrimaryChfAddress;

  std::string m_SecondaryChfAddress;
  bool m_SecondaryChfAddressIsSet;
  std::string m_PrimaryChfSetId;
  bool m_PrimaryChfSetIdIsSet;
  std::string m_PrimaryChfInstanceId;
  bool m_PrimaryChfInstanceIdIsSet;
  std::string m_SecondaryChfSetId;
  bool m_SecondaryChfSetIdIsSet;
  std::string m_SecondaryChfInstanceId;
  bool m_SecondaryChfInstanceIdIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ChargingInformation_H_ */
