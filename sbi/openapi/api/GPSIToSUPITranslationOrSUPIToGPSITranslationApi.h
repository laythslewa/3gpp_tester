/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * GPSIToSUPITranslationOrSUPIToGPSITranslationApi.h
 *
 *
 */

#ifndef GPSIToSUPITranslationOrSUPIToGPSITranslationApi_H_
#define GPSIToSUPITranslationOrSUPIToGPSITranslationApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "AppPortId.h"
#include "GpsiType.h"
#include "IdTranslationResult.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class GPSIToSUPITranslationOrSUPIToGPSITranslationApi {
public:
  GPSIToSUPITranslationOrSUPIToGPSITranslationApi(
      std::shared_ptr<Pistache::Rest::Router>);
  virtual ~GPSIToSUPITranslationOrSUPIToGPSITranslationApi() {}
  void init();

  const std::string base = "/nudm-sdm/v2";

private:
  void setupRoutes();

  void get_supi_or_gpsi_handler(const Pistache::Rest::Request &request,
                                Pistache::Http::ResponseWriter response);
  void gpsi_to_supi_translation_or_supi_to_gpsi_translation_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// retrieve a UE&#39;s SUPI or GPSI
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId">Identifier of the UE</param>
  /// <param name="supportedFeatures">Supported Features (optional, default to
  /// &quot;&quot;)</param> <param name="afId">AF identifier (optional, default
  /// to &quot;&quot;)</param> <param name="appPortId">Application port
  /// identifier (optional, default to AppPortId())</param> <param
  /// name="requestedGpsiType">Requested GPSI Type (optional, default to
  /// GpsiType())</param> <param name="ifNoneMatch">Validator for conditional
  /// requests, as described in RFC 7232, 3.2 (optional, default to
  /// &quot;&quot;)</param> <param name="ifModifiedSince">Validator for
  /// conditional requests, as described in RFC 7232, 3.3 (optional, default to
  /// &quot;&quot;)</param>
  virtual void get_supi_or_gpsi(
      const std::string &ueId,
      const Pistache::Optional<std::string> &supportedFeatures,
      const Pistache::Optional<std::string> &afId,
      const Pistache::Optional<AppPortId> &appPortId,
      const Pistache::Optional<GpsiType> &requestedGpsiType,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifNoneMatch,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifModifiedSince,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* GPSIToSUPITranslationOrSUPIToGPSITranslationApi_H_ */
