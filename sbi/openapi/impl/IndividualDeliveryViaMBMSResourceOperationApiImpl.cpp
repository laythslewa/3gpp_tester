/**
 * GMDviaMBMSbyxMB
 * API for Group Message Delivery via MBMS by xMB Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualDeliveryViaMBMSResourceOperationApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

IndividualDeliveryViaMBMSResourceOperationApiImpl::
    IndividualDeliveryViaMBMSResourceOperationApiImpl(
        std::shared_ptr<Pistache::Rest::Router> rtr)
    : IndividualDeliveryViaMBMSResourceOperationApi(rtr) {}

void IndividualDeliveryViaMBMSResourceOperationApiImpl::
    scs_as_id_services_service_id_delivery_via_mbms_transaction_id_delete(
        const std::string &scsAsId, const std::string &serviceId,
        const std::string &transactionId,
        Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualDeliveryViaMBMSResourceOperationApiImpl::
    scs_as_id_services_service_id_delivery_via_mbms_transaction_id_get(
        const std::string &scsAsId, const std::string &serviceId,
        const std::string &transactionId,
        Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualDeliveryViaMBMSResourceOperationApiImpl::
    scs_as_id_services_service_id_delivery_via_mbms_transaction_id_patch(
        const std::string &scsAsId, const std::string &serviceId,
        const std::string &transactionId,
        const GMDViaMBMSByxMBPatch &gMDViaMBMSByxMBPatch,
        Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void IndividualDeliveryViaMBMSResourceOperationApiImpl::
    scs_as_id_services_service_id_delivery_via_mbms_transaction_id_put(
        const std::string &scsAsId, const std::string &serviceId,
        const std::string &transactionId,
        const GMDViaMBMSByxMB &gMDViaMBMSByxMB,
        Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
