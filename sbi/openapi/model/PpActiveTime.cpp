/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PpActiveTime.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PpActiveTime::PpActiveTime() {
  m_ActiveTime = 0;
  m_AfInstanceId = "";
  m_ReferenceId = 0;
  m_ValidityTime = "";
  m_ValidityTimeIsSet = false;
  m_MtcProviderInformation = "";
  m_MtcProviderInformationIsSet = false;
}

PpActiveTime::~PpActiveTime() {}

void PpActiveTime::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PpActiveTime &o) {
  j = nlohmann::json();
  j["activeTime"] = o.m_ActiveTime;
  j["afInstanceId"] = o.m_AfInstanceId;
  j["referenceId"] = o.m_ReferenceId;
  if (o.validityTimeIsSet())
    j["validityTime"] = o.m_ValidityTime;
  if (o.mtcProviderInformationIsSet())
    j["mtcProviderInformation"] = o.m_MtcProviderInformation;
}

void from_json(const nlohmann::json &j, PpActiveTime &o) {
  j.at("activeTime").get_to(o.m_ActiveTime);
  j.at("afInstanceId").get_to(o.m_AfInstanceId);
  j.at("referenceId").get_to(o.m_ReferenceId);
  if (j.find("validityTime") != j.end()) {
    j.at("validityTime").get_to(o.m_ValidityTime);
    o.m_ValidityTimeIsSet = true;
  }
  if (j.find("mtcProviderInformation") != j.end()) {
    j.at("mtcProviderInformation").get_to(o.m_MtcProviderInformation);
    o.m_MtcProviderInformationIsSet = true;
  }
}

int32_t PpActiveTime::getActiveTime() const { return m_ActiveTime; }
void PpActiveTime::setActiveTime(int32_t const value) { m_ActiveTime = value; }
std::string PpActiveTime::getAfInstanceId() const { return m_AfInstanceId; }
void PpActiveTime::setAfInstanceId(std::string const &value) {
  m_AfInstanceId = value;
}
int32_t PpActiveTime::getReferenceId() const { return m_ReferenceId; }
void PpActiveTime::setReferenceId(int32_t const value) {
  m_ReferenceId = value;
}
std::string PpActiveTime::getValidityTime() const { return m_ValidityTime; }
void PpActiveTime::setValidityTime(std::string const &value) {
  m_ValidityTime = value;
  m_ValidityTimeIsSet = true;
}
bool PpActiveTime::validityTimeIsSet() const { return m_ValidityTimeIsSet; }
void PpActiveTime::unsetValidityTime() { m_ValidityTimeIsSet = false; }
std::string PpActiveTime::getMtcProviderInformation() const {
  return m_MtcProviderInformation;
}
void PpActiveTime::setMtcProviderInformation(std::string const &value) {
  m_MtcProviderInformation = value;
  m_MtcProviderInformationIsSet = true;
}
bool PpActiveTime::mtcProviderInformationIsSet() const {
  return m_MtcProviderInformationIsSet;
}
void PpActiveTime::unsetMtcProviderInformation() {
  m_MtcProviderInformationIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
