/**
 * SS_NetworkResourceAdaptation
 * SS Network Resource Adaptation Service. © 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MulticastSubscription.h
 *
 * Represents a multicast subscription.
 */

#ifndef MulticastSubscription_H_
#define MulticastSubscription_H_

#include "Ipv6Addr.h"
#include "MbmsLocArea.h"
#include "ServiceAnnoucementMode.h"
#include "WebsockNotifConfig.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a multicast subscription.
/// </summary>
class MulticastSubscription {
public:
  MulticastSubscription();
  virtual ~MulticastSubscription();

  void validate();

  /////////////////////////////////////////////
  /// MulticastSubscription members

  /// <summary>
  ///
  /// </summary>
  std::string getValGroupId() const;
  void setValGroupId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  ServiceAnnoucementMode getAnncMode() const;
  void setAnncMode(ServiceAnnoucementMode const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getMultiQosReq() const;
  void setMultiQosReq(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  MbmsLocArea getLocArea() const;
  void setLocArea(MbmsLocArea const &value);
  bool locAreaIsSet() const;
  void unsetLocArea();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getDuration() const;
  void setDuration(std::string const &value);
  bool durationIsSet() const;
  void unsetDuration();
  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 32-bit integer.
  /// </summary>
  int32_t getTmgi() const;
  void setTmgi(int32_t const value);
  bool tmgiIsSet() const;
  void unsetTmgi();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNotifUri() const;
  void setNotifUri(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  bool isReqTestNotif() const;
  void setReqTestNotif(bool const value);
  bool reqTestNotifIsSet() const;
  void unsetReqTestNotif();
  /// <summary>
  ///
  /// </summary>
  WebsockNotifConfig getWsNotifCfg() const;
  void setWsNotifCfg(WebsockNotifConfig const &value);
  bool wsNotifCfgIsSet() const;
  void unsetWsNotifCfg();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getUpIpv4Addr() const;
  void setUpIpv4Addr(std::string const &value);
  bool upIpv4AddrIsSet() const;
  void unsetUpIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getUpIpv6Addr() const;
  void setUpIpv6Addr(Ipv6Addr const &value);
  bool upIpv6AddrIsSet() const;
  void unsetUpIpv6Addr();
  /// <summary>
  /// Unsigned integer with valid values between 0 and 65535.
  /// </summary>
  int32_t getUpPortNum() const;
  void setUpPortNum(int32_t const value);
  bool upPortNumIsSet() const;
  void unsetUpPortNum();
  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t> &getRadioFreqs();
  void setRadioFreqs(std::vector<int32_t> const value);
  bool radioFreqsIsSet() const;
  void unsetRadioFreqs();

  friend void to_json(nlohmann::json &j, const MulticastSubscription &o);
  friend void from_json(const nlohmann::json &j, MulticastSubscription &o);

protected:
  std::string m_ValGroupId;

  ServiceAnnoucementMode m_AnncMode;

  std::string m_MultiQosReq;

  MbmsLocArea m_LocArea;
  bool m_LocAreaIsSet;
  std::string m_Duration;
  bool m_DurationIsSet;
  int32_t m_Tmgi;
  bool m_TmgiIsSet;
  std::string m_NotifUri;

  bool m_ReqTestNotif;
  bool m_ReqTestNotifIsSet;
  WebsockNotifConfig m_WsNotifCfg;
  bool m_WsNotifCfgIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
  std::string m_UpIpv4Addr;
  bool m_UpIpv4AddrIsSet;
  Ipv6Addr m_UpIpv6Addr;
  bool m_UpIpv6AddrIsSet;
  int32_t m_UpPortNum;
  bool m_UpPortNumIsSet;
  std::vector<int32_t> m_RadioFreqs;
  bool m_RadioFreqsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* MulticastSubscription_H_ */
