/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmPolicyContextData.h
 *
 * Contains the parameters used to create an Individual SM policy resource.
 */

#ifndef SmPolicyContextData_H_
#define SmPolicyContextData_H_

#include "AccNetChId.h"
#include "AccNetChargingAddress.h"
#include "AccessType.h"
#include "AdditionalAccessInfo.h"
#include "Ambr.h"
#include "AtsssCapability.h"
#include "DnnSelectionMode.h"
#include "Ipv6Prefix.h"
#include "MaPduIndication.h"
#include "PduSessionType.h"
#include "PlmnIdNid.h"
#include "QosFlowUsage.h"
#include "RatType.h"
#include "SatelliteBackhaulCategory.h"
#include "ServingNfIdentity.h"
#include "Snssai.h"
#include "SubscribedDefaultQos.h"
#include "TraceData.h"
#include "UserLocation.h"
#include "VplmnQos.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the parameters used to create an Individual SM policy resource.
/// </summary>
class SmPolicyContextData {
public:
  SmPolicyContextData();
  virtual ~SmPolicyContextData();

  void validate();

  /////////////////////////////////////////////
  /// SmPolicyContextData members

  /// <summary>
  ///
  /// </summary>
  AccNetChId getAccNetChId() const;
  void setAccNetChId(AccNetChId const &value);
  bool accNetChIdIsSet() const;
  void unsetAccNetChId();
  /// <summary>
  ///
  /// </summary>
  AccNetChargingAddress getChargEntityAddr() const;
  void setChargEntityAddr(AccNetChargingAddress const &value);
  bool chargEntityAddrIsSet() const;
  void unsetChargEntityAddr();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  /// <summary>
  /// When this attribute is included and set to true, it indicates that the
  /// supi attribute contains an invalid value.This attribute shall be present
  /// if the SUPI is not available in the SMF or the SUPI is unauthenticated.
  /// When present it shall be set to true for an invalid SUPI and false
  /// (default) for a valid SUPI.
  /// </summary>
  bool isInvalidSupi() const;
  void setInvalidSupi(bool const value);
  bool invalidSupiIsSet() const;
  void unsetInvalidSupi();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getInterGrpIds();
  void setInterGrpIds(std::vector<std::string> const &value);
  bool interGrpIdsIsSet() const;
  void unsetInterGrpIds();
  /// <summary>
  /// Unsigned integer identifying a PDU session, within the range 0 to 255, as
  /// specified in clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU
  /// Session ID is allocated by the Core Network for UEs not supporting N1
  /// mode, reserved range 64 to 95 is used. PDU Session ID within the reserved
  /// range is only visible in the Core Network.
  /// </summary>
  int32_t getPduSessionId() const;
  void setPduSessionId(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  PduSessionType getPduSessionType() const;
  void setPduSessionType(PduSessionType const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getChargingcharacteristics() const;
  void setChargingcharacteristics(std::string const &value);
  bool chargingcharacteristicsIsSet() const;
  void unsetChargingcharacteristics();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  DnnSelectionMode getDnnSelMode() const;
  void setDnnSelMode(DnnSelectionMode const &value);
  bool dnnSelModeIsSet() const;
  void unsetDnnSelMode();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNotificationUri() const;
  void setNotificationUri(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  AccessType getAccessType() const;
  void setAccessType(AccessType const &value);
  bool accessTypeIsSet() const;
  void unsetAccessType();
  /// <summary>
  ///
  /// </summary>
  RatType getRatType() const;
  void setRatType(RatType const &value);
  bool ratTypeIsSet() const;
  void unsetRatType();
  /// <summary>
  ///
  /// </summary>
  AdditionalAccessInfo getAddAccessInfo() const;
  void setAddAccessInfo(AdditionalAccessInfo const &value);
  bool addAccessInfoIsSet() const;
  void unsetAddAccessInfo();
  /// <summary>
  ///
  /// </summary>
  PlmnIdNid getServingNetwork() const;
  void setServingNetwork(PlmnIdNid const &value);
  bool servingNetworkIsSet() const;
  void unsetServingNetwork();
  /// <summary>
  ///
  /// </summary>
  UserLocation getUserLocationInfo() const;
  void setUserLocationInfo(UserLocation const &value);
  bool userLocationInfoIsSet() const;
  void unsetUserLocationInfo();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getUeTimeZone() const;
  void setUeTimeZone(std::string const &value);
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getIpv4Address() const;
  void setIpv4Address(std::string const &value);
  bool ipv4AddressIsSet() const;
  void unsetIpv4Address();
  /// <summary>
  ///
  /// </summary>
  Ipv6Prefix getIpv6AddressPrefix() const;
  void setIpv6AddressPrefix(Ipv6Prefix const &value);
  bool ipv6AddressPrefixIsSet() const;
  void unsetIpv6AddressPrefix();
  /// <summary>
  /// Indicates the IPv4 address domain
  /// </summary>
  std::string getIpDomain() const;
  void setIpDomain(std::string const &value);
  bool ipDomainIsSet() const;
  void unsetIpDomain();
  /// <summary>
  ///
  /// </summary>
  Ambr getSubsSessAmbr() const;
  void setSubsSessAmbr(Ambr const &value);
  bool subsSessAmbrIsSet() const;
  void unsetSubsSessAmbr();
  /// <summary>
  /// Indicates the DN-AAA authorization profile index
  /// </summary>
  std::string getAuthProfIndex() const;
  void setAuthProfIndex(std::string const &value);
  bool authProfIndexIsSet() const;
  void unsetAuthProfIndex();
  /// <summary>
  ///
  /// </summary>
  SubscribedDefaultQos getSubsDefQos() const;
  void setSubsDefQos(SubscribedDefaultQos const &value);
  bool subsDefQosIsSet() const;
  void unsetSubsDefQos();
  /// <summary>
  ///
  /// </summary>
  VplmnQos getVplmnQos() const;
  void setVplmnQos(VplmnQos const &value);
  bool vplmnQosIsSet() const;
  void unsetVplmnQos();
  /// <summary>
  /// Contains the number of supported packet filter for signalled QoS rules.
  /// </summary>
  int32_t getNumOfPackFilter() const;
  void setNumOfPackFilter(int32_t const value);
  bool numOfPackFilterIsSet() const;
  void unsetNumOfPackFilter();
  /// <summary>
  /// If it is included and set to true, the online charging is applied to the
  /// PDU session.
  /// </summary>
  bool isOnline() const;
  void setOnline(bool const value);
  bool onlineIsSet() const;
  void unsetOnline();
  /// <summary>
  /// If it is included and set to true, the offline charging is applied to the
  /// PDU session.
  /// </summary>
  bool isOffline() const;
  void setOffline(bool const value);
  bool offlineIsSet() const;
  void unsetOffline();
  /// <summary>
  /// If it is included and set to true, the 3GPP PS Data Off is activated by
  /// the UE.
  /// </summary>
  bool isR3gppPsDataOffStatus() const;
  void setR3gppPsDataOffStatus(bool const value);
  bool r3gppPsDataOffStatusIsSet() const;
  void unsetr_3gppPsDataOffStatus();
  /// <summary>
  /// If it is included and set to true, the reflective QoS is supported by the
  /// UE.
  /// </summary>
  bool isRefQosIndication() const;
  void setRefQosIndication(bool const value);
  bool refQosIndicationIsSet() const;
  void unsetRefQosIndication();
  /// <summary>
  ///
  /// </summary>
  TraceData getTraceReq() const;
  void setTraceReq(TraceData const &value);
  bool traceReqIsSet() const;
  void unsetTraceReq();
  /// <summary>
  ///
  /// </summary>
  Snssai getSliceInfo() const;
  void setSliceInfo(Snssai const &value);
  /// <summary>
  ///
  /// </summary>
  QosFlowUsage getQosFlowUsage() const;
  void setQosFlowUsage(QosFlowUsage const &value);
  bool qosFlowUsageIsSet() const;
  void unsetQosFlowUsage();
  /// <summary>
  ///
  /// </summary>
  ServingNfIdentity getServNfId() const;
  void setServNfId(ServingNfIdentity const &value);
  bool servNfIdIsSet() const;
  void unsetServNfId();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getSmfId() const;
  void setSmfId(std::string const &value);
  bool smfIdIsSet() const;
  void unsetSmfId();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getRecoveryTime() const;
  void setRecoveryTime(std::string const &value);
  bool recoveryTimeIsSet() const;
  void unsetRecoveryTime();
  /// <summary>
  ///
  /// </summary>
  MaPduIndication getMaPduInd() const;
  void setMaPduInd(MaPduIndication const &value);
  bool maPduIndIsSet() const;
  void unsetMaPduInd();
  /// <summary>
  ///
  /// </summary>
  AtsssCapability getAtsssCapab() const;
  void setAtsssCapab(AtsssCapability const &value);
  bool atsssCapabIsSet() const;
  void unsetAtsssCapab();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getIpv4FrameRouteList();
  void setIpv4FrameRouteList(std::vector<std::string> const &value);
  bool ipv4FrameRouteListIsSet() const;
  void unsetIpv4FrameRouteList();
  /// <summary>
  ///
  /// </summary>
  std::vector<Ipv6Prefix> &getIpv6FrameRouteList();
  void setIpv6FrameRouteList(std::vector<Ipv6Prefix> const &value);
  bool ipv6FrameRouteListIsSet() const;
  void unsetIpv6FrameRouteList();
  /// <summary>
  ///
  /// </summary>
  SatelliteBackhaulCategory getSatBackhaulCategory() const;
  void setSatBackhaulCategory(SatelliteBackhaulCategory const &value);
  bool satBackhaulCategoryIsSet() const;
  void unsetSatBackhaulCategory();

  friend void to_json(nlohmann::json &j, const SmPolicyContextData &o);
  friend void from_json(const nlohmann::json &j, SmPolicyContextData &o);

protected:
  AccNetChId m_AccNetChId;
  bool m_AccNetChIdIsSet;
  AccNetChargingAddress m_ChargEntityAddr;
  bool m_ChargEntityAddrIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_Supi;

  bool m_InvalidSupi;
  bool m_InvalidSupiIsSet;
  std::vector<std::string> m_InterGrpIds;
  bool m_InterGrpIdsIsSet;
  int32_t m_PduSessionId;

  PduSessionType m_PduSessionType;

  std::string m_Chargingcharacteristics;
  bool m_ChargingcharacteristicsIsSet;
  std::string m_Dnn;

  DnnSelectionMode m_DnnSelMode;
  bool m_DnnSelModeIsSet;
  std::string m_NotificationUri;

  AccessType m_AccessType;
  bool m_AccessTypeIsSet;
  RatType m_RatType;
  bool m_RatTypeIsSet;
  AdditionalAccessInfo m_AddAccessInfo;
  bool m_AddAccessInfoIsSet;
  PlmnIdNid m_ServingNetwork;
  bool m_ServingNetworkIsSet;
  UserLocation m_UserLocationInfo;
  bool m_UserLocationInfoIsSet;
  std::string m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  std::string m_Ipv4Address;
  bool m_Ipv4AddressIsSet;
  Ipv6Prefix m_Ipv6AddressPrefix;
  bool m_Ipv6AddressPrefixIsSet;
  std::string m_IpDomain;
  bool m_IpDomainIsSet;
  Ambr m_SubsSessAmbr;
  bool m_SubsSessAmbrIsSet;
  std::string m_AuthProfIndex;
  bool m_AuthProfIndexIsSet;
  SubscribedDefaultQos m_SubsDefQos;
  bool m_SubsDefQosIsSet;
  VplmnQos m_VplmnQos;
  bool m_VplmnQosIsSet;
  int32_t m_NumOfPackFilter;
  bool m_NumOfPackFilterIsSet;
  bool m_Online;
  bool m_OnlineIsSet;
  bool m_Offline;
  bool m_OfflineIsSet;
  bool m_r_3gppPsDataOffStatus;
  bool m_r_3gppPsDataOffStatusIsSet;
  bool m_RefQosIndication;
  bool m_RefQosIndicationIsSet;
  TraceData m_TraceReq;
  bool m_TraceReqIsSet;
  Snssai m_SliceInfo;

  QosFlowUsage m_QosFlowUsage;
  bool m_QosFlowUsageIsSet;
  ServingNfIdentity m_ServNfId;
  bool m_ServNfIdIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
  std::string m_SmfId;
  bool m_SmfIdIsSet;
  std::string m_RecoveryTime;
  bool m_RecoveryTimeIsSet;
  MaPduIndication m_MaPduInd;
  bool m_MaPduIndIsSet;
  AtsssCapability m_AtsssCapab;
  bool m_AtsssCapabIsSet;
  std::vector<std::string> m_Ipv4FrameRouteList;
  bool m_Ipv4FrameRouteListIsSet;
  std::vector<Ipv6Prefix> m_Ipv6FrameRouteList;
  bool m_Ipv6FrameRouteListIsSet;
  SatelliteBackhaulCategory m_SatBackhaulCategory;
  bool m_SatBackhaulCategoryIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SmPolicyContextData_H_ */
