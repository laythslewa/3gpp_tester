/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DataChangeNotify.h
 *
 * Container for data which have changed and notification was requested when
 * changed.
 */

#ifndef DataChangeNotify_H_
#define DataChangeNotify_H_

#include "NotifyItem.h"
#include "SdmSubscription.h"
#include "SubscriptionDataSubscriptions.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Container for data which have changed and notification was requested when
/// changed.
/// </summary>
class DataChangeNotify {
public:
  DataChangeNotify();
  virtual ~DataChangeNotify();

  void validate();

  /////////////////////////////////////////////
  /// DataChangeNotify members

  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getOriginalCallbackReference();
  void setOriginalCallbackReference(std::vector<std::string> const &value);
  bool originalCallbackReferenceIsSet() const;
  void unsetOriginalCallbackReference();
  /// <summary>
  /// String represents the SUPI or GPSI
  /// </summary>
  std::string getUeId() const;
  void setUeId(std::string const &value);
  bool ueIdIsSet() const;
  void unsetUeId();
  /// <summary>
  ///
  /// </summary>
  std::vector<NotifyItem> &getNotifyItems();
  void setNotifyItems(std::vector<NotifyItem> const &value);
  bool notifyItemsIsSet() const;
  void unsetNotifyItems();
  /// <summary>
  ///
  /// </summary>
  SdmSubscription getSdmSubscription() const;
  void setSdmSubscription(SdmSubscription const &value);
  bool sdmSubscriptionIsSet() const;
  void unsetSdmSubscription();
  /// <summary>
  ///
  /// </summary>
  std::vector<SdmSubscription> &getAdditionalSdmSubscriptions();
  void setAdditionalSdmSubscriptions(std::vector<SdmSubscription> const &value);
  bool additionalSdmSubscriptionsIsSet() const;
  void unsetAdditionalSdmSubscriptions();
  /// <summary>
  ///
  /// </summary>
  std::vector<SubscriptionDataSubscriptions> &
  getSubscriptionDataSubscriptions();
  void setSubscriptionDataSubscriptions(
      std::vector<SubscriptionDataSubscriptions> const &value);
  bool subscriptionDataSubscriptionsIsSet() const;
  void unsetSubscriptionDataSubscriptions();

  friend void to_json(nlohmann::json &j, const DataChangeNotify &o);
  friend void from_json(const nlohmann::json &j, DataChangeNotify &o);

protected:
  std::vector<std::string> m_OriginalCallbackReference;
  bool m_OriginalCallbackReferenceIsSet;
  std::string m_UeId;
  bool m_UeIdIsSet;
  std::vector<NotifyItem> m_NotifyItems;
  bool m_NotifyItemsIsSet;
  SdmSubscription m_SdmSubscription;
  bool m_SdmSubscriptionIsSet;
  std::vector<SdmSubscription> m_AdditionalSdmSubscriptions;
  bool m_AdditionalSdmSubscriptionsIsSet;
  std::vector<SubscriptionDataSubscriptions> m_SubscriptionDataSubscriptions;
  bool m_SubscriptionDataSubscriptionsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* DataChangeNotify_H_ */
