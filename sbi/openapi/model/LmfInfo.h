/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * LmfInfo.h
 *
 * Information of an LMF NF Instance
 */

#ifndef LmfInfo_H_
#define LmfInfo_H_

#include "AccessType.h"
#include "AnNodeType.h"
#include "ExternalClientType.h"
#include "RatType.h"
#include "SupportedGADShapes.h"
#include "Tai.h"
#include "TaiRange.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Information of an LMF NF Instance
/// </summary>
class LmfInfo {
public:
  LmfInfo();
  virtual ~LmfInfo();

  void validate();

  /////////////////////////////////////////////
  /// LmfInfo members

  /// <summary>
  ///
  /// </summary>
  std::vector<ExternalClientType> &getServingClientTypes();
  void setServingClientTypes(std::vector<ExternalClientType> const &value);
  bool servingClientTypesIsSet() const;
  void unsetServingClientTypes();
  /// <summary>
  /// LMF identification.
  /// </summary>
  std::string getLmfId() const;
  void setLmfId(std::string const &value);
  bool lmfIdIsSet() const;
  void unsetLmfId();
  /// <summary>
  ///
  /// </summary>
  std::vector<AccessType> &getServingAccessTypes();
  void setServingAccessTypes(std::vector<AccessType> const &value);
  bool servingAccessTypesIsSet() const;
  void unsetServingAccessTypes();
  /// <summary>
  ///
  /// </summary>
  std::vector<AnNodeType> &getServingAnNodeTypes();
  void setServingAnNodeTypes(std::vector<AnNodeType> const &value);
  bool servingAnNodeTypesIsSet() const;
  void unsetServingAnNodeTypes();
  /// <summary>
  ///
  /// </summary>
  std::vector<RatType> &getServingRatTypes();
  void setServingRatTypes(std::vector<RatType> const &value);
  bool servingRatTypesIsSet() const;
  void unsetServingRatTypes();
  /// <summary>
  ///
  /// </summary>
  std::vector<Tai> &getTaiList();
  void setTaiList(std::vector<Tai> const &value);
  bool taiListIsSet() const;
  void unsetTaiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<TaiRange> &getTaiRangeList();
  void setTaiRangeList(std::vector<TaiRange> const &value);
  bool taiRangeListIsSet() const;
  void unsetTaiRangeList();
  /// <summary>
  ///
  /// </summary>
  std::vector<SupportedGADShapes> &getSupportedGADShapes();
  void setSupportedGADShapes(std::vector<SupportedGADShapes> const &value);
  bool supportedGADShapesIsSet() const;
  void unsetSupportedGADShapes();

  friend void to_json(nlohmann::json &j, const LmfInfo &o);
  friend void from_json(const nlohmann::json &j, LmfInfo &o);

protected:
  std::vector<ExternalClientType> m_ServingClientTypes;
  bool m_ServingClientTypesIsSet;
  std::string m_LmfId;
  bool m_LmfIdIsSet;
  std::vector<AccessType> m_ServingAccessTypes;
  bool m_ServingAccessTypesIsSet;
  std::vector<AnNodeType> m_ServingAnNodeTypes;
  bool m_ServingAnNodeTypesIsSet;
  std::vector<RatType> m_ServingRatTypes;
  bool m_ServingRatTypesIsSet;
  std::vector<Tai> m_TaiList;
  bool m_TaiListIsSet;
  std::vector<TaiRange> m_TaiRangeList;
  bool m_TaiRangeListIsSet;
  std::vector<SupportedGADShapes> m_SupportedGADShapes;
  bool m_SupportedGADShapesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* LmfInfo_H_ */
