/**
 * NSSF NS Selection
 * NSSF Network Slice Selection Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NsiInformation.h
 *
 * Contains the API URIs of NRF services to be used to discover NFs/services,
 * subscribe to NF status changes and/or request access tokens within the
 * selected Network Slice instance and optional the Identifier of the selected
 * Network Slice instance
 */

#ifndef NsiInformation_H_
#define NsiInformation_H_

#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the API URIs of NRF services to be used to discover NFs/services,
/// subscribe to NF status changes and/or request access tokens within the
/// selected Network Slice instance and optional the Identifier of the selected
/// Network Slice instance
/// </summary>
class NsiInformation {
public:
  NsiInformation();
  virtual ~NsiInformation();

  void validate();

  /////////////////////////////////////////////
  /// NsiInformation members

  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNrfId() const;
  void setNrfId(std::string const &value);
  /// <summary>
  /// Contains the Identifier of the selected Network Slice instance
  /// </summary>
  std::string getNsiId() const;
  void setNsiId(std::string const &value);
  bool nsiIdIsSet() const;
  void unsetNsiId();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNrfNfMgtUri() const;
  void setNrfNfMgtUri(std::string const &value);
  bool nrfNfMgtUriIsSet() const;
  void unsetNrfNfMgtUri();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNrfAccessTokenUri() const;
  void setNrfAccessTokenUri(std::string const &value);
  bool nrfAccessTokenUriIsSet() const;
  void unsetNrfAccessTokenUri();

  friend void to_json(nlohmann::json &j, const NsiInformation &o);
  friend void from_json(const nlohmann::json &j, NsiInformation &o);

protected:
  std::string m_NrfId;

  std::string m_NsiId;
  bool m_NsiIdIsSet;
  std::string m_NrfNfMgtUri;
  bool m_NrfNfMgtUriIsSet;
  std::string m_NrfAccessTokenUri;
  bool m_NrfAccessTokenUriIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NsiInformation_H_ */
