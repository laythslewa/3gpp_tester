/**
 * CAPIF_API_Invoker_Management_API
 * API for API invoker management. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "APIInvokerEnrolmentDetails.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

APIInvokerEnrolmentDetails::APIInvokerEnrolmentDetails() {
  m_ApiInvokerId = "";
  m_ApiInvokerIdIsSet = false;
  m_NotificationDestination = "";
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
  m_ApiListIsSet = false;
  m_ApiInvokerInformation = "";
  m_ApiInvokerInformationIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

APIInvokerEnrolmentDetails::~APIInvokerEnrolmentDetails() {}

void APIInvokerEnrolmentDetails::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const APIInvokerEnrolmentDetails &o) {
  j = nlohmann::json();
  if (o.apiInvokerIdIsSet())
    j["apiInvokerId"] = o.m_ApiInvokerId;
  j["onboardingInformation"] = o.m_OnboardingInformation;
  j["notificationDestination"] = o.m_NotificationDestination;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  if (o.apiListIsSet() || !o.m_ApiList.empty())
    j["apiList"] = o.m_ApiList;
  if (o.apiInvokerInformationIsSet())
    j["apiInvokerInformation"] = o.m_ApiInvokerInformation;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, APIInvokerEnrolmentDetails &o) {
  if (j.find("apiInvokerId") != j.end()) {
    j.at("apiInvokerId").get_to(o.m_ApiInvokerId);
    o.m_ApiInvokerIdIsSet = true;
  }
  j.at("onboardingInformation").get_to(o.m_OnboardingInformation);
  j.at("notificationDestination").get_to(o.m_NotificationDestination);
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  if (j.find("apiList") != j.end()) {
    j.at("apiList").get_to(o.m_ApiList);
    o.m_ApiListIsSet = true;
  }
  if (j.find("apiInvokerInformation") != j.end()) {
    j.at("apiInvokerInformation").get_to(o.m_ApiInvokerInformation);
    o.m_ApiInvokerInformationIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

std::string APIInvokerEnrolmentDetails::getApiInvokerId() const {
  return m_ApiInvokerId;
}
void APIInvokerEnrolmentDetails::setApiInvokerId(std::string const &value) {
  m_ApiInvokerId = value;
  m_ApiInvokerIdIsSet = true;
}
bool APIInvokerEnrolmentDetails::apiInvokerIdIsSet() const {
  return m_ApiInvokerIdIsSet;
}
void APIInvokerEnrolmentDetails::unsetApiInvokerId() {
  m_ApiInvokerIdIsSet = false;
}
OnboardingInformation
APIInvokerEnrolmentDetails::getOnboardingInformation() const {
  return m_OnboardingInformation;
}
void APIInvokerEnrolmentDetails::setOnboardingInformation(
    OnboardingInformation const &value) {
  m_OnboardingInformation = value;
}
std::string APIInvokerEnrolmentDetails::getNotificationDestination() const {
  return m_NotificationDestination;
}
void APIInvokerEnrolmentDetails::setNotificationDestination(
    std::string const &value) {
  m_NotificationDestination = value;
}
bool APIInvokerEnrolmentDetails::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void APIInvokerEnrolmentDetails::setRequestTestNotification(bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool APIInvokerEnrolmentDetails::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void APIInvokerEnrolmentDetails::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig APIInvokerEnrolmentDetails::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void APIInvokerEnrolmentDetails::setWebsockNotifConfig(
    WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool APIInvokerEnrolmentDetails::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void APIInvokerEnrolmentDetails::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
std::vector<ServiceAPIDescription> &APIInvokerEnrolmentDetails::getApiList() {
  return m_ApiList;
}
void APIInvokerEnrolmentDetails::setApiList(
    std::vector<ServiceAPIDescription> const &value) {
  m_ApiList = value;
  m_ApiListIsSet = true;
}
bool APIInvokerEnrolmentDetails::apiListIsSet() const { return m_ApiListIsSet; }
void APIInvokerEnrolmentDetails::unsetApiList() { m_ApiListIsSet = false; }
std::string APIInvokerEnrolmentDetails::getApiInvokerInformation() const {
  return m_ApiInvokerInformation;
}
void APIInvokerEnrolmentDetails::setApiInvokerInformation(
    std::string const &value) {
  m_ApiInvokerInformation = value;
  m_ApiInvokerInformationIsSet = true;
}
bool APIInvokerEnrolmentDetails::apiInvokerInformationIsSet() const {
  return m_ApiInvokerInformationIsSet;
}
void APIInvokerEnrolmentDetails::unsetApiInvokerInformation() {
  m_ApiInvokerInformationIsSet = false;
}
std::string APIInvokerEnrolmentDetails::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void APIInvokerEnrolmentDetails::setSupportedFeatures(
    std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool APIInvokerEnrolmentDetails::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void APIInvokerEnrolmentDetails::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
