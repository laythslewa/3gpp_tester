/**
 * Nsmsf_SMService Service API
 * SMSF SMService. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI,
 * TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SmsRecordData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SmsRecordData::SmsRecordData() {
  m_SmsRecordId = "";
  m_AccessTypeIsSet = false;
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_Pei = "";
  m_PeiIsSet = false;
  m_UeLocationIsSet = false;
  m_UeTimeZone = "";
  m_UeTimeZoneIsSet = false;
}

SmsRecordData::~SmsRecordData() {}

void SmsRecordData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SmsRecordData &o) {
  j = nlohmann::json();
  j["smsRecordId"] = o.m_SmsRecordId;
  j["smsPayload"] = o.m_SmsPayload;
  if (o.accessTypeIsSet())
    j["accessType"] = o.m_AccessType;
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  if (o.peiIsSet())
    j["pei"] = o.m_Pei;
  if (o.ueLocationIsSet())
    j["ueLocation"] = o.m_UeLocation;
  if (o.ueTimeZoneIsSet())
    j["ueTimeZone"] = o.m_UeTimeZone;
}

void from_json(const nlohmann::json &j, SmsRecordData &o) {
  j.at("smsRecordId").get_to(o.m_SmsRecordId);
  j.at("smsPayload").get_to(o.m_SmsPayload);
  if (j.find("accessType") != j.end()) {
    j.at("accessType").get_to(o.m_AccessType);
    o.m_AccessTypeIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("pei") != j.end()) {
    j.at("pei").get_to(o.m_Pei);
    o.m_PeiIsSet = true;
  }
  if (j.find("ueLocation") != j.end()) {
    j.at("ueLocation").get_to(o.m_UeLocation);
    o.m_UeLocationIsSet = true;
  }
  if (j.find("ueTimeZone") != j.end()) {
    j.at("ueTimeZone").get_to(o.m_UeTimeZone);
    o.m_UeTimeZoneIsSet = true;
  }
}

std::string SmsRecordData::getSmsRecordId() const { return m_SmsRecordId; }
void SmsRecordData::setSmsRecordId(std::string const &value) {
  m_SmsRecordId = value;
}
RefToBinaryData SmsRecordData::getSmsPayload() const { return m_SmsPayload; }
void SmsRecordData::setSmsPayload(RefToBinaryData const &value) {
  m_SmsPayload = value;
}
AccessType SmsRecordData::getAccessType() const { return m_AccessType; }
void SmsRecordData::setAccessType(AccessType const &value) {
  m_AccessType = value;
  m_AccessTypeIsSet = true;
}
bool SmsRecordData::accessTypeIsSet() const { return m_AccessTypeIsSet; }
void SmsRecordData::unsetAccessType() { m_AccessTypeIsSet = false; }
std::string SmsRecordData::getGpsi() const { return m_Gpsi; }
void SmsRecordData::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool SmsRecordData::gpsiIsSet() const { return m_GpsiIsSet; }
void SmsRecordData::unsetGpsi() { m_GpsiIsSet = false; }
std::string SmsRecordData::getPei() const { return m_Pei; }
void SmsRecordData::setPei(std::string const &value) {
  m_Pei = value;
  m_PeiIsSet = true;
}
bool SmsRecordData::peiIsSet() const { return m_PeiIsSet; }
void SmsRecordData::unsetPei() { m_PeiIsSet = false; }
UserLocation SmsRecordData::getUeLocation() const { return m_UeLocation; }
void SmsRecordData::setUeLocation(UserLocation const &value) {
  m_UeLocation = value;
  m_UeLocationIsSet = true;
}
bool SmsRecordData::ueLocationIsSet() const { return m_UeLocationIsSet; }
void SmsRecordData::unsetUeLocation() { m_UeLocationIsSet = false; }
std::string SmsRecordData::getUeTimeZone() const { return m_UeTimeZone; }
void SmsRecordData::setUeTimeZone(std::string const &value) {
  m_UeTimeZone = value;
  m_UeTimeZoneIsSet = true;
}
bool SmsRecordData::ueTimeZoneIsSet() const { return m_UeTimeZoneIsSet; }
void SmsRecordData::unsetUeTimeZone() { m_UeTimeZoneIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
