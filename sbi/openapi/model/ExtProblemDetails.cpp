/**
 * Nbsf_Management
 * Binding Support Management Service API. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ExtProblemDetails.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ExtProblemDetails::ExtProblemDetails() {
  m_Type = "";
  m_TypeIsSet = false;
  m_Title = "";
  m_TitleIsSet = false;
  m_Status = 0;
  m_StatusIsSet = false;
  m_Detail = "";
  m_DetailIsSet = false;
  m_Instance = "";
  m_InstanceIsSet = false;
  m_Cause = "";
  m_CauseIsSet = false;
  m_InvalidParamsIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_AccessTokenErrorIsSet = false;
  m_AccessTokenRequestIsSet = false;
  m_NrfId = "";
  m_NrfIdIsSet = false;
  m_PcfSmFqdn = "";
  m_PcfSmFqdnIsSet = false;
  m_PcfSmIpEndPointsIsSet = false;
}

ExtProblemDetails::~ExtProblemDetails() {}

void ExtProblemDetails::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ExtProblemDetails &o) {
  j = nlohmann::json();
  if (o.typeIsSet())
    j["type"] = o.m_Type;
  if (o.titleIsSet())
    j["title"] = o.m_Title;
  if (o.statusIsSet())
    j["status"] = o.m_Status;
  if (o.detailIsSet())
    j["detail"] = o.m_Detail;
  if (o.instanceIsSet())
    j["instance"] = o.m_Instance;
  if (o.causeIsSet())
    j["cause"] = o.m_Cause;
  if (o.invalidParamsIsSet() || !o.m_InvalidParams.empty())
    j["invalidParams"] = o.m_InvalidParams;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.accessTokenErrorIsSet())
    j["accessTokenError"] = o.m_AccessTokenError;
  if (o.accessTokenRequestIsSet())
    j["accessTokenRequest"] = o.m_AccessTokenRequest;
  if (o.nrfIdIsSet())
    j["nrfId"] = o.m_NrfId;
  if (o.pcfSmFqdnIsSet())
    j["pcfSmFqdn"] = o.m_PcfSmFqdn;
  if (o.pcfSmIpEndPointsIsSet() || !o.m_PcfSmIpEndPoints.empty())
    j["pcfSmIpEndPoints"] = o.m_PcfSmIpEndPoints;
}

void from_json(const nlohmann::json &j, ExtProblemDetails &o) {
  if (j.find("type") != j.end()) {
    j.at("type").get_to(o.m_Type);
    o.m_TypeIsSet = true;
  }
  if (j.find("title") != j.end()) {
    j.at("title").get_to(o.m_Title);
    o.m_TitleIsSet = true;
  }
  if (j.find("status") != j.end()) {
    j.at("status").get_to(o.m_Status);
    o.m_StatusIsSet = true;
  }
  if (j.find("detail") != j.end()) {
    j.at("detail").get_to(o.m_Detail);
    o.m_DetailIsSet = true;
  }
  if (j.find("instance") != j.end()) {
    j.at("instance").get_to(o.m_Instance);
    o.m_InstanceIsSet = true;
  }
  if (j.find("cause") != j.end()) {
    j.at("cause").get_to(o.m_Cause);
    o.m_CauseIsSet = true;
  }
  if (j.find("invalidParams") != j.end()) {
    j.at("invalidParams").get_to(o.m_InvalidParams);
    o.m_InvalidParamsIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("accessTokenError") != j.end()) {
    j.at("accessTokenError").get_to(o.m_AccessTokenError);
    o.m_AccessTokenErrorIsSet = true;
  }
  if (j.find("accessTokenRequest") != j.end()) {
    j.at("accessTokenRequest").get_to(o.m_AccessTokenRequest);
    o.m_AccessTokenRequestIsSet = true;
  }
  if (j.find("nrfId") != j.end()) {
    j.at("nrfId").get_to(o.m_NrfId);
    o.m_NrfIdIsSet = true;
  }
  if (j.find("pcfSmFqdn") != j.end()) {
    j.at("pcfSmFqdn").get_to(o.m_PcfSmFqdn);
    o.m_PcfSmFqdnIsSet = true;
  }
  if (j.find("pcfSmIpEndPoints") != j.end()) {
    j.at("pcfSmIpEndPoints").get_to(o.m_PcfSmIpEndPoints);
    o.m_PcfSmIpEndPointsIsSet = true;
  }
}

std::string ExtProblemDetails::getType() const { return m_Type; }
void ExtProblemDetails::setType(std::string const &value) {
  m_Type = value;
  m_TypeIsSet = true;
}
bool ExtProblemDetails::typeIsSet() const { return m_TypeIsSet; }
void ExtProblemDetails::unsetType() { m_TypeIsSet = false; }
std::string ExtProblemDetails::getTitle() const { return m_Title; }
void ExtProblemDetails::setTitle(std::string const &value) {
  m_Title = value;
  m_TitleIsSet = true;
}
bool ExtProblemDetails::titleIsSet() const { return m_TitleIsSet; }
void ExtProblemDetails::unsetTitle() { m_TitleIsSet = false; }
int32_t ExtProblemDetails::getStatus() const { return m_Status; }
void ExtProblemDetails::setStatus(int32_t const value) {
  m_Status = value;
  m_StatusIsSet = true;
}
bool ExtProblemDetails::statusIsSet() const { return m_StatusIsSet; }
void ExtProblemDetails::unsetStatus() { m_StatusIsSet = false; }
std::string ExtProblemDetails::getDetail() const { return m_Detail; }
void ExtProblemDetails::setDetail(std::string const &value) {
  m_Detail = value;
  m_DetailIsSet = true;
}
bool ExtProblemDetails::detailIsSet() const { return m_DetailIsSet; }
void ExtProblemDetails::unsetDetail() { m_DetailIsSet = false; }
std::string ExtProblemDetails::getInstance() const { return m_Instance; }
void ExtProblemDetails::setInstance(std::string const &value) {
  m_Instance = value;
  m_InstanceIsSet = true;
}
bool ExtProblemDetails::instanceIsSet() const { return m_InstanceIsSet; }
void ExtProblemDetails::unsetInstance() { m_InstanceIsSet = false; }
std::string ExtProblemDetails::getCause() const { return m_Cause; }
void ExtProblemDetails::setCause(std::string const &value) {
  m_Cause = value;
  m_CauseIsSet = true;
}
bool ExtProblemDetails::causeIsSet() const { return m_CauseIsSet; }
void ExtProblemDetails::unsetCause() { m_CauseIsSet = false; }
std::vector<InvalidParam> &ExtProblemDetails::getInvalidParams() {
  return m_InvalidParams;
}
void ExtProblemDetails::setInvalidParams(
    std::vector<InvalidParam> const &value) {
  m_InvalidParams = value;
  m_InvalidParamsIsSet = true;
}
bool ExtProblemDetails::invalidParamsIsSet() const {
  return m_InvalidParamsIsSet;
}
void ExtProblemDetails::unsetInvalidParams() { m_InvalidParamsIsSet = false; }
std::string ExtProblemDetails::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void ExtProblemDetails::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool ExtProblemDetails::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void ExtProblemDetails::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
AccessTokenErr ExtProblemDetails::getAccessTokenError() const {
  return m_AccessTokenError;
}
void ExtProblemDetails::setAccessTokenError(AccessTokenErr const &value) {
  m_AccessTokenError = value;
  m_AccessTokenErrorIsSet = true;
}
bool ExtProblemDetails::accessTokenErrorIsSet() const {
  return m_AccessTokenErrorIsSet;
}
void ExtProblemDetails::unsetAccessTokenError() {
  m_AccessTokenErrorIsSet = false;
}
AccessTokenReq ExtProblemDetails::getAccessTokenRequest() const {
  return m_AccessTokenRequest;
}
void ExtProblemDetails::setAccessTokenRequest(AccessTokenReq const &value) {
  m_AccessTokenRequest = value;
  m_AccessTokenRequestIsSet = true;
}
bool ExtProblemDetails::accessTokenRequestIsSet() const {
  return m_AccessTokenRequestIsSet;
}
void ExtProblemDetails::unsetAccessTokenRequest() {
  m_AccessTokenRequestIsSet = false;
}
std::string ExtProblemDetails::getNrfId() const { return m_NrfId; }
void ExtProblemDetails::setNrfId(std::string const &value) {
  m_NrfId = value;
  m_NrfIdIsSet = true;
}
bool ExtProblemDetails::nrfIdIsSet() const { return m_NrfIdIsSet; }
void ExtProblemDetails::unsetNrfId() { m_NrfIdIsSet = false; }
std::string ExtProblemDetails::getPcfSmFqdn() const { return m_PcfSmFqdn; }
void ExtProblemDetails::setPcfSmFqdn(std::string const &value) {
  m_PcfSmFqdn = value;
  m_PcfSmFqdnIsSet = true;
}
bool ExtProblemDetails::pcfSmFqdnIsSet() const { return m_PcfSmFqdnIsSet; }
void ExtProblemDetails::unsetPcfSmFqdn() { m_PcfSmFqdnIsSet = false; }
std::vector<IpEndPoint> &ExtProblemDetails::getPcfSmIpEndPoints() {
  return m_PcfSmIpEndPoints;
}
void ExtProblemDetails::setPcfSmIpEndPoints(
    std::vector<IpEndPoint> const &value) {
  m_PcfSmIpEndPoints = value;
  m_PcfSmIpEndPointsIsSet = true;
}
bool ExtProblemDetails::pcfSmIpEndPointsIsSet() const {
  return m_PcfSmIpEndPointsIsSet;
}
void ExtProblemDetails::unsetPcfSmIpEndPoints() {
  m_PcfSmIpEndPointsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
