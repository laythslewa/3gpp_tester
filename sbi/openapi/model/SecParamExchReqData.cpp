/**
 * N32 Handshake API
 * N32-c Handshake Service.  Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC).  All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SecParamExchReqData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SecParamExchReqData::SecParamExchReqData() {
  m_N32fContextId = "";
  m_JweCipherSuiteListIsSet = false;
  m_JwsCipherSuiteListIsSet = false;
  m_ProtectionPolicyInfoIsSet = false;
  m_IpxProviderSecInfoListIsSet = false;
  m_Sender = "";
  m_SenderIsSet = false;
}

SecParamExchReqData::~SecParamExchReqData() {}

void SecParamExchReqData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SecParamExchReqData &o) {
  j = nlohmann::json();
  j["n32fContextId"] = o.m_N32fContextId;
  if (o.jweCipherSuiteListIsSet() || !o.m_JweCipherSuiteList.empty())
    j["jweCipherSuiteList"] = o.m_JweCipherSuiteList;
  if (o.jwsCipherSuiteListIsSet() || !o.m_JwsCipherSuiteList.empty())
    j["jwsCipherSuiteList"] = o.m_JwsCipherSuiteList;
  if (o.protectionPolicyInfoIsSet())
    j["protectionPolicyInfo"] = o.m_ProtectionPolicyInfo;
  if (o.ipxProviderSecInfoListIsSet() || !o.m_IpxProviderSecInfoList.empty())
    j["ipxProviderSecInfoList"] = o.m_IpxProviderSecInfoList;
  if (o.senderIsSet())
    j["sender"] = o.m_Sender;
}

void from_json(const nlohmann::json &j, SecParamExchReqData &o) {
  j.at("n32fContextId").get_to(o.m_N32fContextId);
  if (j.find("jweCipherSuiteList") != j.end()) {
    j.at("jweCipherSuiteList").get_to(o.m_JweCipherSuiteList);
    o.m_JweCipherSuiteListIsSet = true;
  }
  if (j.find("jwsCipherSuiteList") != j.end()) {
    j.at("jwsCipherSuiteList").get_to(o.m_JwsCipherSuiteList);
    o.m_JwsCipherSuiteListIsSet = true;
  }
  if (j.find("protectionPolicyInfo") != j.end()) {
    j.at("protectionPolicyInfo").get_to(o.m_ProtectionPolicyInfo);
    o.m_ProtectionPolicyInfoIsSet = true;
  }
  if (j.find("ipxProviderSecInfoList") != j.end()) {
    j.at("ipxProviderSecInfoList").get_to(o.m_IpxProviderSecInfoList);
    o.m_IpxProviderSecInfoListIsSet = true;
  }
  if (j.find("sender") != j.end()) {
    j.at("sender").get_to(o.m_Sender);
    o.m_SenderIsSet = true;
  }
}

std::string SecParamExchReqData::getN32fContextId() const {
  return m_N32fContextId;
}
void SecParamExchReqData::setN32fContextId(std::string const &value) {
  m_N32fContextId = value;
}
std::vector<std::string> &SecParamExchReqData::getJweCipherSuiteList() {
  return m_JweCipherSuiteList;
}
void SecParamExchReqData::setJweCipherSuiteList(
    std::vector<std::string> const &value) {
  m_JweCipherSuiteList = value;
  m_JweCipherSuiteListIsSet = true;
}
bool SecParamExchReqData::jweCipherSuiteListIsSet() const {
  return m_JweCipherSuiteListIsSet;
}
void SecParamExchReqData::unsetJweCipherSuiteList() {
  m_JweCipherSuiteListIsSet = false;
}
std::vector<std::string> &SecParamExchReqData::getJwsCipherSuiteList() {
  return m_JwsCipherSuiteList;
}
void SecParamExchReqData::setJwsCipherSuiteList(
    std::vector<std::string> const &value) {
  m_JwsCipherSuiteList = value;
  m_JwsCipherSuiteListIsSet = true;
}
bool SecParamExchReqData::jwsCipherSuiteListIsSet() const {
  return m_JwsCipherSuiteListIsSet;
}
void SecParamExchReqData::unsetJwsCipherSuiteList() {
  m_JwsCipherSuiteListIsSet = false;
}
ProtectionPolicy SecParamExchReqData::getProtectionPolicyInfo() const {
  return m_ProtectionPolicyInfo;
}
void SecParamExchReqData::setProtectionPolicyInfo(
    ProtectionPolicy const &value) {
  m_ProtectionPolicyInfo = value;
  m_ProtectionPolicyInfoIsSet = true;
}
bool SecParamExchReqData::protectionPolicyInfoIsSet() const {
  return m_ProtectionPolicyInfoIsSet;
}
void SecParamExchReqData::unsetProtectionPolicyInfo() {
  m_ProtectionPolicyInfoIsSet = false;
}
std::vector<IpxProviderSecInfo> &
SecParamExchReqData::getIpxProviderSecInfoList() {
  return m_IpxProviderSecInfoList;
}
void SecParamExchReqData::setIpxProviderSecInfoList(
    std::vector<IpxProviderSecInfo> const &value) {
  m_IpxProviderSecInfoList = value;
  m_IpxProviderSecInfoListIsSet = true;
}
bool SecParamExchReqData::ipxProviderSecInfoListIsSet() const {
  return m_IpxProviderSecInfoListIsSet;
}
void SecParamExchReqData::unsetIpxProviderSecInfoList() {
  m_IpxProviderSecInfoListIsSet = false;
}
std::string SecParamExchReqData::getSender() const { return m_Sender; }
void SecParamExchReqData::setSender(std::string const &value) {
  m_Sender = value;
  m_SenderIsSet = true;
}
bool SecParamExchReqData::senderIsSet() const { return m_SenderIsSet; }
void SecParamExchReqData::unsetSender() { m_SenderIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
