/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MediaComponentRm.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

MediaComponentRm::MediaComponentRm() {
  m_AfAppId = "";
  m_AfAppIdIsSet = false;
  m_AfRoutReqIsSet = false;
  m_QosReference = "";
  m_QosReferenceIsSet = false;
  m_AltSerReqsIsSet = false;
  m_DisUeNotif = false;
  m_DisUeNotifIsSet = false;
  m_ContVer = 0;
  m_ContVerIsSet = false;
  m_CodecsIsSet = false;
  m_DesMaxLatency = 0.0f;
  m_DesMaxLatencyIsSet = false;
  m_DesMaxLoss = 0.0f;
  m_DesMaxLossIsSet = false;
  m_FlusId = "";
  m_FlusIdIsSet = false;
  m_FStatusIsSet = false;
  m_MarBwDl = "";
  m_MarBwDlIsSet = false;
  m_MarBwUl = "";
  m_MarBwUlIsSet = false;
  m_MaxPacketLossRateDl = 0;
  m_MaxPacketLossRateDlIsSet = false;
  m_MaxPacketLossRateUl = 0;
  m_MaxPacketLossRateUlIsSet = false;
  m_MaxSuppBwDl = "";
  m_MaxSuppBwDlIsSet = false;
  m_MaxSuppBwUl = "";
  m_MaxSuppBwUlIsSet = false;
  m_MedCompN = 0;
  m_MedSubCompsIsSet = false;
  m_MedTypeIsSet = false;
  m_MinDesBwDl = "";
  m_MinDesBwDlIsSet = false;
  m_MinDesBwUl = "";
  m_MinDesBwUlIsSet = false;
  m_MirBwDl = "";
  m_MirBwDlIsSet = false;
  m_MirBwUl = "";
  m_MirBwUlIsSet = false;
  m_PreemptCapIsSet = false;
  m_PreemptVulnIsSet = false;
  m_PrioSharingIndIsSet = false;
  m_ResPrioIsSet = false;
  m_RrBw = "";
  m_RrBwIsSet = false;
  m_RsBw = "";
  m_RsBwIsSet = false;
  m_SharingKeyDl = 0;
  m_SharingKeyDlIsSet = false;
  m_SharingKeyUl = 0;
  m_SharingKeyUlIsSet = false;
  m_TsnQosIsSet = false;
  m_TscaiInputDlIsSet = false;
  m_TscaiInputUlIsSet = false;
  m_TscaiTimeDom = 0;
  m_TscaiTimeDomIsSet = false;
}

MediaComponentRm::~MediaComponentRm() {}

void MediaComponentRm::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const MediaComponentRm &o) {
  j = nlohmann::json();
  if (o.afAppIdIsSet())
    j["afAppId"] = o.m_AfAppId;
  if (o.afRoutReqIsSet())
    j["afRoutReq"] = o.m_AfRoutReq;
  if (o.qosReferenceIsSet())
    j["qosReference"] = o.m_QosReference;
  if (o.altSerReqsIsSet() || !o.m_AltSerReqs.empty())
    j["altSerReqs"] = o.m_AltSerReqs;
  if (o.disUeNotifIsSet())
    j["disUeNotif"] = o.m_DisUeNotif;
  if (o.contVerIsSet())
    j["contVer"] = o.m_ContVer;
  if (o.codecsIsSet() || !o.m_Codecs.empty())
    j["codecs"] = o.m_Codecs;
  if (o.desMaxLatencyIsSet())
    j["desMaxLatency"] = o.m_DesMaxLatency;
  if (o.desMaxLossIsSet())
    j["desMaxLoss"] = o.m_DesMaxLoss;
  if (o.flusIdIsSet())
    j["flusId"] = o.m_FlusId;
  if (o.fStatusIsSet())
    j["fStatus"] = o.m_FStatus;
  if (o.marBwDlIsSet())
    j["marBwDl"] = o.m_MarBwDl;
  if (o.marBwUlIsSet())
    j["marBwUl"] = o.m_MarBwUl;
  if (o.maxPacketLossRateDlIsSet())
    j["maxPacketLossRateDl"] = o.m_MaxPacketLossRateDl;
  if (o.maxPacketLossRateUlIsSet())
    j["maxPacketLossRateUl"] = o.m_MaxPacketLossRateUl;
  if (o.maxSuppBwDlIsSet())
    j["maxSuppBwDl"] = o.m_MaxSuppBwDl;
  if (o.maxSuppBwUlIsSet())
    j["maxSuppBwUl"] = o.m_MaxSuppBwUl;
  j["medCompN"] = o.m_MedCompN;
  if (o.medSubCompsIsSet() || !o.m_MedSubComps.empty())
    j["medSubComps"] = o.m_MedSubComps;
  if (o.medTypeIsSet())
    j["medType"] = o.m_MedType;
  if (o.minDesBwDlIsSet())
    j["minDesBwDl"] = o.m_MinDesBwDl;
  if (o.minDesBwUlIsSet())
    j["minDesBwUl"] = o.m_MinDesBwUl;
  if (o.mirBwDlIsSet())
    j["mirBwDl"] = o.m_MirBwDl;
  if (o.mirBwUlIsSet())
    j["mirBwUl"] = o.m_MirBwUl;
  if (o.preemptCapIsSet())
    j["preemptCap"] = o.m_PreemptCap;
  if (o.preemptVulnIsSet())
    j["preemptVuln"] = o.m_PreemptVuln;
  if (o.prioSharingIndIsSet())
    j["prioSharingInd"] = o.m_PrioSharingInd;
  if (o.resPrioIsSet())
    j["resPrio"] = o.m_ResPrio;
  if (o.rrBwIsSet())
    j["rrBw"] = o.m_RrBw;
  if (o.rsBwIsSet())
    j["rsBw"] = o.m_RsBw;
  if (o.sharingKeyDlIsSet())
    j["sharingKeyDl"] = o.m_SharingKeyDl;
  if (o.sharingKeyUlIsSet())
    j["sharingKeyUl"] = o.m_SharingKeyUl;
  if (o.tsnQosIsSet())
    j["tsnQos"] = o.m_TsnQos;
  if (o.tscaiInputDlIsSet())
    j["tscaiInputDl"] = o.m_TscaiInputDl;
  if (o.tscaiInputUlIsSet())
    j["tscaiInputUl"] = o.m_TscaiInputUl;
  if (o.tscaiTimeDomIsSet())
    j["tscaiTimeDom"] = o.m_TscaiTimeDom;
}

void from_json(const nlohmann::json &j, MediaComponentRm &o) {
  if (j.find("afAppId") != j.end()) {
    j.at("afAppId").get_to(o.m_AfAppId);
    o.m_AfAppIdIsSet = true;
  }
  if (j.find("afRoutReq") != j.end()) {
    j.at("afRoutReq").get_to(o.m_AfRoutReq);
    o.m_AfRoutReqIsSet = true;
  }
  if (j.find("qosReference") != j.end()) {
    j.at("qosReference").get_to(o.m_QosReference);
    o.m_QosReferenceIsSet = true;
  }
  if (j.find("altSerReqs") != j.end()) {
    j.at("altSerReqs").get_to(o.m_AltSerReqs);
    o.m_AltSerReqsIsSet = true;
  }
  if (j.find("disUeNotif") != j.end()) {
    j.at("disUeNotif").get_to(o.m_DisUeNotif);
    o.m_DisUeNotifIsSet = true;
  }
  if (j.find("contVer") != j.end()) {
    j.at("contVer").get_to(o.m_ContVer);
    o.m_ContVerIsSet = true;
  }
  if (j.find("codecs") != j.end()) {
    j.at("codecs").get_to(o.m_Codecs);
    o.m_CodecsIsSet = true;
  }
  if (j.find("desMaxLatency") != j.end()) {
    j.at("desMaxLatency").get_to(o.m_DesMaxLatency);
    o.m_DesMaxLatencyIsSet = true;
  }
  if (j.find("desMaxLoss") != j.end()) {
    j.at("desMaxLoss").get_to(o.m_DesMaxLoss);
    o.m_DesMaxLossIsSet = true;
  }
  if (j.find("flusId") != j.end()) {
    j.at("flusId").get_to(o.m_FlusId);
    o.m_FlusIdIsSet = true;
  }
  if (j.find("fStatus") != j.end()) {
    j.at("fStatus").get_to(o.m_FStatus);
    o.m_FStatusIsSet = true;
  }
  if (j.find("marBwDl") != j.end()) {
    j.at("marBwDl").get_to(o.m_MarBwDl);
    o.m_MarBwDlIsSet = true;
  }
  if (j.find("marBwUl") != j.end()) {
    j.at("marBwUl").get_to(o.m_MarBwUl);
    o.m_MarBwUlIsSet = true;
  }
  if (j.find("maxPacketLossRateDl") != j.end()) {
    j.at("maxPacketLossRateDl").get_to(o.m_MaxPacketLossRateDl);
    o.m_MaxPacketLossRateDlIsSet = true;
  }
  if (j.find("maxPacketLossRateUl") != j.end()) {
    j.at("maxPacketLossRateUl").get_to(o.m_MaxPacketLossRateUl);
    o.m_MaxPacketLossRateUlIsSet = true;
  }
  if (j.find("maxSuppBwDl") != j.end()) {
    j.at("maxSuppBwDl").get_to(o.m_MaxSuppBwDl);
    o.m_MaxSuppBwDlIsSet = true;
  }
  if (j.find("maxSuppBwUl") != j.end()) {
    j.at("maxSuppBwUl").get_to(o.m_MaxSuppBwUl);
    o.m_MaxSuppBwUlIsSet = true;
  }
  j.at("medCompN").get_to(o.m_MedCompN);
  if (j.find("medSubComps") != j.end()) {
    j.at("medSubComps").get_to(o.m_MedSubComps);
    o.m_MedSubCompsIsSet = true;
  }
  if (j.find("medType") != j.end()) {
    j.at("medType").get_to(o.m_MedType);
    o.m_MedTypeIsSet = true;
  }
  if (j.find("minDesBwDl") != j.end()) {
    j.at("minDesBwDl").get_to(o.m_MinDesBwDl);
    o.m_MinDesBwDlIsSet = true;
  }
  if (j.find("minDesBwUl") != j.end()) {
    j.at("minDesBwUl").get_to(o.m_MinDesBwUl);
    o.m_MinDesBwUlIsSet = true;
  }
  if (j.find("mirBwDl") != j.end()) {
    j.at("mirBwDl").get_to(o.m_MirBwDl);
    o.m_MirBwDlIsSet = true;
  }
  if (j.find("mirBwUl") != j.end()) {
    j.at("mirBwUl").get_to(o.m_MirBwUl);
    o.m_MirBwUlIsSet = true;
  }
  if (j.find("preemptCap") != j.end()) {
    j.at("preemptCap").get_to(o.m_PreemptCap);
    o.m_PreemptCapIsSet = true;
  }
  if (j.find("preemptVuln") != j.end()) {
    j.at("preemptVuln").get_to(o.m_PreemptVuln);
    o.m_PreemptVulnIsSet = true;
  }
  if (j.find("prioSharingInd") != j.end()) {
    j.at("prioSharingInd").get_to(o.m_PrioSharingInd);
    o.m_PrioSharingIndIsSet = true;
  }
  if (j.find("resPrio") != j.end()) {
    j.at("resPrio").get_to(o.m_ResPrio);
    o.m_ResPrioIsSet = true;
  }
  if (j.find("rrBw") != j.end()) {
    j.at("rrBw").get_to(o.m_RrBw);
    o.m_RrBwIsSet = true;
  }
  if (j.find("rsBw") != j.end()) {
    j.at("rsBw").get_to(o.m_RsBw);
    o.m_RsBwIsSet = true;
  }
  if (j.find("sharingKeyDl") != j.end()) {
    j.at("sharingKeyDl").get_to(o.m_SharingKeyDl);
    o.m_SharingKeyDlIsSet = true;
  }
  if (j.find("sharingKeyUl") != j.end()) {
    j.at("sharingKeyUl").get_to(o.m_SharingKeyUl);
    o.m_SharingKeyUlIsSet = true;
  }
  if (j.find("tsnQos") != j.end()) {
    j.at("tsnQos").get_to(o.m_TsnQos);
    o.m_TsnQosIsSet = true;
  }
  if (j.find("tscaiInputDl") != j.end()) {
    j.at("tscaiInputDl").get_to(o.m_TscaiInputDl);
    o.m_TscaiInputDlIsSet = true;
  }
  if (j.find("tscaiInputUl") != j.end()) {
    j.at("tscaiInputUl").get_to(o.m_TscaiInputUl);
    o.m_TscaiInputUlIsSet = true;
  }
  if (j.find("tscaiTimeDom") != j.end()) {
    j.at("tscaiTimeDom").get_to(o.m_TscaiTimeDom);
    o.m_TscaiTimeDomIsSet = true;
  }
}

std::string MediaComponentRm::getAfAppId() const { return m_AfAppId; }
void MediaComponentRm::setAfAppId(std::string const &value) {
  m_AfAppId = value;
  m_AfAppIdIsSet = true;
}
bool MediaComponentRm::afAppIdIsSet() const { return m_AfAppIdIsSet; }
void MediaComponentRm::unsetAfAppId() { m_AfAppIdIsSet = false; }
AfRoutingRequirementRm MediaComponentRm::getAfRoutReq() const {
  return m_AfRoutReq;
}
void MediaComponentRm::setAfRoutReq(AfRoutingRequirementRm const &value) {
  m_AfRoutReq = value;
  m_AfRoutReqIsSet = true;
}
bool MediaComponentRm::afRoutReqIsSet() const { return m_AfRoutReqIsSet; }
void MediaComponentRm::unsetAfRoutReq() { m_AfRoutReqIsSet = false; }
std::string MediaComponentRm::getQosReference() const { return m_QosReference; }
void MediaComponentRm::setQosReference(std::string const &value) {
  m_QosReference = value;
  m_QosReferenceIsSet = true;
}
bool MediaComponentRm::qosReferenceIsSet() const { return m_QosReferenceIsSet; }
void MediaComponentRm::unsetQosReference() { m_QosReferenceIsSet = false; }
std::vector<std::string> &MediaComponentRm::getAltSerReqs() {
  return m_AltSerReqs;
}
void MediaComponentRm::setAltSerReqs(std::vector<std::string> const &value) {
  m_AltSerReqs = value;
  m_AltSerReqsIsSet = true;
}
bool MediaComponentRm::altSerReqsIsSet() const { return m_AltSerReqsIsSet; }
void MediaComponentRm::unsetAltSerReqs() { m_AltSerReqsIsSet = false; }
bool MediaComponentRm::isDisUeNotif() const { return m_DisUeNotif; }
void MediaComponentRm::setDisUeNotif(bool const value) {
  m_DisUeNotif = value;
  m_DisUeNotifIsSet = true;
}
bool MediaComponentRm::disUeNotifIsSet() const { return m_DisUeNotifIsSet; }
void MediaComponentRm::unsetDisUeNotif() { m_DisUeNotifIsSet = false; }
int32_t MediaComponentRm::getContVer() const { return m_ContVer; }
void MediaComponentRm::setContVer(int32_t const value) {
  m_ContVer = value;
  m_ContVerIsSet = true;
}
bool MediaComponentRm::contVerIsSet() const { return m_ContVerIsSet; }
void MediaComponentRm::unsetContVer() { m_ContVerIsSet = false; }
std::vector<std::string> &MediaComponentRm::getCodecs() { return m_Codecs; }
void MediaComponentRm::setCodecs(std::vector<std::string> const &value) {
  m_Codecs = value;
  m_CodecsIsSet = true;
}
bool MediaComponentRm::codecsIsSet() const { return m_CodecsIsSet; }
void MediaComponentRm::unsetCodecs() { m_CodecsIsSet = false; }
float MediaComponentRm::getDesMaxLatency() const { return m_DesMaxLatency; }
void MediaComponentRm::setDesMaxLatency(float const value) {
  m_DesMaxLatency = value;
  m_DesMaxLatencyIsSet = true;
}
bool MediaComponentRm::desMaxLatencyIsSet() const {
  return m_DesMaxLatencyIsSet;
}
void MediaComponentRm::unsetDesMaxLatency() { m_DesMaxLatencyIsSet = false; }
float MediaComponentRm::getDesMaxLoss() const { return m_DesMaxLoss; }
void MediaComponentRm::setDesMaxLoss(float const value) {
  m_DesMaxLoss = value;
  m_DesMaxLossIsSet = true;
}
bool MediaComponentRm::desMaxLossIsSet() const { return m_DesMaxLossIsSet; }
void MediaComponentRm::unsetDesMaxLoss() { m_DesMaxLossIsSet = false; }
std::string MediaComponentRm::getFlusId() const { return m_FlusId; }
void MediaComponentRm::setFlusId(std::string const &value) {
  m_FlusId = value;
  m_FlusIdIsSet = true;
}
bool MediaComponentRm::flusIdIsSet() const { return m_FlusIdIsSet; }
void MediaComponentRm::unsetFlusId() { m_FlusIdIsSet = false; }
FlowStatus MediaComponentRm::getFStatus() const { return m_FStatus; }
void MediaComponentRm::setFStatus(FlowStatus const &value) {
  m_FStatus = value;
  m_FStatusIsSet = true;
}
bool MediaComponentRm::fStatusIsSet() const { return m_FStatusIsSet; }
void MediaComponentRm::unsetFStatus() { m_FStatusIsSet = false; }
std::string MediaComponentRm::getMarBwDl() const { return m_MarBwDl; }
void MediaComponentRm::setMarBwDl(std::string const &value) {
  m_MarBwDl = value;
  m_MarBwDlIsSet = true;
}
bool MediaComponentRm::marBwDlIsSet() const { return m_MarBwDlIsSet; }
void MediaComponentRm::unsetMarBwDl() { m_MarBwDlIsSet = false; }
std::string MediaComponentRm::getMarBwUl() const { return m_MarBwUl; }
void MediaComponentRm::setMarBwUl(std::string const &value) {
  m_MarBwUl = value;
  m_MarBwUlIsSet = true;
}
bool MediaComponentRm::marBwUlIsSet() const { return m_MarBwUlIsSet; }
void MediaComponentRm::unsetMarBwUl() { m_MarBwUlIsSet = false; }
int32_t MediaComponentRm::getMaxPacketLossRateDl() const {
  return m_MaxPacketLossRateDl;
}
void MediaComponentRm::setMaxPacketLossRateDl(int32_t const value) {
  m_MaxPacketLossRateDl = value;
  m_MaxPacketLossRateDlIsSet = true;
}
bool MediaComponentRm::maxPacketLossRateDlIsSet() const {
  return m_MaxPacketLossRateDlIsSet;
}
void MediaComponentRm::unsetMaxPacketLossRateDl() {
  m_MaxPacketLossRateDlIsSet = false;
}
int32_t MediaComponentRm::getMaxPacketLossRateUl() const {
  return m_MaxPacketLossRateUl;
}
void MediaComponentRm::setMaxPacketLossRateUl(int32_t const value) {
  m_MaxPacketLossRateUl = value;
  m_MaxPacketLossRateUlIsSet = true;
}
bool MediaComponentRm::maxPacketLossRateUlIsSet() const {
  return m_MaxPacketLossRateUlIsSet;
}
void MediaComponentRm::unsetMaxPacketLossRateUl() {
  m_MaxPacketLossRateUlIsSet = false;
}
std::string MediaComponentRm::getMaxSuppBwDl() const { return m_MaxSuppBwDl; }
void MediaComponentRm::setMaxSuppBwDl(std::string const &value) {
  m_MaxSuppBwDl = value;
  m_MaxSuppBwDlIsSet = true;
}
bool MediaComponentRm::maxSuppBwDlIsSet() const { return m_MaxSuppBwDlIsSet; }
void MediaComponentRm::unsetMaxSuppBwDl() { m_MaxSuppBwDlIsSet = false; }
std::string MediaComponentRm::getMaxSuppBwUl() const { return m_MaxSuppBwUl; }
void MediaComponentRm::setMaxSuppBwUl(std::string const &value) {
  m_MaxSuppBwUl = value;
  m_MaxSuppBwUlIsSet = true;
}
bool MediaComponentRm::maxSuppBwUlIsSet() const { return m_MaxSuppBwUlIsSet; }
void MediaComponentRm::unsetMaxSuppBwUl() { m_MaxSuppBwUlIsSet = false; }
int32_t MediaComponentRm::getMedCompN() const { return m_MedCompN; }
void MediaComponentRm::setMedCompN(int32_t const value) { m_MedCompN = value; }
std::map<std::string, MediaSubComponentRm> &MediaComponentRm::getMedSubComps() {
  return m_MedSubComps;
}
void MediaComponentRm::setMedSubComps(
    std::map<std::string, MediaSubComponentRm> const &value) {
  m_MedSubComps = value;
  m_MedSubCompsIsSet = true;
}
bool MediaComponentRm::medSubCompsIsSet() const { return m_MedSubCompsIsSet; }
void MediaComponentRm::unsetMedSubComps() { m_MedSubCompsIsSet = false; }
MediaType MediaComponentRm::getMedType() const { return m_MedType; }
void MediaComponentRm::setMedType(MediaType const &value) {
  m_MedType = value;
  m_MedTypeIsSet = true;
}
bool MediaComponentRm::medTypeIsSet() const { return m_MedTypeIsSet; }
void MediaComponentRm::unsetMedType() { m_MedTypeIsSet = false; }
std::string MediaComponentRm::getMinDesBwDl() const { return m_MinDesBwDl; }
void MediaComponentRm::setMinDesBwDl(std::string const &value) {
  m_MinDesBwDl = value;
  m_MinDesBwDlIsSet = true;
}
bool MediaComponentRm::minDesBwDlIsSet() const { return m_MinDesBwDlIsSet; }
void MediaComponentRm::unsetMinDesBwDl() { m_MinDesBwDlIsSet = false; }
std::string MediaComponentRm::getMinDesBwUl() const { return m_MinDesBwUl; }
void MediaComponentRm::setMinDesBwUl(std::string const &value) {
  m_MinDesBwUl = value;
  m_MinDesBwUlIsSet = true;
}
bool MediaComponentRm::minDesBwUlIsSet() const { return m_MinDesBwUlIsSet; }
void MediaComponentRm::unsetMinDesBwUl() { m_MinDesBwUlIsSet = false; }
std::string MediaComponentRm::getMirBwDl() const { return m_MirBwDl; }
void MediaComponentRm::setMirBwDl(std::string const &value) {
  m_MirBwDl = value;
  m_MirBwDlIsSet = true;
}
bool MediaComponentRm::mirBwDlIsSet() const { return m_MirBwDlIsSet; }
void MediaComponentRm::unsetMirBwDl() { m_MirBwDlIsSet = false; }
std::string MediaComponentRm::getMirBwUl() const { return m_MirBwUl; }
void MediaComponentRm::setMirBwUl(std::string const &value) {
  m_MirBwUl = value;
  m_MirBwUlIsSet = true;
}
bool MediaComponentRm::mirBwUlIsSet() const { return m_MirBwUlIsSet; }
void MediaComponentRm::unsetMirBwUl() { m_MirBwUlIsSet = false; }
PreemptionCapabilityRm MediaComponentRm::getPreemptCap() const {
  return m_PreemptCap;
}
void MediaComponentRm::setPreemptCap(PreemptionCapabilityRm const &value) {
  m_PreemptCap = value;
  m_PreemptCapIsSet = true;
}
bool MediaComponentRm::preemptCapIsSet() const { return m_PreemptCapIsSet; }
void MediaComponentRm::unsetPreemptCap() { m_PreemptCapIsSet = false; }
PreemptionVulnerabilityRm MediaComponentRm::getPreemptVuln() const {
  return m_PreemptVuln;
}
void MediaComponentRm::setPreemptVuln(PreemptionVulnerabilityRm const &value) {
  m_PreemptVuln = value;
  m_PreemptVulnIsSet = true;
}
bool MediaComponentRm::preemptVulnIsSet() const { return m_PreemptVulnIsSet; }
void MediaComponentRm::unsetPreemptVuln() { m_PreemptVulnIsSet = false; }
PrioritySharingIndicator MediaComponentRm::getPrioSharingInd() const {
  return m_PrioSharingInd;
}
void MediaComponentRm::setPrioSharingInd(
    PrioritySharingIndicator const &value) {
  m_PrioSharingInd = value;
  m_PrioSharingIndIsSet = true;
}
bool MediaComponentRm::prioSharingIndIsSet() const {
  return m_PrioSharingIndIsSet;
}
void MediaComponentRm::unsetPrioSharingInd() { m_PrioSharingIndIsSet = false; }
ReservPriority MediaComponentRm::getResPrio() const { return m_ResPrio; }
void MediaComponentRm::setResPrio(ReservPriority const &value) {
  m_ResPrio = value;
  m_ResPrioIsSet = true;
}
bool MediaComponentRm::resPrioIsSet() const { return m_ResPrioIsSet; }
void MediaComponentRm::unsetResPrio() { m_ResPrioIsSet = false; }
std::string MediaComponentRm::getRrBw() const { return m_RrBw; }
void MediaComponentRm::setRrBw(std::string const &value) {
  m_RrBw = value;
  m_RrBwIsSet = true;
}
bool MediaComponentRm::rrBwIsSet() const { return m_RrBwIsSet; }
void MediaComponentRm::unsetRrBw() { m_RrBwIsSet = false; }
std::string MediaComponentRm::getRsBw() const { return m_RsBw; }
void MediaComponentRm::setRsBw(std::string const &value) {
  m_RsBw = value;
  m_RsBwIsSet = true;
}
bool MediaComponentRm::rsBwIsSet() const { return m_RsBwIsSet; }
void MediaComponentRm::unsetRsBw() { m_RsBwIsSet = false; }
int32_t MediaComponentRm::getSharingKeyDl() const { return m_SharingKeyDl; }
void MediaComponentRm::setSharingKeyDl(int32_t const value) {
  m_SharingKeyDl = value;
  m_SharingKeyDlIsSet = true;
}
bool MediaComponentRm::sharingKeyDlIsSet() const { return m_SharingKeyDlIsSet; }
void MediaComponentRm::unsetSharingKeyDl() { m_SharingKeyDlIsSet = false; }
int32_t MediaComponentRm::getSharingKeyUl() const { return m_SharingKeyUl; }
void MediaComponentRm::setSharingKeyUl(int32_t const value) {
  m_SharingKeyUl = value;
  m_SharingKeyUlIsSet = true;
}
bool MediaComponentRm::sharingKeyUlIsSet() const { return m_SharingKeyUlIsSet; }
void MediaComponentRm::unsetSharingKeyUl() { m_SharingKeyUlIsSet = false; }
TsnQosContainerRm MediaComponentRm::getTsnQos() const { return m_TsnQos; }
void MediaComponentRm::setTsnQos(TsnQosContainerRm const &value) {
  m_TsnQos = value;
  m_TsnQosIsSet = true;
}
bool MediaComponentRm::tsnQosIsSet() const { return m_TsnQosIsSet; }
void MediaComponentRm::unsetTsnQos() { m_TsnQosIsSet = false; }
TscaiInputContainer MediaComponentRm::getTscaiInputDl() const {
  return m_TscaiInputDl;
}
void MediaComponentRm::setTscaiInputDl(TscaiInputContainer const &value) {
  m_TscaiInputDl = value;
  m_TscaiInputDlIsSet = true;
}
bool MediaComponentRm::tscaiInputDlIsSet() const { return m_TscaiInputDlIsSet; }
void MediaComponentRm::unsetTscaiInputDl() { m_TscaiInputDlIsSet = false; }
TscaiInputContainer MediaComponentRm::getTscaiInputUl() const {
  return m_TscaiInputUl;
}
void MediaComponentRm::setTscaiInputUl(TscaiInputContainer const &value) {
  m_TscaiInputUl = value;
  m_TscaiInputUlIsSet = true;
}
bool MediaComponentRm::tscaiInputUlIsSet() const { return m_TscaiInputUlIsSet; }
void MediaComponentRm::unsetTscaiInputUl() { m_TscaiInputUlIsSet = false; }
int32_t MediaComponentRm::getTscaiTimeDom() const { return m_TscaiTimeDom; }
void MediaComponentRm::setTscaiTimeDom(int32_t const value) {
  m_TscaiTimeDom = value;
  m_TscaiTimeDomIsSet = true;
}
bool MediaComponentRm::tscaiTimeDomIsSet() const { return m_TscaiTimeDomIsSet; }
void MediaComponentRm::unsetTscaiTimeDom() { m_TscaiTimeDomIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
