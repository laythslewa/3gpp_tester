/**
 * M5_ServiceAccessInformation
 * 5GMS AF M5 Service Access Information API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ServiceAccessInformationResource_ClientConsumptionReportingConfiguration.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ServiceAccessInformationResource_ClientConsumptionReportingConfiguration::
    ServiceAccessInformationResource_ClientConsumptionReportingConfiguration() {
  m_ReportingInterval = 0;
  m_ReportingIntervalIsSet = false;
  m_LocationReporting = false;
  m_SamplePercentage = 0.0;
}

ServiceAccessInformationResource_ClientConsumptionReportingConfiguration::
    ~ServiceAccessInformationResource_ClientConsumptionReportingConfiguration() {
}

void ServiceAccessInformationResource_ClientConsumptionReportingConfiguration::
    validate() {
  // TODO: implement validation
}

void to_json(
    nlohmann::json &j,
    const ServiceAccessInformationResource_ClientConsumptionReportingConfiguration
        &o) {
  j = nlohmann::json();
  if (o.reportingIntervalIsSet())
    j["reportingInterval"] = o.m_ReportingInterval;
  j["serverAddresses"] = o.m_ServerAddresses;
  j["locationReporting"] = o.m_LocationReporting;
  j["samplePercentage"] = o.m_SamplePercentage;
}

void from_json(
    const nlohmann::json &j,
    ServiceAccessInformationResource_ClientConsumptionReportingConfiguration
        &o) {
  if (j.find("reportingInterval") != j.end()) {
    j.at("reportingInterval").get_to(o.m_ReportingInterval);
    o.m_ReportingIntervalIsSet = true;
  }
  j.at("serverAddresses").get_to(o.m_ServerAddresses);
  j.at("locationReporting").get_to(o.m_LocationReporting);
  j.at("samplePercentage").get_to(o.m_SamplePercentage);
}

int32_t
ServiceAccessInformationResource_ClientConsumptionReportingConfiguration::
    getReportingInterval() const {
  return m_ReportingInterval;
}
void ServiceAccessInformationResource_ClientConsumptionReportingConfiguration::
    setReportingInterval(int32_t const value) {
  m_ReportingInterval = value;
  m_ReportingIntervalIsSet = true;
}
bool ServiceAccessInformationResource_ClientConsumptionReportingConfiguration::
    reportingIntervalIsSet() const {
  return m_ReportingIntervalIsSet;
}
void ServiceAccessInformationResource_ClientConsumptionReportingConfiguration::
    unsetReportingInterval() {
  m_ReportingIntervalIsSet = false;
}
std::vector<std::string> &
ServiceAccessInformationResource_ClientConsumptionReportingConfiguration::
    getServerAddresses() {
  return m_ServerAddresses;
}
void ServiceAccessInformationResource_ClientConsumptionReportingConfiguration::
    setServerAddresses(std::vector<std::string> const &value) {
  m_ServerAddresses = value;
}
bool ServiceAccessInformationResource_ClientConsumptionReportingConfiguration::
    isLocationReporting() const {
  return m_LocationReporting;
}
void ServiceAccessInformationResource_ClientConsumptionReportingConfiguration::
    setLocationReporting(bool const value) {
  m_LocationReporting = value;
}
double
ServiceAccessInformationResource_ClientConsumptionReportingConfiguration::
    getSamplePercentage() const {
  return m_SamplePercentage;
}
void ServiceAccessInformationResource_ClientConsumptionReportingConfiguration::
    setSamplePercentage(double const value) {
  m_SamplePercentage = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
