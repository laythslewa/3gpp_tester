/**
 * 3gpp-time-sync-exposure
 * API for time synchronization exposure. © 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TimeSyncExposureSubsc.h
 *
 * Contains the Time Synchronization parameters.
 */

#ifndef TimeSyncExposureSubsc_H_
#define TimeSyncExposureSubsc_H_

#include "DistributionMethod.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the Time Synchronization parameters.
/// </summary>
class TimeSyncExposureSubsc {
public:
  TimeSyncExposureSubsc();
  virtual ~TimeSyncExposureSubsc();

  void validate();

  /////////////////////////////////////////////
  /// TimeSyncExposureSubsc members

  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more
  /// information.
  /// </summary>
  std::string getExterGroupId() const;
  void setExterGroupId(std::string const &value);
  bool exterGroupIdIsSet() const;
  void unsetExterGroupId();
  /// <summary>
  /// Contains a list of UE for which the time synchronization capabilities is
  /// requested.
  /// </summary>
  std::map<std::string, std::string> &getGpsis();
  void setGpsis(std::map<std::string, std::string> const &value);
  bool gpsisIsSet() const;
  void unsetGpsis();
  /// <summary>
  ///
  /// </summary>
  DistributionMethod getReqDisMethod() const;
  void setReqDisMethod(DistributionMethod const &value);
  bool reqDisMethodIsSet() const;
  void unsetReqDisMethod();
  /// <summary>
  /// Indicates that the AF requests 5GS to act as a grandmaster for PTP or gPTP
  /// if it is included and set to true.
  /// </summary>
  bool isGmEnable() const;
  void setGmEnable(bool const value);
  bool gmEnableIsSet() const;
  void unsetGmEnable();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getGmPrio() const;
  void setGmPrio(int32_t const value);
  bool gmPrioIsSet() const;
  void unsetGmPrio();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getTimeDom() const;
  void setTimeDom(int32_t const value);
  bool timeDomIsSet() const;
  void unsetTimeDom();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);

  friend void to_json(nlohmann::json &j, const TimeSyncExposureSubsc &o);
  friend void from_json(const nlohmann::json &j, TimeSyncExposureSubsc &o);

protected:
  std::string m_ExterGroupId;
  bool m_ExterGroupIdIsSet;
  std::map<std::string, std::string> m_Gpsis;
  bool m_GpsisIsSet;
  DistributionMethod m_ReqDisMethod;
  bool m_ReqDisMethodIsSet;
  bool m_GmEnable;
  bool m_GmEnableIsSet;
  int32_t m_GmPrio;
  bool m_GmPrioIsSet;
  int32_t m_TimeDom;
  bool m_TimeDomIsSet;
  std::string m_SuppFeat;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* TimeSyncExposureSubsc_H_ */
