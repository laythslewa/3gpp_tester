/**
 * Nhss_EE
 * HSS Event Exposure Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MonitoringConfiguration.h
 *
 * Contains data for each Monitoring Configuration (such as event type, etc.)
 * and the configuration data needed depending on each event type
 */

#ifndef MonitoringConfiguration_H_
#define MonitoringConfiguration_H_

#include "EventType.h"
#include "LocationReportingConfiguration.h"
#include "LossConnectivityConfiguration.h"
#include "PduSessionStatusCfg.h"
#include "ReachabilityForDataConfiguration.h"
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains data for each Monitoring Configuration (such as event type, etc.)
/// and the configuration data needed depending on each event type
/// </summary>
class MonitoringConfiguration {
public:
  MonitoringConfiguration();
  virtual ~MonitoringConfiguration();

  void validate();

  /////////////////////////////////////////////
  /// MonitoringConfiguration members

  /// <summary>
  ///
  /// </summary>
  EventType getEventType() const;
  void setEventType(EventType const &value);
  /// <summary>
  ///
  /// </summary>
  bool isImmediateFlag() const;
  void setImmediateFlag(bool const value);
  bool immediateFlagIsSet() const;
  void unsetImmediateFlag();
  /// <summary>
  ///
  /// </summary>
  LocationReportingConfiguration getLocationReportingConfiguration() const;
  void setLocationReportingConfiguration(
      LocationReportingConfiguration const &value);
  bool locationReportingConfigurationIsSet() const;
  void unsetLocationReportingConfiguration();
  /// <summary>
  ///
  /// </summary>
  LossConnectivityConfiguration getLossConnectivityConfiguration() const;
  void
  setLossConnectivityConfiguration(LossConnectivityConfiguration const &value);
  bool lossConnectivityConfigurationIsSet() const;
  void unsetLossConnectivityConfiguration();
  /// <summary>
  ///
  /// </summary>
  ReachabilityForDataConfiguration getReachabilityForDataConfiguration() const;
  void setReachabilityForDataConfiguration(
      ReachabilityForDataConfiguration const &value);
  bool reachabilityForDataConfigurationIsSet() const;
  void unsetReachabilityForDataConfiguration();
  /// <summary>
  ///
  /// </summary>
  PduSessionStatusCfg getPduSessionStatusCfg() const;
  void setPduSessionStatusCfg(PduSessionStatusCfg const &value);
  bool pduSessionStatusCfgIsSet() const;
  void unsetPduSessionStatusCfg();

  friend void to_json(nlohmann::json &j, const MonitoringConfiguration &o);
  friend void from_json(const nlohmann::json &j, MonitoringConfiguration &o);

protected:
  EventType m_EventType;

  bool m_ImmediateFlag;
  bool m_ImmediateFlagIsSet;
  LocationReportingConfiguration m_LocationReportingConfiguration;
  bool m_LocationReportingConfigurationIsSet;
  LossConnectivityConfiguration m_LossConnectivityConfiguration;
  bool m_LossConnectivityConfigurationIsSet;
  ReachabilityForDataConfiguration m_ReachabilityForDataConfiguration;
  bool m_ReachabilityForDataConfigurationIsSet;
  PduSessionStatusCfg m_PduSessionStatusCfg;
  bool m_PduSessionStatusCfgIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* MonitoringConfiguration_H_ */
