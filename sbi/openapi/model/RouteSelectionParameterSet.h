/**
 * 3gpp-service-parameter
 * API for AF service paramter Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RouteSelectionParameterSet.h
 *
 * Contains parameters that can be used to influence the Route Selection
 * Descriptors of the URSP.
 */

#ifndef RouteSelectionParameterSet_H_
#define RouteSelectionParameterSet_H_

#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains parameters that can be used to influence the Route Selection
/// Descriptors of the URSP.
/// </summary>
class RouteSelectionParameterSet {
public:
  RouteSelectionParameterSet();
  virtual ~RouteSelectionParameterSet();

  void validate();

  /////////////////////////////////////////////
  /// RouteSelectionParameterSet members

  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getPrecedence() const;
  void setPrecedence(int32_t const value);
  bool precedenceIsSet() const;
  void unsetPrecedence();
  /// <summary>
  /// Indicates where the route selection parameters apply. It may correspond to
  /// a geographical area, for example using a geographic zone identifier that
  /// is known to the AF and is configured by the operator to correspond to a
  /// list of Cell Ids or TAIs.
  /// </summary>
  std::vector<std::string> &getSpatialValidity();
  void setSpatialValidity(std::vector<std::string> const &value);
  bool spatialValidityIsSet() const;
  void unsetSpatialValidity();

  friend void to_json(nlohmann::json &j, const RouteSelectionParameterSet &o);
  friend void from_json(const nlohmann::json &j, RouteSelectionParameterSet &o);

protected:
  std::string m_Dnn;
  bool m_DnnIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  int32_t m_Precedence;
  bool m_PrecedenceIsSet;
  std::vector<std::string> m_SpatialValidity;
  bool m_SpatialValidityIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* RouteSelectionParameterSet_H_ */
