/**
 * LMF Location
 * LMF Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MotionEventInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

MotionEventInfo::MotionEventInfo() {
  m_LinearDistance = 0;
  m_OccurrenceInfoIsSet = false;
  m_MinimumInterval = 0;
  m_MinimumIntervalIsSet = false;
  m_MaximumInterval = 0;
  m_MaximumIntervalIsSet = false;
  m_SamplingInterval = 0;
  m_SamplingIntervalIsSet = false;
  m_ReportingDuration = 0;
  m_ReportingDurationIsSet = false;
  m_ReportingLocationReq = false;
  m_ReportingLocationReqIsSet = false;
}

MotionEventInfo::~MotionEventInfo() {}

void MotionEventInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const MotionEventInfo &o) {
  j = nlohmann::json();
  j["linearDistance"] = o.m_LinearDistance;
  if (o.occurrenceInfoIsSet())
    j["occurrenceInfo"] = o.m_OccurrenceInfo;
  if (o.minimumIntervalIsSet())
    j["minimumInterval"] = o.m_MinimumInterval;
  if (o.maximumIntervalIsSet())
    j["maximumInterval"] = o.m_MaximumInterval;
  if (o.samplingIntervalIsSet())
    j["samplingInterval"] = o.m_SamplingInterval;
  if (o.reportingDurationIsSet())
    j["reportingDuration"] = o.m_ReportingDuration;
  if (o.reportingLocationReqIsSet())
    j["reportingLocationReq"] = o.m_ReportingLocationReq;
}

void from_json(const nlohmann::json &j, MotionEventInfo &o) {
  j.at("linearDistance").get_to(o.m_LinearDistance);
  if (j.find("occurrenceInfo") != j.end()) {
    j.at("occurrenceInfo").get_to(o.m_OccurrenceInfo);
    o.m_OccurrenceInfoIsSet = true;
  }
  if (j.find("minimumInterval") != j.end()) {
    j.at("minimumInterval").get_to(o.m_MinimumInterval);
    o.m_MinimumIntervalIsSet = true;
  }
  if (j.find("maximumInterval") != j.end()) {
    j.at("maximumInterval").get_to(o.m_MaximumInterval);
    o.m_MaximumIntervalIsSet = true;
  }
  if (j.find("samplingInterval") != j.end()) {
    j.at("samplingInterval").get_to(o.m_SamplingInterval);
    o.m_SamplingIntervalIsSet = true;
  }
  if (j.find("reportingDuration") != j.end()) {
    j.at("reportingDuration").get_to(o.m_ReportingDuration);
    o.m_ReportingDurationIsSet = true;
  }
  if (j.find("reportingLocationReq") != j.end()) {
    j.at("reportingLocationReq").get_to(o.m_ReportingLocationReq);
    o.m_ReportingLocationReqIsSet = true;
  }
}

int32_t MotionEventInfo::getLinearDistance() const { return m_LinearDistance; }
void MotionEventInfo::setLinearDistance(int32_t const value) {
  m_LinearDistance = value;
}
OccurrenceInfo MotionEventInfo::getOccurrenceInfo() const {
  return m_OccurrenceInfo;
}
void MotionEventInfo::setOccurrenceInfo(OccurrenceInfo const &value) {
  m_OccurrenceInfo = value;
  m_OccurrenceInfoIsSet = true;
}
bool MotionEventInfo::occurrenceInfoIsSet() const {
  return m_OccurrenceInfoIsSet;
}
void MotionEventInfo::unsetOccurrenceInfo() { m_OccurrenceInfoIsSet = false; }
int32_t MotionEventInfo::getMinimumInterval() const {
  return m_MinimumInterval;
}
void MotionEventInfo::setMinimumInterval(int32_t const value) {
  m_MinimumInterval = value;
  m_MinimumIntervalIsSet = true;
}
bool MotionEventInfo::minimumIntervalIsSet() const {
  return m_MinimumIntervalIsSet;
}
void MotionEventInfo::unsetMinimumInterval() { m_MinimumIntervalIsSet = false; }
int32_t MotionEventInfo::getMaximumInterval() const {
  return m_MaximumInterval;
}
void MotionEventInfo::setMaximumInterval(int32_t const value) {
  m_MaximumInterval = value;
  m_MaximumIntervalIsSet = true;
}
bool MotionEventInfo::maximumIntervalIsSet() const {
  return m_MaximumIntervalIsSet;
}
void MotionEventInfo::unsetMaximumInterval() { m_MaximumIntervalIsSet = false; }
int32_t MotionEventInfo::getSamplingInterval() const {
  return m_SamplingInterval;
}
void MotionEventInfo::setSamplingInterval(int32_t const value) {
  m_SamplingInterval = value;
  m_SamplingIntervalIsSet = true;
}
bool MotionEventInfo::samplingIntervalIsSet() const {
  return m_SamplingIntervalIsSet;
}
void MotionEventInfo::unsetSamplingInterval() {
  m_SamplingIntervalIsSet = false;
}
int32_t MotionEventInfo::getReportingDuration() const {
  return m_ReportingDuration;
}
void MotionEventInfo::setReportingDuration(int32_t const value) {
  m_ReportingDuration = value;
  m_ReportingDurationIsSet = true;
}
bool MotionEventInfo::reportingDurationIsSet() const {
  return m_ReportingDurationIsSet;
}
void MotionEventInfo::unsetReportingDuration() {
  m_ReportingDurationIsSet = false;
}
bool MotionEventInfo::isReportingLocationReq() const {
  return m_ReportingLocationReq;
}
void MotionEventInfo::setReportingLocationReq(bool const value) {
  m_ReportingLocationReq = value;
  m_ReportingLocationReqIsSet = true;
}
bool MotionEventInfo::reportingLocationReqIsSet() const {
  return m_ReportingLocationReqIsSet;
}
void MotionEventInfo::unsetReportingLocationReq() {
  m_ReportingLocationReqIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
