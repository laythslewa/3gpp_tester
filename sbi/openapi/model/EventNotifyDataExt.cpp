/**
 * Ngmlc_Location
 * Ngmlc_Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EventNotifyDataExt.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EventNotifyDataExt::EventNotifyDataExt() {
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_Supi = "";
  m_SupiIsSet = false;
  m_LdrReference = "";
  m_LocationEstimateIsSet = false;
  m_CivicAddressIsSet = false;
  m_LocalLocationEstimateIsSet = false;
  m_AgeOfLocationEstimate = 0;
  m_AgeOfLocationEstimateIsSet = false;
  m_PositioningDataListIsSet = false;
  m_GnssPositioningDataListIsSet = false;
  m_LmfIdentification = "";
  m_LmfIdentificationIsSet = false;
  m_AmfId = "";
  m_AmfIdIsSet = false;
  m_TerminationCauseIsSet = false;
  m_VelocityEstimateIsSet = false;
  m_Altitude = 0.0;
  m_AltitudeIsSet = false;
  m_TargetNode = "";
  m_TargetNodeIsSet = false;
  m_AccuracyFulfilmentIndicatorIsSet = false;
  m_FailureCauseIsSet = false;
  m_AddEventDataListIsSet = false;
}

EventNotifyDataExt::~EventNotifyDataExt() {}

void EventNotifyDataExt::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EventNotifyDataExt &o) {
  j = nlohmann::json();
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  j["ldrReference"] = o.m_LdrReference;
  j["eventNotifyDataType"] = o.m_EventNotifyDataType;
  if (o.locationEstimateIsSet())
    j["locationEstimate"] = o.m_LocationEstimate;
  if (o.civicAddressIsSet())
    j["civicAddress"] = o.m_CivicAddress;
  if (o.localLocationEstimateIsSet())
    j["localLocationEstimate"] = o.m_LocalLocationEstimate;
  if (o.ageOfLocationEstimateIsSet())
    j["ageOfLocationEstimate"] = o.m_AgeOfLocationEstimate;
  if (o.positioningDataListIsSet() || !o.m_PositioningDataList.empty())
    j["positioningDataList"] = o.m_PositioningDataList;
  if (o.gnssPositioningDataListIsSet() || !o.m_GnssPositioningDataList.empty())
    j["gnssPositioningDataList"] = o.m_GnssPositioningDataList;
  if (o.lmfIdentificationIsSet())
    j["lmfIdentification"] = o.m_LmfIdentification;
  if (o.amfIdIsSet())
    j["amfId"] = o.m_AmfId;
  if (o.terminationCauseIsSet())
    j["terminationCause"] = o.m_TerminationCause;
  if (o.velocityEstimateIsSet())
    j["velocityEstimate"] = o.m_VelocityEstimate;
  if (o.altitudeIsSet())
    j["altitude"] = o.m_Altitude;
  if (o.targetNodeIsSet())
    j["targetNode"] = o.m_TargetNode;
  if (o.accuracyFulfilmentIndicatorIsSet())
    j["accuracyFulfilmentIndicator"] = o.m_AccuracyFulfilmentIndicator;
  if (o.failureCauseIsSet())
    j["failureCause"] = o.m_FailureCause;
  if (o.addEventDataListIsSet() || !o.m_AddEventDataList.empty())
    j["addEventDataList"] = o.m_AddEventDataList;
}

void from_json(const nlohmann::json &j, EventNotifyDataExt &o) {
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  j.at("ldrReference").get_to(o.m_LdrReference);
  j.at("eventNotifyDataType").get_to(o.m_EventNotifyDataType);
  if (j.find("locationEstimate") != j.end()) {
    j.at("locationEstimate").get_to(o.m_LocationEstimate);
    o.m_LocationEstimateIsSet = true;
  }
  if (j.find("civicAddress") != j.end()) {
    j.at("civicAddress").get_to(o.m_CivicAddress);
    o.m_CivicAddressIsSet = true;
  }
  if (j.find("localLocationEstimate") != j.end()) {
    j.at("localLocationEstimate").get_to(o.m_LocalLocationEstimate);
    o.m_LocalLocationEstimateIsSet = true;
  }
  if (j.find("ageOfLocationEstimate") != j.end()) {
    j.at("ageOfLocationEstimate").get_to(o.m_AgeOfLocationEstimate);
    o.m_AgeOfLocationEstimateIsSet = true;
  }
  if (j.find("positioningDataList") != j.end()) {
    j.at("positioningDataList").get_to(o.m_PositioningDataList);
    o.m_PositioningDataListIsSet = true;
  }
  if (j.find("gnssPositioningDataList") != j.end()) {
    j.at("gnssPositioningDataList").get_to(o.m_GnssPositioningDataList);
    o.m_GnssPositioningDataListIsSet = true;
  }
  if (j.find("lmfIdentification") != j.end()) {
    j.at("lmfIdentification").get_to(o.m_LmfIdentification);
    o.m_LmfIdentificationIsSet = true;
  }
  if (j.find("amfId") != j.end()) {
    j.at("amfId").get_to(o.m_AmfId);
    o.m_AmfIdIsSet = true;
  }
  if (j.find("terminationCause") != j.end()) {
    j.at("terminationCause").get_to(o.m_TerminationCause);
    o.m_TerminationCauseIsSet = true;
  }
  if (j.find("velocityEstimate") != j.end()) {
    j.at("velocityEstimate").get_to(o.m_VelocityEstimate);
    o.m_VelocityEstimateIsSet = true;
  }
  if (j.find("altitude") != j.end()) {
    j.at("altitude").get_to(o.m_Altitude);
    o.m_AltitudeIsSet = true;
  }
  if (j.find("targetNode") != j.end()) {
    j.at("targetNode").get_to(o.m_TargetNode);
    o.m_TargetNodeIsSet = true;
  }
  if (j.find("accuracyFulfilmentIndicator") != j.end()) {
    j.at("accuracyFulfilmentIndicator").get_to(o.m_AccuracyFulfilmentIndicator);
    o.m_AccuracyFulfilmentIndicatorIsSet = true;
  }
  if (j.find("failureCause") != j.end()) {
    j.at("failureCause").get_to(o.m_FailureCause);
    o.m_FailureCauseIsSet = true;
  }
  if (j.find("addEventDataList") != j.end()) {
    j.at("addEventDataList").get_to(o.m_AddEventDataList);
    o.m_AddEventDataListIsSet = true;
  }
}

std::string EventNotifyDataExt::getGpsi() const { return m_Gpsi; }
void EventNotifyDataExt::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool EventNotifyDataExt::gpsiIsSet() const { return m_GpsiIsSet; }
void EventNotifyDataExt::unsetGpsi() { m_GpsiIsSet = false; }
std::string EventNotifyDataExt::getSupi() const { return m_Supi; }
void EventNotifyDataExt::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool EventNotifyDataExt::supiIsSet() const { return m_SupiIsSet; }
void EventNotifyDataExt::unsetSupi() { m_SupiIsSet = false; }
std::string EventNotifyDataExt::getLdrReference() const {
  return m_LdrReference;
}
void EventNotifyDataExt::setLdrReference(std::string const &value) {
  m_LdrReference = value;
}
EventNotifyDataType EventNotifyDataExt::getEventNotifyDataType() const {
  return m_EventNotifyDataType;
}
void EventNotifyDataExt::setEventNotifyDataType(
    EventNotifyDataType const &value) {
  m_EventNotifyDataType = value;
}
GeographicArea EventNotifyDataExt::getLocationEstimate() const {
  return m_LocationEstimate;
}
void EventNotifyDataExt::setLocationEstimate(GeographicArea const &value) {
  m_LocationEstimate = value;
  m_LocationEstimateIsSet = true;
}
bool EventNotifyDataExt::locationEstimateIsSet() const {
  return m_LocationEstimateIsSet;
}
void EventNotifyDataExt::unsetLocationEstimate() {
  m_LocationEstimateIsSet = false;
}
CivicAddress EventNotifyDataExt::getCivicAddress() const {
  return m_CivicAddress;
}
void EventNotifyDataExt::setCivicAddress(CivicAddress const &value) {
  m_CivicAddress = value;
  m_CivicAddressIsSet = true;
}
bool EventNotifyDataExt::civicAddressIsSet() const {
  return m_CivicAddressIsSet;
}
void EventNotifyDataExt::unsetCivicAddress() { m_CivicAddressIsSet = false; }
LocalArea EventNotifyDataExt::getLocalLocationEstimate() const {
  return m_LocalLocationEstimate;
}
void EventNotifyDataExt::setLocalLocationEstimate(LocalArea const &value) {
  m_LocalLocationEstimate = value;
  m_LocalLocationEstimateIsSet = true;
}
bool EventNotifyDataExt::localLocationEstimateIsSet() const {
  return m_LocalLocationEstimateIsSet;
}
void EventNotifyDataExt::unsetLocalLocationEstimate() {
  m_LocalLocationEstimateIsSet = false;
}
int32_t EventNotifyDataExt::getAgeOfLocationEstimate() const {
  return m_AgeOfLocationEstimate;
}
void EventNotifyDataExt::setAgeOfLocationEstimate(int32_t const value) {
  m_AgeOfLocationEstimate = value;
  m_AgeOfLocationEstimateIsSet = true;
}
bool EventNotifyDataExt::ageOfLocationEstimateIsSet() const {
  return m_AgeOfLocationEstimateIsSet;
}
void EventNotifyDataExt::unsetAgeOfLocationEstimate() {
  m_AgeOfLocationEstimateIsSet = false;
}
std::vector<PositioningMethodAndUsage> &
EventNotifyDataExt::getPositioningDataList() {
  return m_PositioningDataList;
}
void EventNotifyDataExt::setPositioningDataList(
    std::vector<PositioningMethodAndUsage> const &value) {
  m_PositioningDataList = value;
  m_PositioningDataListIsSet = true;
}
bool EventNotifyDataExt::positioningDataListIsSet() const {
  return m_PositioningDataListIsSet;
}
void EventNotifyDataExt::unsetPositioningDataList() {
  m_PositioningDataListIsSet = false;
}
std::vector<GnssPositioningMethodAndUsage> &
EventNotifyDataExt::getGnssPositioningDataList() {
  return m_GnssPositioningDataList;
}
void EventNotifyDataExt::setGnssPositioningDataList(
    std::vector<GnssPositioningMethodAndUsage> const &value) {
  m_GnssPositioningDataList = value;
  m_GnssPositioningDataListIsSet = true;
}
bool EventNotifyDataExt::gnssPositioningDataListIsSet() const {
  return m_GnssPositioningDataListIsSet;
}
void EventNotifyDataExt::unsetGnssPositioningDataList() {
  m_GnssPositioningDataListIsSet = false;
}
std::string EventNotifyDataExt::getLmfIdentification() const {
  return m_LmfIdentification;
}
void EventNotifyDataExt::setLmfIdentification(std::string const &value) {
  m_LmfIdentification = value;
  m_LmfIdentificationIsSet = true;
}
bool EventNotifyDataExt::lmfIdentificationIsSet() const {
  return m_LmfIdentificationIsSet;
}
void EventNotifyDataExt::unsetLmfIdentification() {
  m_LmfIdentificationIsSet = false;
}
std::string EventNotifyDataExt::getAmfId() const { return m_AmfId; }
void EventNotifyDataExt::setAmfId(std::string const &value) {
  m_AmfId = value;
  m_AmfIdIsSet = true;
}
bool EventNotifyDataExt::amfIdIsSet() const { return m_AmfIdIsSet; }
void EventNotifyDataExt::unsetAmfId() { m_AmfIdIsSet = false; }
TerminationCause EventNotifyDataExt::getTerminationCause() const {
  return m_TerminationCause;
}
void EventNotifyDataExt::setTerminationCause(TerminationCause const &value) {
  m_TerminationCause = value;
  m_TerminationCauseIsSet = true;
}
bool EventNotifyDataExt::terminationCauseIsSet() const {
  return m_TerminationCauseIsSet;
}
void EventNotifyDataExt::unsetTerminationCause() {
  m_TerminationCauseIsSet = false;
}
VelocityEstimate EventNotifyDataExt::getVelocityEstimate() const {
  return m_VelocityEstimate;
}
void EventNotifyDataExt::setVelocityEstimate(VelocityEstimate const &value) {
  m_VelocityEstimate = value;
  m_VelocityEstimateIsSet = true;
}
bool EventNotifyDataExt::velocityEstimateIsSet() const {
  return m_VelocityEstimateIsSet;
}
void EventNotifyDataExt::unsetVelocityEstimate() {
  m_VelocityEstimateIsSet = false;
}
double EventNotifyDataExt::getAltitude() const { return m_Altitude; }
void EventNotifyDataExt::setAltitude(double const value) {
  m_Altitude = value;
  m_AltitudeIsSet = true;
}
bool EventNotifyDataExt::altitudeIsSet() const { return m_AltitudeIsSet; }
void EventNotifyDataExt::unsetAltitude() { m_AltitudeIsSet = false; }
std::string EventNotifyDataExt::getTargetNode() const { return m_TargetNode; }
void EventNotifyDataExt::setTargetNode(std::string const &value) {
  m_TargetNode = value;
  m_TargetNodeIsSet = true;
}
bool EventNotifyDataExt::targetNodeIsSet() const { return m_TargetNodeIsSet; }
void EventNotifyDataExt::unsetTargetNode() { m_TargetNodeIsSet = false; }
AccuracyFulfilmentIndicator
EventNotifyDataExt::getAccuracyFulfilmentIndicator() const {
  return m_AccuracyFulfilmentIndicator;
}
void EventNotifyDataExt::setAccuracyFulfilmentIndicator(
    AccuracyFulfilmentIndicator const &value) {
  m_AccuracyFulfilmentIndicator = value;
  m_AccuracyFulfilmentIndicatorIsSet = true;
}
bool EventNotifyDataExt::accuracyFulfilmentIndicatorIsSet() const {
  return m_AccuracyFulfilmentIndicatorIsSet;
}
void EventNotifyDataExt::unsetAccuracyFulfilmentIndicator() {
  m_AccuracyFulfilmentIndicatorIsSet = false;
}
FailureCause EventNotifyDataExt::getFailureCause() const {
  return m_FailureCause;
}
void EventNotifyDataExt::setFailureCause(FailureCause const &value) {
  m_FailureCause = value;
  m_FailureCauseIsSet = true;
}
bool EventNotifyDataExt::failureCauseIsSet() const {
  return m_FailureCauseIsSet;
}
void EventNotifyDataExt::unsetFailureCause() { m_FailureCauseIsSet = false; }
std::vector<EventNotifyData> &EventNotifyDataExt::getAddEventDataList() {
  return m_AddEventDataList;
}
void EventNotifyDataExt::setAddEventDataList(
    std::vector<EventNotifyData> const &value) {
  m_AddEventDataList = value;
  m_AddEventDataListIsSet = true;
}
bool EventNotifyDataExt::addEventDataListIsSet() const {
  return m_AddEventDataListIsSet;
}
void EventNotifyDataExt::unsetAddEventDataList() {
  m_AddEventDataListIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
