/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PpProfileData.h
 *
 *
 */

#ifndef PpProfileData_H_
#define PpProfileData_H_

#include "AllowedMtcProviderInfo.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class PpProfileData {
public:
  PpProfileData();
  virtual ~PpProfileData();

  void validate();

  /////////////////////////////////////////////
  /// PpProfileData members

  /// <summary>
  /// A map (list of key-value pairs where PpDataType serves as key) of
  /// AllowedMtcProviderInfo lists. In addition to defined PpDataType, the key
  /// value \&quot;ALL\&quot; may be used to identify a map entry which contains
  /// a list of AllowedMtcProviderInfo that are allowed to provision all types
  /// of the PP data for the user using UDM ParameterProvision service.
  /// </summary>
  std::map<std::string, std::vector<AllowedMtcProviderInfo>> &
  getAllowedMtcProviders();
  void setAllowedMtcProviders(
      std::map<std::string, std::vector<AllowedMtcProviderInfo>> const &value);
  bool allowedMtcProvidersIsSet() const;
  void unsetAllowedMtcProviders();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  friend void to_json(nlohmann::json &j, const PpProfileData &o);
  friend void from_json(const nlohmann::json &j, PpProfileData &o);

protected:
  std::map<std::string, std::vector<AllowedMtcProviderInfo>>
      m_AllowedMtcProviders;
  bool m_AllowedMtcProvidersIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PpProfileData_H_ */
