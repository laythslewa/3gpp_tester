/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RuleReport.h
 *
 * Reports the status of PCC.
 */

#ifndef RuleReport_H_
#define RuleReport_H_

#include "FailureCode.h"
#include "FinalUnitAction.h"
#include "RanNasRelCause.h"
#include "RuleStatus.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Reports the status of PCC.
/// </summary>
class RuleReport {
public:
  RuleReport();
  virtual ~RuleReport();

  void validate();

  /////////////////////////////////////////////
  /// RuleReport members

  /// <summary>
  /// Contains the identifier of the affected PCC rule(s).
  /// </summary>
  std::vector<std::string> &getPccRuleIds();
  void setPccRuleIds(std::vector<std::string> const &value);
  /// <summary>
  ///
  /// </summary>
  RuleStatus getRuleStatus() const;
  void setRuleStatus(RuleStatus const &value);
  /// <summary>
  /// Indicates the version of a PCC rule.
  /// </summary>
  std::vector<int32_t> &getContVers();
  void setContVers(std::vector<int32_t> const value);
  bool contVersIsSet() const;
  void unsetContVers();
  /// <summary>
  ///
  /// </summary>
  FailureCode getFailureCode() const;
  void setFailureCode(FailureCode const &value);
  bool failureCodeIsSet() const;
  void unsetFailureCode();
  /// <summary>
  ///
  /// </summary>
  FinalUnitAction getFinUnitAct() const;
  void setFinUnitAct(FinalUnitAction const &value);
  bool finUnitActIsSet() const;
  void unsetFinUnitAct();
  /// <summary>
  /// indicates the RAN or NAS release cause code information.
  /// </summary>
  std::vector<RanNasRelCause> &getRanNasRelCauses();
  void setRanNasRelCauses(std::vector<RanNasRelCause> const &value);
  bool ranNasRelCausesIsSet() const;
  void unsetRanNasRelCauses();
  /// <summary>
  ///
  /// </summary>
  std::string getAltQosParamId() const;
  void setAltQosParamId(std::string const &value);
  bool altQosParamIdIsSet() const;
  void unsetAltQosParamId();

  friend void to_json(nlohmann::json &j, const RuleReport &o);
  friend void from_json(const nlohmann::json &j, RuleReport &o);

protected:
  std::vector<std::string> m_PccRuleIds;

  RuleStatus m_RuleStatus;

  std::vector<int32_t> m_ContVers;
  bool m_ContVersIsSet;
  FailureCode m_FailureCode;
  bool m_FailureCodeIsSet;
  FinalUnitAction m_FinUnitAct;
  bool m_FinUnitActIsSet;
  std::vector<RanNasRelCause> m_RanNasRelCauses;
  bool m_RanNasRelCausesIsSet;
  std::string m_AltQosParamId;
  bool m_AltQosParamIdIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* RuleReport_H_ */
