/**
 * Nudm_EE
 * Nudm Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ReachabilityReport.h
 *
 *
 */

#ifndef ReachabilityReport_H_
#define ReachabilityReport_H_

#include "AccessType.h"
#include "UeReachability.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class ReachabilityReport {
public:
  ReachabilityReport();
  virtual ~ReachabilityReport();

  void validate();

  /////////////////////////////////////////////
  /// ReachabilityReport members

  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getAmfInstanceId() const;
  void setAmfInstanceId(std::string const &value);
  bool amfInstanceIdIsSet() const;
  void unsetAmfInstanceId();
  /// <summary>
  ///
  /// </summary>
  std::vector<AccessType> &getAccessTypeList();
  void setAccessTypeList(std::vector<AccessType> const &value);
  bool accessTypeListIsSet() const;
  void unsetAccessTypeList();
  /// <summary>
  ///
  /// </summary>
  UeReachability getReachability() const;
  void setReachability(UeReachability const &value);
  bool reachabilityIsSet() const;
  void unsetReachability();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getMaxAvailabilityTime() const;
  void setMaxAvailabilityTime(std::string const &value);
  bool maxAvailabilityTimeIsSet() const;
  void unsetMaxAvailabilityTime();

  friend void to_json(nlohmann::json &j, const ReachabilityReport &o);
  friend void from_json(const nlohmann::json &j, ReachabilityReport &o);

protected:
  std::string m_AmfInstanceId;
  bool m_AmfInstanceIdIsSet;
  std::vector<AccessType> m_AccessTypeList;
  bool m_AccessTypeListIsSet;
  UeReachability m_Reachability;
  bool m_ReachabilityIsSet;
  std::string m_MaxAvailabilityTime;
  bool m_MaxAvailabilityTimeIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ReachabilityReport_H_ */
