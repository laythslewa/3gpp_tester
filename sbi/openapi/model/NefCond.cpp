/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NefCond.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NefCond::NefCond() {
  m_ConditionType = "";
  m_AfEventsIsSet = false;
  m_SnssaiListIsSet = false;
  m_PfdDataIsSet = false;
  m_GpsiRangesIsSet = false;
  m_ExternalGroupIdentifiersRangesIsSet = false;
  m_ServedFqdnListIsSet = false;
}

NefCond::~NefCond() {}

void NefCond::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NefCond &o) {
  j = nlohmann::json();
  j["conditionType"] = o.m_ConditionType;
  if (o.afEventsIsSet() || !o.m_AfEvents.empty())
    j["afEvents"] = o.m_AfEvents;
  if (o.snssaiListIsSet() || !o.m_SnssaiList.empty())
    j["snssaiList"] = o.m_SnssaiList;
  if (o.pfdDataIsSet())
    j["pfdData"] = o.m_PfdData;
  if (o.gpsiRangesIsSet() || !o.m_GpsiRanges.empty())
    j["gpsiRanges"] = o.m_GpsiRanges;
  if (o.externalGroupIdentifiersRangesIsSet() ||
      !o.m_ExternalGroupIdentifiersRanges.empty())
    j["externalGroupIdentifiersRanges"] = o.m_ExternalGroupIdentifiersRanges;
  if (o.servedFqdnListIsSet() || !o.m_ServedFqdnList.empty())
    j["servedFqdnList"] = o.m_ServedFqdnList;
}

void from_json(const nlohmann::json &j, NefCond &o) {
  j.at("conditionType").get_to(o.m_ConditionType);
  if (j.find("afEvents") != j.end()) {
    j.at("afEvents").get_to(o.m_AfEvents);
    o.m_AfEventsIsSet = true;
  }
  if (j.find("snssaiList") != j.end()) {
    j.at("snssaiList").get_to(o.m_SnssaiList);
    o.m_SnssaiListIsSet = true;
  }
  if (j.find("pfdData") != j.end()) {
    j.at("pfdData").get_to(o.m_PfdData);
    o.m_PfdDataIsSet = true;
  }
  if (j.find("gpsiRanges") != j.end()) {
    j.at("gpsiRanges").get_to(o.m_GpsiRanges);
    o.m_GpsiRangesIsSet = true;
  }
  if (j.find("externalGroupIdentifiersRanges") != j.end()) {
    j.at("externalGroupIdentifiersRanges")
        .get_to(o.m_ExternalGroupIdentifiersRanges);
    o.m_ExternalGroupIdentifiersRangesIsSet = true;
  }
  if (j.find("servedFqdnList") != j.end()) {
    j.at("servedFqdnList").get_to(o.m_ServedFqdnList);
    o.m_ServedFqdnListIsSet = true;
  }
}

std::string NefCond::getConditionType() const { return m_ConditionType; }
void NefCond::setConditionType(std::string const &value) {
  m_ConditionType = value;
}
std::vector<AfEvent> &NefCond::getAfEvents() { return m_AfEvents; }
void NefCond::setAfEvents(std::vector<AfEvent> const &value) {
  m_AfEvents = value;
  m_AfEventsIsSet = true;
}
bool NefCond::afEventsIsSet() const { return m_AfEventsIsSet; }
void NefCond::unsetAfEvents() { m_AfEventsIsSet = false; }
std::vector<Snssai> &NefCond::getSnssaiList() { return m_SnssaiList; }
void NefCond::setSnssaiList(std::vector<Snssai> const &value) {
  m_SnssaiList = value;
  m_SnssaiListIsSet = true;
}
bool NefCond::snssaiListIsSet() const { return m_SnssaiListIsSet; }
void NefCond::unsetSnssaiList() { m_SnssaiListIsSet = false; }
PfdData NefCond::getPfdData() const { return m_PfdData; }
void NefCond::setPfdData(PfdData const &value) {
  m_PfdData = value;
  m_PfdDataIsSet = true;
}
bool NefCond::pfdDataIsSet() const { return m_PfdDataIsSet; }
void NefCond::unsetPfdData() { m_PfdDataIsSet = false; }
std::vector<IdentityRange> &NefCond::getGpsiRanges() { return m_GpsiRanges; }
void NefCond::setGpsiRanges(std::vector<IdentityRange> const &value) {
  m_GpsiRanges = value;
  m_GpsiRangesIsSet = true;
}
bool NefCond::gpsiRangesIsSet() const { return m_GpsiRangesIsSet; }
void NefCond::unsetGpsiRanges() { m_GpsiRangesIsSet = false; }
std::vector<IdentityRange> &NefCond::getExternalGroupIdentifiersRanges() {
  return m_ExternalGroupIdentifiersRanges;
}
void NefCond::setExternalGroupIdentifiersRanges(
    std::vector<IdentityRange> const &value) {
  m_ExternalGroupIdentifiersRanges = value;
  m_ExternalGroupIdentifiersRangesIsSet = true;
}
bool NefCond::externalGroupIdentifiersRangesIsSet() const {
  return m_ExternalGroupIdentifiersRangesIsSet;
}
void NefCond::unsetExternalGroupIdentifiersRanges() {
  m_ExternalGroupIdentifiersRangesIsSet = false;
}
std::vector<std::string> &NefCond::getServedFqdnList() {
  return m_ServedFqdnList;
}
void NefCond::setServedFqdnList(std::vector<std::string> const &value) {
  m_ServedFqdnList = value;
  m_ServedFqdnListIsSet = true;
}
bool NefCond::servedFqdnListIsSet() const { return m_ServedFqdnListIsSet; }
void NefCond::unsetServedFqdnList() { m_ServedFqdnListIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
