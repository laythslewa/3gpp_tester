/**
 * GMDviaMBMSbyxMB
 * API for Group Message Delivery via MBMS by xMB Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * GMDViaMBMSByxMB.h
 *
 * Represents a group message delivery via MBMS by xMB.
 */

#ifndef GMDViaMBMSByxMB_H_
#define GMDViaMBMSByxMB_H_

#include "MbmsLocArea.h"
#include "WebsockNotifConfig.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a group message delivery via MBMS by xMB.
/// </summary>
class GMDViaMBMSByxMB {
public:
  GMDViaMBMSByxMB();
  virtual ~GMDViaMBMSByxMB();

  void validate();

  /////////////////////////////////////////////
  /// GMDViaMBMSByxMB members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const &value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getNotificationDestination() const;
  void setNotificationDestination(std::string const &value);
  /// <summary>
  /// Set to true by the SCS/AS to request the SCEF to send a test notification
  /// as defined in subclause 5.2.5.3. Set to false or omitted otherwise.
  /// </summary>
  bool isRequestTestNotification() const;
  void setRequestTestNotification(bool const value);
  bool requestTestNotificationIsSet() const;
  void unsetRequestTestNotification();
  /// <summary>
  ///
  /// </summary>
  WebsockNotifConfig getWebsockNotifConfig() const;
  void setWebsockNotifConfig(WebsockNotifConfig const &value);
  bool websockNotifConfigIsSet() const;
  void unsetWebsockNotifConfig();
  /// <summary>
  ///
  /// </summary>
  MbmsLocArea getMbmsLocArea() const;
  void setMbmsLocArea(MbmsLocArea const &value);
  bool mbmsLocAreaIsSet() const;
  void unsetMbmsLocArea();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getMessageDeliveryStartTime() const;
  void setMessageDeliveryStartTime(std::string const &value);
  bool messageDeliveryStartTimeIsSet() const;
  void unsetMessageDeliveryStartTime();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getMessageDeliveryStopTime() const;
  void setMessageDeliveryStopTime(std::string const &value);
  bool messageDeliveryStopTimeIsSet() const;
  void unsetMessageDeliveryStopTime();
  /// <summary>
  /// String with format \&quot;byte\&quot; as defined in OpenAPI Specification,
  /// i.e, base64-encoded characters.
  /// </summary>
  std::string getGroupMessagePayload() const;
  void setGroupMessagePayload(std::string const &value);
  bool groupMessagePayloadIsSet() const;
  void unsetGroupMessagePayload();
  /// <summary>
  /// string identifying a Ipv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in IETF RFC 1166, with
  /// \&quot;readOnly&#x3D;true\&quot; property.
  /// </summary>
  std::string getScefMessageDeliveryIPv4() const;
  void setScefMessageDeliveryIPv4(std::string const &value);
  bool scefMessageDeliveryIPv4IsSet() const;
  void unsetScefMessageDeliveryIPv4();
  /// <summary>
  /// string identifying a Ipv6 address formatted according to clause 4 in IETF
  /// RFC 5952, with \&quot;readOnly&#x3D;true\&quot; property. The mixed Ipv4
  /// Ipv6 notation according to clause 5 of IETF RFC 5952 shall not be used.
  /// </summary>
  std::string getScefMessageDeliveryIPv6() const;
  void setScefMessageDeliveryIPv6(std::string const &value);
  bool scefMessageDeliveryIPv6IsSet() const;
  void unsetScefMessageDeliveryIPv6();
  /// <summary>
  /// Unsigned integer with valid values between 0 and 65535, with
  /// \&quot;readOnly&#x3D;true\&quot; property.
  /// </summary>
  int32_t getScefMessageDeliveryPort() const;
  void setScefMessageDeliveryPort(int32_t const value);
  bool scefMessageDeliveryPortIsSet() const;
  void unsetScefMessageDeliveryPort();

  friend void to_json(nlohmann::json &j, const GMDViaMBMSByxMB &o);
  friend void from_json(const nlohmann::json &j, GMDViaMBMSByxMB &o);

protected:
  std::string m_Self;
  bool m_SelfIsSet;
  std::string m_NotificationDestination;

  bool m_RequestTestNotification;
  bool m_RequestTestNotificationIsSet;
  WebsockNotifConfig m_WebsockNotifConfig;
  bool m_WebsockNotifConfigIsSet;
  MbmsLocArea m_MbmsLocArea;
  bool m_MbmsLocAreaIsSet;
  std::string m_MessageDeliveryStartTime;
  bool m_MessageDeliveryStartTimeIsSet;
  std::string m_MessageDeliveryStopTime;
  bool m_MessageDeliveryStopTimeIsSet;
  std::string m_GroupMessagePayload;
  bool m_GroupMessagePayloadIsSet;
  std::string m_ScefMessageDeliveryIPv4;
  bool m_ScefMessageDeliveryIPv4IsSet;
  std::string m_ScefMessageDeliveryIPv6;
  bool m_ScefMessageDeliveryIPv6IsSet;
  int32_t m_ScefMessageDeliveryPort;
  bool m_ScefMessageDeliveryPortIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* GMDViaMBMSByxMB_H_ */
