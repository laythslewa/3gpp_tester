/**
 * CAPIF_Logging_API_Invocation_API
 * API for invocation logs. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "Log.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Log::Log() {
  m_ApiId = "";
  m_ApiName = "";
  m_ApiVersion = "";
  m_ResourceName = "";
  m_Uri = "";
  m_UriIsSet = false;
  m_OperationIsSet = false;
  m_Result = "";
  m_InvocationTime = "";
  m_InvocationTimeIsSet = false;
  m_InvocationLatency = 0;
  m_InvocationLatencyIsSet = false;
  m_InputParametersIsSet = false;
  m_OutputParametersIsSet = false;
  m_SrcInterfaceIsSet = false;
  m_DestInterfaceIsSet = false;
  m_FwdInterface = "";
  m_FwdInterfaceIsSet = false;
}

Log::~Log() {}

void Log::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const Log &o) {
  j = nlohmann::json();
  j["apiId"] = o.m_ApiId;
  j["apiName"] = o.m_ApiName;
  j["apiVersion"] = o.m_ApiVersion;
  j["resourceName"] = o.m_ResourceName;
  if (o.uriIsSet())
    j["uri"] = o.m_Uri;
  j["protocol"] = o.m_Protocol;
  if (o.operationIsSet())
    j["operation"] = o.m_Operation;
  j["result"] = o.m_Result;
  if (o.invocationTimeIsSet())
    j["invocationTime"] = o.m_InvocationTime;
  if (o.invocationLatencyIsSet())
    j["invocationLatency"] = o.m_InvocationLatency;
  if (o.inputParametersIsSet())
    j["inputParameters"] = o.m_InputParameters;
  if (o.outputParametersIsSet())
    j["outputParameters"] = o.m_OutputParameters;
  if (o.srcInterfaceIsSet())
    j["srcInterface"] = o.m_SrcInterface;
  if (o.destInterfaceIsSet())
    j["destInterface"] = o.m_DestInterface;
  if (o.fwdInterfaceIsSet())
    j["fwdInterface"] = o.m_FwdInterface;
}

void from_json(const nlohmann::json &j, Log &o) {
  j.at("apiId").get_to(o.m_ApiId);
  j.at("apiName").get_to(o.m_ApiName);
  j.at("apiVersion").get_to(o.m_ApiVersion);
  j.at("resourceName").get_to(o.m_ResourceName);
  if (j.find("uri") != j.end()) {
    j.at("uri").get_to(o.m_Uri);
    o.m_UriIsSet = true;
  }
  j.at("protocol").get_to(o.m_Protocol);
  if (j.find("operation") != j.end()) {
    j.at("operation").get_to(o.m_Operation);
    o.m_OperationIsSet = true;
  }
  j.at("result").get_to(o.m_Result);
  if (j.find("invocationTime") != j.end()) {
    j.at("invocationTime").get_to(o.m_InvocationTime);
    o.m_InvocationTimeIsSet = true;
  }
  if (j.find("invocationLatency") != j.end()) {
    j.at("invocationLatency").get_to(o.m_InvocationLatency);
    o.m_InvocationLatencyIsSet = true;
  }
  if (j.find("inputParameters") != j.end()) {
    j.at("inputParameters").get_to(o.m_InputParameters);
    o.m_InputParametersIsSet = true;
  }
  if (j.find("outputParameters") != j.end()) {
    j.at("outputParameters").get_to(o.m_OutputParameters);
    o.m_OutputParametersIsSet = true;
  }
  if (j.find("srcInterface") != j.end()) {
    j.at("srcInterface").get_to(o.m_SrcInterface);
    o.m_SrcInterfaceIsSet = true;
  }
  if (j.find("destInterface") != j.end()) {
    j.at("destInterface").get_to(o.m_DestInterface);
    o.m_DestInterfaceIsSet = true;
  }
  if (j.find("fwdInterface") != j.end()) {
    j.at("fwdInterface").get_to(o.m_FwdInterface);
    o.m_FwdInterfaceIsSet = true;
  }
}

std::string Log::getApiId() const { return m_ApiId; }
void Log::setApiId(std::string const &value) { m_ApiId = value; }
std::string Log::getApiName() const { return m_ApiName; }
void Log::setApiName(std::string const &value) { m_ApiName = value; }
std::string Log::getApiVersion() const { return m_ApiVersion; }
void Log::setApiVersion(std::string const &value) { m_ApiVersion = value; }
std::string Log::getResourceName() const { return m_ResourceName; }
void Log::setResourceName(std::string const &value) { m_ResourceName = value; }
std::string Log::getUri() const { return m_Uri; }
void Log::setUri(std::string const &value) {
  m_Uri = value;
  m_UriIsSet = true;
}
bool Log::uriIsSet() const { return m_UriIsSet; }
void Log::unsetUri() { m_UriIsSet = false; }
Protocol Log::getProtocol() const { return m_Protocol; }
void Log::setProtocol(Protocol const &value) { m_Protocol = value; }
Operation Log::getOperation() const { return m_Operation; }
void Log::setOperation(Operation const &value) {
  m_Operation = value;
  m_OperationIsSet = true;
}
bool Log::operationIsSet() const { return m_OperationIsSet; }
void Log::unsetOperation() { m_OperationIsSet = false; }
std::string Log::getResult() const { return m_Result; }
void Log::setResult(std::string const &value) { m_Result = value; }
std::string Log::getInvocationTime() const { return m_InvocationTime; }
void Log::setInvocationTime(std::string const &value) {
  m_InvocationTime = value;
  m_InvocationTimeIsSet = true;
}
bool Log::invocationTimeIsSet() const { return m_InvocationTimeIsSet; }
void Log::unsetInvocationTime() { m_InvocationTimeIsSet = false; }
int32_t Log::getInvocationLatency() const { return m_InvocationLatency; }
void Log::setInvocationLatency(int32_t const value) {
  m_InvocationLatency = value;
  m_InvocationLatencyIsSet = true;
}
bool Log::invocationLatencyIsSet() const { return m_InvocationLatencyIsSet; }
void Log::unsetInvocationLatency() { m_InvocationLatencyIsSet = false; }
AnyType Log::getInputParameters() const { return m_InputParameters; }
void Log::setInputParameters(AnyType const &value) {
  m_InputParameters = value;
  m_InputParametersIsSet = true;
}
bool Log::inputParametersIsSet() const { return m_InputParametersIsSet; }
void Log::unsetInputParameters() { m_InputParametersIsSet = false; }
AnyType Log::getOutputParameters() const { return m_OutputParameters; }
void Log::setOutputParameters(AnyType const &value) {
  m_OutputParameters = value;
  m_OutputParametersIsSet = true;
}
bool Log::outputParametersIsSet() const { return m_OutputParametersIsSet; }
void Log::unsetOutputParameters() { m_OutputParametersIsSet = false; }
InterfaceDescription Log::getSrcInterface() const { return m_SrcInterface; }
void Log::setSrcInterface(InterfaceDescription const &value) {
  m_SrcInterface = value;
  m_SrcInterfaceIsSet = true;
}
bool Log::srcInterfaceIsSet() const { return m_SrcInterfaceIsSet; }
void Log::unsetSrcInterface() { m_SrcInterfaceIsSet = false; }
InterfaceDescription Log::getDestInterface() const { return m_DestInterface; }
void Log::setDestInterface(InterfaceDescription const &value) {
  m_DestInterface = value;
  m_DestInterfaceIsSet = true;
}
bool Log::destInterfaceIsSet() const { return m_DestInterfaceIsSet; }
void Log::unsetDestInterface() { m_DestInterfaceIsSet = false; }
std::string Log::getFwdInterface() const { return m_FwdInterface; }
void Log::setFwdInterface(std::string const &value) {
  m_FwdInterface = value;
  m_FwdInterfaceIsSet = true;
}
bool Log::fwdInterfaceIsSet() const { return m_FwdInterfaceIsSet; }
void Log::unsetFwdInterface() { m_FwdInterfaceIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
