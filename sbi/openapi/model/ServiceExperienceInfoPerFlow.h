/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ServiceExperienceInfoPerFlow.h
 *
 * Contains service experience information associated with a service flow.
 */

#ifndef ServiceExperienceInfoPerFlow_H_
#define ServiceExperienceInfoPerFlow_H_

#include "EthFlowDescription.h"
#include "FlowInfo.h"
#include "SvcExperience.h"
#include "TimeWindow.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains service experience information associated with a service flow.
/// </summary>
class ServiceExperienceInfoPerFlow {
public:
  ServiceExperienceInfoPerFlow();
  virtual ~ServiceExperienceInfoPerFlow();

  void validate();

  /////////////////////////////////////////////
  /// ServiceExperienceInfoPerFlow members

  /// <summary>
  ///
  /// </summary>
  SvcExperience getSvcExprc() const;
  void setSvcExprc(SvcExperience const &value);
  bool svcExprcIsSet() const;
  void unsetSvcExprc();
  /// <summary>
  ///
  /// </summary>
  TimeWindow getTimeIntev() const;
  void setTimeIntev(TimeWindow const &value);
  bool timeIntevIsSet() const;
  void unsetTimeIntev();
  /// <summary>
  /// DNAI (Data network access identifier), see clause 5.6.7 of 3GPP TS 23.501.
  /// </summary>
  std::string getDnai() const;
  void setDnai(std::string const &value);
  bool dnaiIsSet() const;
  void unsetDnai();
  /// <summary>
  ///
  /// </summary>
  FlowInfo getIpTrafficFilter() const;
  void setIpTrafficFilter(FlowInfo const &value);
  bool ipTrafficFilterIsSet() const;
  void unsetIpTrafficFilter();
  /// <summary>
  ///
  /// </summary>
  EthFlowDescription getEthTrafficFilter() const;
  void setEthTrafficFilter(EthFlowDescription const &value);
  bool ethTrafficFilterIsSet() const;
  void unsetEthTrafficFilter();

  friend void to_json(nlohmann::json &j, const ServiceExperienceInfoPerFlow &o);
  friend void from_json(const nlohmann::json &j,
                        ServiceExperienceInfoPerFlow &o);

protected:
  SvcExperience m_SvcExprc;
  bool m_SvcExprcIsSet;
  TimeWindow m_TimeIntev;
  bool m_TimeIntevIsSet;
  std::string m_Dnai;
  bool m_DnaiIsSet;
  FlowInfo m_IpTrafficFilter;
  bool m_IpTrafficFilterIsSet;
  EthFlowDescription m_EthTrafficFilter;
  bool m_EthTrafficFilterIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ServiceExperienceInfoPerFlow_H_ */
