/**
 * Unified Data Repository Service API file for structured data for exposure
 * The API version is defined in 3GPP TS 29.504 © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AccessAndMobilityData.h
 *
 * Represents Access and Mobility data for a UE.
 */

#ifndef AccessAndMobilityData_H_
#define AccessAndMobilityData_H_

#include "AccessType.h"
#include "CmInfo.h"
#include "PlmnId.h"
#include "RatType.h"
#include "RmInfo.h"
#include "SmsSupport.h"
#include "UeReachability.h"
#include "UserLocation.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents Access and Mobility data for a UE.
/// </summary>
class AccessAndMobilityData {
public:
  AccessAndMobilityData();
  virtual ~AccessAndMobilityData();

  void validate();

  /////////////////////////////////////////////
  /// AccessAndMobilityData members

  /// <summary>
  ///
  /// </summary>
  UserLocation getLocation() const;
  void setLocation(UserLocation const &value);
  bool locationIsSet() const;
  void unsetLocation();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getLocationTs() const;
  void setLocationTs(std::string const &value);
  bool locationTsIsSet() const;
  void unsetLocationTs();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getTimeZone() const;
  void setTimeZone(std::string const &value);
  bool timeZoneIsSet() const;
  void unsetTimeZone();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getTimeZoneTs() const;
  void setTimeZoneTs(std::string const &value);
  bool timeZoneTsIsSet() const;
  void unsetTimeZoneTs();
  /// <summary>
  ///
  /// </summary>
  AccessType getAccessType() const;
  void setAccessType(AccessType const &value);
  bool accessTypeIsSet() const;
  void unsetAccessType();
  /// <summary>
  ///
  /// </summary>
  std::vector<RmInfo> &getRegStates();
  void setRegStates(std::vector<RmInfo> const &value);
  bool regStatesIsSet() const;
  void unsetRegStates();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getRegStatesTs() const;
  void setRegStatesTs(std::string const &value);
  bool regStatesTsIsSet() const;
  void unsetRegStatesTs();
  /// <summary>
  ///
  /// </summary>
  std::vector<CmInfo> &getConnStates();
  void setConnStates(std::vector<CmInfo> const &value);
  bool connStatesIsSet() const;
  void unsetConnStates();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getConnStatesTs() const;
  void setConnStatesTs(std::string const &value);
  bool connStatesTsIsSet() const;
  void unsetConnStatesTs();
  /// <summary>
  ///
  /// </summary>
  UeReachability getReachabilityStatus() const;
  void setReachabilityStatus(UeReachability const &value);
  bool reachabilityStatusIsSet() const;
  void unsetReachabilityStatus();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getReachabilityStatusTs() const;
  void setReachabilityStatusTs(std::string const &value);
  bool reachabilityStatusTsIsSet() const;
  void unsetReachabilityStatusTs();
  /// <summary>
  ///
  /// </summary>
  SmsSupport getSmsOverNasStatus() const;
  void setSmsOverNasStatus(SmsSupport const &value);
  bool smsOverNasStatusIsSet() const;
  void unsetSmsOverNasStatus();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getSmsOverNasStatusTs() const;
  void setSmsOverNasStatusTs(std::string const &value);
  bool smsOverNasStatusTsIsSet() const;
  void unsetSmsOverNasStatusTs();
  /// <summary>
  /// True  The serving PLMN of the UE is different from the HPLMN of the UE;
  /// False  The serving PLMN of the UE is the HPLMN of the UE.
  /// </summary>
  bool isRoamingStatus() const;
  void setRoamingStatus(bool const value);
  bool roamingStatusIsSet() const;
  void unsetRoamingStatus();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getRoamingStatusTs() const;
  void setRoamingStatusTs(std::string const &value);
  bool roamingStatusTsIsSet() const;
  void unsetRoamingStatusTs();
  /// <summary>
  ///
  /// </summary>
  PlmnId getCurrentPlmn() const;
  void setCurrentPlmn(PlmnId const &value);
  bool currentPlmnIsSet() const;
  void unsetCurrentPlmn();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getCurrentPlmnTs() const;
  void setCurrentPlmnTs(std::string const &value);
  bool currentPlmnTsIsSet() const;
  void unsetCurrentPlmnTs();
  /// <summary>
  ///
  /// </summary>
  std::vector<RatType> &getRatType();
  void setRatType(std::vector<RatType> const &value);
  bool ratTypeIsSet() const;
  void unsetRatType();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getRatTypesTs() const;
  void setRatTypesTs(std::string const &value);
  bool ratTypesTsIsSet() const;
  void unsetRatTypesTs();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();

  friend void to_json(nlohmann::json &j, const AccessAndMobilityData &o);
  friend void from_json(const nlohmann::json &j, AccessAndMobilityData &o);

protected:
  UserLocation m_Location;
  bool m_LocationIsSet;
  std::string m_LocationTs;
  bool m_LocationTsIsSet;
  std::string m_TimeZone;
  bool m_TimeZoneIsSet;
  std::string m_TimeZoneTs;
  bool m_TimeZoneTsIsSet;
  AccessType m_AccessType;
  bool m_AccessTypeIsSet;
  std::vector<RmInfo> m_RegStates;
  bool m_RegStatesIsSet;
  std::string m_RegStatesTs;
  bool m_RegStatesTsIsSet;
  std::vector<CmInfo> m_ConnStates;
  bool m_ConnStatesIsSet;
  std::string m_ConnStatesTs;
  bool m_ConnStatesTsIsSet;
  UeReachability m_ReachabilityStatus;
  bool m_ReachabilityStatusIsSet;
  std::string m_ReachabilityStatusTs;
  bool m_ReachabilityStatusTsIsSet;
  SmsSupport m_SmsOverNasStatus;
  bool m_SmsOverNasStatusIsSet;
  std::string m_SmsOverNasStatusTs;
  bool m_SmsOverNasStatusTsIsSet;
  bool m_RoamingStatus;
  bool m_RoamingStatusIsSet;
  std::string m_RoamingStatusTs;
  bool m_RoamingStatusTsIsSet;
  PlmnId m_CurrentPlmn;
  bool m_CurrentPlmnIsSet;
  std::string m_CurrentPlmnTs;
  bool m_CurrentPlmnTsIsSet;
  std::vector<RatType> m_RatType;
  bool m_RatTypeIsSet;
  std::string m_RatTypesTs;
  bool m_RatTypesTsIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AccessAndMobilityData_H_ */
