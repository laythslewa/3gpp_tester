/**
 * GMDviaMBMSbyxMB
 * API for Group Message Delivery via MBMS by xMB Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualDeliveryViaMBMSResourceOperationApi.h
 *
 *
 */

#ifndef IndividualDeliveryViaMBMSResourceOperationApi_H_
#define IndividualDeliveryViaMBMSResourceOperationApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "GMDViaMBMSByxMB.h"
#include "GMDViaMBMSByxMBPatch.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class IndividualDeliveryViaMBMSResourceOperationApi {
public:
  IndividualDeliveryViaMBMSResourceOperationApi(
      std::shared_ptr<Pistache::Rest::Router>);
  virtual ~IndividualDeliveryViaMBMSResourceOperationApi() {}
  void init();

  const std::string base = "/3gpp-group-message-delivery-xmb/v1";

private:
  void setupRoutes();

  void
  scs_as_id_services_service_id_delivery_via_mbms_transaction_id_delete_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void
  scs_as_id_services_service_id_delivery_via_mbms_transaction_id_get_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void
  scs_as_id_services_service_id_delivery_via_mbms_transaction_id_patch_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void
  scs_as_id_services_service_id_delivery_via_mbms_transaction_id_put_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void individual_delivery_via_mbms_resource_operation_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// deletes a delivery via MBMS resource for a given SCS/AS, a service Id and
  /// a transcation Id.
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="scsAsId">Identifier of SCS/AS</param>
  /// <param name="serviceId">Service Id</param>
  /// <param name="transactionId">Identifier of transaction</param>
  virtual void
  scs_as_id_services_service_id_delivery_via_mbms_transaction_id_delete(
      const std::string &scsAsId, const std::string &serviceId,
      const std::string &transactionId,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// read all group message delivery via MBMS resource for a given SCS/AS and a
  /// service Id
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="scsAsId">Identifier of SCS/AS</param>
  /// <param name="serviceId">Service Id</param>
  /// <param name="transactionId">Identifier of transaction</param>
  virtual void
  scs_as_id_services_service_id_delivery_via_mbms_transaction_id_get(
      const std::string &scsAsId, const std::string &serviceId,
      const std::string &transactionId,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Updates an existing delivery via MBMS for a given SCS/AS, a service Id and
  /// transaction Id.
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="scsAsId">Identifier of SCS/AS</param>
  /// <param name="serviceId">Service Id</param>
  /// <param name="transactionId">Identifier of transaction</param>
  /// <param name="gMDViaMBMSByxMBPatch">representation of the GMD via MBMS by
  /// xMB resource to be udpated in the SCEF</param>
  virtual void
  scs_as_id_services_service_id_delivery_via_mbms_transaction_id_patch(
      const std::string &scsAsId, const std::string &serviceId,
      const std::string &transactionId,
      const GMDViaMBMSByxMBPatch &gMDViaMBMSByxMBPatch,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Updates an existing delivery via MBMS for a given SCS/AS, a service Id and
  /// transaction Id.
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="scsAsId">Identifier of SCS/AS</param>
  /// <param name="serviceId">Service Id</param>
  /// <param name="transactionId">Identifier of transaction</param>
  /// <param name="gMDViaMBMSByxMB">representation of the GMD via MBMS by xMB
  /// resource to be udpated in the SCEF</param>
  virtual void
  scs_as_id_services_service_id_delivery_via_mbms_transaction_id_put(
      const std::string &scsAsId, const std::string &serviceId,
      const std::string &transactionId, const GMDViaMBMSByxMB &gMDViaMBMSByxMB,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IndividualDeliveryViaMBMSResourceOperationApi_H_ */
