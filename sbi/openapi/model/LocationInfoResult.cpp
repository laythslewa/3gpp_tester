/**
 * Nudm_MT
 * UDM MT Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI,
 * TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "LocationInfoResult.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

LocationInfoResult::LocationInfoResult() {
  m_VPlmnIdIsSet = false;
  m_AmfInstanceId = "";
  m_AmfInstanceIdIsSet = false;
  m_SmsfInstanceId = "";
  m_SmsfInstanceIdIsSet = false;
  m_NcgiIsSet = false;
  m_EcgiIsSet = false;
  m_TaiIsSet = false;
  m_CurrentLoc = false;
  m_CurrentLocIsSet = false;
  m_GeoInfoIsSet = false;
  m_LocatoinAge = 0;
  m_LocatoinAgeIsSet = false;
  m_RatTypeIsSet = false;
  m_Timezone = "";
  m_TimezoneIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

LocationInfoResult::~LocationInfoResult() {}

void LocationInfoResult::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const LocationInfoResult &o) {
  j = nlohmann::json();
  if (o.vPlmnIdIsSet())
    j["vPlmnId"] = o.m_VPlmnId;
  if (o.amfInstanceIdIsSet())
    j["amfInstanceId"] = o.m_AmfInstanceId;
  if (o.smsfInstanceIdIsSet())
    j["smsfInstanceId"] = o.m_SmsfInstanceId;
  if (o.ncgiIsSet())
    j["ncgi"] = o.m_Ncgi;
  if (o.ecgiIsSet())
    j["ecgi"] = o.m_Ecgi;
  if (o.taiIsSet())
    j["tai"] = o.m_Tai;
  if (o.currentLocIsSet())
    j["currentLoc"] = o.m_CurrentLoc;
  if (o.geoInfoIsSet())
    j["geoInfo"] = o.m_GeoInfo;
  if (o.locatoinAgeIsSet())
    j["locatoinAge"] = o.m_LocatoinAge;
  if (o.ratTypeIsSet())
    j["ratType"] = o.m_RatType;
  if (o.timezoneIsSet())
    j["timezone"] = o.m_Timezone;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, LocationInfoResult &o) {
  if (j.find("vPlmnId") != j.end()) {
    j.at("vPlmnId").get_to(o.m_VPlmnId);
    o.m_VPlmnIdIsSet = true;
  }
  if (j.find("amfInstanceId") != j.end()) {
    j.at("amfInstanceId").get_to(o.m_AmfInstanceId);
    o.m_AmfInstanceIdIsSet = true;
  }
  if (j.find("smsfInstanceId") != j.end()) {
    j.at("smsfInstanceId").get_to(o.m_SmsfInstanceId);
    o.m_SmsfInstanceIdIsSet = true;
  }
  if (j.find("ncgi") != j.end()) {
    j.at("ncgi").get_to(o.m_Ncgi);
    o.m_NcgiIsSet = true;
  }
  if (j.find("ecgi") != j.end()) {
    j.at("ecgi").get_to(o.m_Ecgi);
    o.m_EcgiIsSet = true;
  }
  if (j.find("tai") != j.end()) {
    j.at("tai").get_to(o.m_Tai);
    o.m_TaiIsSet = true;
  }
  if (j.find("currentLoc") != j.end()) {
    j.at("currentLoc").get_to(o.m_CurrentLoc);
    o.m_CurrentLocIsSet = true;
  }
  if (j.find("geoInfo") != j.end()) {
    j.at("geoInfo").get_to(o.m_GeoInfo);
    o.m_GeoInfoIsSet = true;
  }
  if (j.find("locatoinAge") != j.end()) {
    j.at("locatoinAge").get_to(o.m_LocatoinAge);
    o.m_LocatoinAgeIsSet = true;
  }
  if (j.find("ratType") != j.end()) {
    j.at("ratType").get_to(o.m_RatType);
    o.m_RatTypeIsSet = true;
  }
  if (j.find("timezone") != j.end()) {
    j.at("timezone").get_to(o.m_Timezone);
    o.m_TimezoneIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

PlmnId LocationInfoResult::getVPlmnId() const { return m_VPlmnId; }
void LocationInfoResult::setVPlmnId(PlmnId const &value) {
  m_VPlmnId = value;
  m_VPlmnIdIsSet = true;
}
bool LocationInfoResult::vPlmnIdIsSet() const { return m_VPlmnIdIsSet; }
void LocationInfoResult::unsetVPlmnId() { m_VPlmnIdIsSet = false; }
std::string LocationInfoResult::getAmfInstanceId() const {
  return m_AmfInstanceId;
}
void LocationInfoResult::setAmfInstanceId(std::string const &value) {
  m_AmfInstanceId = value;
  m_AmfInstanceIdIsSet = true;
}
bool LocationInfoResult::amfInstanceIdIsSet() const {
  return m_AmfInstanceIdIsSet;
}
void LocationInfoResult::unsetAmfInstanceId() { m_AmfInstanceIdIsSet = false; }
std::string LocationInfoResult::getSmsfInstanceId() const {
  return m_SmsfInstanceId;
}
void LocationInfoResult::setSmsfInstanceId(std::string const &value) {
  m_SmsfInstanceId = value;
  m_SmsfInstanceIdIsSet = true;
}
bool LocationInfoResult::smsfInstanceIdIsSet() const {
  return m_SmsfInstanceIdIsSet;
}
void LocationInfoResult::unsetSmsfInstanceId() {
  m_SmsfInstanceIdIsSet = false;
}
Ncgi LocationInfoResult::getNcgi() const { return m_Ncgi; }
void LocationInfoResult::setNcgi(Ncgi const &value) {
  m_Ncgi = value;
  m_NcgiIsSet = true;
}
bool LocationInfoResult::ncgiIsSet() const { return m_NcgiIsSet; }
void LocationInfoResult::unsetNcgi() { m_NcgiIsSet = false; }
Ecgi LocationInfoResult::getEcgi() const { return m_Ecgi; }
void LocationInfoResult::setEcgi(Ecgi const &value) {
  m_Ecgi = value;
  m_EcgiIsSet = true;
}
bool LocationInfoResult::ecgiIsSet() const { return m_EcgiIsSet; }
void LocationInfoResult::unsetEcgi() { m_EcgiIsSet = false; }
Tai LocationInfoResult::getTai() const { return m_Tai; }
void LocationInfoResult::setTai(Tai const &value) {
  m_Tai = value;
  m_TaiIsSet = true;
}
bool LocationInfoResult::taiIsSet() const { return m_TaiIsSet; }
void LocationInfoResult::unsetTai() { m_TaiIsSet = false; }
bool LocationInfoResult::isCurrentLoc() const { return m_CurrentLoc; }
void LocationInfoResult::setCurrentLoc(bool const value) {
  m_CurrentLoc = value;
  m_CurrentLocIsSet = true;
}
bool LocationInfoResult::currentLocIsSet() const { return m_CurrentLocIsSet; }
void LocationInfoResult::unsetCurrentLoc() { m_CurrentLocIsSet = false; }
GeographicArea LocationInfoResult::getGeoInfo() const { return m_GeoInfo; }
void LocationInfoResult::setGeoInfo(GeographicArea const &value) {
  m_GeoInfo = value;
  m_GeoInfoIsSet = true;
}
bool LocationInfoResult::geoInfoIsSet() const { return m_GeoInfoIsSet; }
void LocationInfoResult::unsetGeoInfo() { m_GeoInfoIsSet = false; }
int32_t LocationInfoResult::getLocatoinAge() const { return m_LocatoinAge; }
void LocationInfoResult::setLocatoinAge(int32_t const value) {
  m_LocatoinAge = value;
  m_LocatoinAgeIsSet = true;
}
bool LocationInfoResult::locatoinAgeIsSet() const { return m_LocatoinAgeIsSet; }
void LocationInfoResult::unsetLocatoinAge() { m_LocatoinAgeIsSet = false; }
RatType LocationInfoResult::getRatType() const { return m_RatType; }
void LocationInfoResult::setRatType(RatType const &value) {
  m_RatType = value;
  m_RatTypeIsSet = true;
}
bool LocationInfoResult::ratTypeIsSet() const { return m_RatTypeIsSet; }
void LocationInfoResult::unsetRatType() { m_RatTypeIsSet = false; }
std::string LocationInfoResult::getTimezone() const { return m_Timezone; }
void LocationInfoResult::setTimezone(std::string const &value) {
  m_Timezone = value;
  m_TimezoneIsSet = true;
}
bool LocationInfoResult::timezoneIsSet() const { return m_TimezoneIsSet; }
void LocationInfoResult::unsetTimezone() { m_TimezoneIsSet = false; }
std::string LocationInfoResult::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void LocationInfoResult::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool LocationInfoResult::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void LocationInfoResult::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
