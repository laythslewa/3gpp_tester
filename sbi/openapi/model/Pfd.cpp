/**
 * 3gpp-pfd-management
 * API for PFD management. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "Pfd.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Pfd::Pfd() {
  m_PfdId = "";
  m_FlowDescriptionsIsSet = false;
  m_UrlsIsSet = false;
  m_DomainNamesIsSet = false;
  m_DnProtocolIsSet = false;
}

Pfd::~Pfd() {}

void Pfd::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const Pfd &o) {
  j = nlohmann::json();
  j["pfdId"] = o.m_PfdId;
  if (o.flowDescriptionsIsSet() || !o.m_FlowDescriptions.empty())
    j["flowDescriptions"] = o.m_FlowDescriptions;
  if (o.urlsIsSet() || !o.m_Urls.empty())
    j["urls"] = o.m_Urls;
  if (o.domainNamesIsSet() || !o.m_DomainNames.empty())
    j["domainNames"] = o.m_DomainNames;
  if (o.dnProtocolIsSet())
    j["dnProtocol"] = o.m_DnProtocol;
}

void from_json(const nlohmann::json &j, Pfd &o) {
  j.at("pfdId").get_to(o.m_PfdId);
  if (j.find("flowDescriptions") != j.end()) {
    j.at("flowDescriptions").get_to(o.m_FlowDescriptions);
    o.m_FlowDescriptionsIsSet = true;
  }
  if (j.find("urls") != j.end()) {
    j.at("urls").get_to(o.m_Urls);
    o.m_UrlsIsSet = true;
  }
  if (j.find("domainNames") != j.end()) {
    j.at("domainNames").get_to(o.m_DomainNames);
    o.m_DomainNamesIsSet = true;
  }
  if (j.find("dnProtocol") != j.end()) {
    j.at("dnProtocol").get_to(o.m_DnProtocol);
    o.m_DnProtocolIsSet = true;
  }
}

std::string Pfd::getPfdId() const { return m_PfdId; }
void Pfd::setPfdId(std::string const &value) { m_PfdId = value; }
std::vector<std::string> &Pfd::getFlowDescriptions() {
  return m_FlowDescriptions;
}
void Pfd::setFlowDescriptions(std::vector<std::string> const &value) {
  m_FlowDescriptions = value;
  m_FlowDescriptionsIsSet = true;
}
bool Pfd::flowDescriptionsIsSet() const { return m_FlowDescriptionsIsSet; }
void Pfd::unsetFlowDescriptions() { m_FlowDescriptionsIsSet = false; }
std::vector<std::string> &Pfd::getUrls() { return m_Urls; }
void Pfd::setUrls(std::vector<std::string> const &value) {
  m_Urls = value;
  m_UrlsIsSet = true;
}
bool Pfd::urlsIsSet() const { return m_UrlsIsSet; }
void Pfd::unsetUrls() { m_UrlsIsSet = false; }
std::vector<std::string> &Pfd::getDomainNames() { return m_DomainNames; }
void Pfd::setDomainNames(std::vector<std::string> const &value) {
  m_DomainNames = value;
  m_DomainNamesIsSet = true;
}
bool Pfd::domainNamesIsSet() const { return m_DomainNamesIsSet; }
void Pfd::unsetDomainNames() { m_DomainNamesIsSet = false; }
DomainNameProtocol Pfd::getDnProtocol() const { return m_DnProtocol; }
void Pfd::setDnProtocol(DomainNameProtocol const &value) {
  m_DnProtocol = value;
  m_DnProtocolIsSet = true;
}
bool Pfd::dnProtocolIsSet() const { return m_DnProtocolIsSet; }
void Pfd::unsetDnProtocol() { m_DnProtocolIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
