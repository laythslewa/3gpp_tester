/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AcknowledgeInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AcknowledgeInfo::AcknowledgeInfo() {
  m_SorMacIue = "";
  m_SorMacIueIsSet = false;
  m_UpuMacIue = "";
  m_UpuMacIueIsSet = false;
  m_SecuredPacket = "";
  m_SecuredPacketIsSet = false;
  m_ProvisioningTime = "";
  m_SorTransparentContainerIsSet = false;
  m_UeNotReachable = false;
  m_UeNotReachableIsSet = false;
}

AcknowledgeInfo::~AcknowledgeInfo() {}

void AcknowledgeInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AcknowledgeInfo &o) {
  j = nlohmann::json();
  if (o.sorMacIueIsSet())
    j["sorMacIue"] = o.m_SorMacIue;
  if (o.upuMacIueIsSet())
    j["upuMacIue"] = o.m_UpuMacIue;
  if (o.securedPacketIsSet())
    j["securedPacket"] = o.m_SecuredPacket;
  j["provisioningTime"] = o.m_ProvisioningTime;
  if (o.sorTransparentContainerIsSet())
    j["sorTransparentContainer"] = o.m_SorTransparentContainer;
  if (o.ueNotReachableIsSet())
    j["ueNotReachable"] = o.m_UeNotReachable;
}

void from_json(const nlohmann::json &j, AcknowledgeInfo &o) {
  if (j.find("sorMacIue") != j.end()) {
    j.at("sorMacIue").get_to(o.m_SorMacIue);
    o.m_SorMacIueIsSet = true;
  }
  if (j.find("upuMacIue") != j.end()) {
    j.at("upuMacIue").get_to(o.m_UpuMacIue);
    o.m_UpuMacIueIsSet = true;
  }
  if (j.find("securedPacket") != j.end()) {
    j.at("securedPacket").get_to(o.m_SecuredPacket);
    o.m_SecuredPacketIsSet = true;
  }
  j.at("provisioningTime").get_to(o.m_ProvisioningTime);
  if (j.find("sorTransparentContainer") != j.end()) {
    j.at("sorTransparentContainer").get_to(o.m_SorTransparentContainer);
    o.m_SorTransparentContainerIsSet = true;
  }
  if (j.find("ueNotReachable") != j.end()) {
    j.at("ueNotReachable").get_to(o.m_UeNotReachable);
    o.m_UeNotReachableIsSet = true;
  }
}

std::string AcknowledgeInfo::getSorMacIue() const { return m_SorMacIue; }
void AcknowledgeInfo::setSorMacIue(std::string const &value) {
  m_SorMacIue = value;
  m_SorMacIueIsSet = true;
}
bool AcknowledgeInfo::sorMacIueIsSet() const { return m_SorMacIueIsSet; }
void AcknowledgeInfo::unsetSorMacIue() { m_SorMacIueIsSet = false; }
std::string AcknowledgeInfo::getUpuMacIue() const { return m_UpuMacIue; }
void AcknowledgeInfo::setUpuMacIue(std::string const &value) {
  m_UpuMacIue = value;
  m_UpuMacIueIsSet = true;
}
bool AcknowledgeInfo::upuMacIueIsSet() const { return m_UpuMacIueIsSet; }
void AcknowledgeInfo::unsetUpuMacIue() { m_UpuMacIueIsSet = false; }
std::string AcknowledgeInfo::getSecuredPacket() const {
  return m_SecuredPacket;
}
void AcknowledgeInfo::setSecuredPacket(std::string const &value) {
  m_SecuredPacket = value;
  m_SecuredPacketIsSet = true;
}
bool AcknowledgeInfo::securedPacketIsSet() const {
  return m_SecuredPacketIsSet;
}
void AcknowledgeInfo::unsetSecuredPacket() { m_SecuredPacketIsSet = false; }
std::string AcknowledgeInfo::getProvisioningTime() const {
  return m_ProvisioningTime;
}
void AcknowledgeInfo::setProvisioningTime(std::string const &value) {
  m_ProvisioningTime = value;
}
std::string AcknowledgeInfo::getSorTransparentContainer() const {
  return m_SorTransparentContainer;
}
void AcknowledgeInfo::setSorTransparentContainer(std::string const &value) {
  m_SorTransparentContainer = value;
  m_SorTransparentContainerIsSet = true;
}
bool AcknowledgeInfo::sorTransparentContainerIsSet() const {
  return m_SorTransparentContainerIsSet;
}
void AcknowledgeInfo::unsetSorTransparentContainer() {
  m_SorTransparentContainerIsSet = false;
}
bool AcknowledgeInfo::isUeNotReachable() const { return m_UeNotReachable; }
void AcknowledgeInfo::setUeNotReachable(bool const value) {
  m_UeNotReachable = value;
  m_UeNotReachableIsSet = true;
}
bool AcknowledgeInfo::ueNotReachableIsSet() const {
  return m_UeNotReachableIsSet;
}
void AcknowledgeInfo::unsetUeNotReachable() { m_UeNotReachableIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
