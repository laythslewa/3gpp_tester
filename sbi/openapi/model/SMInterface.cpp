/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SMInterface.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SMInterface::SMInterface() {
  m_InterfaceId = "";
  m_InterfaceIdIsSet = false;
  m_InterfaceText = "";
  m_InterfaceTextIsSet = false;
  m_InterfacePort = "";
  m_InterfacePortIsSet = false;
  m_InterfaceTypeIsSet = false;
}

SMInterface::~SMInterface() {}

void SMInterface::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SMInterface &o) {
  j = nlohmann::json();
  if (o.interfaceIdIsSet())
    j["interfaceId"] = o.m_InterfaceId;
  if (o.interfaceTextIsSet())
    j["interfaceText"] = o.m_InterfaceText;
  if (o.interfacePortIsSet())
    j["interfacePort"] = o.m_InterfacePort;
  if (o.interfaceTypeIsSet())
    j["interfaceType"] = o.m_InterfaceType;
}

void from_json(const nlohmann::json &j, SMInterface &o) {
  if (j.find("interfaceId") != j.end()) {
    j.at("interfaceId").get_to(o.m_InterfaceId);
    o.m_InterfaceIdIsSet = true;
  }
  if (j.find("interfaceText") != j.end()) {
    j.at("interfaceText").get_to(o.m_InterfaceText);
    o.m_InterfaceTextIsSet = true;
  }
  if (j.find("interfacePort") != j.end()) {
    j.at("interfacePort").get_to(o.m_InterfacePort);
    o.m_InterfacePortIsSet = true;
  }
  if (j.find("interfaceType") != j.end()) {
    j.at("interfaceType").get_to(o.m_InterfaceType);
    o.m_InterfaceTypeIsSet = true;
  }
}

std::string SMInterface::getInterfaceId() const { return m_InterfaceId; }
void SMInterface::setInterfaceId(std::string const &value) {
  m_InterfaceId = value;
  m_InterfaceIdIsSet = true;
}
bool SMInterface::interfaceIdIsSet() const { return m_InterfaceIdIsSet; }
void SMInterface::unsetInterfaceId() { m_InterfaceIdIsSet = false; }
std::string SMInterface::getInterfaceText() const { return m_InterfaceText; }
void SMInterface::setInterfaceText(std::string const &value) {
  m_InterfaceText = value;
  m_InterfaceTextIsSet = true;
}
bool SMInterface::interfaceTextIsSet() const { return m_InterfaceTextIsSet; }
void SMInterface::unsetInterfaceText() { m_InterfaceTextIsSet = false; }
std::string SMInterface::getInterfacePort() const { return m_InterfacePort; }
void SMInterface::setInterfacePort(std::string const &value) {
  m_InterfacePort = value;
  m_InterfacePortIsSet = true;
}
bool SMInterface::interfacePortIsSet() const { return m_InterfacePortIsSet; }
void SMInterface::unsetInterfacePort() { m_InterfacePortIsSet = false; }
InterfaceType SMInterface::getInterfaceType() const { return m_InterfaceType; }
void SMInterface::setInterfaceType(InterfaceType const &value) {
  m_InterfaceType = value;
  m_InterfaceTypeIsSet = true;
}
bool SMInterface::interfaceTypeIsSet() const { return m_InterfaceTypeIsSet; }
void SMInterface::unsetInterfaceType() { m_InterfaceTypeIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
