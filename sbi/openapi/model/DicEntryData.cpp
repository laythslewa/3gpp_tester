/**
 * Nucmf_UECapabilityManagement
 * Nucmf_UECapabilityManagement Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DicEntryData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

DicEntryData::DicEntryData() {
  m_DicEntryId = 0;
  m_DicEntryIdIsSet = false;
  m_TypeAllocationCode = "";
  m_PlmnAssiUeRadioCapIdIsSet = false;
  m_ManAssiUeRadioCapIdIsSet = false;
  m_UeRadioCapability5GSIsSet = false;
  m_UeRadioCapabilityEPSIsSet = false;
}

DicEntryData::~DicEntryData() {}

void DicEntryData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const DicEntryData &o) {
  j = nlohmann::json();
  if (o.dicEntryIdIsSet())
    j["dicEntryId"] = o.m_DicEntryId;
  j["typeAllocationCode"] = o.m_TypeAllocationCode;
  if (o.plmnAssiUeRadioCapIdIsSet())
    j["plmnAssiUeRadioCapId"] = o.m_PlmnAssiUeRadioCapId;
  if (o.manAssiUeRadioCapIdIsSet())
    j["manAssiUeRadioCapId"] = o.m_ManAssiUeRadioCapId;
  if (o.ueRadioCapability5GSIsSet())
    j["ueRadioCapability5GS"] = o.m_UeRadioCapability5GS;
  if (o.ueRadioCapabilityEPSIsSet())
    j["ueRadioCapabilityEPS"] = o.m_UeRadioCapabilityEPS;
}

void from_json(const nlohmann::json &j, DicEntryData &o) {
  if (j.find("dicEntryId") != j.end()) {
    j.at("dicEntryId").get_to(o.m_DicEntryId);
    o.m_DicEntryIdIsSet = true;
  }
  j.at("typeAllocationCode").get_to(o.m_TypeAllocationCode);
  if (j.find("plmnAssiUeRadioCapId") != j.end()) {
    j.at("plmnAssiUeRadioCapId").get_to(o.m_PlmnAssiUeRadioCapId);
    o.m_PlmnAssiUeRadioCapIdIsSet = true;
  }
  if (j.find("manAssiUeRadioCapId") != j.end()) {
    j.at("manAssiUeRadioCapId").get_to(o.m_ManAssiUeRadioCapId);
    o.m_ManAssiUeRadioCapIdIsSet = true;
  }
  if (j.find("ueRadioCapability5GS") != j.end()) {
    j.at("ueRadioCapability5GS").get_to(o.m_UeRadioCapability5GS);
    o.m_UeRadioCapability5GSIsSet = true;
  }
  if (j.find("ueRadioCapabilityEPS") != j.end()) {
    j.at("ueRadioCapabilityEPS").get_to(o.m_UeRadioCapabilityEPS);
    o.m_UeRadioCapabilityEPSIsSet = true;
  }
}

int32_t DicEntryData::getDicEntryId() const { return m_DicEntryId; }
void DicEntryData::setDicEntryId(int32_t const value) {
  m_DicEntryId = value;
  m_DicEntryIdIsSet = true;
}
bool DicEntryData::dicEntryIdIsSet() const { return m_DicEntryIdIsSet; }
void DicEntryData::unsetDicEntryId() { m_DicEntryIdIsSet = false; }
std::string DicEntryData::getTypeAllocationCode() const {
  return m_TypeAllocationCode;
}
void DicEntryData::setTypeAllocationCode(std::string const &value) {
  m_TypeAllocationCode = value;
}
std::string DicEntryData::getPlmnAssiUeRadioCapId() const {
  return m_PlmnAssiUeRadioCapId;
}
void DicEntryData::setPlmnAssiUeRadioCapId(std::string const &value) {
  m_PlmnAssiUeRadioCapId = value;
  m_PlmnAssiUeRadioCapIdIsSet = true;
}
bool DicEntryData::plmnAssiUeRadioCapIdIsSet() const {
  return m_PlmnAssiUeRadioCapIdIsSet;
}
void DicEntryData::unsetPlmnAssiUeRadioCapId() {
  m_PlmnAssiUeRadioCapIdIsSet = false;
}
std::string DicEntryData::getManAssiUeRadioCapId() const {
  return m_ManAssiUeRadioCapId;
}
void DicEntryData::setManAssiUeRadioCapId(std::string const &value) {
  m_ManAssiUeRadioCapId = value;
  m_ManAssiUeRadioCapIdIsSet = true;
}
bool DicEntryData::manAssiUeRadioCapIdIsSet() const {
  return m_ManAssiUeRadioCapIdIsSet;
}
void DicEntryData::unsetManAssiUeRadioCapId() {
  m_ManAssiUeRadioCapIdIsSet = false;
}
RefToBinaryData DicEntryData::getUeRadioCapability5GS() const {
  return m_UeRadioCapability5GS;
}
void DicEntryData::setUeRadioCapability5GS(RefToBinaryData const &value) {
  m_UeRadioCapability5GS = value;
  m_UeRadioCapability5GSIsSet = true;
}
bool DicEntryData::ueRadioCapability5GSIsSet() const {
  return m_UeRadioCapability5GSIsSet;
}
void DicEntryData::unsetUeRadioCapability5GS() {
  m_UeRadioCapability5GSIsSet = false;
}
RefToBinaryData DicEntryData::getUeRadioCapabilityEPS() const {
  return m_UeRadioCapabilityEPS;
}
void DicEntryData::setUeRadioCapabilityEPS(RefToBinaryData const &value) {
  m_UeRadioCapabilityEPS = value;
  m_UeRadioCapabilityEPSIsSet = true;
}
bool DicEntryData::ueRadioCapabilityEPSIsSet() const {
  return m_UeRadioCapabilityEPSIsSet;
}
void DicEntryData::unsetUeRadioCapabilityEPS() {
  m_UeRadioCapabilityEPSIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
