/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TrafficControlData.h
 *
 * Contains parameters determining how flows associated with a PCC Rule are
 * treated (e.g. blocked, redirected, etc).
 */

#ifndef TrafficControlData_H_
#define TrafficControlData_H_

#include "FlowStatus.h"
#include "MulticastAccessControl.h"
#include "RedirectInformation.h"
#include "RouteToLocation.h"
#include "SteeringFunctionality.h"
#include "SteeringMode.h"
#include "UpPathChgEvent.h"
#include "UserPlaneLatencyRequirements.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains parameters determining how flows associated with a PCC Rule are
/// treated (e.g. blocked, redirected, etc).
/// </summary>
class TrafficControlData {
public:
  TrafficControlData();
  virtual ~TrafficControlData();

  void validate();

  /////////////////////////////////////////////
  /// TrafficControlData members

  /// <summary>
  /// Univocally identifies the traffic control policy data within a PDU
  /// session.
  /// </summary>
  std::string getTcId() const;
  void setTcId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  FlowStatus getFlowStatus() const;
  void setFlowStatus(FlowStatus const &value);
  bool flowStatusIsSet() const;
  void unsetFlowStatus();
  /// <summary>
  ///
  /// </summary>
  RedirectInformation getRedirectInfo() const;
  void setRedirectInfo(RedirectInformation const &value);
  bool redirectInfoIsSet() const;
  void unsetRedirectInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<RedirectInformation> &getAddRedirectInfo();
  void setAddRedirectInfo(std::vector<RedirectInformation> const &value);
  bool addRedirectInfoIsSet() const;
  void unsetAddRedirectInfo();
  /// <summary>
  /// Indicates whether applicat&#39;on&#39;s start or stop notification is to
  /// be muted.
  /// </summary>
  bool isMuteNotif() const;
  void setMuteNotif(bool const value);
  bool muteNotifIsSet() const;
  void unsetMuteNotif();
  /// <summary>
  /// Reference to a pre-configured traffic steering policy for downlink traffic
  /// at the SMF.
  /// </summary>
  std::string getTrafficSteeringPolIdDl() const;
  void setTrafficSteeringPolIdDl(std::string const &value);
  bool trafficSteeringPolIdDlIsSet() const;
  void unsetTrafficSteeringPolIdDl();
  /// <summary>
  /// Reference to a pre-configured traffic steering policy for uplink traffic
  /// at the SMF.
  /// </summary>
  std::string getTrafficSteeringPolIdUl() const;
  void setTrafficSteeringPolIdUl(std::string const &value);
  bool trafficSteeringPolIdUlIsSet() const;
  void unsetTrafficSteeringPolIdUl();
  /// <summary>
  /// A list of location which the traffic shall be routed to for the AF request
  /// </summary>
  std::vector<RouteToLocation> &getRouteToLocs();
  void setRouteToLocs(std::vector<RouteToLocation> const &value);
  bool routeToLocsIsSet() const;
  void unsetRouteToLocs();
  /// <summary>
  ///
  /// </summary>
  UserPlaneLatencyRequirements getUpLatReq() const;
  void setUpLatReq(UserPlaneLatencyRequirements const &value);
  bool upLatReqIsSet() const;
  void unsetUpLatReq();
  /// <summary>
  ///
  /// </summary>
  bool isTraffCorreInd() const;
  void setTraffCorreInd(bool const value);
  bool traffCorreIndIsSet() const;
  void unsetTraffCorreInd();
  /// <summary>
  ///
  /// </summary>
  UpPathChgEvent getUpPathChgEvent() const;
  void setUpPathChgEvent(UpPathChgEvent const &value);
  bool upPathChgEventIsSet() const;
  void unsetUpPathChgEvent();
  /// <summary>
  ///
  /// </summary>
  SteeringFunctionality getSteerFun() const;
  void setSteerFun(SteeringFunctionality const &value);
  bool steerFunIsSet() const;
  void unsetSteerFun();
  /// <summary>
  ///
  /// </summary>
  SteeringMode getSteerModeDl() const;
  void setSteerModeDl(SteeringMode const &value);
  bool steerModeDlIsSet() const;
  void unsetSteerModeDl();
  /// <summary>
  ///
  /// </summary>
  SteeringMode getSteerModeUl() const;
  void setSteerModeUl(SteeringMode const &value);
  bool steerModeUlIsSet() const;
  void unsetSteerModeUl();
  /// <summary>
  ///
  /// </summary>
  MulticastAccessControl getMulAccCtrl() const;
  void setMulAccCtrl(MulticastAccessControl const &value);
  bool mulAccCtrlIsSet() const;
  void unsetMulAccCtrl();

  friend void to_json(nlohmann::json &j, const TrafficControlData &o);
  friend void from_json(const nlohmann::json &j, TrafficControlData &o);

protected:
  std::string m_TcId;

  FlowStatus m_FlowStatus;
  bool m_FlowStatusIsSet;
  RedirectInformation m_RedirectInfo;
  bool m_RedirectInfoIsSet;
  std::vector<RedirectInformation> m_AddRedirectInfo;
  bool m_AddRedirectInfoIsSet;
  bool m_MuteNotif;
  bool m_MuteNotifIsSet;
  std::string m_TrafficSteeringPolIdDl;
  bool m_TrafficSteeringPolIdDlIsSet;
  std::string m_TrafficSteeringPolIdUl;
  bool m_TrafficSteeringPolIdUlIsSet;
  std::vector<RouteToLocation> m_RouteToLocs;
  bool m_RouteToLocsIsSet;
  UserPlaneLatencyRequirements m_UpLatReq;
  bool m_UpLatReqIsSet;
  bool m_TraffCorreInd;
  bool m_TraffCorreIndIsSet;
  UpPathChgEvent m_UpPathChgEvent;
  bool m_UpPathChgEventIsSet;
  SteeringFunctionality m_SteerFun;
  bool m_SteerFunIsSet;
  SteeringMode m_SteerModeDl;
  bool m_SteerModeDlIsSet;
  SteeringMode m_SteerModeUl;
  bool m_SteerModeUlIsSet;
  MulticastAccessControl m_MulAccCtrl;
  bool m_MulAccCtrlIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* TrafficControlData_H_ */
