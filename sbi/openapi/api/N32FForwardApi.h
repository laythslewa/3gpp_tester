/**
 * JOSE Protected Message Forwarding API
 * N32-f Message Forwarding Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * N32FForwardApi.h
 *
 *
 */

#ifndef N32FForwardApi_H_
#define N32FForwardApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "N32fReformattedReqMsg.h"
#include "N32fReformattedRspMsg.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class N32FForwardApi {
public:
  N32FForwardApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~N32FForwardApi() {}
  void init();

  const std::string base = "/n32f-forward/v1";

private:
  void setupRoutes();

  void n32f_process_options_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);
  void post_n32f_process_handler(const Pistache::Rest::Request &request,
                                 Pistache::Http::ResponseWriter response);
  void
  n32_f_forward_api_default_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Discover communication options supported by next hop (IPX or SEPP)
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  virtual void
  n32f_process_options(Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// N32-f Message Forwarding
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="n32fReformattedReqMsg">Custom operation N32-f Message
  /// Forwarding</param> <param name="contentEncoding">Content-Encoding,
  /// described in IETF RFC 7231 (optional, default to &quot;&quot;)</param>
  /// <param name="acceptEncoding">Accept-Encoding, described in IETF RFC 7231
  /// (optional, default to &quot;&quot;)</param>
  virtual void post_n32f_process(
      const N32fReformattedReqMsg &n32fReformattedReqMsg,
      const Pistache::Optional<Pistache::Http::Header::Raw> &contentEncoding,
      const Pistache::Optional<Pistache::Http::Header::Raw> &acceptEncoding,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* N32FForwardApi_H_ */
