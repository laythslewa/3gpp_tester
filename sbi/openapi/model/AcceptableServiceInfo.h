/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AcceptableServiceInfo.h
 *
 * Indicates the maximum bandwidth that shall be authorized by the PCF.
 */

#ifndef AcceptableServiceInfo_H_
#define AcceptableServiceInfo_H_

#include "MediaComponent.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Indicates the maximum bandwidth that shall be authorized by the PCF.
/// </summary>
class AcceptableServiceInfo {
public:
  AcceptableServiceInfo();
  virtual ~AcceptableServiceInfo();

  void validate();

  /////////////////////////////////////////////
  /// AcceptableServiceInfo members

  /// <summary>
  /// Indicates the maximum bandwidth that shall be authorized by the PCF for
  /// each media component of the map. The key of the map is the media component
  /// number.
  /// </summary>
  std::map<std::string, MediaComponent> &getAccBwMedComps();
  void setAccBwMedComps(std::map<std::string, MediaComponent> const &value);
  bool accBwMedCompsIsSet() const;
  void unsetAccBwMedComps();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getMarBwUl() const;
  void setMarBwUl(std::string const &value);
  bool marBwUlIsSet() const;
  void unsetMarBwUl();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getMarBwDl() const;
  void setMarBwDl(std::string const &value);
  bool marBwDlIsSet() const;
  void unsetMarBwDl();

  friend void to_json(nlohmann::json &j, const AcceptableServiceInfo &o);
  friend void from_json(const nlohmann::json &j, AcceptableServiceInfo &o);

protected:
  std::map<std::string, MediaComponent> m_AccBwMedComps;
  bool m_AccBwMedCompsIsSet;
  std::string m_MarBwUl;
  bool m_MarBwUlIsSet;
  std::string m_MarBwDl;
  bool m_MarBwDlIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AcceptableServiceInfo_H_ */
