/**
 * Nudsf_Timer
 * Nudsf Timer Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TimerStartApi.h
 *
 *
 */

#ifndef TimerStartApi_H_
#define TimerStartApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "ProblemDetails.h"
#include "Timer.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class TimerStartApi {
public:
  TimerStartApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~TimerStartApi() {}
  void init();

  const std::string base = "/nudsf-timer/v1";

private:
  void setupRoutes();

  void create_or_modify_timer_handler(const Pistache::Rest::Request &request,
                                      Pistache::Http::ResponseWriter response);
  void timer_start_api_default_handler(const Pistache::Rest::Request &request,
                                       Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Create/Replace Timer
  /// </summary>
  /// <remarks>
  /// Create or Modify a Timer with a user provided TimerId
  /// </remarks>
  /// <param name="realmId">Identifier(name) of the Realm</param>
  /// <param name="storageId">Identifier of the Storage</param>
  /// <param name="timerId">Identifier of the Timer</param>
  /// <param name="timer"></param>
  /// <param name="supportedFeatures">Features required to be supported by the
  /// target NF (optional, default to &quot;&quot;)</param>
  virtual void create_or_modify_timer(
      const std::string &realmId, const std::string &storageId,
      const std::string &timerId, const Timer &timer,
      const Pistache::Optional<std::string> &supportedFeatures,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* TimerStartApi_H_ */
