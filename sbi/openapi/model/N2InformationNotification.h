/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * N2InformationNotification.h
 *
 * Data within a N2 information notification request
 */

#ifndef N2InformationNotification_H_
#define N2InformationNotification_H_

#include "GlobalRanNodeId.h"
#include "Guami.h"
#include "Ipv6Addr.h"
#include "N2InfoContainer.h"
#include "N2InfoNotifyReason.h"
#include "SmfChangeInfo.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within a N2 information notification request
/// </summary>
class N2InformationNotification {
public:
  N2InformationNotification();
  virtual ~N2InformationNotification();

  void validate();

  /////////////////////////////////////////////
  /// N2InformationNotification members

  /// <summary>
  ///
  /// </summary>
  std::string getN2NotifySubscriptionId() const;
  void setN2NotifySubscriptionId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  N2InfoContainer getN2InfoContainer() const;
  void setN2InfoContainer(N2InfoContainer const &value);
  bool n2InfoContainerIsSet() const;
  void unsetN2InfoContainer();
  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t> &getToReleaseSessionList();
  void setToReleaseSessionList(std::vector<int32_t> const value);
  bool toReleaseSessionListIsSet() const;
  void unsetToReleaseSessionList();
  /// <summary>
  /// LCS Correlation ID.
  /// </summary>
  std::string getLcsCorrelationId() const;
  void setLcsCorrelationId(std::string const &value);
  bool lcsCorrelationIdIsSet() const;
  void unsetLcsCorrelationId();
  /// <summary>
  ///
  /// </summary>
  N2InfoNotifyReason getNotifyReason() const;
  void setNotifyReason(N2InfoNotifyReason const &value);
  bool notifyReasonIsSet() const;
  void unsetNotifyReason();
  /// <summary>
  ///
  /// </summary>
  std::vector<SmfChangeInfo> &getSmfChangeInfoList();
  void setSmfChangeInfoList(std::vector<SmfChangeInfo> const &value);
  bool smfChangeInfoListIsSet() const;
  void unsetSmfChangeInfoList();
  /// <summary>
  ///
  /// </summary>
  GlobalRanNodeId getRanNodeId() const;
  void setRanNodeId(GlobalRanNodeId const &value);
  bool ranNodeIdIsSet() const;
  void unsetRanNodeId();
  /// <summary>
  ///
  /// </summary>
  std::string getInitialAmfName() const;
  void setInitialAmfName(std::string const &value);
  bool initialAmfNameIsSet() const;
  void unsetInitialAmfName();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getAnN2IPv4Addr() const;
  void setAnN2IPv4Addr(std::string const &value);
  bool anN2IPv4AddrIsSet() const;
  void unsetAnN2IPv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getAnN2IPv6Addr() const;
  void setAnN2IPv6Addr(Ipv6Addr const &value);
  bool anN2IPv6AddrIsSet() const;
  void unsetAnN2IPv6Addr();
  /// <summary>
  ///
  /// </summary>
  Guami getGuami() const;
  void setGuami(Guami const &value);
  bool guamiIsSet() const;
  void unsetGuami();
  /// <summary>
  ///
  /// </summary>
  bool isNotifySourceNgRan() const;
  void setNotifySourceNgRan(bool const value);
  bool notifySourceNgRanIsSet() const;
  void unsetNotifySourceNgRan();

  friend void to_json(nlohmann::json &j, const N2InformationNotification &o);
  friend void from_json(const nlohmann::json &j, N2InformationNotification &o);

protected:
  std::string m_N2NotifySubscriptionId;

  N2InfoContainer m_N2InfoContainer;
  bool m_N2InfoContainerIsSet;
  std::vector<int32_t> m_ToReleaseSessionList;
  bool m_ToReleaseSessionListIsSet;
  std::string m_LcsCorrelationId;
  bool m_LcsCorrelationIdIsSet;
  N2InfoNotifyReason m_NotifyReason;
  bool m_NotifyReasonIsSet;
  std::vector<SmfChangeInfo> m_SmfChangeInfoList;
  bool m_SmfChangeInfoListIsSet;
  GlobalRanNodeId m_RanNodeId;
  bool m_RanNodeIdIsSet;
  std::string m_InitialAmfName;
  bool m_InitialAmfNameIsSet;
  std::string m_AnN2IPv4Addr;
  bool m_AnN2IPv4AddrIsSet;
  Ipv6Addr m_AnN2IPv6Addr;
  bool m_AnN2IPv6AddrIsSet;
  Guami m_Guami;
  bool m_GuamiIsSet;
  bool m_NotifySourceNgRan;
  bool m_NotifySourceNgRanIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* N2InformationNotification_H_ */
