/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NefEventExposureSubsc.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NefEventExposureSubsc::NefEventExposureSubsc() {
  m_EventsRepInfoIsSet = false;
  m_NotifUri = "";
  m_NotifId = "";
  m_EventNotifsIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
}

NefEventExposureSubsc::~NefEventExposureSubsc() {}

void NefEventExposureSubsc::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NefEventExposureSubsc &o) {
  j = nlohmann::json();
  j["eventsSubs"] = o.m_EventsSubs;
  if (o.eventsRepInfoIsSet())
    j["eventsRepInfo"] = o.m_EventsRepInfo;
  j["notifUri"] = o.m_NotifUri;
  j["notifId"] = o.m_NotifId;
  if (o.eventNotifsIsSet() || !o.m_EventNotifs.empty())
    j["eventNotifs"] = o.m_EventNotifs;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, NefEventExposureSubsc &o) {
  j.at("eventsSubs").get_to(o.m_EventsSubs);
  if (j.find("eventsRepInfo") != j.end()) {
    j.at("eventsRepInfo").get_to(o.m_EventsRepInfo);
    o.m_EventsRepInfoIsSet = true;
  }
  j.at("notifUri").get_to(o.m_NotifUri);
  j.at("notifId").get_to(o.m_NotifId);
  if (j.find("eventNotifs") != j.end()) {
    j.at("eventNotifs").get_to(o.m_EventNotifs);
    o.m_EventNotifsIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::vector<NefEventSubs> &NefEventExposureSubsc::getEventsSubs() {
  return m_EventsSubs;
}
void NefEventExposureSubsc::setEventsSubs(
    std::vector<NefEventSubs> const &value) {
  m_EventsSubs = value;
}
ReportingInformation NefEventExposureSubsc::getEventsRepInfo() const {
  return m_EventsRepInfo;
}
void NefEventExposureSubsc::setEventsRepInfo(
    ReportingInformation const &value) {
  m_EventsRepInfo = value;
  m_EventsRepInfoIsSet = true;
}
bool NefEventExposureSubsc::eventsRepInfoIsSet() const {
  return m_EventsRepInfoIsSet;
}
void NefEventExposureSubsc::unsetEventsRepInfo() {
  m_EventsRepInfoIsSet = false;
}
std::string NefEventExposureSubsc::getNotifUri() const { return m_NotifUri; }
void NefEventExposureSubsc::setNotifUri(std::string const &value) {
  m_NotifUri = value;
}
std::string NefEventExposureSubsc::getNotifId() const { return m_NotifId; }
void NefEventExposureSubsc::setNotifId(std::string const &value) {
  m_NotifId = value;
}
std::vector<NefEventNotification> &NefEventExposureSubsc::getEventNotifs() {
  return m_EventNotifs;
}
void NefEventExposureSubsc::setEventNotifs(
    std::vector<NefEventNotification> const &value) {
  m_EventNotifs = value;
  m_EventNotifsIsSet = true;
}
bool NefEventExposureSubsc::eventNotifsIsSet() const {
  return m_EventNotifsIsSet;
}
void NefEventExposureSubsc::unsetEventNotifs() { m_EventNotifsIsSet = false; }
std::string NefEventExposureSubsc::getSuppFeat() const { return m_SuppFeat; }
void NefEventExposureSubsc::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool NefEventExposureSubsc::suppFeatIsSet() const { return m_SuppFeatIsSet; }
void NefEventExposureSubsc::unsetSuppFeat() { m_SuppFeatIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
