/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ThresholdValue.h
 *
 * Indicates the threshold value(s) for RTT and/or Packet Loss Rate.
 */

#ifndef ThresholdValue_H_
#define ThresholdValue_H_

#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Indicates the threshold value(s) for RTT and/or Packet Loss Rate.
/// </summary>
class ThresholdValue {
public:
  ThresholdValue();
  virtual ~ThresholdValue();

  void validate();

  /////////////////////////////////////////////
  /// ThresholdValue members

  /// <summary>
  /// Unsigned integer identifying a threshold value of Maximum RTT in units of
  /// milliseconds.
  /// </summary>
  int32_t getRttThres() const;
  void setRttThres(int32_t const value);
  bool rttThresIsSet() const;
  void unsetRttThres();
  /// <summary>
  /// This data type is defined in the same way as the
  /// \&quot;PacketLossRate\&quot; data type, but with the OpenAPI
  /// \&quot;nullable&#x3D; true\&quot; property
  /// </summary>
  int32_t getPlrThres() const;
  void setPlrThres(int32_t const value);
  bool plrThresIsSet() const;
  void unsetPlrThres();

  friend void to_json(nlohmann::json &j, const ThresholdValue &o);
  friend void from_json(const nlohmann::json &j, ThresholdValue &o);

protected:
  int32_t m_RttThres;
  bool m_RttThresIsSet;
  int32_t m_PlrThres;
  bool m_PlrThresIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ThresholdValue_H_ */
