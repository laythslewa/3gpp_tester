/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NFInstanceIDDocumentApi.h
 *
 *
 */

#ifndef NFInstanceIDDocumentApi_H_
#define NFInstanceIDDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "AuthorizedNssaiAvailabilityInfo.h"
#include "NssaiAvailabilityInfo.h"
#include "PatchItem.h"
#include "ProblemDetails.h"
#include "RedirectResponse.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class NFInstanceIDDocumentApi {
public:
  NFInstanceIDDocumentApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~NFInstanceIDDocumentApi() {}
  void init();

  const std::string base = "/nnssf-nssaiavailability/v1";

private:
  void setupRoutes();

  void
  n_ssai_availability_delete_handler(const Pistache::Rest::Request &request,
                                     Pistache::Http::ResponseWriter response);
  void
  n_ssai_availability_patch_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);
  void n_ssai_availability_put_handler(const Pistache::Rest::Request &request,
                                       Pistache::Http::ResponseWriter response);
  void nf_instance_id_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Deletes an already existing S-NSSAIs per TA provided by the NF service
  /// consumer (e.g AMF)
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="nfId">Identifier of the NF service consumer instance</param>
  virtual void
  n_ssai_availability_delete(const std::string &nfId,
                             Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Updates an already existing S-NSSAIs per TA provided by the NF service
  /// consumer (e.g AMF)
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="nfId">Identifier of the NF service consumer instance</param>
  /// <param name="patchItem">JSON Patch instructions to update at the NSSF, the
  /// S-NSSAIs supported per TA</param> <param
  /// name="contentEncoding">Content-Encoding, described in IETF RFC 7231
  /// (optional, default to &quot;&quot;)</param> <param
  /// name="acceptEncoding">Accept-Encoding, described in IETF RFC 7231
  /// (optional, default to &quot;&quot;)</param>
  virtual void n_ssai_availability_patch(
      const std::string &nfId, const std::vector<PatchItem> &patchItem,
      const Pistache::Optional<Pistache::Http::Header::Raw> &contentEncoding,
      const Pistache::Optional<Pistache::Http::Header::Raw> &acceptEncoding,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Updates/replaces the NSSF with the S-NSSAIs the NF service consumer (e.g
  /// AMF)supports per TA
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="nfId">Identifier of the NF service consumer instance</param>
  /// <param name="nssaiAvailabilityInfo">Parameters to update/replace at the
  /// NSSF, the S-NSSAIs supported per TA</param> <param
  /// name="contentEncoding">Content-Encoding, described in IETF RFC 7231
  /// (optional, default to &quot;&quot;)</param> <param
  /// name="acceptEncoding">Accept-Encoding, described in IETF RFC 7231
  /// (optional, default to &quot;&quot;)</param>
  virtual void n_ssai_availability_put(
      const std::string &nfId,
      const NssaiAvailabilityInfo &nssaiAvailabilityInfo,
      const Pistache::Optional<Pistache::Http::Header::Raw> &contentEncoding,
      const Pistache::Optional<Pistache::Http::Header::Raw> &acceptEncoding,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NFInstanceIDDocumentApi_H_ */
