/**
 * Nnssaaf_NSSAA
 * Network Slice-Specific Authentication and Authorization Service. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SliceAuthInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SliceAuthInfo::SliceAuthInfo() {
  m_Gpsi = "";
  m_EapIdRsp = "";
  m_AmfInstanceId = "";
  m_AmfInstanceIdIsSet = false;
  m_ReauthNotifUri = "";
  m_ReauthNotifUriIsSet = false;
  m_RevocNotifUri = "";
  m_RevocNotifUriIsSet = false;
}

SliceAuthInfo::~SliceAuthInfo() {}

void SliceAuthInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SliceAuthInfo &o) {
  j = nlohmann::json();
  j["gpsi"] = o.m_Gpsi;
  j["snssai"] = o.m_Snssai;
  j["eapIdRsp"] = o.m_EapIdRsp;
  if (o.amfInstanceIdIsSet())
    j["amfInstanceId"] = o.m_AmfInstanceId;
  if (o.reauthNotifUriIsSet())
    j["reauthNotifUri"] = o.m_ReauthNotifUri;
  if (o.revocNotifUriIsSet())
    j["revocNotifUri"] = o.m_RevocNotifUri;
}

void from_json(const nlohmann::json &j, SliceAuthInfo &o) {
  j.at("gpsi").get_to(o.m_Gpsi);
  j.at("snssai").get_to(o.m_Snssai);
  j.at("eapIdRsp").get_to(o.m_EapIdRsp);
  if (j.find("amfInstanceId") != j.end()) {
    j.at("amfInstanceId").get_to(o.m_AmfInstanceId);
    o.m_AmfInstanceIdIsSet = true;
  }
  if (j.find("reauthNotifUri") != j.end()) {
    j.at("reauthNotifUri").get_to(o.m_ReauthNotifUri);
    o.m_ReauthNotifUriIsSet = true;
  }
  if (j.find("revocNotifUri") != j.end()) {
    j.at("revocNotifUri").get_to(o.m_RevocNotifUri);
    o.m_RevocNotifUriIsSet = true;
  }
}

std::string SliceAuthInfo::getGpsi() const { return m_Gpsi; }
void SliceAuthInfo::setGpsi(std::string const &value) { m_Gpsi = value; }
Snssai SliceAuthInfo::getSnssai() const { return m_Snssai; }
void SliceAuthInfo::setSnssai(Snssai const &value) { m_Snssai = value; }
std::string SliceAuthInfo::getEapIdRsp() const { return m_EapIdRsp; }
void SliceAuthInfo::setEapIdRsp(std::string const &value) {
  m_EapIdRsp = value;
}
std::string SliceAuthInfo::getAmfInstanceId() const { return m_AmfInstanceId; }
void SliceAuthInfo::setAmfInstanceId(std::string const &value) {
  m_AmfInstanceId = value;
  m_AmfInstanceIdIsSet = true;
}
bool SliceAuthInfo::amfInstanceIdIsSet() const { return m_AmfInstanceIdIsSet; }
void SliceAuthInfo::unsetAmfInstanceId() { m_AmfInstanceIdIsSet = false; }
std::string SliceAuthInfo::getReauthNotifUri() const {
  return m_ReauthNotifUri;
}
void SliceAuthInfo::setReauthNotifUri(std::string const &value) {
  m_ReauthNotifUri = value;
  m_ReauthNotifUriIsSet = true;
}
bool SliceAuthInfo::reauthNotifUriIsSet() const {
  return m_ReauthNotifUriIsSet;
}
void SliceAuthInfo::unsetReauthNotifUri() { m_ReauthNotifUriIsSet = false; }
std::string SliceAuthInfo::getRevocNotifUri() const { return m_RevocNotifUri; }
void SliceAuthInfo::setRevocNotifUri(std::string const &value) {
  m_RevocNotifUri = value;
  m_RevocNotifUriIsSet = true;
}
bool SliceAuthInfo::revocNotifUriIsSet() const { return m_RevocNotifUriIsSet; }
void SliceAuthInfo::unsetRevocNotifUri() { m_RevocNotifUriIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
