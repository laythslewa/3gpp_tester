/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SmContext.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SmContext::SmContext() {
  m_PduSessionId = 0;
  m_Dnn = "";
  m_SelectedDnn = "";
  m_SelectedDnnIsSet = false;
  m_HplmnSnssaiIsSet = false;
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_HSmfUri = "";
  m_HSmfUriIsSet = false;
  m_SmfUri = "";
  m_SmfUriIsSet = false;
  m_PduSessionRef = "";
  m_PduSessionRefIsSet = false;
  m_PcfId = "";
  m_PcfIdIsSet = false;
  m_PcfGroupId = "";
  m_PcfGroupIdIsSet = false;
  m_PcfSetId = "";
  m_PcfSetIdIsSet = false;
  m_SelModeIsSet = false;
  m_UdmGroupId = "";
  m_UdmGroupIdIsSet = false;
  m_RoutingIndicator = "";
  m_RoutingIndicatorIsSet = false;
  m_HNwPubKeyId = 0;
  m_HNwPubKeyIdIsSet = false;
  m_HSmfInstanceId = "";
  m_HSmfInstanceIdIsSet = false;
  m_SmfInstanceId = "";
  m_SmfInstanceIdIsSet = false;
  m_PduSessionSmfSetId = "";
  m_PduSessionSmfSetIdIsSet = false;
  m_PduSessionSmfServiceSetId = "";
  m_PduSessionSmfServiceSetIdIsSet = false;
  m_PduSessionSmfBindingIsSet = false;
  m_EnablePauseCharging = false;
  m_EnablePauseChargingIsSet = false;
  m_UeIpv4Address = "";
  m_UeIpv4AddressIsSet = false;
  m_UeIpv6PrefixIsSet = false;
  m_EpsPdnCnxInfoIsSet = false;
  m_EpsBearerInfoIsSet = false;
  m_MaxIntegrityProtectedDataRateIsSet = false;
  m_AlwaysOnGranted = false;
  m_AlwaysOnGrantedIsSet = false;
  m_UpSecurityIsSet = false;
  m_HSmfServiceInstanceId = "";
  m_HSmfServiceInstanceIdIsSet = false;
  m_SmfServiceInstanceId = "";
  m_SmfServiceInstanceIdIsSet = false;
  m_RecoveryTime = "";
  m_RecoveryTimeIsSet = false;
  m_ForwardingInd = false;
  m_ForwardingIndIsSet = false;
  m_PsaTunnelInfoIsSet = false;
  m_ChargingId = "";
  m_ChargingIdIsSet = false;
  m_ChargingInfoIsSet = false;
  m_RoamingChargingProfileIsSet = false;
  m_NefExtBufSupportInd = false;
  m_NefExtBufSupportIndIsSet = false;
  m_Ipv6Index = 0;
  m_Ipv6IndexIsSet = false;
  m_DnAaaAddressIsSet = false;
  m_RedundantPduSessionInfoIsSet = false;
  m_RanTunnelInfoIsSet = false;
  m_AddRanTunnelInfoIsSet = false;
  m_RedRanTunnelInfoIsSet = false;
  m_AddRedRanTunnelInfoIsSet = false;
  m_NspuSupportInd = false;
  m_NspuSupportIndIsSet = false;
}

SmContext::~SmContext() {}

void SmContext::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SmContext &o) {
  j = nlohmann::json();
  j["pduSessionId"] = o.m_PduSessionId;
  j["dnn"] = o.m_Dnn;
  if (o.selectedDnnIsSet())
    j["selectedDnn"] = o.m_SelectedDnn;
  j["sNssai"] = o.m_SNssai;
  if (o.hplmnSnssaiIsSet())
    j["hplmnSnssai"] = o.m_HplmnSnssai;
  j["pduSessionType"] = o.m_PduSessionType;
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  if (o.hSmfUriIsSet())
    j["hSmfUri"] = o.m_HSmfUri;
  if (o.smfUriIsSet())
    j["smfUri"] = o.m_SmfUri;
  if (o.pduSessionRefIsSet())
    j["pduSessionRef"] = o.m_PduSessionRef;
  if (o.pcfIdIsSet())
    j["pcfId"] = o.m_PcfId;
  if (o.pcfGroupIdIsSet())
    j["pcfGroupId"] = o.m_PcfGroupId;
  if (o.pcfSetIdIsSet())
    j["pcfSetId"] = o.m_PcfSetId;
  if (o.selModeIsSet())
    j["selMode"] = o.m_SelMode;
  if (o.udmGroupIdIsSet())
    j["udmGroupId"] = o.m_UdmGroupId;
  if (o.routingIndicatorIsSet())
    j["routingIndicator"] = o.m_RoutingIndicator;
  if (o.hNwPubKeyIdIsSet())
    j["hNwPubKeyId"] = o.m_HNwPubKeyId;
  j["sessionAmbr"] = o.m_SessionAmbr;
  j["qosFlowsList"] = o.m_QosFlowsList;
  if (o.hSmfInstanceIdIsSet())
    j["hSmfInstanceId"] = o.m_HSmfInstanceId;
  if (o.smfInstanceIdIsSet())
    j["smfInstanceId"] = o.m_SmfInstanceId;
  if (o.pduSessionSmfSetIdIsSet())
    j["pduSessionSmfSetId"] = o.m_PduSessionSmfSetId;
  if (o.pduSessionSmfServiceSetIdIsSet())
    j["pduSessionSmfServiceSetId"] = o.m_PduSessionSmfServiceSetId;
  if (o.pduSessionSmfBindingIsSet())
    j["pduSessionSmfBinding"] = o.m_PduSessionSmfBinding;
  if (o.enablePauseChargingIsSet())
    j["enablePauseCharging"] = o.m_EnablePauseCharging;
  if (o.ueIpv4AddressIsSet())
    j["ueIpv4Address"] = o.m_UeIpv4Address;
  if (o.ueIpv6PrefixIsSet())
    j["ueIpv6Prefix"] = o.m_UeIpv6Prefix;
  if (o.epsPdnCnxInfoIsSet())
    j["epsPdnCnxInfo"] = o.m_EpsPdnCnxInfo;
  if (o.epsBearerInfoIsSet() || !o.m_EpsBearerInfo.empty())
    j["epsBearerInfo"] = o.m_EpsBearerInfo;
  if (o.maxIntegrityProtectedDataRateIsSet())
    j["maxIntegrityProtectedDataRate"] = o.m_MaxIntegrityProtectedDataRate;
  if (o.alwaysOnGrantedIsSet())
    j["alwaysOnGranted"] = o.m_AlwaysOnGranted;
  if (o.upSecurityIsSet())
    j["upSecurity"] = o.m_UpSecurity;
  if (o.hSmfServiceInstanceIdIsSet())
    j["hSmfServiceInstanceId"] = o.m_HSmfServiceInstanceId;
  if (o.smfServiceInstanceIdIsSet())
    j["smfServiceInstanceId"] = o.m_SmfServiceInstanceId;
  if (o.recoveryTimeIsSet())
    j["recoveryTime"] = o.m_RecoveryTime;
  if (o.forwardingIndIsSet())
    j["forwardingInd"] = o.m_ForwardingInd;
  if (o.psaTunnelInfoIsSet())
    j["psaTunnelInfo"] = o.m_PsaTunnelInfo;
  if (o.chargingIdIsSet())
    j["chargingId"] = o.m_ChargingId;
  if (o.chargingInfoIsSet())
    j["chargingInfo"] = o.m_ChargingInfo;
  if (o.roamingChargingProfileIsSet())
    j["roamingChargingProfile"] = o.m_RoamingChargingProfile;
  if (o.nefExtBufSupportIndIsSet())
    j["nefExtBufSupportInd"] = o.m_NefExtBufSupportInd;
  if (o.ipv6IndexIsSet())
    j["ipv6Index"] = o.m_Ipv6Index;
  if (o.dnAaaAddressIsSet())
    j["dnAaaAddress"] = o.m_DnAaaAddress;
  if (o.redundantPduSessionInfoIsSet())
    j["redundantPduSessionInfo"] = o.m_RedundantPduSessionInfo;
  if (o.ranTunnelInfoIsSet())
    j["ranTunnelInfo"] = o.m_RanTunnelInfo;
  if (o.addRanTunnelInfoIsSet() || !o.m_AddRanTunnelInfo.empty())
    j["addRanTunnelInfo"] = o.m_AddRanTunnelInfo;
  if (o.redRanTunnelInfoIsSet())
    j["redRanTunnelInfo"] = o.m_RedRanTunnelInfo;
  if (o.addRedRanTunnelInfoIsSet() || !o.m_AddRedRanTunnelInfo.empty())
    j["addRedRanTunnelInfo"] = o.m_AddRedRanTunnelInfo;
  if (o.nspuSupportIndIsSet())
    j["nspuSupportInd"] = o.m_NspuSupportInd;
}

void from_json(const nlohmann::json &j, SmContext &o) {
  j.at("pduSessionId").get_to(o.m_PduSessionId);
  j.at("dnn").get_to(o.m_Dnn);
  if (j.find("selectedDnn") != j.end()) {
    j.at("selectedDnn").get_to(o.m_SelectedDnn);
    o.m_SelectedDnnIsSet = true;
  }
  j.at("sNssai").get_to(o.m_SNssai);
  if (j.find("hplmnSnssai") != j.end()) {
    j.at("hplmnSnssai").get_to(o.m_HplmnSnssai);
    o.m_HplmnSnssaiIsSet = true;
  }
  j.at("pduSessionType").get_to(o.m_PduSessionType);
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("hSmfUri") != j.end()) {
    j.at("hSmfUri").get_to(o.m_HSmfUri);
    o.m_HSmfUriIsSet = true;
  }
  if (j.find("smfUri") != j.end()) {
    j.at("smfUri").get_to(o.m_SmfUri);
    o.m_SmfUriIsSet = true;
  }
  if (j.find("pduSessionRef") != j.end()) {
    j.at("pduSessionRef").get_to(o.m_PduSessionRef);
    o.m_PduSessionRefIsSet = true;
  }
  if (j.find("pcfId") != j.end()) {
    j.at("pcfId").get_to(o.m_PcfId);
    o.m_PcfIdIsSet = true;
  }
  if (j.find("pcfGroupId") != j.end()) {
    j.at("pcfGroupId").get_to(o.m_PcfGroupId);
    o.m_PcfGroupIdIsSet = true;
  }
  if (j.find("pcfSetId") != j.end()) {
    j.at("pcfSetId").get_to(o.m_PcfSetId);
    o.m_PcfSetIdIsSet = true;
  }
  if (j.find("selMode") != j.end()) {
    j.at("selMode").get_to(o.m_SelMode);
    o.m_SelModeIsSet = true;
  }
  if (j.find("udmGroupId") != j.end()) {
    j.at("udmGroupId").get_to(o.m_UdmGroupId);
    o.m_UdmGroupIdIsSet = true;
  }
  if (j.find("routingIndicator") != j.end()) {
    j.at("routingIndicator").get_to(o.m_RoutingIndicator);
    o.m_RoutingIndicatorIsSet = true;
  }
  if (j.find("hNwPubKeyId") != j.end()) {
    j.at("hNwPubKeyId").get_to(o.m_HNwPubKeyId);
    o.m_HNwPubKeyIdIsSet = true;
  }
  j.at("sessionAmbr").get_to(o.m_SessionAmbr);
  j.at("qosFlowsList").get_to(o.m_QosFlowsList);
  if (j.find("hSmfInstanceId") != j.end()) {
    j.at("hSmfInstanceId").get_to(o.m_HSmfInstanceId);
    o.m_HSmfInstanceIdIsSet = true;
  }
  if (j.find("smfInstanceId") != j.end()) {
    j.at("smfInstanceId").get_to(o.m_SmfInstanceId);
    o.m_SmfInstanceIdIsSet = true;
  }
  if (j.find("pduSessionSmfSetId") != j.end()) {
    j.at("pduSessionSmfSetId").get_to(o.m_PduSessionSmfSetId);
    o.m_PduSessionSmfSetIdIsSet = true;
  }
  if (j.find("pduSessionSmfServiceSetId") != j.end()) {
    j.at("pduSessionSmfServiceSetId").get_to(o.m_PduSessionSmfServiceSetId);
    o.m_PduSessionSmfServiceSetIdIsSet = true;
  }
  if (j.find("pduSessionSmfBinding") != j.end()) {
    j.at("pduSessionSmfBinding").get_to(o.m_PduSessionSmfBinding);
    o.m_PduSessionSmfBindingIsSet = true;
  }
  if (j.find("enablePauseCharging") != j.end()) {
    j.at("enablePauseCharging").get_to(o.m_EnablePauseCharging);
    o.m_EnablePauseChargingIsSet = true;
  }
  if (j.find("ueIpv4Address") != j.end()) {
    j.at("ueIpv4Address").get_to(o.m_UeIpv4Address);
    o.m_UeIpv4AddressIsSet = true;
  }
  if (j.find("ueIpv6Prefix") != j.end()) {
    j.at("ueIpv6Prefix").get_to(o.m_UeIpv6Prefix);
    o.m_UeIpv6PrefixIsSet = true;
  }
  if (j.find("epsPdnCnxInfo") != j.end()) {
    j.at("epsPdnCnxInfo").get_to(o.m_EpsPdnCnxInfo);
    o.m_EpsPdnCnxInfoIsSet = true;
  }
  if (j.find("epsBearerInfo") != j.end()) {
    j.at("epsBearerInfo").get_to(o.m_EpsBearerInfo);
    o.m_EpsBearerInfoIsSet = true;
  }
  if (j.find("maxIntegrityProtectedDataRate") != j.end()) {
    j.at("maxIntegrityProtectedDataRate")
        .get_to(o.m_MaxIntegrityProtectedDataRate);
    o.m_MaxIntegrityProtectedDataRateIsSet = true;
  }
  if (j.find("alwaysOnGranted") != j.end()) {
    j.at("alwaysOnGranted").get_to(o.m_AlwaysOnGranted);
    o.m_AlwaysOnGrantedIsSet = true;
  }
  if (j.find("upSecurity") != j.end()) {
    j.at("upSecurity").get_to(o.m_UpSecurity);
    o.m_UpSecurityIsSet = true;
  }
  if (j.find("hSmfServiceInstanceId") != j.end()) {
    j.at("hSmfServiceInstanceId").get_to(o.m_HSmfServiceInstanceId);
    o.m_HSmfServiceInstanceIdIsSet = true;
  }
  if (j.find("smfServiceInstanceId") != j.end()) {
    j.at("smfServiceInstanceId").get_to(o.m_SmfServiceInstanceId);
    o.m_SmfServiceInstanceIdIsSet = true;
  }
  if (j.find("recoveryTime") != j.end()) {
    j.at("recoveryTime").get_to(o.m_RecoveryTime);
    o.m_RecoveryTimeIsSet = true;
  }
  if (j.find("forwardingInd") != j.end()) {
    j.at("forwardingInd").get_to(o.m_ForwardingInd);
    o.m_ForwardingIndIsSet = true;
  }
  if (j.find("psaTunnelInfo") != j.end()) {
    j.at("psaTunnelInfo").get_to(o.m_PsaTunnelInfo);
    o.m_PsaTunnelInfoIsSet = true;
  }
  if (j.find("chargingId") != j.end()) {
    j.at("chargingId").get_to(o.m_ChargingId);
    o.m_ChargingIdIsSet = true;
  }
  if (j.find("chargingInfo") != j.end()) {
    j.at("chargingInfo").get_to(o.m_ChargingInfo);
    o.m_ChargingInfoIsSet = true;
  }
  if (j.find("roamingChargingProfile") != j.end()) {
    j.at("roamingChargingProfile").get_to(o.m_RoamingChargingProfile);
    o.m_RoamingChargingProfileIsSet = true;
  }
  if (j.find("nefExtBufSupportInd") != j.end()) {
    j.at("nefExtBufSupportInd").get_to(o.m_NefExtBufSupportInd);
    o.m_NefExtBufSupportIndIsSet = true;
  }
  if (j.find("ipv6Index") != j.end()) {
    j.at("ipv6Index").get_to(o.m_Ipv6Index);
    o.m_Ipv6IndexIsSet = true;
  }
  if (j.find("dnAaaAddress") != j.end()) {
    j.at("dnAaaAddress").get_to(o.m_DnAaaAddress);
    o.m_DnAaaAddressIsSet = true;
  }
  if (j.find("redundantPduSessionInfo") != j.end()) {
    j.at("redundantPduSessionInfo").get_to(o.m_RedundantPduSessionInfo);
    o.m_RedundantPduSessionInfoIsSet = true;
  }
  if (j.find("ranTunnelInfo") != j.end()) {
    j.at("ranTunnelInfo").get_to(o.m_RanTunnelInfo);
    o.m_RanTunnelInfoIsSet = true;
  }
  if (j.find("addRanTunnelInfo") != j.end()) {
    j.at("addRanTunnelInfo").get_to(o.m_AddRanTunnelInfo);
    o.m_AddRanTunnelInfoIsSet = true;
  }
  if (j.find("redRanTunnelInfo") != j.end()) {
    j.at("redRanTunnelInfo").get_to(o.m_RedRanTunnelInfo);
    o.m_RedRanTunnelInfoIsSet = true;
  }
  if (j.find("addRedRanTunnelInfo") != j.end()) {
    j.at("addRedRanTunnelInfo").get_to(o.m_AddRedRanTunnelInfo);
    o.m_AddRedRanTunnelInfoIsSet = true;
  }
  if (j.find("nspuSupportInd") != j.end()) {
    j.at("nspuSupportInd").get_to(o.m_NspuSupportInd);
    o.m_NspuSupportIndIsSet = true;
  }
}

int32_t SmContext::getPduSessionId() const { return m_PduSessionId; }
void SmContext::setPduSessionId(int32_t const value) { m_PduSessionId = value; }
std::string SmContext::getDnn() const { return m_Dnn; }
void SmContext::setDnn(std::string const &value) { m_Dnn = value; }
std::string SmContext::getSelectedDnn() const { return m_SelectedDnn; }
void SmContext::setSelectedDnn(std::string const &value) {
  m_SelectedDnn = value;
  m_SelectedDnnIsSet = true;
}
bool SmContext::selectedDnnIsSet() const { return m_SelectedDnnIsSet; }
void SmContext::unsetSelectedDnn() { m_SelectedDnnIsSet = false; }
Snssai SmContext::getSNssai() const { return m_SNssai; }
void SmContext::setSNssai(Snssai const &value) { m_SNssai = value; }
Snssai SmContext::getHplmnSnssai() const { return m_HplmnSnssai; }
void SmContext::setHplmnSnssai(Snssai const &value) {
  m_HplmnSnssai = value;
  m_HplmnSnssaiIsSet = true;
}
bool SmContext::hplmnSnssaiIsSet() const { return m_HplmnSnssaiIsSet; }
void SmContext::unsetHplmnSnssai() { m_HplmnSnssaiIsSet = false; }
PduSessionType SmContext::getPduSessionType() const { return m_PduSessionType; }
void SmContext::setPduSessionType(PduSessionType const &value) {
  m_PduSessionType = value;
}
std::string SmContext::getGpsi() const { return m_Gpsi; }
void SmContext::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool SmContext::gpsiIsSet() const { return m_GpsiIsSet; }
void SmContext::unsetGpsi() { m_GpsiIsSet = false; }
std::string SmContext::getHSmfUri() const { return m_HSmfUri; }
void SmContext::setHSmfUri(std::string const &value) {
  m_HSmfUri = value;
  m_HSmfUriIsSet = true;
}
bool SmContext::hSmfUriIsSet() const { return m_HSmfUriIsSet; }
void SmContext::unsetHSmfUri() { m_HSmfUriIsSet = false; }
std::string SmContext::getSmfUri() const { return m_SmfUri; }
void SmContext::setSmfUri(std::string const &value) {
  m_SmfUri = value;
  m_SmfUriIsSet = true;
}
bool SmContext::smfUriIsSet() const { return m_SmfUriIsSet; }
void SmContext::unsetSmfUri() { m_SmfUriIsSet = false; }
std::string SmContext::getPduSessionRef() const { return m_PduSessionRef; }
void SmContext::setPduSessionRef(std::string const &value) {
  m_PduSessionRef = value;
  m_PduSessionRefIsSet = true;
}
bool SmContext::pduSessionRefIsSet() const { return m_PduSessionRefIsSet; }
void SmContext::unsetPduSessionRef() { m_PduSessionRefIsSet = false; }
std::string SmContext::getPcfId() const { return m_PcfId; }
void SmContext::setPcfId(std::string const &value) {
  m_PcfId = value;
  m_PcfIdIsSet = true;
}
bool SmContext::pcfIdIsSet() const { return m_PcfIdIsSet; }
void SmContext::unsetPcfId() { m_PcfIdIsSet = false; }
std::string SmContext::getPcfGroupId() const { return m_PcfGroupId; }
void SmContext::setPcfGroupId(std::string const &value) {
  m_PcfGroupId = value;
  m_PcfGroupIdIsSet = true;
}
bool SmContext::pcfGroupIdIsSet() const { return m_PcfGroupIdIsSet; }
void SmContext::unsetPcfGroupId() { m_PcfGroupIdIsSet = false; }
std::string SmContext::getPcfSetId() const { return m_PcfSetId; }
void SmContext::setPcfSetId(std::string const &value) {
  m_PcfSetId = value;
  m_PcfSetIdIsSet = true;
}
bool SmContext::pcfSetIdIsSet() const { return m_PcfSetIdIsSet; }
void SmContext::unsetPcfSetId() { m_PcfSetIdIsSet = false; }
DnnSelectionMode SmContext::getSelMode() const { return m_SelMode; }
void SmContext::setSelMode(DnnSelectionMode const &value) {
  m_SelMode = value;
  m_SelModeIsSet = true;
}
bool SmContext::selModeIsSet() const { return m_SelModeIsSet; }
void SmContext::unsetSelMode() { m_SelModeIsSet = false; }
std::string SmContext::getUdmGroupId() const { return m_UdmGroupId; }
void SmContext::setUdmGroupId(std::string const &value) {
  m_UdmGroupId = value;
  m_UdmGroupIdIsSet = true;
}
bool SmContext::udmGroupIdIsSet() const { return m_UdmGroupIdIsSet; }
void SmContext::unsetUdmGroupId() { m_UdmGroupIdIsSet = false; }
std::string SmContext::getRoutingIndicator() const {
  return m_RoutingIndicator;
}
void SmContext::setRoutingIndicator(std::string const &value) {
  m_RoutingIndicator = value;
  m_RoutingIndicatorIsSet = true;
}
bool SmContext::routingIndicatorIsSet() const {
  return m_RoutingIndicatorIsSet;
}
void SmContext::unsetRoutingIndicator() { m_RoutingIndicatorIsSet = false; }
int32_t SmContext::getHNwPubKeyId() const { return m_HNwPubKeyId; }
void SmContext::setHNwPubKeyId(int32_t const value) {
  m_HNwPubKeyId = value;
  m_HNwPubKeyIdIsSet = true;
}
bool SmContext::hNwPubKeyIdIsSet() const { return m_HNwPubKeyIdIsSet; }
void SmContext::unsetHNwPubKeyId() { m_HNwPubKeyIdIsSet = false; }
Ambr SmContext::getSessionAmbr() const { return m_SessionAmbr; }
void SmContext::setSessionAmbr(Ambr const &value) { m_SessionAmbr = value; }
std::vector<QosFlowSetupItem> &SmContext::getQosFlowsList() {
  return m_QosFlowsList;
}
void SmContext::setQosFlowsList(std::vector<QosFlowSetupItem> const &value) {
  m_QosFlowsList = value;
}
std::string SmContext::getHSmfInstanceId() const { return m_HSmfInstanceId; }
void SmContext::setHSmfInstanceId(std::string const &value) {
  m_HSmfInstanceId = value;
  m_HSmfInstanceIdIsSet = true;
}
bool SmContext::hSmfInstanceIdIsSet() const { return m_HSmfInstanceIdIsSet; }
void SmContext::unsetHSmfInstanceId() { m_HSmfInstanceIdIsSet = false; }
std::string SmContext::getSmfInstanceId() const { return m_SmfInstanceId; }
void SmContext::setSmfInstanceId(std::string const &value) {
  m_SmfInstanceId = value;
  m_SmfInstanceIdIsSet = true;
}
bool SmContext::smfInstanceIdIsSet() const { return m_SmfInstanceIdIsSet; }
void SmContext::unsetSmfInstanceId() { m_SmfInstanceIdIsSet = false; }
std::string SmContext::getPduSessionSmfSetId() const {
  return m_PduSessionSmfSetId;
}
void SmContext::setPduSessionSmfSetId(std::string const &value) {
  m_PduSessionSmfSetId = value;
  m_PduSessionSmfSetIdIsSet = true;
}
bool SmContext::pduSessionSmfSetIdIsSet() const {
  return m_PduSessionSmfSetIdIsSet;
}
void SmContext::unsetPduSessionSmfSetId() { m_PduSessionSmfSetIdIsSet = false; }
std::string SmContext::getPduSessionSmfServiceSetId() const {
  return m_PduSessionSmfServiceSetId;
}
void SmContext::setPduSessionSmfServiceSetId(std::string const &value) {
  m_PduSessionSmfServiceSetId = value;
  m_PduSessionSmfServiceSetIdIsSet = true;
}
bool SmContext::pduSessionSmfServiceSetIdIsSet() const {
  return m_PduSessionSmfServiceSetIdIsSet;
}
void SmContext::unsetPduSessionSmfServiceSetId() {
  m_PduSessionSmfServiceSetIdIsSet = false;
}
SbiBindingLevel SmContext::getPduSessionSmfBinding() const {
  return m_PduSessionSmfBinding;
}
void SmContext::setPduSessionSmfBinding(SbiBindingLevel const &value) {
  m_PduSessionSmfBinding = value;
  m_PduSessionSmfBindingIsSet = true;
}
bool SmContext::pduSessionSmfBindingIsSet() const {
  return m_PduSessionSmfBindingIsSet;
}
void SmContext::unsetPduSessionSmfBinding() {
  m_PduSessionSmfBindingIsSet = false;
}
bool SmContext::isEnablePauseCharging() const { return m_EnablePauseCharging; }
void SmContext::setEnablePauseCharging(bool const value) {
  m_EnablePauseCharging = value;
  m_EnablePauseChargingIsSet = true;
}
bool SmContext::enablePauseChargingIsSet() const {
  return m_EnablePauseChargingIsSet;
}
void SmContext::unsetEnablePauseCharging() {
  m_EnablePauseChargingIsSet = false;
}
std::string SmContext::getUeIpv4Address() const { return m_UeIpv4Address; }
void SmContext::setUeIpv4Address(std::string const &value) {
  m_UeIpv4Address = value;
  m_UeIpv4AddressIsSet = true;
}
bool SmContext::ueIpv4AddressIsSet() const { return m_UeIpv4AddressIsSet; }
void SmContext::unsetUeIpv4Address() { m_UeIpv4AddressIsSet = false; }
Ipv6Prefix SmContext::getUeIpv6Prefix() const { return m_UeIpv6Prefix; }
void SmContext::setUeIpv6Prefix(Ipv6Prefix const &value) {
  m_UeIpv6Prefix = value;
  m_UeIpv6PrefixIsSet = true;
}
bool SmContext::ueIpv6PrefixIsSet() const { return m_UeIpv6PrefixIsSet; }
void SmContext::unsetUeIpv6Prefix() { m_UeIpv6PrefixIsSet = false; }
EpsPdnCnxInfo SmContext::getEpsPdnCnxInfo() const { return m_EpsPdnCnxInfo; }
void SmContext::setEpsPdnCnxInfo(EpsPdnCnxInfo const &value) {
  m_EpsPdnCnxInfo = value;
  m_EpsPdnCnxInfoIsSet = true;
}
bool SmContext::epsPdnCnxInfoIsSet() const { return m_EpsPdnCnxInfoIsSet; }
void SmContext::unsetEpsPdnCnxInfo() { m_EpsPdnCnxInfoIsSet = false; }
std::vector<EpsBearerInfo> &SmContext::getEpsBearerInfo() {
  return m_EpsBearerInfo;
}
void SmContext::setEpsBearerInfo(std::vector<EpsBearerInfo> const &value) {
  m_EpsBearerInfo = value;
  m_EpsBearerInfoIsSet = true;
}
bool SmContext::epsBearerInfoIsSet() const { return m_EpsBearerInfoIsSet; }
void SmContext::unsetEpsBearerInfo() { m_EpsBearerInfoIsSet = false; }
MaxIntegrityProtectedDataRate
SmContext::getMaxIntegrityProtectedDataRate() const {
  return m_MaxIntegrityProtectedDataRate;
}
void SmContext::setMaxIntegrityProtectedDataRate(
    MaxIntegrityProtectedDataRate const &value) {
  m_MaxIntegrityProtectedDataRate = value;
  m_MaxIntegrityProtectedDataRateIsSet = true;
}
bool SmContext::maxIntegrityProtectedDataRateIsSet() const {
  return m_MaxIntegrityProtectedDataRateIsSet;
}
void SmContext::unsetMaxIntegrityProtectedDataRate() {
  m_MaxIntegrityProtectedDataRateIsSet = false;
}
bool SmContext::isAlwaysOnGranted() const { return m_AlwaysOnGranted; }
void SmContext::setAlwaysOnGranted(bool const value) {
  m_AlwaysOnGranted = value;
  m_AlwaysOnGrantedIsSet = true;
}
bool SmContext::alwaysOnGrantedIsSet() const { return m_AlwaysOnGrantedIsSet; }
void SmContext::unsetAlwaysOnGranted() { m_AlwaysOnGrantedIsSet = false; }
UpSecurity SmContext::getUpSecurity() const { return m_UpSecurity; }
void SmContext::setUpSecurity(UpSecurity const &value) {
  m_UpSecurity = value;
  m_UpSecurityIsSet = true;
}
bool SmContext::upSecurityIsSet() const { return m_UpSecurityIsSet; }
void SmContext::unsetUpSecurity() { m_UpSecurityIsSet = false; }
std::string SmContext::getHSmfServiceInstanceId() const {
  return m_HSmfServiceInstanceId;
}
void SmContext::setHSmfServiceInstanceId(std::string const &value) {
  m_HSmfServiceInstanceId = value;
  m_HSmfServiceInstanceIdIsSet = true;
}
bool SmContext::hSmfServiceInstanceIdIsSet() const {
  return m_HSmfServiceInstanceIdIsSet;
}
void SmContext::unsetHSmfServiceInstanceId() {
  m_HSmfServiceInstanceIdIsSet = false;
}
std::string SmContext::getSmfServiceInstanceId() const {
  return m_SmfServiceInstanceId;
}
void SmContext::setSmfServiceInstanceId(std::string const &value) {
  m_SmfServiceInstanceId = value;
  m_SmfServiceInstanceIdIsSet = true;
}
bool SmContext::smfServiceInstanceIdIsSet() const {
  return m_SmfServiceInstanceIdIsSet;
}
void SmContext::unsetSmfServiceInstanceId() {
  m_SmfServiceInstanceIdIsSet = false;
}
std::string SmContext::getRecoveryTime() const { return m_RecoveryTime; }
void SmContext::setRecoveryTime(std::string const &value) {
  m_RecoveryTime = value;
  m_RecoveryTimeIsSet = true;
}
bool SmContext::recoveryTimeIsSet() const { return m_RecoveryTimeIsSet; }
void SmContext::unsetRecoveryTime() { m_RecoveryTimeIsSet = false; }
bool SmContext::isForwardingInd() const { return m_ForwardingInd; }
void SmContext::setForwardingInd(bool const value) {
  m_ForwardingInd = value;
  m_ForwardingIndIsSet = true;
}
bool SmContext::forwardingIndIsSet() const { return m_ForwardingIndIsSet; }
void SmContext::unsetForwardingInd() { m_ForwardingIndIsSet = false; }
TunnelInfo SmContext::getPsaTunnelInfo() const { return m_PsaTunnelInfo; }
void SmContext::setPsaTunnelInfo(TunnelInfo const &value) {
  m_PsaTunnelInfo = value;
  m_PsaTunnelInfoIsSet = true;
}
bool SmContext::psaTunnelInfoIsSet() const { return m_PsaTunnelInfoIsSet; }
void SmContext::unsetPsaTunnelInfo() { m_PsaTunnelInfoIsSet = false; }
std::string SmContext::getChargingId() const { return m_ChargingId; }
void SmContext::setChargingId(std::string const &value) {
  m_ChargingId = value;
  m_ChargingIdIsSet = true;
}
bool SmContext::chargingIdIsSet() const { return m_ChargingIdIsSet; }
void SmContext::unsetChargingId() { m_ChargingIdIsSet = false; }
ChargingInformation SmContext::getChargingInfo() const {
  return m_ChargingInfo;
}
void SmContext::setChargingInfo(ChargingInformation const &value) {
  m_ChargingInfo = value;
  m_ChargingInfoIsSet = true;
}
bool SmContext::chargingInfoIsSet() const { return m_ChargingInfoIsSet; }
void SmContext::unsetChargingInfo() { m_ChargingInfoIsSet = false; }
RoamingChargingProfile SmContext::getRoamingChargingProfile() const {
  return m_RoamingChargingProfile;
}
void SmContext::setRoamingChargingProfile(RoamingChargingProfile const &value) {
  m_RoamingChargingProfile = value;
  m_RoamingChargingProfileIsSet = true;
}
bool SmContext::roamingChargingProfileIsSet() const {
  return m_RoamingChargingProfileIsSet;
}
void SmContext::unsetRoamingChargingProfile() {
  m_RoamingChargingProfileIsSet = false;
}
bool SmContext::isNefExtBufSupportInd() const { return m_NefExtBufSupportInd; }
void SmContext::setNefExtBufSupportInd(bool const value) {
  m_NefExtBufSupportInd = value;
  m_NefExtBufSupportIndIsSet = true;
}
bool SmContext::nefExtBufSupportIndIsSet() const {
  return m_NefExtBufSupportIndIsSet;
}
void SmContext::unsetNefExtBufSupportInd() {
  m_NefExtBufSupportIndIsSet = false;
}
int32_t SmContext::getIpv6Index() const { return m_Ipv6Index; }
void SmContext::setIpv6Index(int32_t const value) {
  m_Ipv6Index = value;
  m_Ipv6IndexIsSet = true;
}
bool SmContext::ipv6IndexIsSet() const { return m_Ipv6IndexIsSet; }
void SmContext::unsetIpv6Index() { m_Ipv6IndexIsSet = false; }
IpAddress SmContext::getDnAaaAddress() const { return m_DnAaaAddress; }
void SmContext::setDnAaaAddress(IpAddress const &value) {
  m_DnAaaAddress = value;
  m_DnAaaAddressIsSet = true;
}
bool SmContext::dnAaaAddressIsSet() const { return m_DnAaaAddressIsSet; }
void SmContext::unsetDnAaaAddress() { m_DnAaaAddressIsSet = false; }
RedundantPduSessionInformation SmContext::getRedundantPduSessionInfo() const {
  return m_RedundantPduSessionInfo;
}
void SmContext::setRedundantPduSessionInfo(
    RedundantPduSessionInformation const &value) {
  m_RedundantPduSessionInfo = value;
  m_RedundantPduSessionInfoIsSet = true;
}
bool SmContext::redundantPduSessionInfoIsSet() const {
  return m_RedundantPduSessionInfoIsSet;
}
void SmContext::unsetRedundantPduSessionInfo() {
  m_RedundantPduSessionInfoIsSet = false;
}
QosFlowTunnel SmContext::getRanTunnelInfo() const { return m_RanTunnelInfo; }
void SmContext::setRanTunnelInfo(QosFlowTunnel const &value) {
  m_RanTunnelInfo = value;
  m_RanTunnelInfoIsSet = true;
}
bool SmContext::ranTunnelInfoIsSet() const { return m_RanTunnelInfoIsSet; }
void SmContext::unsetRanTunnelInfo() { m_RanTunnelInfoIsSet = false; }
std::vector<QosFlowTunnel> &SmContext::getAddRanTunnelInfo() {
  return m_AddRanTunnelInfo;
}
void SmContext::setAddRanTunnelInfo(std::vector<QosFlowTunnel> const &value) {
  m_AddRanTunnelInfo = value;
  m_AddRanTunnelInfoIsSet = true;
}
bool SmContext::addRanTunnelInfoIsSet() const {
  return m_AddRanTunnelInfoIsSet;
}
void SmContext::unsetAddRanTunnelInfo() { m_AddRanTunnelInfoIsSet = false; }
QosFlowTunnel SmContext::getRedRanTunnelInfo() const {
  return m_RedRanTunnelInfo;
}
void SmContext::setRedRanTunnelInfo(QosFlowTunnel const &value) {
  m_RedRanTunnelInfo = value;
  m_RedRanTunnelInfoIsSet = true;
}
bool SmContext::redRanTunnelInfoIsSet() const {
  return m_RedRanTunnelInfoIsSet;
}
void SmContext::unsetRedRanTunnelInfo() { m_RedRanTunnelInfoIsSet = false; }
std::vector<QosFlowTunnel> &SmContext::getAddRedRanTunnelInfo() {
  return m_AddRedRanTunnelInfo;
}
void SmContext::setAddRedRanTunnelInfo(
    std::vector<QosFlowTunnel> const &value) {
  m_AddRedRanTunnelInfo = value;
  m_AddRedRanTunnelInfoIsSet = true;
}
bool SmContext::addRedRanTunnelInfoIsSet() const {
  return m_AddRedRanTunnelInfoIsSet;
}
void SmContext::unsetAddRedRanTunnelInfo() {
  m_AddRedRanTunnelInfoIsSet = false;
}
bool SmContext::isNspuSupportInd() const { return m_NspuSupportInd; }
void SmContext::setNspuSupportInd(bool const value) {
  m_NspuSupportInd = value;
  m_NspuSupportIndIsSet = true;
}
bool SmContext::nspuSupportIndIsSet() const { return m_NspuSupportIndIsSet; }
void SmContext::unsetNspuSupportInd() { m_NspuSupportIndIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
