/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeContextRelocateData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeContextRelocateData::UeContextRelocateData() {
  m_PduSessionListIsSet = false;
  m_UeRadioCapabilityIsSet = false;
  m_NgapCauseIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

UeContextRelocateData::~UeContextRelocateData() {}

void UeContextRelocateData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UeContextRelocateData &o) {
  j = nlohmann::json();
  j["ueContext"] = o.m_UeContext;
  j["targetId"] = o.m_TargetId;
  j["sourceToTargetData"] = o.m_SourceToTargetData;
  j["forwardRelocationRequest"] = o.m_ForwardRelocationRequest;
  if (o.pduSessionListIsSet() || !o.m_PduSessionList.empty())
    j["pduSessionList"] = o.m_PduSessionList;
  if (o.ueRadioCapabilityIsSet())
    j["ueRadioCapability"] = o.m_UeRadioCapability;
  if (o.ngapCauseIsSet())
    j["ngapCause"] = o.m_NgapCause;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, UeContextRelocateData &o) {
  j.at("ueContext").get_to(o.m_UeContext);
  j.at("targetId").get_to(o.m_TargetId);
  j.at("sourceToTargetData").get_to(o.m_SourceToTargetData);
  j.at("forwardRelocationRequest").get_to(o.m_ForwardRelocationRequest);
  if (j.find("pduSessionList") != j.end()) {
    j.at("pduSessionList").get_to(o.m_PduSessionList);
    o.m_PduSessionListIsSet = true;
  }
  if (j.find("ueRadioCapability") != j.end()) {
    j.at("ueRadioCapability").get_to(o.m_UeRadioCapability);
    o.m_UeRadioCapabilityIsSet = true;
  }
  if (j.find("ngapCause") != j.end()) {
    j.at("ngapCause").get_to(o.m_NgapCause);
    o.m_NgapCauseIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

UeContext UeContextRelocateData::getUeContext() const { return m_UeContext; }
void UeContextRelocateData::setUeContext(UeContext const &value) {
  m_UeContext = value;
}
NgRanTargetId UeContextRelocateData::getTargetId() const { return m_TargetId; }
void UeContextRelocateData::setTargetId(NgRanTargetId const &value) {
  m_TargetId = value;
}
N2InfoContent UeContextRelocateData::getSourceToTargetData() const {
  return m_SourceToTargetData;
}
void UeContextRelocateData::setSourceToTargetData(N2InfoContent const &value) {
  m_SourceToTargetData = value;
}
RefToBinaryData UeContextRelocateData::getForwardRelocationRequest() const {
  return m_ForwardRelocationRequest;
}
void UeContextRelocateData::setForwardRelocationRequest(
    RefToBinaryData const &value) {
  m_ForwardRelocationRequest = value;
}
std::vector<N2SmInformation> &UeContextRelocateData::getPduSessionList() {
  return m_PduSessionList;
}
void UeContextRelocateData::setPduSessionList(
    std::vector<N2SmInformation> const &value) {
  m_PduSessionList = value;
  m_PduSessionListIsSet = true;
}
bool UeContextRelocateData::pduSessionListIsSet() const {
  return m_PduSessionListIsSet;
}
void UeContextRelocateData::unsetPduSessionList() {
  m_PduSessionListIsSet = false;
}
N2InfoContent UeContextRelocateData::getUeRadioCapability() const {
  return m_UeRadioCapability;
}
void UeContextRelocateData::setUeRadioCapability(N2InfoContent const &value) {
  m_UeRadioCapability = value;
  m_UeRadioCapabilityIsSet = true;
}
bool UeContextRelocateData::ueRadioCapabilityIsSet() const {
  return m_UeRadioCapabilityIsSet;
}
void UeContextRelocateData::unsetUeRadioCapability() {
  m_UeRadioCapabilityIsSet = false;
}
NgApCause UeContextRelocateData::getNgapCause() const { return m_NgapCause; }
void UeContextRelocateData::setNgapCause(NgApCause const &value) {
  m_NgapCause = value;
  m_NgapCauseIsSet = true;
}
bool UeContextRelocateData::ngapCauseIsSet() const { return m_NgapCauseIsSet; }
void UeContextRelocateData::unsetNgapCause() { m_NgapCauseIsSet = false; }
std::string UeContextRelocateData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void UeContextRelocateData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool UeContextRelocateData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void UeContextRelocateData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
