/**
 * Naf_EventExposure
 * AF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeMobilityCollection.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeMobilityCollection::UeMobilityCollection() {
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_Supi = "";
  m_SupiIsSet = false;
  m_AppId = "";
}

UeMobilityCollection::~UeMobilityCollection() {}

void UeMobilityCollection::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UeMobilityCollection &o) {
  j = nlohmann::json();
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  j["appId"] = o.m_AppId;
  j["ueTrajs"] = o.m_UeTrajs;
}

void from_json(const nlohmann::json &j, UeMobilityCollection &o) {
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  j.at("appId").get_to(o.m_AppId);
  j.at("ueTrajs").get_to(o.m_UeTrajs);
}

std::string UeMobilityCollection::getGpsi() const { return m_Gpsi; }
void UeMobilityCollection::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool UeMobilityCollection::gpsiIsSet() const { return m_GpsiIsSet; }
void UeMobilityCollection::unsetGpsi() { m_GpsiIsSet = false; }
std::string UeMobilityCollection::getSupi() const { return m_Supi; }
void UeMobilityCollection::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool UeMobilityCollection::supiIsSet() const { return m_SupiIsSet; }
void UeMobilityCollection::unsetSupi() { m_SupiIsSet = false; }
std::string UeMobilityCollection::getAppId() const { return m_AppId; }
void UeMobilityCollection::setAppId(std::string const &value) {
  m_AppId = value;
}
std::vector<UeTrajectoryCollection> &UeMobilityCollection::getUeTrajs() {
  return m_UeTrajs;
}
void UeMobilityCollection::setUeTrajs(
    std::vector<UeTrajectoryCollection> const &value) {
  m_UeTrajs = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
