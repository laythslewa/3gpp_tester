/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualPDUSessionHSMFOrSMFApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

IndividualPDUSessionHSMFOrSMFApi::IndividualPDUSessionHSMFOrSMFApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void IndividualPDUSessionHSMFOrSMFApi::init() { setupRoutes(); }

void IndividualPDUSessionHSMFOrSMFApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Post(
      *router, base + "/pdu-sessions/:pduSessionRef/release",
      Routes::bind(
          &IndividualPDUSessionHSMFOrSMFApi::release_pdu_session_handler,
          this));
  Routes::Post(
      *router, base + "/pdu-sessions/:pduSessionRef/retrieve",
      Routes::bind(
          &IndividualPDUSessionHSMFOrSMFApi::retrieve_pdu_session_handler,
          this));
  Routes::Post(
      *router, base + "/pdu-sessions/:pduSessionRef/transfer-mo-data",
      Routes::bind(&IndividualPDUSessionHSMFOrSMFApi::transfer_mo_data_handler,
                   this));
  Routes::Post(
      *router, base + "/pdu-sessions/:pduSessionRef/modify",
      Routes::bind(
          &IndividualPDUSessionHSMFOrSMFApi::update_pdu_session_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(
      Routes::bind(&IndividualPDUSessionHSMFOrSMFApi::
                       individual_pdu_session_hsmf_or_smf_api_default_handler,
                   this));
}

void IndividualPDUSessionHSMFOrSMFApi::release_pdu_session_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto pduSessionRef = request.param(":pduSessionRef").as<std::string>();

  // Getting the body param

  ReleaseData releaseData;

  try {
    nlohmann::json::parse(request.body()).get_to(releaseData);
    this->release_pdu_session(pduSessionRef, releaseData, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualPDUSessionHSMFOrSMFApi::retrieve_pdu_session_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto pduSessionRef = request.param(":pduSessionRef").as<std::string>();

  // Getting the body param

  RetrieveData retrieveData;

  try {
    nlohmann::json::parse(request.body()).get_to(retrieveData);
    this->retrieve_pdu_session(pduSessionRef, retrieveData, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualPDUSessionHSMFOrSMFApi::transfer_mo_data_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  try {
    this->transfer_mo_data(request, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualPDUSessionHSMFOrSMFApi::update_pdu_session_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto pduSessionRef = request.param(":pduSessionRef").as<std::string>();

  // Getting the body param

  HsmfUpdateData hsmfUpdateData;

  try {
    nlohmann::json::parse(request.body()).get_to(hsmfUpdateData);
    this->update_pdu_session(pduSessionRef, hsmfUpdateData, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void IndividualPDUSessionHSMFOrSMFApi::
    individual_pdu_session_hsmf_or_smf_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
