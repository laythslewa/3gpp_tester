/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.3.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * InterFreqTargetInfo.h
 *
 *
 */

#ifndef InterFreqTargetInfo_H_
#define InterFreqTargetInfo_H_

#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class InterFreqTargetInfo {
public:
  InterFreqTargetInfo();
  virtual ~InterFreqTargetInfo();

  void validate();

  /////////////////////////////////////////////
  /// InterFreqTargetInfo members

  /// <summary>
  /// Integer value indicating the ARFCN applicable for a downlink, uplink or
  /// bi-directional (TDD) NR global frequency raster, as definition of
  /// \&quot;ARFCN-ValueNR\&quot; IE in clause 6.3.2 of 3GPP TS 38.331.
  /// </summary>
  int32_t getDlCarrierFreq() const;
  void setDlCarrierFreq(int32_t const value);
  /// <summary>
  /// When present, this IE shall contain a list of the physical cell identities
  /// where the UE is requested to perform measurement logging for the indicated
  /// frequency.
  /// </summary>
  std::vector<int32_t> &getCellIdList();
  void setCellIdList(std::vector<int32_t> const value);
  bool cellIdListIsSet() const;
  void unsetCellIdList();

  friend void to_json(nlohmann::json &j, const InterFreqTargetInfo &o);
  friend void from_json(const nlohmann::json &j, InterFreqTargetInfo &o);

protected:
  int32_t m_DlCarrierFreq;

  std::vector<int32_t> m_CellIdList;
  bool m_CellIdListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* InterFreqTargetInfo_H_ */
