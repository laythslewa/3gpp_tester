/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DefaultNotificationSubscription.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

DefaultNotificationSubscription::DefaultNotificationSubscription() {
  m_CallbackUri = "";
  m_N1MessageClassIsSet = false;
  m_N2InformationClassIsSet = false;
  m_VersionsIsSet = false;
  m_Binding = "";
  m_BindingIsSet = false;
  m_AcceptedEncoding = "";
  m_AcceptedEncodingIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

DefaultNotificationSubscription::~DefaultNotificationSubscription() {}

void DefaultNotificationSubscription::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const DefaultNotificationSubscription &o) {
  j = nlohmann::json();
  j["notificationType"] = o.m_NotificationType;
  j["callbackUri"] = o.m_CallbackUri;
  if (o.n1MessageClassIsSet())
    j["n1MessageClass"] = o.m_N1MessageClass;
  if (o.n2InformationClassIsSet())
    j["n2InformationClass"] = o.m_N2InformationClass;
  if (o.versionsIsSet() || !o.m_Versions.empty())
    j["versions"] = o.m_Versions;
  if (o.bindingIsSet())
    j["binding"] = o.m_Binding;
  if (o.acceptedEncodingIsSet())
    j["acceptedEncoding"] = o.m_AcceptedEncoding;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, DefaultNotificationSubscription &o) {
  j.at("notificationType").get_to(o.m_NotificationType);
  j.at("callbackUri").get_to(o.m_CallbackUri);
  if (j.find("n1MessageClass") != j.end()) {
    j.at("n1MessageClass").get_to(o.m_N1MessageClass);
    o.m_N1MessageClassIsSet = true;
  }
  if (j.find("n2InformationClass") != j.end()) {
    j.at("n2InformationClass").get_to(o.m_N2InformationClass);
    o.m_N2InformationClassIsSet = true;
  }
  if (j.find("versions") != j.end()) {
    j.at("versions").get_to(o.m_Versions);
    o.m_VersionsIsSet = true;
  }
  if (j.find("binding") != j.end()) {
    j.at("binding").get_to(o.m_Binding);
    o.m_BindingIsSet = true;
  }
  if (j.find("acceptedEncoding") != j.end()) {
    j.at("acceptedEncoding").get_to(o.m_AcceptedEncoding);
    o.m_AcceptedEncodingIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

NotificationType DefaultNotificationSubscription::getNotificationType() const {
  return m_NotificationType;
}
void DefaultNotificationSubscription::setNotificationType(
    NotificationType const &value) {
  m_NotificationType = value;
}
std::string DefaultNotificationSubscription::getCallbackUri() const {
  return m_CallbackUri;
}
void DefaultNotificationSubscription::setCallbackUri(std::string const &value) {
  m_CallbackUri = value;
}
N1MessageClass DefaultNotificationSubscription::getN1MessageClass() const {
  return m_N1MessageClass;
}
void DefaultNotificationSubscription::setN1MessageClass(
    N1MessageClass const &value) {
  m_N1MessageClass = value;
  m_N1MessageClassIsSet = true;
}
bool DefaultNotificationSubscription::n1MessageClassIsSet() const {
  return m_N1MessageClassIsSet;
}
void DefaultNotificationSubscription::unsetN1MessageClass() {
  m_N1MessageClassIsSet = false;
}
N2InformationClass
DefaultNotificationSubscription::getN2InformationClass() const {
  return m_N2InformationClass;
}
void DefaultNotificationSubscription::setN2InformationClass(
    N2InformationClass const &value) {
  m_N2InformationClass = value;
  m_N2InformationClassIsSet = true;
}
bool DefaultNotificationSubscription::n2InformationClassIsSet() const {
  return m_N2InformationClassIsSet;
}
void DefaultNotificationSubscription::unsetN2InformationClass() {
  m_N2InformationClassIsSet = false;
}
std::vector<std::string> &DefaultNotificationSubscription::getVersions() {
  return m_Versions;
}
void DefaultNotificationSubscription::setVersions(
    std::vector<std::string> const &value) {
  m_Versions = value;
  m_VersionsIsSet = true;
}
bool DefaultNotificationSubscription::versionsIsSet() const {
  return m_VersionsIsSet;
}
void DefaultNotificationSubscription::unsetVersions() {
  m_VersionsIsSet = false;
}
std::string DefaultNotificationSubscription::getBinding() const {
  return m_Binding;
}
void DefaultNotificationSubscription::setBinding(std::string const &value) {
  m_Binding = value;
  m_BindingIsSet = true;
}
bool DefaultNotificationSubscription::bindingIsSet() const {
  return m_BindingIsSet;
}
void DefaultNotificationSubscription::unsetBinding() { m_BindingIsSet = false; }
std::string DefaultNotificationSubscription::getAcceptedEncoding() const {
  return m_AcceptedEncoding;
}
void DefaultNotificationSubscription::setAcceptedEncoding(
    std::string const &value) {
  m_AcceptedEncoding = value;
  m_AcceptedEncodingIsSet = true;
}
bool DefaultNotificationSubscription::acceptedEncodingIsSet() const {
  return m_AcceptedEncodingIsSet;
}
void DefaultNotificationSubscription::unsetAcceptedEncoding() {
  m_AcceptedEncodingIsSet = false;
}
std::string DefaultNotificationSubscription::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void DefaultNotificationSubscription::setSupportedFeatures(
    std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool DefaultNotificationSubscription::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void DefaultNotificationSubscription::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
