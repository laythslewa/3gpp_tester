/**
 * Npcf_AMPolicyControl
 * Access and Mobility Policy Control Service. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AmRequestedValueRep.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AmRequestedValueRep::AmRequestedValueRep() {
  m_UserLocIsSet = false;
  m_PraStatusesIsSet = false;
  m_AccessTypesIsSet = false;
  m_RatTypesIsSet = false;
}

AmRequestedValueRep::~AmRequestedValueRep() {}

void AmRequestedValueRep::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AmRequestedValueRep &o) {
  j = nlohmann::json();
  if (o.userLocIsSet())
    j["userLoc"] = o.m_UserLoc;
  if (o.praStatusesIsSet() || !o.m_PraStatuses.empty())
    j["praStatuses"] = o.m_PraStatuses;
  if (o.accessTypesIsSet() || !o.m_AccessTypes.empty())
    j["accessTypes"] = o.m_AccessTypes;
  if (o.ratTypesIsSet() || !o.m_RatTypes.empty())
    j["ratTypes"] = o.m_RatTypes;
}

void from_json(const nlohmann::json &j, AmRequestedValueRep &o) {
  if (j.find("userLoc") != j.end()) {
    j.at("userLoc").get_to(o.m_UserLoc);
    o.m_UserLocIsSet = true;
  }
  if (j.find("praStatuses") != j.end()) {
    j.at("praStatuses").get_to(o.m_PraStatuses);
    o.m_PraStatusesIsSet = true;
  }
  if (j.find("accessTypes") != j.end()) {
    j.at("accessTypes").get_to(o.m_AccessTypes);
    o.m_AccessTypesIsSet = true;
  }
  if (j.find("ratTypes") != j.end()) {
    j.at("ratTypes").get_to(o.m_RatTypes);
    o.m_RatTypesIsSet = true;
  }
}

UserLocation AmRequestedValueRep::getUserLoc() const { return m_UserLoc; }
void AmRequestedValueRep::setUserLoc(UserLocation const &value) {
  m_UserLoc = value;
  m_UserLocIsSet = true;
}
bool AmRequestedValueRep::userLocIsSet() const { return m_UserLocIsSet; }
void AmRequestedValueRep::unsetUserLoc() { m_UserLocIsSet = false; }
std::map<std::string, PresenceInfo> &AmRequestedValueRep::getPraStatuses() {
  return m_PraStatuses;
}
void AmRequestedValueRep::setPraStatuses(
    std::map<std::string, PresenceInfo> const &value) {
  m_PraStatuses = value;
  m_PraStatusesIsSet = true;
}
bool AmRequestedValueRep::praStatusesIsSet() const {
  return m_PraStatusesIsSet;
}
void AmRequestedValueRep::unsetPraStatuses() { m_PraStatusesIsSet = false; }
std::vector<AccessType> &AmRequestedValueRep::getAccessTypes() {
  return m_AccessTypes;
}
void AmRequestedValueRep::setAccessTypes(std::vector<AccessType> const &value) {
  m_AccessTypes = value;
  m_AccessTypesIsSet = true;
}
bool AmRequestedValueRep::accessTypesIsSet() const {
  return m_AccessTypesIsSet;
}
void AmRequestedValueRep::unsetAccessTypes() { m_AccessTypesIsSet = false; }
std::vector<RatType> &AmRequestedValueRep::getRatTypes() { return m_RatTypes; }
void AmRequestedValueRep::setRatTypes(std::vector<RatType> const &value) {
  m_RatTypes = value;
  m_RatTypesIsSet = true;
}
bool AmRequestedValueRep::ratTypesIsSet() const { return m_RatTypesIsSet; }
void AmRequestedValueRep::unsetRatTypes() { m_RatTypesIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
