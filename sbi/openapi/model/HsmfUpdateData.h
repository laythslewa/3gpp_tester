/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * HsmfUpdateData.h
 *
 * Data within Update Request towards H-SMF, or from I-SMF to SMF
 */

#ifndef HsmfUpdateData_H_
#define HsmfUpdateData_H_

#include "AccessType.h"
#include "Cause.h"
#include "EpsInterworkingIndication.h"
#include "Guami.h"
#include "MaReleaseIndication.h"
#include "MoExpDataCounter.h"
#include "N4Information.h"
#include "NgApCause.h"
#include "PduSessionNotifyItem.h"
#include "PlmnIdNid.h"
#include "PresenceState.h"
#include "PsaInformation.h"
#include "QosFlowItem.h"
#include "QosFlowNotifyItem.h"
#include "RatType.h"
#include "RefToBinaryData.h"
#include "RequestIndication.h"
#include "RoamingChargingProfile.h"
#include "SecondaryRatUsageInfo.h"
#include "SecondaryRatUsageReport.h"
#include "SecurityResult.h"
#include "TunnelInfo.h"
#include "UlclBpInformation.h"
#include "UnavailableAccessIndication.h"
#include "UpSecurityInfo.h"
#include "UserLocation.h"
#include "VplmnQos.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within Update Request towards H-SMF, or from I-SMF to SMF
/// </summary>
class HsmfUpdateData {
public:
  HsmfUpdateData();
  virtual ~HsmfUpdateData();

  void validate();

  /////////////////////////////////////////////
  /// HsmfUpdateData members

  /// <summary>
  ///
  /// </summary>
  RequestIndication getRequestIndication() const;
  void setRequestIndication(RequestIndication const &value);
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  ///
  /// </summary>
  TunnelInfo getVcnTunnelInfo() const;
  void setVcnTunnelInfo(TunnelInfo const &value);
  bool vcnTunnelInfoIsSet() const;
  void unsetVcnTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  TunnelInfo getIcnTunnelInfo() const;
  void setIcnTunnelInfo(TunnelInfo const &value);
  bool icnTunnelInfoIsSet() const;
  void unsetIcnTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  TunnelInfo getAdditionalCnTunnelInfo() const;
  void setAdditionalCnTunnelInfo(TunnelInfo const &value);
  bool additionalCnTunnelInfoIsSet() const;
  void unsetAdditionalCnTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  PlmnIdNid getServingNetwork() const;
  void setServingNetwork(PlmnIdNid const &value);
  bool servingNetworkIsSet() const;
  void unsetServingNetwork();
  /// <summary>
  ///
  /// </summary>
  AccessType getAnType() const;
  void setAnType(AccessType const &value);
  bool anTypeIsSet() const;
  void unsetAnType();
  /// <summary>
  ///
  /// </summary>
  AccessType getAdditionalAnType() const;
  void setAdditionalAnType(AccessType const &value);
  bool additionalAnTypeIsSet() const;
  void unsetAdditionalAnType();
  /// <summary>
  ///
  /// </summary>
  RatType getRatType() const;
  void setRatType(RatType const &value);
  bool ratTypeIsSet() const;
  void unsetRatType();
  /// <summary>
  ///
  /// </summary>
  UserLocation getUeLocation() const;
  void setUeLocation(UserLocation const &value);
  bool ueLocationIsSet() const;
  void unsetUeLocation();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getUeTimeZone() const;
  void setUeTimeZone(std::string const &value);
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();
  /// <summary>
  ///
  /// </summary>
  UserLocation getAddUeLocation() const;
  void setAddUeLocation(UserLocation const &value);
  bool addUeLocationIsSet() const;
  void unsetAddUeLocation();
  /// <summary>
  ///
  /// </summary>
  bool isPauseCharging() const;
  void setPauseCharging(bool const value);
  bool pauseChargingIsSet() const;
  void unsetPauseCharging();
  /// <summary>
  /// Procedure Transaction Identifier
  /// </summary>
  int32_t getPti() const;
  void setPti(int32_t const value);
  bool ptiIsSet() const;
  void unsetPti();
  /// <summary>
  ///
  /// </summary>
  RefToBinaryData getN1SmInfoFromUe() const;
  void setN1SmInfoFromUe(RefToBinaryData const &value);
  bool n1SmInfoFromUeIsSet() const;
  void unsetN1SmInfoFromUe();
  /// <summary>
  ///
  /// </summary>
  RefToBinaryData getUnknownN1SmInfo() const;
  void setUnknownN1SmInfo(RefToBinaryData const &value);
  bool unknownN1SmInfoIsSet() const;
  void unsetUnknownN1SmInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosFlowItem> &getQosFlowsRelNotifyList();
  void setQosFlowsRelNotifyList(std::vector<QosFlowItem> const &value);
  bool qosFlowsRelNotifyListIsSet() const;
  void unsetQosFlowsRelNotifyList();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosFlowNotifyItem> &getQosFlowsNotifyList();
  void setQosFlowsNotifyList(std::vector<QosFlowNotifyItem> const &value);
  bool qosFlowsNotifyListIsSet() const;
  void unsetQosFlowsNotifyList();
  /// <summary>
  ///
  /// </summary>
  std::vector<PduSessionNotifyItem> &getNotifyList();
  void setNotifyList(std::vector<PduSessionNotifyItem> const &value);
  bool notifyListIsSet() const;
  void unsetNotifyList();
  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t> &getEpsBearerId();
  void setEpsBearerId(std::vector<int32_t> const value);
  bool epsBearerIdIsSet() const;
  void unsetEpsBearerId();
  /// <summary>
  ///
  /// </summary>
  bool isHoPreparationIndication() const;
  void setHoPreparationIndication(bool const value);
  bool hoPreparationIndicationIsSet() const;
  void unsetHoPreparationIndication();
  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t> &getRevokeEbiList();
  void setRevokeEbiList(std::vector<int32_t> const value);
  bool revokeEbiListIsSet() const;
  void unsetRevokeEbiList();
  /// <summary>
  ///
  /// </summary>
  Cause getCause() const;
  void setCause(Cause const &value);
  bool causeIsSet() const;
  void unsetCause();
  /// <summary>
  ///
  /// </summary>
  NgApCause getNgApCause() const;
  void setNgApCause(NgApCause const &value);
  bool ngApCauseIsSet() const;
  void unsetNgApCause();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getR5gMmCauseValue() const;
  void setR5gMmCauseValue(int32_t const value);
  bool r5gMmCauseValueIsSet() const;
  void unsetr_5gMmCauseValue();
  /// <summary>
  ///
  /// </summary>
  bool isAlwaysOnRequested() const;
  void setAlwaysOnRequested(bool const value);
  bool alwaysOnRequestedIsSet() const;
  void unsetAlwaysOnRequested();
  /// <summary>
  ///
  /// </summary>
  EpsInterworkingIndication getEpsInterworkingInd() const;
  void setEpsInterworkingInd(EpsInterworkingIndication const &value);
  bool epsInterworkingIndIsSet() const;
  void unsetEpsInterworkingInd();
  /// <summary>
  ///
  /// </summary>
  std::vector<SecondaryRatUsageReport> &getSecondaryRatUsageReport();
  void
  setSecondaryRatUsageReport(std::vector<SecondaryRatUsageReport> const &value);
  bool secondaryRatUsageReportIsSet() const;
  void unsetSecondaryRatUsageReport();
  /// <summary>
  ///
  /// </summary>
  std::vector<SecondaryRatUsageInfo> &getSecondaryRatUsageInfo();
  void
  setSecondaryRatUsageInfo(std::vector<SecondaryRatUsageInfo> const &value);
  bool secondaryRatUsageInfoIsSet() const;
  void unsetSecondaryRatUsageInfo();
  /// <summary>
  ///
  /// </summary>
  bool isAnTypeCanBeChanged() const;
  void setAnTypeCanBeChanged(bool const value);
  bool anTypeCanBeChangedIsSet() const;
  void unsetAnTypeCanBeChanged();
  /// <summary>
  ///
  /// </summary>
  MaReleaseIndication getMaReleaseInd() const;
  void setMaReleaseInd(MaReleaseIndication const &value);
  bool maReleaseIndIsSet() const;
  void unsetMaReleaseInd();
  /// <summary>
  ///
  /// </summary>
  bool isMaNwUpgradeInd() const;
  void setMaNwUpgradeInd(bool const value);
  bool maNwUpgradeIndIsSet() const;
  void unsetMaNwUpgradeInd();
  /// <summary>
  ///
  /// </summary>
  bool isMaRequestInd() const;
  void setMaRequestInd(bool const value);
  bool maRequestIndIsSet() const;
  void unsetMaRequestInd();
  /// <summary>
  ///
  /// </summary>
  UnavailableAccessIndication getUnavailableAccessInd() const;
  void setUnavailableAccessInd(UnavailableAccessIndication const &value);
  bool unavailableAccessIndIsSet() const;
  void unsetUnavailableAccessInd();
  /// <summary>
  ///
  /// </summary>
  std::vector<PsaInformation> &getPsaInfo();
  void setPsaInfo(std::vector<PsaInformation> const &value);
  bool psaInfoIsSet() const;
  void unsetPsaInfo();
  /// <summary>
  ///
  /// </summary>
  UlclBpInformation getUlclBpInfo() const;
  void setUlclBpInfo(UlclBpInformation const &value);
  bool ulclBpInfoIsSet() const;
  void unsetUlclBpInfo();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4Info() const;
  void setN4Info(N4Information const &value);
  bool n4InfoIsSet() const;
  void unsetN4Info();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4InfoExt1() const;
  void setN4InfoExt1(N4Information const &value);
  bool n4InfoExt1IsSet() const;
  void unsetN4InfoExt1();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4InfoExt2() const;
  void setN4InfoExt2(N4Information const &value);
  bool n4InfoExt2IsSet() const;
  void unsetN4InfoExt2();
  /// <summary>
  ///
  /// </summary>
  PresenceState getPresenceInLadn() const;
  void setPresenceInLadn(PresenceState const &value);
  bool presenceInLadnIsSet() const;
  void unsetPresenceInLadn();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getVsmfPduSessionUri() const;
  void setVsmfPduSessionUri(std::string const &value);
  bool vsmfPduSessionUriIsSet() const;
  void unsetVsmfPduSessionUri();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getVsmfId() const;
  void setVsmfId(std::string const &value);
  bool vsmfIdIsSet() const;
  void unsetVsmfId();
  /// <summary>
  ///
  /// </summary>
  std::string getVSmfServiceInstanceId() const;
  void setVSmfServiceInstanceId(std::string const &value);
  bool vSmfServiceInstanceIdIsSet() const;
  void unsetVSmfServiceInstanceId();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getIsmfPduSessionUri() const;
  void setIsmfPduSessionUri(std::string const &value);
  bool ismfPduSessionUriIsSet() const;
  void unsetIsmfPduSessionUri();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getIsmfId() const;
  void setIsmfId(std::string const &value);
  bool ismfIdIsSet() const;
  void unsetIsmfId();
  /// <summary>
  ///
  /// </summary>
  std::string getISmfServiceInstanceId() const;
  void setISmfServiceInstanceId(std::string const &value);
  bool iSmfServiceInstanceIdIsSet() const;
  void unsetISmfServiceInstanceId();
  /// <summary>
  ///
  /// </summary>
  int32_t getDlServingPlmnRateCtl() const;
  void setDlServingPlmnRateCtl(int32_t const value);
  bool dlServingPlmnRateCtlIsSet() const;
  void unsetDlServingPlmnRateCtl();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getDnaiList();
  void setDnaiList(std::vector<std::string> const &value);
  bool dnaiListIsSet() const;
  void unsetDnaiList();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  RoamingChargingProfile getRoamingChargingProfile() const;
  void setRoamingChargingProfile(RoamingChargingProfile const &value);
  bool roamingChargingProfileIsSet() const;
  void unsetRoamingChargingProfile();
  /// <summary>
  ///
  /// </summary>
  MoExpDataCounter getMoExpDataCounter() const;
  void setMoExpDataCounter(MoExpDataCounter const &value);
  bool moExpDataCounterIsSet() const;
  void unsetMoExpDataCounter();
  /// <summary>
  ///
  /// </summary>
  VplmnQos getVplmnQos() const;
  void setVplmnQos(VplmnQos const &value);
  bool vplmnQosIsSet() const;
  void unsetVplmnQos();
  /// <summary>
  ///
  /// </summary>
  SecurityResult getSecurityResult() const;
  void setSecurityResult(SecurityResult const &value);
  bool securityResultIsSet() const;
  void unsetSecurityResult();
  /// <summary>
  ///
  /// </summary>
  UpSecurityInfo getUpSecurityInfo() const;
  void setUpSecurityInfo(UpSecurityInfo const &value);
  bool upSecurityInfoIsSet() const;
  void unsetUpSecurityInfo();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getAmfNfId() const;
  void setAmfNfId(std::string const &value);
  bool amfNfIdIsSet() const;
  void unsetAmfNfId();
  /// <summary>
  ///
  /// </summary>
  Guami getGuami() const;
  void setGuami(Guami const &value);
  bool guamiIsSet() const;
  void unsetGuami();

  friend void to_json(nlohmann::json &j, const HsmfUpdateData &o);
  friend void from_json(const nlohmann::json &j, HsmfUpdateData &o);

protected:
  RequestIndication m_RequestIndication;

  std::string m_Pei;
  bool m_PeiIsSet;
  TunnelInfo m_VcnTunnelInfo;
  bool m_VcnTunnelInfoIsSet;
  TunnelInfo m_IcnTunnelInfo;
  bool m_IcnTunnelInfoIsSet;
  TunnelInfo m_AdditionalCnTunnelInfo;
  bool m_AdditionalCnTunnelInfoIsSet;
  PlmnIdNid m_ServingNetwork;
  bool m_ServingNetworkIsSet;
  AccessType m_AnType;
  bool m_AnTypeIsSet;
  AccessType m_AdditionalAnType;
  bool m_AdditionalAnTypeIsSet;
  RatType m_RatType;
  bool m_RatTypeIsSet;
  UserLocation m_UeLocation;
  bool m_UeLocationIsSet;
  std::string m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  UserLocation m_AddUeLocation;
  bool m_AddUeLocationIsSet;
  bool m_PauseCharging;
  bool m_PauseChargingIsSet;
  int32_t m_Pti;
  bool m_PtiIsSet;
  RefToBinaryData m_N1SmInfoFromUe;
  bool m_N1SmInfoFromUeIsSet;
  RefToBinaryData m_UnknownN1SmInfo;
  bool m_UnknownN1SmInfoIsSet;
  std::vector<QosFlowItem> m_QosFlowsRelNotifyList;
  bool m_QosFlowsRelNotifyListIsSet;
  std::vector<QosFlowNotifyItem> m_QosFlowsNotifyList;
  bool m_QosFlowsNotifyListIsSet;
  std::vector<PduSessionNotifyItem> m_NotifyList;
  bool m_NotifyListIsSet;
  std::vector<int32_t> m_EpsBearerId;
  bool m_EpsBearerIdIsSet;
  bool m_HoPreparationIndication;
  bool m_HoPreparationIndicationIsSet;
  std::vector<int32_t> m_RevokeEbiList;
  bool m_RevokeEbiListIsSet;
  Cause m_Cause;
  bool m_CauseIsSet;
  NgApCause m_NgApCause;
  bool m_NgApCauseIsSet;
  int32_t m_r_5gMmCauseValue;
  bool m_r_5gMmCauseValueIsSet;
  bool m_AlwaysOnRequested;
  bool m_AlwaysOnRequestedIsSet;
  EpsInterworkingIndication m_EpsInterworkingInd;
  bool m_EpsInterworkingIndIsSet;
  std::vector<SecondaryRatUsageReport> m_SecondaryRatUsageReport;
  bool m_SecondaryRatUsageReportIsSet;
  std::vector<SecondaryRatUsageInfo> m_SecondaryRatUsageInfo;
  bool m_SecondaryRatUsageInfoIsSet;
  bool m_AnTypeCanBeChanged;
  bool m_AnTypeCanBeChangedIsSet;
  MaReleaseIndication m_MaReleaseInd;
  bool m_MaReleaseIndIsSet;
  bool m_MaNwUpgradeInd;
  bool m_MaNwUpgradeIndIsSet;
  bool m_MaRequestInd;
  bool m_MaRequestIndIsSet;
  UnavailableAccessIndication m_UnavailableAccessInd;
  bool m_UnavailableAccessIndIsSet;
  std::vector<PsaInformation> m_PsaInfo;
  bool m_PsaInfoIsSet;
  UlclBpInformation m_UlclBpInfo;
  bool m_UlclBpInfoIsSet;
  N4Information m_N4Info;
  bool m_N4InfoIsSet;
  N4Information m_N4InfoExt1;
  bool m_N4InfoExt1IsSet;
  N4Information m_N4InfoExt2;
  bool m_N4InfoExt2IsSet;
  PresenceState m_PresenceInLadn;
  bool m_PresenceInLadnIsSet;
  std::string m_VsmfPduSessionUri;
  bool m_VsmfPduSessionUriIsSet;
  std::string m_VsmfId;
  bool m_VsmfIdIsSet;
  std::string m_VSmfServiceInstanceId;
  bool m_VSmfServiceInstanceIdIsSet;
  std::string m_IsmfPduSessionUri;
  bool m_IsmfPduSessionUriIsSet;
  std::string m_IsmfId;
  bool m_IsmfIdIsSet;
  std::string m_ISmfServiceInstanceId;
  bool m_ISmfServiceInstanceIdIsSet;
  int32_t m_DlServingPlmnRateCtl;
  bool m_DlServingPlmnRateCtlIsSet;
  std::vector<std::string> m_DnaiList;
  bool m_DnaiListIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  RoamingChargingProfile m_RoamingChargingProfile;
  bool m_RoamingChargingProfileIsSet;
  MoExpDataCounter m_MoExpDataCounter;
  bool m_MoExpDataCounterIsSet;
  VplmnQos m_VplmnQos;
  bool m_VplmnQosIsSet;
  SecurityResult m_SecurityResult;
  bool m_SecurityResultIsSet;
  UpSecurityInfo m_UpSecurityInfo;
  bool m_UpSecurityInfoIsSet;
  std::string m_AmfNfId;
  bool m_AmfNfIdIsSet;
  Guami m_Guami;
  bool m_GuamiIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* HsmfUpdateData_H_ */
