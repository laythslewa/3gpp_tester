/**
 * Nhss_imsUECM
 * Nhss UE Context Management Service for IMS. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AuthorizationRequest.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AuthorizationRequest::AuthorizationRequest() {
  m_Impi = "";
  m_ImpiIsSet = false;
  m_VisitedNetworkIdentifier = "";
  m_VisitedNetworkIdentifierIsSet = false;
  m_EmergencyIndicator = false;
  m_EmergencyIndicatorIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

AuthorizationRequest::~AuthorizationRequest() {}

void AuthorizationRequest::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AuthorizationRequest &o) {
  j = nlohmann::json();
  if (o.impiIsSet())
    j["impi"] = o.m_Impi;
  j["authorizationType"] = o.m_AuthorizationType;
  if (o.visitedNetworkIdentifierIsSet())
    j["visitedNetworkIdentifier"] = o.m_VisitedNetworkIdentifier;
  if (o.emergencyIndicatorIsSet())
    j["emergencyIndicator"] = o.m_EmergencyIndicator;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, AuthorizationRequest &o) {
  if (j.find("impi") != j.end()) {
    j.at("impi").get_to(o.m_Impi);
    o.m_ImpiIsSet = true;
  }
  j.at("authorizationType").get_to(o.m_AuthorizationType);
  if (j.find("visitedNetworkIdentifier") != j.end()) {
    j.at("visitedNetworkIdentifier").get_to(o.m_VisitedNetworkIdentifier);
    o.m_VisitedNetworkIdentifierIsSet = true;
  }
  if (j.find("emergencyIndicator") != j.end()) {
    j.at("emergencyIndicator").get_to(o.m_EmergencyIndicator);
    o.m_EmergencyIndicatorIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

std::string AuthorizationRequest::getImpi() const { return m_Impi; }
void AuthorizationRequest::setImpi(std::string const &value) {
  m_Impi = value;
  m_ImpiIsSet = true;
}
bool AuthorizationRequest::impiIsSet() const { return m_ImpiIsSet; }
void AuthorizationRequest::unsetImpi() { m_ImpiIsSet = false; }
AuthorizationType AuthorizationRequest::getAuthorizationType() const {
  return m_AuthorizationType;
}
void AuthorizationRequest::setAuthorizationType(
    AuthorizationType const &value) {
  m_AuthorizationType = value;
}
std::string AuthorizationRequest::getVisitedNetworkIdentifier() const {
  return m_VisitedNetworkIdentifier;
}
void AuthorizationRequest::setVisitedNetworkIdentifier(
    std::string const &value) {
  m_VisitedNetworkIdentifier = value;
  m_VisitedNetworkIdentifierIsSet = true;
}
bool AuthorizationRequest::visitedNetworkIdentifierIsSet() const {
  return m_VisitedNetworkIdentifierIsSet;
}
void AuthorizationRequest::unsetVisitedNetworkIdentifier() {
  m_VisitedNetworkIdentifierIsSet = false;
}
bool AuthorizationRequest::isEmergencyIndicator() const {
  return m_EmergencyIndicator;
}
void AuthorizationRequest::setEmergencyIndicator(bool const value) {
  m_EmergencyIndicator = value;
  m_EmergencyIndicatorIsSet = true;
}
bool AuthorizationRequest::emergencyIndicatorIsSet() const {
  return m_EmergencyIndicatorIsSet;
}
void AuthorizationRequest::unsetEmergencyIndicator() {
  m_EmergencyIndicatorIsSet = false;
}
std::string AuthorizationRequest::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void AuthorizationRequest::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool AuthorizationRequest::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void AuthorizationRequest::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
