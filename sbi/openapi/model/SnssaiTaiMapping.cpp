/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SnssaiTaiMapping.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SnssaiTaiMapping::SnssaiTaiMapping() {
  m_AccessTypeListIsSet = false;
  m_RestrictedSnssaiListIsSet = false;
  m_UnrestrictedSnssaiListIsSet = false;
}

SnssaiTaiMapping::~SnssaiTaiMapping() {}

void SnssaiTaiMapping::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SnssaiTaiMapping &o) {
  j = nlohmann::json();
  j["reportingArea"] = o.m_ReportingArea;
  if (o.accessTypeListIsSet() || !o.m_AccessTypeList.empty())
    j["accessTypeList"] = o.m_AccessTypeList;
  if (o.restrictedSnssaiListIsSet() || !o.m_RestrictedSnssaiList.empty())
    j["restrictedSnssaiList"] = o.m_RestrictedSnssaiList;
  if (o.unrestrictedSnssaiListIsSet() || !o.m_UnrestrictedSnssaiList.empty())
    j["unrestrictedSnssaiList"] = o.m_UnrestrictedSnssaiList;
}

void from_json(const nlohmann::json &j, SnssaiTaiMapping &o) {
  j.at("reportingArea").get_to(o.m_ReportingArea);
  if (j.find("accessTypeList") != j.end()) {
    j.at("accessTypeList").get_to(o.m_AccessTypeList);
    o.m_AccessTypeListIsSet = true;
  }
  if (j.find("restrictedSnssaiList") != j.end()) {
    j.at("restrictedSnssaiList").get_to(o.m_RestrictedSnssaiList);
    o.m_RestrictedSnssaiListIsSet = true;
  }
  if (j.find("unrestrictedSnssaiList") != j.end()) {
    j.at("unrestrictedSnssaiList").get_to(o.m_UnrestrictedSnssaiList);
    o.m_UnrestrictedSnssaiListIsSet = true;
  }
}

TargetArea SnssaiTaiMapping::getReportingArea() const {
  return m_ReportingArea;
}
void SnssaiTaiMapping::setReportingArea(TargetArea const &value) {
  m_ReportingArea = value;
}
std::vector<AccessType> &SnssaiTaiMapping::getAccessTypeList() {
  return m_AccessTypeList;
}
void SnssaiTaiMapping::setAccessTypeList(std::vector<AccessType> const &value) {
  m_AccessTypeList = value;
  m_AccessTypeListIsSet = true;
}
bool SnssaiTaiMapping::accessTypeListIsSet() const {
  return m_AccessTypeListIsSet;
}
void SnssaiTaiMapping::unsetAccessTypeList() { m_AccessTypeListIsSet = false; }
std::vector<RestrictedSnssai> &SnssaiTaiMapping::getRestrictedSnssaiList() {
  return m_RestrictedSnssaiList;
}
void SnssaiTaiMapping::setRestrictedSnssaiList(
    std::vector<RestrictedSnssai> const &value) {
  m_RestrictedSnssaiList = value;
  m_RestrictedSnssaiListIsSet = true;
}
bool SnssaiTaiMapping::restrictedSnssaiListIsSet() const {
  return m_RestrictedSnssaiListIsSet;
}
void SnssaiTaiMapping::unsetRestrictedSnssaiList() {
  m_RestrictedSnssaiListIsSet = false;
}
std::vector<ExtSnssai> &SnssaiTaiMapping::getUnrestrictedSnssaiList() {
  return m_UnrestrictedSnssaiList;
}
void SnssaiTaiMapping::setUnrestrictedSnssaiList(
    std::vector<ExtSnssai> const &value) {
  m_UnrestrictedSnssaiList = value;
  m_UnrestrictedSnssaiListIsSet = true;
}
bool SnssaiTaiMapping::unrestrictedSnssaiListIsSet() const {
  return m_UnrestrictedSnssaiListIsSet;
}
void SnssaiTaiMapping::unsetUnrestrictedSnssaiList() {
  m_UnrestrictedSnssaiListIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
