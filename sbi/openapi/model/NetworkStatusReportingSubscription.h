/**
 * 3gpp-network-status-reporting
 * API for reporting network status. © 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NetworkStatusReportingSubscription.h
 *
 * Represents a subscription to network status information reporting.
 */

#ifndef NetworkStatusReportingSubscription_H_
#define NetworkStatusReportingSubscription_H_

#include "CongestionType.h"
#include "LocationArea.h"
#include "WebsockNotifConfig.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a subscription to network status information reporting.
/// </summary>
class NetworkStatusReportingSubscription {
public:
  NetworkStatusReportingSubscription();
  virtual ~NetworkStatusReportingSubscription();

  void validate();

  /////////////////////////////////////////////
  /// NetworkStatusReportingSubscription members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const &value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getNotificationDestination() const;
  void setNotificationDestination(std::string const &value);
  /// <summary>
  /// Set to true by the SCS/AS to request the SCEF to send a test notification
  /// as defined in subclause 5.2.5.3. Set to false or omitted otherwise.
  /// </summary>
  bool isRequestTestNotification() const;
  void setRequestTestNotification(bool const value);
  bool requestTestNotificationIsSet() const;
  void unsetRequestTestNotification();
  /// <summary>
  ///
  /// </summary>
  WebsockNotifConfig getWebsockNotifConfig() const;
  void setWebsockNotifConfig(WebsockNotifConfig const &value);
  bool websockNotifConfigIsSet() const;
  void unsetWebsockNotifConfig();
  /// <summary>
  ///
  /// </summary>
  LocationArea getLocationArea() const;
  void setLocationArea(LocationArea const &value);
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getTimeDuration() const;
  void setTimeDuration(std::string const &value);
  bool timeDurationIsSet() const;
  void unsetTimeDuration();
  /// <summary>
  /// Identifies a list of congestion level(s) with exact value that the SCS/AS
  /// requests to be informed of when reached.
  /// </summary>
  std::vector<int32_t> &getThresholdValues();
  void setThresholdValues(std::vector<int32_t> const value);
  bool thresholdValuesIsSet() const;
  void unsetThresholdValues();
  /// <summary>
  /// Identifies a list of congestion level(s) with abstracted value that the
  /// SCS/AS requests to be informed of when reached.
  /// </summary>
  std::vector<CongestionType> &getThresholdTypes();
  void setThresholdTypes(std::vector<CongestionType> const &value);
  bool thresholdTypesIsSet() const;
  void unsetThresholdTypes();

  friend void to_json(nlohmann::json &j,
                      const NetworkStatusReportingSubscription &o);
  friend void from_json(const nlohmann::json &j,
                        NetworkStatusReportingSubscription &o);

protected:
  std::string m_Self;
  bool m_SelfIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::string m_NotificationDestination;

  bool m_RequestTestNotification;
  bool m_RequestTestNotificationIsSet;
  WebsockNotifConfig m_WebsockNotifConfig;
  bool m_WebsockNotifConfigIsSet;
  LocationArea m_LocationArea;

  std::string m_TimeDuration;
  bool m_TimeDurationIsSet;
  std::vector<int32_t> m_ThresholdValues;
  bool m_ThresholdValuesIsSet;
  std::vector<CongestionType> m_ThresholdTypes;
  bool m_ThresholdTypesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NetworkStatusReportingSubscription_H_ */
