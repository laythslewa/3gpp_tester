/**
 * Npcf_UEPolicyControl
 * UE Policy Control Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PolicyAssociation.h
 *
 * Contains the description of a policy association that is returned by the PCF
 * when a policy Association is created, updated, or read.
 */

#ifndef PolicyAssociation_H_
#define PolicyAssociation_H_

#include "N2InfoContent.h"
#include "PolicyAssociationRequest.h"
#include "PresenceInfo.h"
#include "RequestTrigger.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the description of a policy association that is returned by the PCF
/// when a policy Association is created, updated, or read.
/// </summary>
class PolicyAssociation {
public:
  PolicyAssociation();
  virtual ~PolicyAssociation();

  void validate();

  /////////////////////////////////////////////
  /// PolicyAssociation members

  /// <summary>
  ///
  /// </summary>
  PolicyAssociationRequest getRequest() const;
  void setRequest(PolicyAssociationRequest const &value);
  bool requestIsSet() const;
  void unsetRequest();
  /// <summary>
  /// string with format \&quot;bytes\&quot; as defined in OpenAPI
  /// </summary>
  std::string getUePolicy() const;
  void setUePolicy(std::string const &value);
  bool uePolicyIsSet() const;
  void unsetUePolicy();
  /// <summary>
  ///
  /// </summary>
  N2InfoContent getN2Pc5Pol() const;
  void setN2Pc5Pol(N2InfoContent const &value);
  bool n2Pc5PolIsSet() const;
  void unsetN2Pc5Pol();
  /// <summary>
  ///
  /// </summary>
  N2InfoContent getN2Pc5ProSePol() const;
  void setN2Pc5ProSePol(N2InfoContent const &value);
  bool n2Pc5ProSePolIsSet() const;
  void unsetN2Pc5ProSePol();
  /// <summary>
  /// Request Triggers that the PCF subscribes. Only values \&quot;LOC_CH\&quot;
  /// and \&quot;PRA_CH\&quot; are permitted.
  /// </summary>
  std::vector<RequestTrigger> &getTriggers();
  void setTriggers(std::vector<RequestTrigger> const &value);
  bool triggersIsSet() const;
  void unsetTriggers();
  /// <summary>
  /// Contains the presence reporting area(s) for which reporting was requested.
  /// The praId attribute within the PresenceInfo data type is the key of the
  /// map.
  /// </summary>
  std::map<std::string, PresenceInfo> &getPras();
  void setPras(std::map<std::string, PresenceInfo> const &value);
  bool prasIsSet() const;
  void unsetPras();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);

  friend void to_json(nlohmann::json &j, const PolicyAssociation &o);
  friend void from_json(const nlohmann::json &j, PolicyAssociation &o);

protected:
  PolicyAssociationRequest m_Request;
  bool m_RequestIsSet;
  std::string m_UePolicy;
  bool m_UePolicyIsSet;
  N2InfoContent m_N2Pc5Pol;
  bool m_N2Pc5PolIsSet;
  N2InfoContent m_N2Pc5ProSePol;
  bool m_N2Pc5ProSePolIsSet;
  std::vector<RequestTrigger> m_Triggers;
  bool m_TriggersIsSet;
  std::map<std::string, PresenceInfo> m_Pras;
  bool m_PrasIsSet;
  std::string m_SuppFeat;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PolicyAssociation_H_ */
