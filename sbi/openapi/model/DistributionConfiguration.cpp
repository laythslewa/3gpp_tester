/**
 * M1_ContentHostingProvisioning
 * 5GMS AF M1 Content Hosting Provisioning API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DistributionConfiguration.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

DistributionConfiguration::DistributionConfiguration() {
  m_ContentPreparationTemplateId = "";
  m_ContentPreparationTemplateIdIsSet = false;
  m_CanonicalDomainName = "";
  m_DomainNameAlias = "";
  m_PathRewriteRulesIsSet = false;
  m_CachingConfigurationsIsSet = false;
  m_GeoFencingIsSet = false;
  m_UrlSignatureIsSet = false;
  m_CertificateId = "";
  m_CertificateIdIsSet = false;
}

DistributionConfiguration::~DistributionConfiguration() {}

void DistributionConfiguration::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const DistributionConfiguration &o) {
  j = nlohmann::json();
  if (o.contentPreparationTemplateIdIsSet())
    j["contentPreparationTemplateId"] = o.m_ContentPreparationTemplateId;
  j["canonicalDomainName"] = o.m_CanonicalDomainName;
  j["domainNameAlias"] = o.m_DomainNameAlias;
  if (o.pathRewriteRulesIsSet() || !o.m_PathRewriteRules.empty())
    j["pathRewriteRules"] = o.m_PathRewriteRules;
  if (o.cachingConfigurationsIsSet() || !o.m_CachingConfigurations.empty())
    j["cachingConfigurations"] = o.m_CachingConfigurations;
  if (o.geoFencingIsSet())
    j["GeoFencing"] = o.m_GeoFencing;
  if (o.urlSignatureIsSet())
    j["UrlSignature"] = o.m_UrlSignature;
  if (o.certificateIdIsSet())
    j["certificateId"] = o.m_CertificateId;
}

void from_json(const nlohmann::json &j, DistributionConfiguration &o) {
  if (j.find("contentPreparationTemplateId") != j.end()) {
    j.at("contentPreparationTemplateId")
        .get_to(o.m_ContentPreparationTemplateId);
    o.m_ContentPreparationTemplateIdIsSet = true;
  }
  j.at("canonicalDomainName").get_to(o.m_CanonicalDomainName);
  j.at("domainNameAlias").get_to(o.m_DomainNameAlias);
  if (j.find("pathRewriteRules") != j.end()) {
    j.at("pathRewriteRules").get_to(o.m_PathRewriteRules);
    o.m_PathRewriteRulesIsSet = true;
  }
  if (j.find("cachingConfigurations") != j.end()) {
    j.at("cachingConfigurations").get_to(o.m_CachingConfigurations);
    o.m_CachingConfigurationsIsSet = true;
  }
  if (j.find("GeoFencing") != j.end()) {
    j.at("GeoFencing").get_to(o.m_GeoFencing);
    o.m_GeoFencingIsSet = true;
  }
  if (j.find("UrlSignature") != j.end()) {
    j.at("UrlSignature").get_to(o.m_UrlSignature);
    o.m_UrlSignatureIsSet = true;
  }
  if (j.find("certificateId") != j.end()) {
    j.at("certificateId").get_to(o.m_CertificateId);
    o.m_CertificateIdIsSet = true;
  }
}

std::string DistributionConfiguration::getContentPreparationTemplateId() const {
  return m_ContentPreparationTemplateId;
}
void DistributionConfiguration::setContentPreparationTemplateId(
    std::string const &value) {
  m_ContentPreparationTemplateId = value;
  m_ContentPreparationTemplateIdIsSet = true;
}
bool DistributionConfiguration::contentPreparationTemplateIdIsSet() const {
  return m_ContentPreparationTemplateIdIsSet;
}
void DistributionConfiguration::unsetContentPreparationTemplateId() {
  m_ContentPreparationTemplateIdIsSet = false;
}
std::string DistributionConfiguration::getCanonicalDomainName() const {
  return m_CanonicalDomainName;
}
void DistributionConfiguration::setCanonicalDomainName(
    std::string const &value) {
  m_CanonicalDomainName = value;
}
std::string DistributionConfiguration::getDomainNameAlias() const {
  return m_DomainNameAlias;
}
void DistributionConfiguration::setDomainNameAlias(std::string const &value) {
  m_DomainNameAlias = value;
}
std::vector<PathRewriteRule> &DistributionConfiguration::getPathRewriteRules() {
  return m_PathRewriteRules;
}
void DistributionConfiguration::setPathRewriteRules(
    std::vector<PathRewriteRule> const &value) {
  m_PathRewriteRules = value;
  m_PathRewriteRulesIsSet = true;
}
bool DistributionConfiguration::pathRewriteRulesIsSet() const {
  return m_PathRewriteRulesIsSet;
}
void DistributionConfiguration::unsetPathRewriteRules() {
  m_PathRewriteRulesIsSet = false;
}
std::vector<CachingConfiguration> &
DistributionConfiguration::getCachingConfigurations() {
  return m_CachingConfigurations;
}
void DistributionConfiguration::setCachingConfigurations(
    std::vector<CachingConfiguration> const &value) {
  m_CachingConfigurations = value;
  m_CachingConfigurationsIsSet = true;
}
bool DistributionConfiguration::cachingConfigurationsIsSet() const {
  return m_CachingConfigurationsIsSet;
}
void DistributionConfiguration::unsetCachingConfigurations() {
  m_CachingConfigurationsIsSet = false;
}
DistributionConfiguration_GeoFencing
DistributionConfiguration::getGeoFencing() const {
  return m_GeoFencing;
}
void DistributionConfiguration::setGeoFencing(
    DistributionConfiguration_GeoFencing const &value) {
  m_GeoFencing = value;
  m_GeoFencingIsSet = true;
}
bool DistributionConfiguration::geoFencingIsSet() const {
  return m_GeoFencingIsSet;
}
void DistributionConfiguration::unsetGeoFencing() { m_GeoFencingIsSet = false; }
DistributionConfiguration_UrlSignature
DistributionConfiguration::getUrlSignature() const {
  return m_UrlSignature;
}
void DistributionConfiguration::setUrlSignature(
    DistributionConfiguration_UrlSignature const &value) {
  m_UrlSignature = value;
  m_UrlSignatureIsSet = true;
}
bool DistributionConfiguration::urlSignatureIsSet() const {
  return m_UrlSignatureIsSet;
}
void DistributionConfiguration::unsetUrlSignature() {
  m_UrlSignatureIsSet = false;
}
std::string DistributionConfiguration::getCertificateId() const {
  return m_CertificateId;
}
void DistributionConfiguration::setCertificateId(std::string const &value) {
  m_CertificateId = value;
  m_CertificateIdIsSet = true;
}
bool DistributionConfiguration::certificateIdIsSet() const {
  return m_CertificateIdIsSet;
}
void DistributionConfiguration::unsetCertificateId() {
  m_CertificateIdIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
