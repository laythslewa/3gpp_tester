/**
 * CAPIF_Security_API
 * API for CAPIF security management. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * InterfaceDescription.h
 *
 * Represents the description of an API&#39;s interface.
 */

#ifndef InterfaceDescription_H_
#define InterfaceDescription_H_

#include "SecurityMethod.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the description of an API&#39;s interface.
/// </summary>
class InterfaceDescription {
public:
  InterfaceDescription();
  virtual ~InterfaceDescription();

  void validate();

  /////////////////////////////////////////////
  /// InterfaceDescription members

  /// <summary>
  /// string identifying a Ipv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in IETF RFC 1166.
  /// </summary>
  std::string getIpv4Addr() const;
  void setIpv4Addr(std::string const &value);
  bool ipv4AddrIsSet() const;
  void unsetIpv4Addr();
  /// <summary>
  /// string identifying a Ipv6 address formatted according to clause 4 in IETF
  /// RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC
  /// 5952 shall not be used.
  /// </summary>
  std::string getIpv6Addr() const;
  void setIpv6Addr(std::string const &value);
  bool ipv6AddrIsSet() const;
  void unsetIpv6Addr();
  /// <summary>
  /// Unsigned integer with valid values between 0 and 65535.
  /// </summary>
  int32_t getPort() const;
  void setPort(int32_t const value);
  bool portIsSet() const;
  void unsetPort();
  /// <summary>
  /// Security methods supported by the interface, it take precedence over the
  /// security methods provided in AefProfile, for this specific interface.
  /// </summary>
  std::vector<SecurityMethod> &getSecurityMethods();
  void setSecurityMethods(std::vector<SecurityMethod> const &value);
  bool securityMethodsIsSet() const;
  void unsetSecurityMethods();

  friend void to_json(nlohmann::json &j, const InterfaceDescription &o);
  friend void from_json(const nlohmann::json &j, InterfaceDescription &o);

protected:
  std::string m_Ipv4Addr;
  bool m_Ipv4AddrIsSet;
  std::string m_Ipv6Addr;
  bool m_Ipv6AddrIsSet;
  int32_t m_Port;
  bool m_PortIsSet;
  std::vector<SecurityMethod> m_SecurityMethods;
  bool m_SecurityMethodsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* InterfaceDescription_H_ */
