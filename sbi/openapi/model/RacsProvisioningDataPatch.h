/**
 * 3gpp-racs-parameter-provisioning
 * API for provisioning UE radio capability parameters. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RacsProvisioningDataPatch.h
 *
 * Represents parameters to request the modification of a UE&#39;s radio
 * capability data.
 */

#ifndef RacsProvisioningDataPatch_H_
#define RacsProvisioningDataPatch_H_

#include "RacsConfigurationRm.h"
#include <map>
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents parameters to request the modification of a UE&#39;s radio
/// capability data.
/// </summary>
class RacsProvisioningDataPatch {
public:
  RacsProvisioningDataPatch();
  virtual ~RacsProvisioningDataPatch();

  void validate();

  /////////////////////////////////////////////
  /// RacsProvisioningDataPatch members

  /// <summary>
  /// Identifies the configuration related to manufactuer specific UE radio
  /// capability. Each element uniquely identifies an RACS configuration for an
  /// RACS ID and is identified in the map via the RACS ID as key.
  /// </summary>
  std::map<std::string, RacsConfigurationRm> &getRacsConfigs();
  void setRacsConfigs(std::map<std::string, RacsConfigurationRm> const &value);
  bool racsConfigsIsSet() const;
  void unsetRacsConfigs();

  friend void to_json(nlohmann::json &j, const RacsProvisioningDataPatch &o);
  friend void from_json(const nlohmann::json &j, RacsProvisioningDataPatch &o);

protected:
  std::map<std::string, RacsConfigurationRm> m_RacsConfigs;
  bool m_RacsConfigsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* RacsProvisioningDataPatch_H_ */
