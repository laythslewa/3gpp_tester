/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ImmediateMdtConf.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ImmediateMdtConf::ImmediateMdtConf() {
  m_MeasurementLteListIsSet = false;
  m_MeasurementNrListIsSet = false;
  m_ReportingTriggerListIsSet = false;
  m_ReportIntervalIsSet = false;
  m_ReportIntervalNrIsSet = false;
  m_ReportAmountIsSet = false;
  m_EventThresholdRsrp = 0;
  m_EventThresholdRsrpIsSet = false;
  m_EventThresholdRsrq = 0;
  m_EventThresholdRsrqIsSet = false;
  m_EventThresholdRsrpNr = 0;
  m_EventThresholdRsrpNrIsSet = false;
  m_EventThresholdRsrqNr = 0;
  m_EventThresholdRsrqNrIsSet = false;
  m_CollectionPeriodRmmLteIsSet = false;
  m_CollectionPeriodRmmNrIsSet = false;
  m_MeasurementPeriodLteIsSet = false;
  m_AreaScopeIsSet = false;
  m_PositioningMethodIsSet = false;
  m_AddPositioningMethodListIsSet = false;
  m_MdtAllowedPlmnIdListIsSet = false;
  m_SensorMeasurementListIsSet = false;
}

ImmediateMdtConf::~ImmediateMdtConf() {}

void ImmediateMdtConf::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ImmediateMdtConf &o) {
  j = nlohmann::json();
  j["jobType"] = o.m_JobType;
  if (o.measurementLteListIsSet() || !o.m_MeasurementLteList.empty())
    j["measurementLteList"] = o.m_MeasurementLteList;
  if (o.measurementNrListIsSet() || !o.m_MeasurementNrList.empty())
    j["measurementNrList"] = o.m_MeasurementNrList;
  if (o.reportingTriggerListIsSet() || !o.m_ReportingTriggerList.empty())
    j["reportingTriggerList"] = o.m_ReportingTriggerList;
  if (o.reportIntervalIsSet())
    j["reportInterval"] = o.m_ReportInterval;
  if (o.reportIntervalNrIsSet())
    j["reportIntervalNr"] = o.m_ReportIntervalNr;
  if (o.reportAmountIsSet())
    j["reportAmount"] = o.m_ReportAmount;
  if (o.eventThresholdRsrpIsSet())
    j["eventThresholdRsrp"] = o.m_EventThresholdRsrp;
  if (o.eventThresholdRsrqIsSet())
    j["eventThresholdRsrq"] = o.m_EventThresholdRsrq;
  if (o.eventThresholdRsrpNrIsSet())
    j["eventThresholdRsrpNr"] = o.m_EventThresholdRsrpNr;
  if (o.eventThresholdRsrqNrIsSet())
    j["eventThresholdRsrqNr"] = o.m_EventThresholdRsrqNr;
  if (o.collectionPeriodRmmLteIsSet())
    j["collectionPeriodRmmLte"] = o.m_CollectionPeriodRmmLte;
  if (o.collectionPeriodRmmNrIsSet())
    j["collectionPeriodRmmNr"] = o.m_CollectionPeriodRmmNr;
  if (o.measurementPeriodLteIsSet())
    j["measurementPeriodLte"] = o.m_MeasurementPeriodLte;
  if (o.areaScopeIsSet())
    j["areaScope"] = o.m_AreaScope;
  if (o.positioningMethodIsSet())
    j["positioningMethod"] = o.m_PositioningMethod;
  if (o.addPositioningMethodListIsSet() ||
      !o.m_AddPositioningMethodList.empty())
    j["addPositioningMethodList"] = o.m_AddPositioningMethodList;
  if (o.mdtAllowedPlmnIdListIsSet() || !o.m_MdtAllowedPlmnIdList.empty())
    j["mdtAllowedPlmnIdList"] = o.m_MdtAllowedPlmnIdList;
  if (o.sensorMeasurementListIsSet() || !o.m_SensorMeasurementList.empty())
    j["sensorMeasurementList"] = o.m_SensorMeasurementList;
}

void from_json(const nlohmann::json &j, ImmediateMdtConf &o) {
  j.at("jobType").get_to(o.m_JobType);
  if (j.find("measurementLteList") != j.end()) {
    j.at("measurementLteList").get_to(o.m_MeasurementLteList);
    o.m_MeasurementLteListIsSet = true;
  }
  if (j.find("measurementNrList") != j.end()) {
    j.at("measurementNrList").get_to(o.m_MeasurementNrList);
    o.m_MeasurementNrListIsSet = true;
  }
  if (j.find("reportingTriggerList") != j.end()) {
    j.at("reportingTriggerList").get_to(o.m_ReportingTriggerList);
    o.m_ReportingTriggerListIsSet = true;
  }
  if (j.find("reportInterval") != j.end()) {
    j.at("reportInterval").get_to(o.m_ReportInterval);
    o.m_ReportIntervalIsSet = true;
  }
  if (j.find("reportIntervalNr") != j.end()) {
    j.at("reportIntervalNr").get_to(o.m_ReportIntervalNr);
    o.m_ReportIntervalNrIsSet = true;
  }
  if (j.find("reportAmount") != j.end()) {
    j.at("reportAmount").get_to(o.m_ReportAmount);
    o.m_ReportAmountIsSet = true;
  }
  if (j.find("eventThresholdRsrp") != j.end()) {
    j.at("eventThresholdRsrp").get_to(o.m_EventThresholdRsrp);
    o.m_EventThresholdRsrpIsSet = true;
  }
  if (j.find("eventThresholdRsrq") != j.end()) {
    j.at("eventThresholdRsrq").get_to(o.m_EventThresholdRsrq);
    o.m_EventThresholdRsrqIsSet = true;
  }
  if (j.find("eventThresholdRsrpNr") != j.end()) {
    j.at("eventThresholdRsrpNr").get_to(o.m_EventThresholdRsrpNr);
    o.m_EventThresholdRsrpNrIsSet = true;
  }
  if (j.find("eventThresholdRsrqNr") != j.end()) {
    j.at("eventThresholdRsrqNr").get_to(o.m_EventThresholdRsrqNr);
    o.m_EventThresholdRsrqNrIsSet = true;
  }
  if (j.find("collectionPeriodRmmLte") != j.end()) {
    j.at("collectionPeriodRmmLte").get_to(o.m_CollectionPeriodRmmLte);
    o.m_CollectionPeriodRmmLteIsSet = true;
  }
  if (j.find("collectionPeriodRmmNr") != j.end()) {
    j.at("collectionPeriodRmmNr").get_to(o.m_CollectionPeriodRmmNr);
    o.m_CollectionPeriodRmmNrIsSet = true;
  }
  if (j.find("measurementPeriodLte") != j.end()) {
    j.at("measurementPeriodLte").get_to(o.m_MeasurementPeriodLte);
    o.m_MeasurementPeriodLteIsSet = true;
  }
  if (j.find("areaScope") != j.end()) {
    j.at("areaScope").get_to(o.m_AreaScope);
    o.m_AreaScopeIsSet = true;
  }
  if (j.find("positioningMethod") != j.end()) {
    j.at("positioningMethod").get_to(o.m_PositioningMethod);
    o.m_PositioningMethodIsSet = true;
  }
  if (j.find("addPositioningMethodList") != j.end()) {
    j.at("addPositioningMethodList").get_to(o.m_AddPositioningMethodList);
    o.m_AddPositioningMethodListIsSet = true;
  }
  if (j.find("mdtAllowedPlmnIdList") != j.end()) {
    j.at("mdtAllowedPlmnIdList").get_to(o.m_MdtAllowedPlmnIdList);
    o.m_MdtAllowedPlmnIdListIsSet = true;
  }
  if (j.find("sensorMeasurementList") != j.end()) {
    j.at("sensorMeasurementList").get_to(o.m_SensorMeasurementList);
    o.m_SensorMeasurementListIsSet = true;
  }
}

JobType ImmediateMdtConf::getJobType() const { return m_JobType; }
void ImmediateMdtConf::setJobType(JobType const &value) { m_JobType = value; }
std::vector<MeasurementLteForMdt> &ImmediateMdtConf::getMeasurementLteList() {
  return m_MeasurementLteList;
}
void ImmediateMdtConf::setMeasurementLteList(
    std::vector<MeasurementLteForMdt> const &value) {
  m_MeasurementLteList = value;
  m_MeasurementLteListIsSet = true;
}
bool ImmediateMdtConf::measurementLteListIsSet() const {
  return m_MeasurementLteListIsSet;
}
void ImmediateMdtConf::unsetMeasurementLteList() {
  m_MeasurementLteListIsSet = false;
}
std::vector<MeasurementNrForMdt> &ImmediateMdtConf::getMeasurementNrList() {
  return m_MeasurementNrList;
}
void ImmediateMdtConf::setMeasurementNrList(
    std::vector<MeasurementNrForMdt> const &value) {
  m_MeasurementNrList = value;
  m_MeasurementNrListIsSet = true;
}
bool ImmediateMdtConf::measurementNrListIsSet() const {
  return m_MeasurementNrListIsSet;
}
void ImmediateMdtConf::unsetMeasurementNrList() {
  m_MeasurementNrListIsSet = false;
}
std::vector<ReportingTrigger> &ImmediateMdtConf::getReportingTriggerList() {
  return m_ReportingTriggerList;
}
void ImmediateMdtConf::setReportingTriggerList(
    std::vector<ReportingTrigger> const &value) {
  m_ReportingTriggerList = value;
  m_ReportingTriggerListIsSet = true;
}
bool ImmediateMdtConf::reportingTriggerListIsSet() const {
  return m_ReportingTriggerListIsSet;
}
void ImmediateMdtConf::unsetReportingTriggerList() {
  m_ReportingTriggerListIsSet = false;
}
ReportIntervalMdt ImmediateMdtConf::getReportInterval() const {
  return m_ReportInterval;
}
void ImmediateMdtConf::setReportInterval(ReportIntervalMdt const &value) {
  m_ReportInterval = value;
  m_ReportIntervalIsSet = true;
}
bool ImmediateMdtConf::reportIntervalIsSet() const {
  return m_ReportIntervalIsSet;
}
void ImmediateMdtConf::unsetReportInterval() { m_ReportIntervalIsSet = false; }
ReportIntervalNrMdt ImmediateMdtConf::getReportIntervalNr() const {
  return m_ReportIntervalNr;
}
void ImmediateMdtConf::setReportIntervalNr(ReportIntervalNrMdt const &value) {
  m_ReportIntervalNr = value;
  m_ReportIntervalNrIsSet = true;
}
bool ImmediateMdtConf::reportIntervalNrIsSet() const {
  return m_ReportIntervalNrIsSet;
}
void ImmediateMdtConf::unsetReportIntervalNr() {
  m_ReportIntervalNrIsSet = false;
}
ReportAmountMdt ImmediateMdtConf::getReportAmount() const {
  return m_ReportAmount;
}
void ImmediateMdtConf::setReportAmount(ReportAmountMdt const &value) {
  m_ReportAmount = value;
  m_ReportAmountIsSet = true;
}
bool ImmediateMdtConf::reportAmountIsSet() const { return m_ReportAmountIsSet; }
void ImmediateMdtConf::unsetReportAmount() { m_ReportAmountIsSet = false; }
int32_t ImmediateMdtConf::getEventThresholdRsrp() const {
  return m_EventThresholdRsrp;
}
void ImmediateMdtConf::setEventThresholdRsrp(int32_t const value) {
  m_EventThresholdRsrp = value;
  m_EventThresholdRsrpIsSet = true;
}
bool ImmediateMdtConf::eventThresholdRsrpIsSet() const {
  return m_EventThresholdRsrpIsSet;
}
void ImmediateMdtConf::unsetEventThresholdRsrp() {
  m_EventThresholdRsrpIsSet = false;
}
int32_t ImmediateMdtConf::getEventThresholdRsrq() const {
  return m_EventThresholdRsrq;
}
void ImmediateMdtConf::setEventThresholdRsrq(int32_t const value) {
  m_EventThresholdRsrq = value;
  m_EventThresholdRsrqIsSet = true;
}
bool ImmediateMdtConf::eventThresholdRsrqIsSet() const {
  return m_EventThresholdRsrqIsSet;
}
void ImmediateMdtConf::unsetEventThresholdRsrq() {
  m_EventThresholdRsrqIsSet = false;
}
int32_t ImmediateMdtConf::getEventThresholdRsrpNr() const {
  return m_EventThresholdRsrpNr;
}
void ImmediateMdtConf::setEventThresholdRsrpNr(int32_t const value) {
  m_EventThresholdRsrpNr = value;
  m_EventThresholdRsrpNrIsSet = true;
}
bool ImmediateMdtConf::eventThresholdRsrpNrIsSet() const {
  return m_EventThresholdRsrpNrIsSet;
}
void ImmediateMdtConf::unsetEventThresholdRsrpNr() {
  m_EventThresholdRsrpNrIsSet = false;
}
int32_t ImmediateMdtConf::getEventThresholdRsrqNr() const {
  return m_EventThresholdRsrqNr;
}
void ImmediateMdtConf::setEventThresholdRsrqNr(int32_t const value) {
  m_EventThresholdRsrqNr = value;
  m_EventThresholdRsrqNrIsSet = true;
}
bool ImmediateMdtConf::eventThresholdRsrqNrIsSet() const {
  return m_EventThresholdRsrqNrIsSet;
}
void ImmediateMdtConf::unsetEventThresholdRsrqNr() {
  m_EventThresholdRsrqNrIsSet = false;
}
CollectionPeriodRmmLteMdt ImmediateMdtConf::getCollectionPeriodRmmLte() const {
  return m_CollectionPeriodRmmLte;
}
void ImmediateMdtConf::setCollectionPeriodRmmLte(
    CollectionPeriodRmmLteMdt const &value) {
  m_CollectionPeriodRmmLte = value;
  m_CollectionPeriodRmmLteIsSet = true;
}
bool ImmediateMdtConf::collectionPeriodRmmLteIsSet() const {
  return m_CollectionPeriodRmmLteIsSet;
}
void ImmediateMdtConf::unsetCollectionPeriodRmmLte() {
  m_CollectionPeriodRmmLteIsSet = false;
}
CollectionPeriodRmmNrMdt ImmediateMdtConf::getCollectionPeriodRmmNr() const {
  return m_CollectionPeriodRmmNr;
}
void ImmediateMdtConf::setCollectionPeriodRmmNr(
    CollectionPeriodRmmNrMdt const &value) {
  m_CollectionPeriodRmmNr = value;
  m_CollectionPeriodRmmNrIsSet = true;
}
bool ImmediateMdtConf::collectionPeriodRmmNrIsSet() const {
  return m_CollectionPeriodRmmNrIsSet;
}
void ImmediateMdtConf::unsetCollectionPeriodRmmNr() {
  m_CollectionPeriodRmmNrIsSet = false;
}
MeasurementPeriodLteMdt ImmediateMdtConf::getMeasurementPeriodLte() const {
  return m_MeasurementPeriodLte;
}
void ImmediateMdtConf::setMeasurementPeriodLte(
    MeasurementPeriodLteMdt const &value) {
  m_MeasurementPeriodLte = value;
  m_MeasurementPeriodLteIsSet = true;
}
bool ImmediateMdtConf::measurementPeriodLteIsSet() const {
  return m_MeasurementPeriodLteIsSet;
}
void ImmediateMdtConf::unsetMeasurementPeriodLte() {
  m_MeasurementPeriodLteIsSet = false;
}
AreaScope ImmediateMdtConf::getAreaScope() const { return m_AreaScope; }
void ImmediateMdtConf::setAreaScope(AreaScope const &value) {
  m_AreaScope = value;
  m_AreaScopeIsSet = true;
}
bool ImmediateMdtConf::areaScopeIsSet() const { return m_AreaScopeIsSet; }
void ImmediateMdtConf::unsetAreaScope() { m_AreaScopeIsSet = false; }
PositioningMethodMdt ImmediateMdtConf::getPositioningMethod() const {
  return m_PositioningMethod;
}
void ImmediateMdtConf::setPositioningMethod(PositioningMethodMdt const &value) {
  m_PositioningMethod = value;
  m_PositioningMethodIsSet = true;
}
bool ImmediateMdtConf::positioningMethodIsSet() const {
  return m_PositioningMethodIsSet;
}
void ImmediateMdtConf::unsetPositioningMethod() {
  m_PositioningMethodIsSet = false;
}
std::vector<PositioningMethodMdt> &
ImmediateMdtConf::getAddPositioningMethodList() {
  return m_AddPositioningMethodList;
}
void ImmediateMdtConf::setAddPositioningMethodList(
    std::vector<PositioningMethodMdt> const &value) {
  m_AddPositioningMethodList = value;
  m_AddPositioningMethodListIsSet = true;
}
bool ImmediateMdtConf::addPositioningMethodListIsSet() const {
  return m_AddPositioningMethodListIsSet;
}
void ImmediateMdtConf::unsetAddPositioningMethodList() {
  m_AddPositioningMethodListIsSet = false;
}
std::vector<PlmnId> &ImmediateMdtConf::getMdtAllowedPlmnIdList() {
  return m_MdtAllowedPlmnIdList;
}
void ImmediateMdtConf::setMdtAllowedPlmnIdList(
    std::vector<PlmnId> const &value) {
  m_MdtAllowedPlmnIdList = value;
  m_MdtAllowedPlmnIdListIsSet = true;
}
bool ImmediateMdtConf::mdtAllowedPlmnIdListIsSet() const {
  return m_MdtAllowedPlmnIdListIsSet;
}
void ImmediateMdtConf::unsetMdtAllowedPlmnIdList() {
  m_MdtAllowedPlmnIdListIsSet = false;
}
std::vector<SensorMeasurement> &ImmediateMdtConf::getSensorMeasurementList() {
  return m_SensorMeasurementList;
}
void ImmediateMdtConf::setSensorMeasurementList(
    std::vector<SensorMeasurement> const &value) {
  m_SensorMeasurementList = value;
  m_SensorMeasurementListIsSet = true;
}
bool ImmediateMdtConf::sensorMeasurementListIsSet() const {
  return m_SensorMeasurementListIsSet;
}
void ImmediateMdtConf::unsetSensorMeasurementList() {
  m_SensorMeasurementListIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
