/**
 * 3gpp-chargeable-party
 * API for Chargeable Party management. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ChargeableParty.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ChargeableParty::ChargeableParty() {
  m_Self = "";
  m_SelfIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_Dnn = "";
  m_DnnIsSet = false;
  m_SnssaiIsSet = false;
  m_NotificationDestination = "";
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
  m_ExterAppId = "";
  m_ExterAppIdIsSet = false;
  m_Ipv4Addr = "";
  m_Ipv4AddrIsSet = false;
  m_IpDomain = "";
  m_IpDomainIsSet = false;
  m_Ipv6Addr = "";
  m_Ipv6AddrIsSet = false;
  m_MacAddr = "";
  m_MacAddrIsSet = false;
  m_FlowInfoIsSet = false;
  m_EthFlowInfoIsSet = false;
  m_SponsoringEnabled = false;
  m_ReferenceId = "";
  m_ReferenceIdIsSet = false;
  m_ServAuthInfoIsSet = false;
  m_UsageThresholdIsSet = false;
}

ChargeableParty::~ChargeableParty() {}

void ChargeableParty::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ChargeableParty &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.dnnIsSet())
    j["dnn"] = o.m_Dnn;
  if (o.snssaiIsSet())
    j["snssai"] = o.m_Snssai;
  j["notificationDestination"] = o.m_NotificationDestination;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  if (o.exterAppIdIsSet())
    j["exterAppId"] = o.m_ExterAppId;
  if (o.ipv4AddrIsSet())
    j["ipv4Addr"] = o.m_Ipv4Addr;
  if (o.ipDomainIsSet())
    j["ipDomain"] = o.m_IpDomain;
  if (o.ipv6AddrIsSet())
    j["ipv6Addr"] = o.m_Ipv6Addr;
  if (o.macAddrIsSet())
    j["macAddr"] = o.m_MacAddr;
  if (o.flowInfoIsSet() || !o.m_FlowInfo.empty())
    j["flowInfo"] = o.m_FlowInfo;
  if (o.ethFlowInfoIsSet() || !o.m_EthFlowInfo.empty())
    j["ethFlowInfo"] = o.m_EthFlowInfo;
  j["sponsorInformation"] = o.m_SponsorInformation;
  j["sponsoringEnabled"] = o.m_SponsoringEnabled;
  if (o.referenceIdIsSet())
    j["referenceId"] = o.m_ReferenceId;
  if (o.servAuthInfoIsSet())
    j["servAuthInfo"] = o.m_ServAuthInfo;
  if (o.usageThresholdIsSet())
    j["usageThreshold"] = o.m_UsageThreshold;
}

void from_json(const nlohmann::json &j, ChargeableParty &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
  if (j.find("snssai") != j.end()) {
    j.at("snssai").get_to(o.m_Snssai);
    o.m_SnssaiIsSet = true;
  }
  j.at("notificationDestination").get_to(o.m_NotificationDestination);
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  if (j.find("exterAppId") != j.end()) {
    j.at("exterAppId").get_to(o.m_ExterAppId);
    o.m_ExterAppIdIsSet = true;
  }
  if (j.find("ipv4Addr") != j.end()) {
    j.at("ipv4Addr").get_to(o.m_Ipv4Addr);
    o.m_Ipv4AddrIsSet = true;
  }
  if (j.find("ipDomain") != j.end()) {
    j.at("ipDomain").get_to(o.m_IpDomain);
    o.m_IpDomainIsSet = true;
  }
  if (j.find("ipv6Addr") != j.end()) {
    j.at("ipv6Addr").get_to(o.m_Ipv6Addr);
    o.m_Ipv6AddrIsSet = true;
  }
  if (j.find("macAddr") != j.end()) {
    j.at("macAddr").get_to(o.m_MacAddr);
    o.m_MacAddrIsSet = true;
  }
  if (j.find("flowInfo") != j.end()) {
    j.at("flowInfo").get_to(o.m_FlowInfo);
    o.m_FlowInfoIsSet = true;
  }
  if (j.find("ethFlowInfo") != j.end()) {
    j.at("ethFlowInfo").get_to(o.m_EthFlowInfo);
    o.m_EthFlowInfoIsSet = true;
  }
  j.at("sponsorInformation").get_to(o.m_SponsorInformation);
  j.at("sponsoringEnabled").get_to(o.m_SponsoringEnabled);
  if (j.find("referenceId") != j.end()) {
    j.at("referenceId").get_to(o.m_ReferenceId);
    o.m_ReferenceIdIsSet = true;
  }
  if (j.find("servAuthInfo") != j.end()) {
    j.at("servAuthInfo").get_to(o.m_ServAuthInfo);
    o.m_ServAuthInfoIsSet = true;
  }
  if (j.find("usageThreshold") != j.end()) {
    j.at("usageThreshold").get_to(o.m_UsageThreshold);
    o.m_UsageThresholdIsSet = true;
  }
}

std::string ChargeableParty::getSelf() const { return m_Self; }
void ChargeableParty::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool ChargeableParty::selfIsSet() const { return m_SelfIsSet; }
void ChargeableParty::unsetSelf() { m_SelfIsSet = false; }
std::string ChargeableParty::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void ChargeableParty::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool ChargeableParty::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void ChargeableParty::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::string ChargeableParty::getDnn() const { return m_Dnn; }
void ChargeableParty::setDnn(std::string const &value) {
  m_Dnn = value;
  m_DnnIsSet = true;
}
bool ChargeableParty::dnnIsSet() const { return m_DnnIsSet; }
void ChargeableParty::unsetDnn() { m_DnnIsSet = false; }
Snssai ChargeableParty::getSnssai() const { return m_Snssai; }
void ChargeableParty::setSnssai(Snssai const &value) {
  m_Snssai = value;
  m_SnssaiIsSet = true;
}
bool ChargeableParty::snssaiIsSet() const { return m_SnssaiIsSet; }
void ChargeableParty::unsetSnssai() { m_SnssaiIsSet = false; }
std::string ChargeableParty::getNotificationDestination() const {
  return m_NotificationDestination;
}
void ChargeableParty::setNotificationDestination(std::string const &value) {
  m_NotificationDestination = value;
}
bool ChargeableParty::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void ChargeableParty::setRequestTestNotification(bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool ChargeableParty::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void ChargeableParty::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig ChargeableParty::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void ChargeableParty::setWebsockNotifConfig(WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool ChargeableParty::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void ChargeableParty::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
std::string ChargeableParty::getExterAppId() const { return m_ExterAppId; }
void ChargeableParty::setExterAppId(std::string const &value) {
  m_ExterAppId = value;
  m_ExterAppIdIsSet = true;
}
bool ChargeableParty::exterAppIdIsSet() const { return m_ExterAppIdIsSet; }
void ChargeableParty::unsetExterAppId() { m_ExterAppIdIsSet = false; }
std::string ChargeableParty::getIpv4Addr() const { return m_Ipv4Addr; }
void ChargeableParty::setIpv4Addr(std::string const &value) {
  m_Ipv4Addr = value;
  m_Ipv4AddrIsSet = true;
}
bool ChargeableParty::ipv4AddrIsSet() const { return m_Ipv4AddrIsSet; }
void ChargeableParty::unsetIpv4Addr() { m_Ipv4AddrIsSet = false; }
std::string ChargeableParty::getIpDomain() const { return m_IpDomain; }
void ChargeableParty::setIpDomain(std::string const &value) {
  m_IpDomain = value;
  m_IpDomainIsSet = true;
}
bool ChargeableParty::ipDomainIsSet() const { return m_IpDomainIsSet; }
void ChargeableParty::unsetIpDomain() { m_IpDomainIsSet = false; }
std::string ChargeableParty::getIpv6Addr() const { return m_Ipv6Addr; }
void ChargeableParty::setIpv6Addr(std::string const &value) {
  m_Ipv6Addr = value;
  m_Ipv6AddrIsSet = true;
}
bool ChargeableParty::ipv6AddrIsSet() const { return m_Ipv6AddrIsSet; }
void ChargeableParty::unsetIpv6Addr() { m_Ipv6AddrIsSet = false; }
std::string ChargeableParty::getMacAddr() const { return m_MacAddr; }
void ChargeableParty::setMacAddr(std::string const &value) {
  m_MacAddr = value;
  m_MacAddrIsSet = true;
}
bool ChargeableParty::macAddrIsSet() const { return m_MacAddrIsSet; }
void ChargeableParty::unsetMacAddr() { m_MacAddrIsSet = false; }
std::vector<FlowInfo> &ChargeableParty::getFlowInfo() { return m_FlowInfo; }
void ChargeableParty::setFlowInfo(std::vector<FlowInfo> const &value) {
  m_FlowInfo = value;
  m_FlowInfoIsSet = true;
}
bool ChargeableParty::flowInfoIsSet() const { return m_FlowInfoIsSet; }
void ChargeableParty::unsetFlowInfo() { m_FlowInfoIsSet = false; }
std::vector<EthFlowDescription> &ChargeableParty::getEthFlowInfo() {
  return m_EthFlowInfo;
}
void ChargeableParty::setEthFlowInfo(
    std::vector<EthFlowDescription> const &value) {
  m_EthFlowInfo = value;
  m_EthFlowInfoIsSet = true;
}
bool ChargeableParty::ethFlowInfoIsSet() const { return m_EthFlowInfoIsSet; }
void ChargeableParty::unsetEthFlowInfo() { m_EthFlowInfoIsSet = false; }
SponsorInformation ChargeableParty::getSponsorInformation() const {
  return m_SponsorInformation;
}
void ChargeableParty::setSponsorInformation(SponsorInformation const &value) {
  m_SponsorInformation = value;
}
bool ChargeableParty::isSponsoringEnabled() const {
  return m_SponsoringEnabled;
}
void ChargeableParty::setSponsoringEnabled(bool const value) {
  m_SponsoringEnabled = value;
}
std::string ChargeableParty::getReferenceId() const { return m_ReferenceId; }
void ChargeableParty::setReferenceId(std::string const &value) {
  m_ReferenceId = value;
  m_ReferenceIdIsSet = true;
}
bool ChargeableParty::referenceIdIsSet() const { return m_ReferenceIdIsSet; }
void ChargeableParty::unsetReferenceId() { m_ReferenceIdIsSet = false; }
ServAuthInfo ChargeableParty::getServAuthInfo() const { return m_ServAuthInfo; }
void ChargeableParty::setServAuthInfo(ServAuthInfo const &value) {
  m_ServAuthInfo = value;
  m_ServAuthInfoIsSet = true;
}
bool ChargeableParty::servAuthInfoIsSet() const { return m_ServAuthInfoIsSet; }
void ChargeableParty::unsetServAuthInfo() { m_ServAuthInfoIsSet = false; }
UsageThreshold ChargeableParty::getUsageThreshold() const {
  return m_UsageThreshold;
}
void ChargeableParty::setUsageThreshold(UsageThreshold const &value) {
  m_UsageThreshold = value;
  m_UsageThresholdIsSet = true;
}
bool ChargeableParty::usageThresholdIsSet() const {
  return m_UsageThresholdIsSet;
}
void ChargeableParty::unsetUsageThreshold() { m_UsageThresholdIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
