/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TrafficCharacterization.h
 *
 * Identifies the detailed traffic characterization.
 */

#ifndef TrafficCharacterization_H_
#define TrafficCharacterization_H_

#include "IpEthFlowDescription.h"
#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Identifies the detailed traffic characterization.
/// </summary>
class TrafficCharacterization {
public:
  TrafficCharacterization();
  virtual ~TrafficCharacterization();

  void validate();

  /////////////////////////////////////////////
  /// TrafficCharacterization members

  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  /// String providing an application identifier.
  /// </summary>
  std::string getAppId() const;
  void setAppId(std::string const &value);
  bool appIdIsSet() const;
  void unsetAppId();
  /// <summary>
  ///
  /// </summary>
  std::vector<IpEthFlowDescription> &getFDescs();
  void setFDescs(std::vector<IpEthFlowDescription> const &value);
  bool fDescsIsSet() const;
  void unsetFDescs();
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes.
  /// </summary>
  int64_t getUlVol() const;
  void setUlVol(int64_t const value);
  bool ulVolIsSet() const;
  void unsetUlVol();
  /// <summary>
  /// string with format \&quot;float\&quot; as defined in OpenAPI.
  /// </summary>
  float getUlVolVariance() const;
  void setUlVolVariance(float const value);
  bool ulVolVarianceIsSet() const;
  void unsetUlVolVariance();
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes.
  /// </summary>
  int64_t getDlVol() const;
  void setDlVol(int64_t const value);
  bool dlVolIsSet() const;
  void unsetDlVol();
  /// <summary>
  /// string with format \&quot;float\&quot; as defined in OpenAPI.
  /// </summary>
  float getDlVolVariance() const;
  void setDlVolVariance(float const value);
  bool dlVolVarianceIsSet() const;
  void unsetDlVolVariance();

  friend void to_json(nlohmann::json &j, const TrafficCharacterization &o);
  friend void from_json(const nlohmann::json &j, TrafficCharacterization &o);

protected:
  std::string m_Dnn;
  bool m_DnnIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  std::string m_AppId;
  bool m_AppIdIsSet;
  std::vector<IpEthFlowDescription> m_FDescs;
  bool m_FDescsIsSet;
  int64_t m_UlVol;
  bool m_UlVolIsSet;
  float m_UlVolVariance;
  bool m_UlVolVarianceIsSet;
  int64_t m_DlVol;
  bool m_DlVolIsSet;
  float m_DlVolVariance;
  bool m_DlVolVarianceIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* TrafficCharacterization_H_ */
