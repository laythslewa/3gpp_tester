/**
 * GMDviaMBMSbyMB2
 * API for Group Message Delivery via MBMS by MB2 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "GMDViaMBMSByMb2.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

GMDViaMBMSByMb2::GMDViaMBMSByMb2() {
  m_Self = "";
  m_SelfIsSet = false;
  m_NotificationDestination = "";
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
  m_ExternalGroupId = "";
  m_ExternalGroupIdIsSet = false;
  m_MbmsLocAreaIsSet = false;
  m_MessageDeliveryStartTime = "";
  m_MessageDeliveryStartTimeIsSet = false;
  m_GroupMessagePayload = "";
  m_GroupMessagePayloadIsSet = false;
  m_ScefMessageDeliveryIPv4 = "";
  m_ScefMessageDeliveryIPv4IsSet = false;
  m_ScefMessageDeliveryIPv6 = "";
  m_ScefMessageDeliveryIPv6IsSet = false;
  m_ScefMessageDeliveryPort = 0;
  m_ScefMessageDeliveryPortIsSet = false;
}

GMDViaMBMSByMb2::~GMDViaMBMSByMb2() {}

void GMDViaMBMSByMb2::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const GMDViaMBMSByMb2 &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  j["notificationDestination"] = o.m_NotificationDestination;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  if (o.externalGroupIdIsSet())
    j["externalGroupId"] = o.m_ExternalGroupId;
  if (o.mbmsLocAreaIsSet())
    j["mbmsLocArea"] = o.m_MbmsLocArea;
  if (o.messageDeliveryStartTimeIsSet())
    j["messageDeliveryStartTime"] = o.m_MessageDeliveryStartTime;
  if (o.groupMessagePayloadIsSet())
    j["groupMessagePayload"] = o.m_GroupMessagePayload;
  if (o.scefMessageDeliveryIPv4IsSet())
    j["scefMessageDeliveryIPv4"] = o.m_ScefMessageDeliveryIPv4;
  if (o.scefMessageDeliveryIPv6IsSet())
    j["scefMessageDeliveryIPv6"] = o.m_ScefMessageDeliveryIPv6;
  if (o.scefMessageDeliveryPortIsSet())
    j["scefMessageDeliveryPort"] = o.m_ScefMessageDeliveryPort;
}

void from_json(const nlohmann::json &j, GMDViaMBMSByMb2 &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  j.at("notificationDestination").get_to(o.m_NotificationDestination);
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  if (j.find("externalGroupId") != j.end()) {
    j.at("externalGroupId").get_to(o.m_ExternalGroupId);
    o.m_ExternalGroupIdIsSet = true;
  }
  if (j.find("mbmsLocArea") != j.end()) {
    j.at("mbmsLocArea").get_to(o.m_MbmsLocArea);
    o.m_MbmsLocAreaIsSet = true;
  }
  if (j.find("messageDeliveryStartTime") != j.end()) {
    j.at("messageDeliveryStartTime").get_to(o.m_MessageDeliveryStartTime);
    o.m_MessageDeliveryStartTimeIsSet = true;
  }
  if (j.find("groupMessagePayload") != j.end()) {
    j.at("groupMessagePayload").get_to(o.m_GroupMessagePayload);
    o.m_GroupMessagePayloadIsSet = true;
  }
  if (j.find("scefMessageDeliveryIPv4") != j.end()) {
    j.at("scefMessageDeliveryIPv4").get_to(o.m_ScefMessageDeliveryIPv4);
    o.m_ScefMessageDeliveryIPv4IsSet = true;
  }
  if (j.find("scefMessageDeliveryIPv6") != j.end()) {
    j.at("scefMessageDeliveryIPv6").get_to(o.m_ScefMessageDeliveryIPv6);
    o.m_ScefMessageDeliveryIPv6IsSet = true;
  }
  if (j.find("scefMessageDeliveryPort") != j.end()) {
    j.at("scefMessageDeliveryPort").get_to(o.m_ScefMessageDeliveryPort);
    o.m_ScefMessageDeliveryPortIsSet = true;
  }
}

std::string GMDViaMBMSByMb2::getSelf() const { return m_Self; }
void GMDViaMBMSByMb2::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool GMDViaMBMSByMb2::selfIsSet() const { return m_SelfIsSet; }
void GMDViaMBMSByMb2::unsetSelf() { m_SelfIsSet = false; }
std::string GMDViaMBMSByMb2::getNotificationDestination() const {
  return m_NotificationDestination;
}
void GMDViaMBMSByMb2::setNotificationDestination(std::string const &value) {
  m_NotificationDestination = value;
}
bool GMDViaMBMSByMb2::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void GMDViaMBMSByMb2::setRequestTestNotification(bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool GMDViaMBMSByMb2::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void GMDViaMBMSByMb2::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig GMDViaMBMSByMb2::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void GMDViaMBMSByMb2::setWebsockNotifConfig(WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool GMDViaMBMSByMb2::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void GMDViaMBMSByMb2::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
std::string GMDViaMBMSByMb2::getExternalGroupId() const {
  return m_ExternalGroupId;
}
void GMDViaMBMSByMb2::setExternalGroupId(std::string const &value) {
  m_ExternalGroupId = value;
  m_ExternalGroupIdIsSet = true;
}
bool GMDViaMBMSByMb2::externalGroupIdIsSet() const {
  return m_ExternalGroupIdIsSet;
}
void GMDViaMBMSByMb2::unsetExternalGroupId() { m_ExternalGroupIdIsSet = false; }
MbmsLocArea GMDViaMBMSByMb2::getMbmsLocArea() const { return m_MbmsLocArea; }
void GMDViaMBMSByMb2::setMbmsLocArea(MbmsLocArea const &value) {
  m_MbmsLocArea = value;
  m_MbmsLocAreaIsSet = true;
}
bool GMDViaMBMSByMb2::mbmsLocAreaIsSet() const { return m_MbmsLocAreaIsSet; }
void GMDViaMBMSByMb2::unsetMbmsLocArea() { m_MbmsLocAreaIsSet = false; }
std::string GMDViaMBMSByMb2::getMessageDeliveryStartTime() const {
  return m_MessageDeliveryStartTime;
}
void GMDViaMBMSByMb2::setMessageDeliveryStartTime(std::string const &value) {
  m_MessageDeliveryStartTime = value;
  m_MessageDeliveryStartTimeIsSet = true;
}
bool GMDViaMBMSByMb2::messageDeliveryStartTimeIsSet() const {
  return m_MessageDeliveryStartTimeIsSet;
}
void GMDViaMBMSByMb2::unsetMessageDeliveryStartTime() {
  m_MessageDeliveryStartTimeIsSet = false;
}
std::string GMDViaMBMSByMb2::getGroupMessagePayload() const {
  return m_GroupMessagePayload;
}
void GMDViaMBMSByMb2::setGroupMessagePayload(std::string const &value) {
  m_GroupMessagePayload = value;
  m_GroupMessagePayloadIsSet = true;
}
bool GMDViaMBMSByMb2::groupMessagePayloadIsSet() const {
  return m_GroupMessagePayloadIsSet;
}
void GMDViaMBMSByMb2::unsetGroupMessagePayload() {
  m_GroupMessagePayloadIsSet = false;
}
std::string GMDViaMBMSByMb2::getScefMessageDeliveryIPv4() const {
  return m_ScefMessageDeliveryIPv4;
}
void GMDViaMBMSByMb2::setScefMessageDeliveryIPv4(std::string const &value) {
  m_ScefMessageDeliveryIPv4 = value;
  m_ScefMessageDeliveryIPv4IsSet = true;
}
bool GMDViaMBMSByMb2::scefMessageDeliveryIPv4IsSet() const {
  return m_ScefMessageDeliveryIPv4IsSet;
}
void GMDViaMBMSByMb2::unsetScefMessageDeliveryIPv4() {
  m_ScefMessageDeliveryIPv4IsSet = false;
}
std::string GMDViaMBMSByMb2::getScefMessageDeliveryIPv6() const {
  return m_ScefMessageDeliveryIPv6;
}
void GMDViaMBMSByMb2::setScefMessageDeliveryIPv6(std::string const &value) {
  m_ScefMessageDeliveryIPv6 = value;
  m_ScefMessageDeliveryIPv6IsSet = true;
}
bool GMDViaMBMSByMb2::scefMessageDeliveryIPv6IsSet() const {
  return m_ScefMessageDeliveryIPv6IsSet;
}
void GMDViaMBMSByMb2::unsetScefMessageDeliveryIPv6() {
  m_ScefMessageDeliveryIPv6IsSet = false;
}
int32_t GMDViaMBMSByMb2::getScefMessageDeliveryPort() const {
  return m_ScefMessageDeliveryPort;
}
void GMDViaMBMSByMb2::setScefMessageDeliveryPort(int32_t const value) {
  m_ScefMessageDeliveryPort = value;
  m_ScefMessageDeliveryPortIsSet = true;
}
bool GMDViaMBMSByMb2::scefMessageDeliveryPortIsSet() const {
  return m_ScefMessageDeliveryPortIsSet;
}
void GMDViaMBMSByMb2::unsetScefMessageDeliveryPort() {
  m_ScefMessageDeliveryPortIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
