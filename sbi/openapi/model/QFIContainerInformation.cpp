/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "QFIContainerInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

QFIContainerInformation::QFIContainerInformation() {
  m_QFI = 0;
  m_QFIIsSet = false;
  m_TimeofFirstUsage = "";
  m_TimeofFirstUsageIsSet = false;
  m_TimeofLastUsage = "";
  m_TimeofLastUsageIsSet = false;
  m_QoSInformationIsSet = false;
  m_QoSCharacteristicsIsSet = false;
  m_UserLocationInformationIsSet = false;
  m_UetimeZone = "";
  m_UetimeZoneIsSet = false;
  m_PresenceReportingAreaInformationIsSet = false;
  m_RATTypeIsSet = false;
  m_ServingNetworkFunctionIDIsSet = false;
  m_r_3gppPSDataOffStatusIsSet = false;
}

QFIContainerInformation::~QFIContainerInformation() {}

void QFIContainerInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const QFIContainerInformation &o) {
  j = nlohmann::json();
  if (o.qFIIsSet())
    j["qFI"] = o.m_QFI;
  if (o.timeofFirstUsageIsSet())
    j["timeofFirstUsage"] = o.m_TimeofFirstUsage;
  if (o.timeofLastUsageIsSet())
    j["timeofLastUsage"] = o.m_TimeofLastUsage;
  if (o.qoSInformationIsSet())
    j["qoSInformation"] = o.m_QoSInformation;
  if (o.qoSCharacteristicsIsSet())
    j["qoSCharacteristics"] = o.m_QoSCharacteristics;
  if (o.userLocationInformationIsSet())
    j["userLocationInformation"] = o.m_UserLocationInformation;
  if (o.uetimeZoneIsSet())
    j["uetimeZone"] = o.m_UetimeZone;
  if (o.presenceReportingAreaInformationIsSet() ||
      !o.m_PresenceReportingAreaInformation.empty())
    j["presenceReportingAreaInformation"] =
        o.m_PresenceReportingAreaInformation;
  if (o.rATTypeIsSet())
    j["rATType"] = o.m_RATType;
  if (o.servingNetworkFunctionIDIsSet() ||
      !o.m_ServingNetworkFunctionID.empty())
    j["servingNetworkFunctionID"] = o.m_ServingNetworkFunctionID;
  if (o.r3gppPSDataOffStatusIsSet())
    j["3gppPSDataOffStatus"] = o.m_r_3gppPSDataOffStatus;
}

void from_json(const nlohmann::json &j, QFIContainerInformation &o) {
  if (j.find("qFI") != j.end()) {
    j.at("qFI").get_to(o.m_QFI);
    o.m_QFIIsSet = true;
  }
  if (j.find("timeofFirstUsage") != j.end()) {
    j.at("timeofFirstUsage").get_to(o.m_TimeofFirstUsage);
    o.m_TimeofFirstUsageIsSet = true;
  }
  if (j.find("timeofLastUsage") != j.end()) {
    j.at("timeofLastUsage").get_to(o.m_TimeofLastUsage);
    o.m_TimeofLastUsageIsSet = true;
  }
  if (j.find("qoSInformation") != j.end()) {
    j.at("qoSInformation").get_to(o.m_QoSInformation);
    o.m_QoSInformationIsSet = true;
  }
  if (j.find("qoSCharacteristics") != j.end()) {
    j.at("qoSCharacteristics").get_to(o.m_QoSCharacteristics);
    o.m_QoSCharacteristicsIsSet = true;
  }
  if (j.find("userLocationInformation") != j.end()) {
    j.at("userLocationInformation").get_to(o.m_UserLocationInformation);
    o.m_UserLocationInformationIsSet = true;
  }
  if (j.find("uetimeZone") != j.end()) {
    j.at("uetimeZone").get_to(o.m_UetimeZone);
    o.m_UetimeZoneIsSet = true;
  }
  if (j.find("presenceReportingAreaInformation") != j.end()) {
    j.at("presenceReportingAreaInformation")
        .get_to(o.m_PresenceReportingAreaInformation);
    o.m_PresenceReportingAreaInformationIsSet = true;
  }
  if (j.find("rATType") != j.end()) {
    j.at("rATType").get_to(o.m_RATType);
    o.m_RATTypeIsSet = true;
  }
  if (j.find("servingNetworkFunctionID") != j.end()) {
    j.at("servingNetworkFunctionID").get_to(o.m_ServingNetworkFunctionID);
    o.m_ServingNetworkFunctionIDIsSet = true;
  }
  if (j.find("3gppPSDataOffStatus") != j.end()) {
    j.at("3gppPSDataOffStatus").get_to(o.m_r_3gppPSDataOffStatus);
    o.m_r_3gppPSDataOffStatusIsSet = true;
  }
}

int32_t QFIContainerInformation::getQFI() const { return m_QFI; }
void QFIContainerInformation::setQFI(int32_t const value) {
  m_QFI = value;
  m_QFIIsSet = true;
}
bool QFIContainerInformation::qFIIsSet() const { return m_QFIIsSet; }
void QFIContainerInformation::unsetQFI() { m_QFIIsSet = false; }
std::string QFIContainerInformation::getTimeofFirstUsage() const {
  return m_TimeofFirstUsage;
}
void QFIContainerInformation::setTimeofFirstUsage(std::string const &value) {
  m_TimeofFirstUsage = value;
  m_TimeofFirstUsageIsSet = true;
}
bool QFIContainerInformation::timeofFirstUsageIsSet() const {
  return m_TimeofFirstUsageIsSet;
}
void QFIContainerInformation::unsetTimeofFirstUsage() {
  m_TimeofFirstUsageIsSet = false;
}
std::string QFIContainerInformation::getTimeofLastUsage() const {
  return m_TimeofLastUsage;
}
void QFIContainerInformation::setTimeofLastUsage(std::string const &value) {
  m_TimeofLastUsage = value;
  m_TimeofLastUsageIsSet = true;
}
bool QFIContainerInformation::timeofLastUsageIsSet() const {
  return m_TimeofLastUsageIsSet;
}
void QFIContainerInformation::unsetTimeofLastUsage() {
  m_TimeofLastUsageIsSet = false;
}
QosData QFIContainerInformation::getQoSInformation() const {
  return m_QoSInformation;
}
void QFIContainerInformation::setQoSInformation(QosData const &value) {
  m_QoSInformation = value;
  m_QoSInformationIsSet = true;
}
bool QFIContainerInformation::qoSInformationIsSet() const {
  return m_QoSInformationIsSet;
}
void QFIContainerInformation::unsetQoSInformation() {
  m_QoSInformationIsSet = false;
}
QosCharacteristics QFIContainerInformation::getQoSCharacteristics() const {
  return m_QoSCharacteristics;
}
void QFIContainerInformation::setQoSCharacteristics(
    QosCharacteristics const &value) {
  m_QoSCharacteristics = value;
  m_QoSCharacteristicsIsSet = true;
}
bool QFIContainerInformation::qoSCharacteristicsIsSet() const {
  return m_QoSCharacteristicsIsSet;
}
void QFIContainerInformation::unsetQoSCharacteristics() {
  m_QoSCharacteristicsIsSet = false;
}
UserLocation QFIContainerInformation::getUserLocationInformation() const {
  return m_UserLocationInformation;
}
void QFIContainerInformation::setUserLocationInformation(
    UserLocation const &value) {
  m_UserLocationInformation = value;
  m_UserLocationInformationIsSet = true;
}
bool QFIContainerInformation::userLocationInformationIsSet() const {
  return m_UserLocationInformationIsSet;
}
void QFIContainerInformation::unsetUserLocationInformation() {
  m_UserLocationInformationIsSet = false;
}
std::string QFIContainerInformation::getUetimeZone() const {
  return m_UetimeZone;
}
void QFIContainerInformation::setUetimeZone(std::string const &value) {
  m_UetimeZone = value;
  m_UetimeZoneIsSet = true;
}
bool QFIContainerInformation::uetimeZoneIsSet() const {
  return m_UetimeZoneIsSet;
}
void QFIContainerInformation::unsetUetimeZone() { m_UetimeZoneIsSet = false; }
std::map<std::string, PresenceInfo> &
QFIContainerInformation::getPresenceReportingAreaInformation() {
  return m_PresenceReportingAreaInformation;
}
void QFIContainerInformation::setPresenceReportingAreaInformation(
    std::map<std::string, PresenceInfo> const &value) {
  m_PresenceReportingAreaInformation = value;
  m_PresenceReportingAreaInformationIsSet = true;
}
bool QFIContainerInformation::presenceReportingAreaInformationIsSet() const {
  return m_PresenceReportingAreaInformationIsSet;
}
void QFIContainerInformation::unsetPresenceReportingAreaInformation() {
  m_PresenceReportingAreaInformationIsSet = false;
}
RatType QFIContainerInformation::getRATType() const { return m_RATType; }
void QFIContainerInformation::setRATType(RatType const &value) {
  m_RATType = value;
  m_RATTypeIsSet = true;
}
bool QFIContainerInformation::rATTypeIsSet() const { return m_RATTypeIsSet; }
void QFIContainerInformation::unsetRATType() { m_RATTypeIsSet = false; }
std::vector<ServingNetworkFunctionID> &
QFIContainerInformation::getServingNetworkFunctionID() {
  return m_ServingNetworkFunctionID;
}
void QFIContainerInformation::setServingNetworkFunctionID(
    std::vector<ServingNetworkFunctionID> const &value) {
  m_ServingNetworkFunctionID = value;
  m_ServingNetworkFunctionIDIsSet = true;
}
bool QFIContainerInformation::servingNetworkFunctionIDIsSet() const {
  return m_ServingNetworkFunctionIDIsSet;
}
void QFIContainerInformation::unsetServingNetworkFunctionID() {
  m_ServingNetworkFunctionIDIsSet = false;
}
3GPPPSDataOffStatus QFIContainerInformation::getR3gppPSDataOffStatus() const {
  return m_r_3gppPSDataOffStatus;
}
void QFIContainerInformation::setR3gppPSDataOffStatus(
    3GPPPSDataOffStatus const &value) {
  m_r_3gppPSDataOffStatus = value;
  m_r_3gppPSDataOffStatusIsSet = true;
}
bool QFIContainerInformation::r3gppPSDataOffStatusIsSet() const {
  return m_r_3gppPSDataOffStatusIsSet;
}
void QFIContainerInformation::unsetr_3gppPSDataOffStatus() {
  m_r_3gppPSDataOffStatusIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
