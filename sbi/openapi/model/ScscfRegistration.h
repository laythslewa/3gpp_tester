/**
 * Nhss_imsUECM
 * Nhss UE Context Management Service for IMS. © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ScscfRegistration.h
 *
 * Scscf Registration
 */

#ifndef ScscfRegistration_H_
#define ScscfRegistration_H_

#include "ImsRegistrationType.h"
#include "LooseRouteIndication.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Scscf Registration
/// </summary>
class ScscfRegistration {
public:
  ScscfRegistration();
  virtual ~ScscfRegistration();

  void validate();

  /////////////////////////////////////////////
  /// ScscfRegistration members

  /// <summary>
  ///
  /// </summary>
  std::string getImpi() const;
  void setImpi(std::string const &value);
  bool impiIsSet() const;
  void unsetImpi();
  /// <summary>
  ///
  /// </summary>
  ImsRegistrationType getImsRegistrationType() const;
  void setImsRegistrationType(ImsRegistrationType const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getCscfServerName() const;
  void setCscfServerName(std::string const &value);
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getScscfInstanceId() const;
  void setScscfInstanceId(std::string const &value);
  bool scscfInstanceIdIsSet() const;
  void unsetScscfInstanceId();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getDeregCallbackUri() const;
  void setDeregCallbackUri(std::string const &value);
  bool deregCallbackUriIsSet() const;
  void unsetDeregCallbackUri();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getAssociatedImpis();
  void setAssociatedImpis(std::vector<std::string> const &value);
  bool associatedImpisIsSet() const;
  void unsetAssociatedImpis();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getAssociatedRegisteredImpis();
  void setAssociatedRegisteredImpis(std::vector<std::string> const &value);
  bool associatedRegisteredImpisIsSet() const;
  void unsetAssociatedRegisteredImpis();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getIrsImpus();
  void setIrsImpus(std::vector<std::string> const &value);
  bool irsImpusIsSet() const;
  void unsetIrsImpus();
  /// <summary>
  ///
  /// </summary>
  std::string getWildcardedPui() const;
  void setWildcardedPui(std::string const &value);
  bool wildcardedPuiIsSet() const;
  void unsetWildcardedPui();
  /// <summary>
  ///
  /// </summary>
  LooseRouteIndication getLooseRouteIndicator() const;
  void setLooseRouteIndicator(LooseRouteIndication const &value);
  bool looseRouteIndicatorIsSet() const;
  void unsetLooseRouteIndicator();
  /// <summary>
  ///
  /// </summary>
  std::string getWildcardedPsi() const;
  void setWildcardedPsi(std::string const &value);
  bool wildcardedPsiIsSet() const;
  void unsetWildcardedPsi();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  bool isMultipleRegistrationIndicator() const;
  void setMultipleRegistrationIndicator(bool const value);
  bool multipleRegistrationIndicatorIsSet() const;
  void unsetMultipleRegistrationIndicator();
  /// <summary>
  ///
  /// </summary>
  bool isPcscfRestorationIndicator() const;
  void setPcscfRestorationIndicator(bool const value);
  bool pcscfRestorationIndicatorIsSet() const;
  void unsetPcscfRestorationIndicator();
  /// <summary>
  ///
  /// </summary>
  bool isScscfReselectionIndicator() const;
  void setScscfReselectionIndicator(bool const value);
  bool scscfReselectionIndicatorIsSet() const;
  void unsetScscfReselectionIndicator();

  friend void to_json(nlohmann::json &j, const ScscfRegistration &o);
  friend void from_json(const nlohmann::json &j, ScscfRegistration &o);

protected:
  std::string m_Impi;
  bool m_ImpiIsSet;
  ImsRegistrationType m_ImsRegistrationType;

  std::string m_CscfServerName;

  std::string m_ScscfInstanceId;
  bool m_ScscfInstanceIdIsSet;
  std::string m_DeregCallbackUri;
  bool m_DeregCallbackUriIsSet;
  std::vector<std::string> m_AssociatedImpis;
  bool m_AssociatedImpisIsSet;
  std::vector<std::string> m_AssociatedRegisteredImpis;
  bool m_AssociatedRegisteredImpisIsSet;
  std::vector<std::string> m_IrsImpus;
  bool m_IrsImpusIsSet;
  std::string m_WildcardedPui;
  bool m_WildcardedPuiIsSet;
  LooseRouteIndication m_LooseRouteIndicator;
  bool m_LooseRouteIndicatorIsSet;
  std::string m_WildcardedPsi;
  bool m_WildcardedPsiIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  bool m_MultipleRegistrationIndicator;
  bool m_MultipleRegistrationIndicatorIsSet;
  bool m_PcscfRestorationIndicator;
  bool m_PcscfRestorationIndicatorIsSet;
  bool m_ScscfReselectionIndicator;
  bool m_ScscfReselectionIndicatorIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ScscfRegistration_H_ */
