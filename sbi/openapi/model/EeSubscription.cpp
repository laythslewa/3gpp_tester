/**
 * Nhss_EE
 * HSS Event Exposure Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EeSubscription.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EeSubscription::EeSubscription() {
  m_CallbackReference = "";
  m_ScefId = "";
  m_ScefIdIsSet = false;
  m_ScefDiamRealm = "";
  m_ScefDiamRealmIsSet = false;
  m_MonitoringConfigurationsIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_ReportingOptionsIsSet = false;
  m_MtcProviderInformation = "";
  m_MtcProviderInformationIsSet = false;
  m_ExternalIdentifier = "";
  m_ExternalIdentifierIsSet = false;
}

EeSubscription::~EeSubscription() {}

void EeSubscription::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EeSubscription &o) {
  j = nlohmann::json();
  j["callbackReference"] = o.m_CallbackReference;
  if (o.scefIdIsSet())
    j["scefId"] = o.m_ScefId;
  if (o.scefDiamRealmIsSet())
    j["scefDiamRealm"] = o.m_ScefDiamRealm;
  if (o.monitoringConfigurationsIsSet() ||
      !o.m_MonitoringConfigurations.empty())
    j["monitoringConfigurations"] = o.m_MonitoringConfigurations;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.reportingOptionsIsSet())
    j["reportingOptions"] = o.m_ReportingOptions;
  if (o.mtcProviderInformationIsSet())
    j["mtcProviderInformation"] = o.m_MtcProviderInformation;
  if (o.externalIdentifierIsSet())
    j["externalIdentifier"] = o.m_ExternalIdentifier;
}

void from_json(const nlohmann::json &j, EeSubscription &o) {
  j.at("callbackReference").get_to(o.m_CallbackReference);
  if (j.find("scefId") != j.end()) {
    j.at("scefId").get_to(o.m_ScefId);
    o.m_ScefIdIsSet = true;
  }
  if (j.find("scefDiamRealm") != j.end()) {
    j.at("scefDiamRealm").get_to(o.m_ScefDiamRealm);
    o.m_ScefDiamRealmIsSet = true;
  }
  if (j.find("monitoringConfigurations") != j.end()) {
    j.at("monitoringConfigurations").get_to(o.m_MonitoringConfigurations);
    o.m_MonitoringConfigurationsIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("reportingOptions") != j.end()) {
    j.at("reportingOptions").get_to(o.m_ReportingOptions);
    o.m_ReportingOptionsIsSet = true;
  }
  if (j.find("mtcProviderInformation") != j.end()) {
    j.at("mtcProviderInformation").get_to(o.m_MtcProviderInformation);
    o.m_MtcProviderInformationIsSet = true;
  }
  if (j.find("externalIdentifier") != j.end()) {
    j.at("externalIdentifier").get_to(o.m_ExternalIdentifier);
    o.m_ExternalIdentifierIsSet = true;
  }
}

std::string EeSubscription::getCallbackReference() const {
  return m_CallbackReference;
}
void EeSubscription::setCallbackReference(std::string const &value) {
  m_CallbackReference = value;
}
std::string EeSubscription::getScefId() const { return m_ScefId; }
void EeSubscription::setScefId(std::string const &value) {
  m_ScefId = value;
  m_ScefIdIsSet = true;
}
bool EeSubscription::scefIdIsSet() const { return m_ScefIdIsSet; }
void EeSubscription::unsetScefId() { m_ScefIdIsSet = false; }
std::string EeSubscription::getScefDiamRealm() const { return m_ScefDiamRealm; }
void EeSubscription::setScefDiamRealm(std::string const &value) {
  m_ScefDiamRealm = value;
  m_ScefDiamRealmIsSet = true;
}
bool EeSubscription::scefDiamRealmIsSet() const { return m_ScefDiamRealmIsSet; }
void EeSubscription::unsetScefDiamRealm() { m_ScefDiamRealmIsSet = false; }
std::map<std::string, MonitoringConfiguration> &
EeSubscription::getMonitoringConfigurations() {
  return m_MonitoringConfigurations;
}
void EeSubscription::setMonitoringConfigurations(
    std::map<std::string, MonitoringConfiguration> const &value) {
  m_MonitoringConfigurations = value;
  m_MonitoringConfigurationsIsSet = true;
}
bool EeSubscription::monitoringConfigurationsIsSet() const {
  return m_MonitoringConfigurationsIsSet;
}
void EeSubscription::unsetMonitoringConfigurations() {
  m_MonitoringConfigurationsIsSet = false;
}
std::string EeSubscription::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void EeSubscription::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool EeSubscription::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void EeSubscription::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
ReportingOptions EeSubscription::getReportingOptions() const {
  return m_ReportingOptions;
}
void EeSubscription::setReportingOptions(ReportingOptions const &value) {
  m_ReportingOptions = value;
  m_ReportingOptionsIsSet = true;
}
bool EeSubscription::reportingOptionsIsSet() const {
  return m_ReportingOptionsIsSet;
}
void EeSubscription::unsetReportingOptions() {
  m_ReportingOptionsIsSet = false;
}
std::string EeSubscription::getMtcProviderInformation() const {
  return m_MtcProviderInformation;
}
void EeSubscription::setMtcProviderInformation(std::string const &value) {
  m_MtcProviderInformation = value;
  m_MtcProviderInformationIsSet = true;
}
bool EeSubscription::mtcProviderInformationIsSet() const {
  return m_MtcProviderInformationIsSet;
}
void EeSubscription::unsetMtcProviderInformation() {
  m_MtcProviderInformationIsSet = false;
}
std::string EeSubscription::getExternalIdentifier() const {
  return m_ExternalIdentifier;
}
void EeSubscription::setExternalIdentifier(std::string const &value) {
  m_ExternalIdentifier = value;
  m_ExternalIdentifierIsSet = true;
}
bool EeSubscription::externalIdentifierIsSet() const {
  return m_ExternalIdentifierIsSet;
}
void EeSubscription::unsetExternalIdentifier() {
  m_ExternalIdentifierIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
