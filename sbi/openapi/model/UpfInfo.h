/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UpfInfo.h
 *
 * Information of an UPF NF Instance
 */

#ifndef UpfInfo_H_
#define UpfInfo_H_

#include "AtsssCapability.h"
#include "InterfaceUpfInfoItem.h"
#include "PduSessionType.h"
#include "SnssaiUpfInfoItem.h"
#include "Tai.h"
#include "TaiRange.h"
#include "TngfInfo.h"
#include "TwifInfo.h"
#include "WAgfInfo.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Information of an UPF NF Instance
/// </summary>
class UpfInfo {
public:
  UpfInfo();
  virtual ~UpfInfo();

  void validate();

  /////////////////////////////////////////////
  /// UpfInfo members

  /// <summary>
  ///
  /// </summary>
  std::vector<SnssaiUpfInfoItem> &getSNssaiUpfInfoList();
  void setSNssaiUpfInfoList(std::vector<SnssaiUpfInfoItem> const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getSmfServingArea();
  void setSmfServingArea(std::vector<std::string> const &value);
  bool smfServingAreaIsSet() const;
  void unsetSmfServingArea();
  /// <summary>
  ///
  /// </summary>
  std::vector<InterfaceUpfInfoItem> &getInterfaceUpfInfoList();
  void setInterfaceUpfInfoList(std::vector<InterfaceUpfInfoItem> const &value);
  bool interfaceUpfInfoListIsSet() const;
  void unsetInterfaceUpfInfoList();
  /// <summary>
  ///
  /// </summary>
  bool isIwkEpsInd() const;
  void setIwkEpsInd(bool const value);
  bool iwkEpsIndIsSet() const;
  void unsetIwkEpsInd();
  /// <summary>
  ///
  /// </summary>
  std::vector<PduSessionType> &getPduSessionTypes();
  void setPduSessionTypes(std::vector<PduSessionType> const &value);
  bool pduSessionTypesIsSet() const;
  void unsetPduSessionTypes();
  /// <summary>
  ///
  /// </summary>
  AtsssCapability getAtsssCapability() const;
  void setAtsssCapability(AtsssCapability const &value);
  bool atsssCapabilityIsSet() const;
  void unsetAtsssCapability();
  /// <summary>
  ///
  /// </summary>
  bool isUeIpAddrInd() const;
  void setUeIpAddrInd(bool const value);
  bool ueIpAddrIndIsSet() const;
  void unsetUeIpAddrInd();
  /// <summary>
  ///
  /// </summary>
  std::vector<Tai> &getTaiList();
  void setTaiList(std::vector<Tai> const &value);
  bool taiListIsSet() const;
  void unsetTaiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<TaiRange> &getTaiRangeList();
  void setTaiRangeList(std::vector<TaiRange> const &value);
  bool taiRangeListIsSet() const;
  void unsetTaiRangeList();
  /// <summary>
  ///
  /// </summary>
  WAgfInfo getWAgfInfo() const;
  void setWAgfInfo(WAgfInfo const &value);
  bool wAgfInfoIsSet() const;
  void unsetWAgfInfo();
  /// <summary>
  ///
  /// </summary>
  TngfInfo getTngfInfo() const;
  void setTngfInfo(TngfInfo const &value);
  bool tngfInfoIsSet() const;
  void unsetTngfInfo();
  /// <summary>
  ///
  /// </summary>
  TwifInfo getTwifInfo() const;
  void setTwifInfo(TwifInfo const &value);
  bool twifInfoIsSet() const;
  void unsetTwifInfo();
  /// <summary>
  ///
  /// </summary>
  int32_t getPriority() const;
  void setPriority(int32_t const value);
  bool priorityIsSet() const;
  void unsetPriority();
  /// <summary>
  ///
  /// </summary>
  bool isRedundantGtpu() const;
  void setRedundantGtpu(bool const value);
  bool redundantGtpuIsSet() const;
  void unsetRedundantGtpu();
  /// <summary>
  ///
  /// </summary>
  bool isIpups() const;
  void setIpups(bool const value);
  bool ipupsIsSet() const;
  void unsetIpups();
  /// <summary>
  ///
  /// </summary>
  bool isDataForwarding() const;
  void setDataForwarding(bool const value);
  bool dataForwardingIsSet() const;
  void unsetDataForwarding();
  /// <summary>
  ///
  /// </summary>
  std::string getSupportedPfcpFeatures() const;
  void setSupportedPfcpFeatures(std::string const &value);
  bool supportedPfcpFeaturesIsSet() const;
  void unsetSupportedPfcpFeatures();

  friend void to_json(nlohmann::json &j, const UpfInfo &o);
  friend void from_json(const nlohmann::json &j, UpfInfo &o);

protected:
  std::vector<SnssaiUpfInfoItem> m_SNssaiUpfInfoList;

  std::vector<std::string> m_SmfServingArea;
  bool m_SmfServingAreaIsSet;
  std::vector<InterfaceUpfInfoItem> m_InterfaceUpfInfoList;
  bool m_InterfaceUpfInfoListIsSet;
  bool m_IwkEpsInd;
  bool m_IwkEpsIndIsSet;
  std::vector<PduSessionType> m_PduSessionTypes;
  bool m_PduSessionTypesIsSet;
  AtsssCapability m_AtsssCapability;
  bool m_AtsssCapabilityIsSet;
  bool m_UeIpAddrInd;
  bool m_UeIpAddrIndIsSet;
  std::vector<Tai> m_TaiList;
  bool m_TaiListIsSet;
  std::vector<TaiRange> m_TaiRangeList;
  bool m_TaiRangeListIsSet;
  WAgfInfo m_WAgfInfo;
  bool m_WAgfInfoIsSet;
  TngfInfo m_TngfInfo;
  bool m_TngfInfoIsSet;
  TwifInfo m_TwifInfo;
  bool m_TwifInfoIsSet;
  int32_t m_Priority;
  bool m_PriorityIsSet;
  bool m_RedundantGtpu;
  bool m_RedundantGtpuIsSet;
  bool m_Ipups;
  bool m_IpupsIsSet;
  bool m_DataForwarding;
  bool m_DataForwardingIsSet;
  std::string m_SupportedPfcpFeatures;
  bool m_SupportedPfcpFeaturesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UpfInfo_H_ */
