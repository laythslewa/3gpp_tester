/**
 * M1_ConsumptionReportingProvisioning
 * 5GMS AF M1 Consumption Reporting Provisioning API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ConsumptionReportingConfiguration.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ConsumptionReportingConfiguration::ConsumptionReportingConfiguration() {
  m_ReportingInterval = 0;
  m_ReportingIntervalIsSet = false;
  m_SamplePercentage = 0.0;
  m_SamplePercentageIsSet = false;
  m_LocationReporting = false;
  m_LocationReportingIsSet = false;
}

ConsumptionReportingConfiguration::~ConsumptionReportingConfiguration() {}

void ConsumptionReportingConfiguration::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ConsumptionReportingConfiguration &o) {
  j = nlohmann::json();
  if (o.reportingIntervalIsSet())
    j["reportingInterval"] = o.m_ReportingInterval;
  if (o.samplePercentageIsSet())
    j["samplePercentage"] = o.m_SamplePercentage;
  if (o.locationReportingIsSet())
    j["locationReporting"] = o.m_LocationReporting;
}

void from_json(const nlohmann::json &j, ConsumptionReportingConfiguration &o) {
  if (j.find("reportingInterval") != j.end()) {
    j.at("reportingInterval").get_to(o.m_ReportingInterval);
    o.m_ReportingIntervalIsSet = true;
  }
  if (j.find("samplePercentage") != j.end()) {
    j.at("samplePercentage").get_to(o.m_SamplePercentage);
    o.m_SamplePercentageIsSet = true;
  }
  if (j.find("locationReporting") != j.end()) {
    j.at("locationReporting").get_to(o.m_LocationReporting);
    o.m_LocationReportingIsSet = true;
  }
}

int32_t ConsumptionReportingConfiguration::getReportingInterval() const {
  return m_ReportingInterval;
}
void ConsumptionReportingConfiguration::setReportingInterval(
    int32_t const value) {
  m_ReportingInterval = value;
  m_ReportingIntervalIsSet = true;
}
bool ConsumptionReportingConfiguration::reportingIntervalIsSet() const {
  return m_ReportingIntervalIsSet;
}
void ConsumptionReportingConfiguration::unsetReportingInterval() {
  m_ReportingIntervalIsSet = false;
}
double ConsumptionReportingConfiguration::getSamplePercentage() const {
  return m_SamplePercentage;
}
void ConsumptionReportingConfiguration::setSamplePercentage(
    double const value) {
  m_SamplePercentage = value;
  m_SamplePercentageIsSet = true;
}
bool ConsumptionReportingConfiguration::samplePercentageIsSet() const {
  return m_SamplePercentageIsSet;
}
void ConsumptionReportingConfiguration::unsetSamplePercentage() {
  m_SamplePercentageIsSet = false;
}
bool ConsumptionReportingConfiguration::isLocationReporting() const {
  return m_LocationReporting;
}
void ConsumptionReportingConfiguration::setLocationReporting(bool const value) {
  m_LocationReporting = value;
  m_LocationReportingIsSet = true;
}
bool ConsumptionReportingConfiguration::locationReportingIsSet() const {
  return m_LocationReportingIsSet;
}
void ConsumptionReportingConfiguration::unsetLocationReporting() {
  m_LocationReportingIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
