/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SmContextUpdatedData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SmContextUpdatedData::SmContextUpdatedData() {
  m_UpCnxStateIsSet = false;
  m_HoStateIsSet = false;
  m_ReleaseEbiListIsSet = false;
  m_AllocatedEbiListIsSet = false;
  m_ModifiedEbiListIsSet = false;
  m_N1SmMsgIsSet = false;
  m_N2SmInfoIsSet = false;
  m_N2SmInfoTypeIsSet = false;
  m_EpsBearerSetupIsSet = false;
  m_DataForwarding = false;
  m_DataForwardingIsSet = false;
  m_N3DlForwardingTnlListIsSet = false;
  m_N3UlForwardingTnlListIsSet = false;
  m_CauseIsSet = false;
  m_MaAcceptedInd = false;
  m_MaAcceptedIndIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_ForwardingFTeidIsSet = false;
  m_ForwardingBearerContextsIsSet = false;
  m_SelectedSmfId = "";
  m_SelectedSmfIdIsSet = false;
  m_SelectedOldSmfId = "";
  m_SelectedOldSmfIdIsSet = false;
}

SmContextUpdatedData::~SmContextUpdatedData() {}

void SmContextUpdatedData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SmContextUpdatedData &o) {
  j = nlohmann::json();
  if (o.upCnxStateIsSet())
    j["upCnxState"] = o.m_UpCnxState;
  if (o.hoStateIsSet())
    j["hoState"] = o.m_HoState;
  if (o.releaseEbiListIsSet() || !o.m_ReleaseEbiList.empty())
    j["releaseEbiList"] = o.m_ReleaseEbiList;
  if (o.allocatedEbiListIsSet() || !o.m_AllocatedEbiList.empty())
    j["allocatedEbiList"] = o.m_AllocatedEbiList;
  if (o.modifiedEbiListIsSet() || !o.m_ModifiedEbiList.empty())
    j["modifiedEbiList"] = o.m_ModifiedEbiList;
  if (o.n1SmMsgIsSet())
    j["n1SmMsg"] = o.m_N1SmMsg;
  if (o.n2SmInfoIsSet())
    j["n2SmInfo"] = o.m_N2SmInfo;
  if (o.n2SmInfoTypeIsSet())
    j["n2SmInfoType"] = o.m_N2SmInfoType;
  if (o.epsBearerSetupIsSet() || !o.m_EpsBearerSetup.empty())
    j["epsBearerSetup"] = o.m_EpsBearerSetup;
  if (o.dataForwardingIsSet())
    j["dataForwarding"] = o.m_DataForwarding;
  if (o.n3DlForwardingTnlListIsSet() || !o.m_N3DlForwardingTnlList.empty())
    j["n3DlForwardingTnlList"] = o.m_N3DlForwardingTnlList;
  if (o.n3UlForwardingTnlListIsSet() || !o.m_N3UlForwardingTnlList.empty())
    j["n3UlForwardingTnlList"] = o.m_N3UlForwardingTnlList;
  if (o.causeIsSet())
    j["cause"] = o.m_Cause;
  if (o.maAcceptedIndIsSet())
    j["maAcceptedInd"] = o.m_MaAcceptedInd;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.forwardingFTeidIsSet())
    j["forwardingFTeid"] = o.m_ForwardingFTeid;
  if (o.forwardingBearerContextsIsSet() ||
      !o.m_ForwardingBearerContexts.empty())
    j["forwardingBearerContexts"] = o.m_ForwardingBearerContexts;
  if (o.selectedSmfIdIsSet())
    j["selectedSmfId"] = o.m_SelectedSmfId;
  if (o.selectedOldSmfIdIsSet())
    j["selectedOldSmfId"] = o.m_SelectedOldSmfId;
}

void from_json(const nlohmann::json &j, SmContextUpdatedData &o) {
  if (j.find("upCnxState") != j.end()) {
    j.at("upCnxState").get_to(o.m_UpCnxState);
    o.m_UpCnxStateIsSet = true;
  }
  if (j.find("hoState") != j.end()) {
    j.at("hoState").get_to(o.m_HoState);
    o.m_HoStateIsSet = true;
  }
  if (j.find("releaseEbiList") != j.end()) {
    j.at("releaseEbiList").get_to(o.m_ReleaseEbiList);
    o.m_ReleaseEbiListIsSet = true;
  }
  if (j.find("allocatedEbiList") != j.end()) {
    j.at("allocatedEbiList").get_to(o.m_AllocatedEbiList);
    o.m_AllocatedEbiListIsSet = true;
  }
  if (j.find("modifiedEbiList") != j.end()) {
    j.at("modifiedEbiList").get_to(o.m_ModifiedEbiList);
    o.m_ModifiedEbiListIsSet = true;
  }
  if (j.find("n1SmMsg") != j.end()) {
    j.at("n1SmMsg").get_to(o.m_N1SmMsg);
    o.m_N1SmMsgIsSet = true;
  }
  if (j.find("n2SmInfo") != j.end()) {
    j.at("n2SmInfo").get_to(o.m_N2SmInfo);
    o.m_N2SmInfoIsSet = true;
  }
  if (j.find("n2SmInfoType") != j.end()) {
    j.at("n2SmInfoType").get_to(o.m_N2SmInfoType);
    o.m_N2SmInfoTypeIsSet = true;
  }
  if (j.find("epsBearerSetup") != j.end()) {
    j.at("epsBearerSetup").get_to(o.m_EpsBearerSetup);
    o.m_EpsBearerSetupIsSet = true;
  }
  if (j.find("dataForwarding") != j.end()) {
    j.at("dataForwarding").get_to(o.m_DataForwarding);
    o.m_DataForwardingIsSet = true;
  }
  if (j.find("n3DlForwardingTnlList") != j.end()) {
    j.at("n3DlForwardingTnlList").get_to(o.m_N3DlForwardingTnlList);
    o.m_N3DlForwardingTnlListIsSet = true;
  }
  if (j.find("n3UlForwardingTnlList") != j.end()) {
    j.at("n3UlForwardingTnlList").get_to(o.m_N3UlForwardingTnlList);
    o.m_N3UlForwardingTnlListIsSet = true;
  }
  if (j.find("cause") != j.end()) {
    j.at("cause").get_to(o.m_Cause);
    o.m_CauseIsSet = true;
  }
  if (j.find("maAcceptedInd") != j.end()) {
    j.at("maAcceptedInd").get_to(o.m_MaAcceptedInd);
    o.m_MaAcceptedIndIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("forwardingFTeid") != j.end()) {
    j.at("forwardingFTeid").get_to(o.m_ForwardingFTeid);
    o.m_ForwardingFTeidIsSet = true;
  }
  if (j.find("forwardingBearerContexts") != j.end()) {
    j.at("forwardingBearerContexts").get_to(o.m_ForwardingBearerContexts);
    o.m_ForwardingBearerContextsIsSet = true;
  }
  if (j.find("selectedSmfId") != j.end()) {
    j.at("selectedSmfId").get_to(o.m_SelectedSmfId);
    o.m_SelectedSmfIdIsSet = true;
  }
  if (j.find("selectedOldSmfId") != j.end()) {
    j.at("selectedOldSmfId").get_to(o.m_SelectedOldSmfId);
    o.m_SelectedOldSmfIdIsSet = true;
  }
}

UpCnxState SmContextUpdatedData::getUpCnxState() const { return m_UpCnxState; }
void SmContextUpdatedData::setUpCnxState(UpCnxState const &value) {
  m_UpCnxState = value;
  m_UpCnxStateIsSet = true;
}
bool SmContextUpdatedData::upCnxStateIsSet() const { return m_UpCnxStateIsSet; }
void SmContextUpdatedData::unsetUpCnxState() { m_UpCnxStateIsSet = false; }
HoState SmContextUpdatedData::getHoState() const { return m_HoState; }
void SmContextUpdatedData::setHoState(HoState const &value) {
  m_HoState = value;
  m_HoStateIsSet = true;
}
bool SmContextUpdatedData::hoStateIsSet() const { return m_HoStateIsSet; }
void SmContextUpdatedData::unsetHoState() { m_HoStateIsSet = false; }
std::vector<int32_t> &SmContextUpdatedData::getReleaseEbiList() {
  return m_ReleaseEbiList;
}
void SmContextUpdatedData::setReleaseEbiList(std::vector<int32_t> const value) {
  m_ReleaseEbiList = value;
  m_ReleaseEbiListIsSet = true;
}
bool SmContextUpdatedData::releaseEbiListIsSet() const {
  return m_ReleaseEbiListIsSet;
}
void SmContextUpdatedData::unsetReleaseEbiList() {
  m_ReleaseEbiListIsSet = false;
}
std::vector<EbiArpMapping> &SmContextUpdatedData::getAllocatedEbiList() {
  return m_AllocatedEbiList;
}
void SmContextUpdatedData::setAllocatedEbiList(
    std::vector<EbiArpMapping> const &value) {
  m_AllocatedEbiList = value;
  m_AllocatedEbiListIsSet = true;
}
bool SmContextUpdatedData::allocatedEbiListIsSet() const {
  return m_AllocatedEbiListIsSet;
}
void SmContextUpdatedData::unsetAllocatedEbiList() {
  m_AllocatedEbiListIsSet = false;
}
std::vector<EbiArpMapping> &SmContextUpdatedData::getModifiedEbiList() {
  return m_ModifiedEbiList;
}
void SmContextUpdatedData::setModifiedEbiList(
    std::vector<EbiArpMapping> const &value) {
  m_ModifiedEbiList = value;
  m_ModifiedEbiListIsSet = true;
}
bool SmContextUpdatedData::modifiedEbiListIsSet() const {
  return m_ModifiedEbiListIsSet;
}
void SmContextUpdatedData::unsetModifiedEbiList() {
  m_ModifiedEbiListIsSet = false;
}
RefToBinaryData SmContextUpdatedData::getN1SmMsg() const { return m_N1SmMsg; }
void SmContextUpdatedData::setN1SmMsg(RefToBinaryData const &value) {
  m_N1SmMsg = value;
  m_N1SmMsgIsSet = true;
}
bool SmContextUpdatedData::n1SmMsgIsSet() const { return m_N1SmMsgIsSet; }
void SmContextUpdatedData::unsetN1SmMsg() { m_N1SmMsgIsSet = false; }
RefToBinaryData SmContextUpdatedData::getN2SmInfo() const { return m_N2SmInfo; }
void SmContextUpdatedData::setN2SmInfo(RefToBinaryData const &value) {
  m_N2SmInfo = value;
  m_N2SmInfoIsSet = true;
}
bool SmContextUpdatedData::n2SmInfoIsSet() const { return m_N2SmInfoIsSet; }
void SmContextUpdatedData::unsetN2SmInfo() { m_N2SmInfoIsSet = false; }
N2SmInfoType SmContextUpdatedData::getN2SmInfoType() const {
  return m_N2SmInfoType;
}
void SmContextUpdatedData::setN2SmInfoType(N2SmInfoType const &value) {
  m_N2SmInfoType = value;
  m_N2SmInfoTypeIsSet = true;
}
bool SmContextUpdatedData::n2SmInfoTypeIsSet() const {
  return m_N2SmInfoTypeIsSet;
}
void SmContextUpdatedData::unsetN2SmInfoType() { m_N2SmInfoTypeIsSet = false; }
std::vector<std::string> &SmContextUpdatedData::getEpsBearerSetup() {
  return m_EpsBearerSetup;
}
void SmContextUpdatedData::setEpsBearerSetup(
    std::vector<std::string> const &value) {
  m_EpsBearerSetup = value;
  m_EpsBearerSetupIsSet = true;
}
bool SmContextUpdatedData::epsBearerSetupIsSet() const {
  return m_EpsBearerSetupIsSet;
}
void SmContextUpdatedData::unsetEpsBearerSetup() {
  m_EpsBearerSetupIsSet = false;
}
bool SmContextUpdatedData::isDataForwarding() const { return m_DataForwarding; }
void SmContextUpdatedData::setDataForwarding(bool const value) {
  m_DataForwarding = value;
  m_DataForwardingIsSet = true;
}
bool SmContextUpdatedData::dataForwardingIsSet() const {
  return m_DataForwardingIsSet;
}
void SmContextUpdatedData::unsetDataForwarding() {
  m_DataForwardingIsSet = false;
}
std::vector<IndirectDataForwardingTunnelInfo> &
SmContextUpdatedData::getN3DlForwardingTnlList() {
  return m_N3DlForwardingTnlList;
}
void SmContextUpdatedData::setN3DlForwardingTnlList(
    std::vector<IndirectDataForwardingTunnelInfo> const &value) {
  m_N3DlForwardingTnlList = value;
  m_N3DlForwardingTnlListIsSet = true;
}
bool SmContextUpdatedData::n3DlForwardingTnlListIsSet() const {
  return m_N3DlForwardingTnlListIsSet;
}
void SmContextUpdatedData::unsetN3DlForwardingTnlList() {
  m_N3DlForwardingTnlListIsSet = false;
}
std::vector<IndirectDataForwardingTunnelInfo> &
SmContextUpdatedData::getN3UlForwardingTnlList() {
  return m_N3UlForwardingTnlList;
}
void SmContextUpdatedData::setN3UlForwardingTnlList(
    std::vector<IndirectDataForwardingTunnelInfo> const &value) {
  m_N3UlForwardingTnlList = value;
  m_N3UlForwardingTnlListIsSet = true;
}
bool SmContextUpdatedData::n3UlForwardingTnlListIsSet() const {
  return m_N3UlForwardingTnlListIsSet;
}
void SmContextUpdatedData::unsetN3UlForwardingTnlList() {
  m_N3UlForwardingTnlListIsSet = false;
}
Cause SmContextUpdatedData::getCause() const { return m_Cause; }
void SmContextUpdatedData::setCause(Cause const &value) {
  m_Cause = value;
  m_CauseIsSet = true;
}
bool SmContextUpdatedData::causeIsSet() const { return m_CauseIsSet; }
void SmContextUpdatedData::unsetCause() { m_CauseIsSet = false; }
bool SmContextUpdatedData::isMaAcceptedInd() const { return m_MaAcceptedInd; }
void SmContextUpdatedData::setMaAcceptedInd(bool const value) {
  m_MaAcceptedInd = value;
  m_MaAcceptedIndIsSet = true;
}
bool SmContextUpdatedData::maAcceptedIndIsSet() const {
  return m_MaAcceptedIndIsSet;
}
void SmContextUpdatedData::unsetMaAcceptedInd() {
  m_MaAcceptedIndIsSet = false;
}
std::string SmContextUpdatedData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void SmContextUpdatedData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool SmContextUpdatedData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void SmContextUpdatedData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::string SmContextUpdatedData::getForwardingFTeid() const {
  return m_ForwardingFTeid;
}
void SmContextUpdatedData::setForwardingFTeid(std::string const &value) {
  m_ForwardingFTeid = value;
  m_ForwardingFTeidIsSet = true;
}
bool SmContextUpdatedData::forwardingFTeidIsSet() const {
  return m_ForwardingFTeidIsSet;
}
void SmContextUpdatedData::unsetForwardingFTeid() {
  m_ForwardingFTeidIsSet = false;
}
std::vector<std::string> &SmContextUpdatedData::getForwardingBearerContexts() {
  return m_ForwardingBearerContexts;
}
void SmContextUpdatedData::setForwardingBearerContexts(
    std::vector<std::string> const &value) {
  m_ForwardingBearerContexts = value;
  m_ForwardingBearerContextsIsSet = true;
}
bool SmContextUpdatedData::forwardingBearerContextsIsSet() const {
  return m_ForwardingBearerContextsIsSet;
}
void SmContextUpdatedData::unsetForwardingBearerContexts() {
  m_ForwardingBearerContextsIsSet = false;
}
std::string SmContextUpdatedData::getSelectedSmfId() const {
  return m_SelectedSmfId;
}
void SmContextUpdatedData::setSelectedSmfId(std::string const &value) {
  m_SelectedSmfId = value;
  m_SelectedSmfIdIsSet = true;
}
bool SmContextUpdatedData::selectedSmfIdIsSet() const {
  return m_SelectedSmfIdIsSet;
}
void SmContextUpdatedData::unsetSelectedSmfId() {
  m_SelectedSmfIdIsSet = false;
}
std::string SmContextUpdatedData::getSelectedOldSmfId() const {
  return m_SelectedOldSmfId;
}
void SmContextUpdatedData::setSelectedOldSmfId(std::string const &value) {
  m_SelectedOldSmfId = value;
  m_SelectedOldSmfIdIsSet = true;
}
bool SmContextUpdatedData::selectedOldSmfIdIsSet() const {
  return m_SelectedOldSmfIdIsSet;
}
void SmContextUpdatedData::unsetSelectedOldSmfId() {
  m_SelectedOldSmfIdIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
