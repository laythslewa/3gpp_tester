/**
 * LMF Location
 * LMF Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EventNotifyData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EventNotifyData::EventNotifyData() {
  m_Supi = "";
  m_SupiIsSet = false;
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_HgmlcCallBackURI = "";
  m_HgmlcCallBackURIIsSet = false;
  m_LdrReference = "";
  m_LocationEstimateIsSet = false;
  m_AgeOfLocationEstimate = 0;
  m_AgeOfLocationEstimateIsSet = false;
  m_CivicAddressIsSet = false;
  m_LocalLocationEstimateIsSet = false;
  m_PositioningDataListIsSet = false;
  m_GnssPositioningDataListIsSet = false;
  m_ServingLMFidentification = "";
  m_ServingLMFidentificationIsSet = false;
  m_TerminationCauseIsSet = false;
  m_VelocityEstimateIsSet = false;
  m_Altitude = 0.0;
  m_AltitudeIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

EventNotifyData::~EventNotifyData() {}

void EventNotifyData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EventNotifyData &o) {
  j = nlohmann::json();
  j["reportedEventType"] = o.m_ReportedEventType;
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  if (o.hgmlcCallBackURIIsSet())
    j["hgmlcCallBackURI"] = o.m_HgmlcCallBackURI;
  j["ldrReference"] = o.m_LdrReference;
  if (o.locationEstimateIsSet())
    j["locationEstimate"] = o.m_LocationEstimate;
  if (o.ageOfLocationEstimateIsSet())
    j["ageOfLocationEstimate"] = o.m_AgeOfLocationEstimate;
  if (o.civicAddressIsSet())
    j["civicAddress"] = o.m_CivicAddress;
  if (o.localLocationEstimateIsSet())
    j["localLocationEstimate"] = o.m_LocalLocationEstimate;
  if (o.positioningDataListIsSet() || !o.m_PositioningDataList.empty())
    j["positioningDataList"] = o.m_PositioningDataList;
  if (o.gnssPositioningDataListIsSet() || !o.m_GnssPositioningDataList.empty())
    j["gnssPositioningDataList"] = o.m_GnssPositioningDataList;
  if (o.servingLMFidentificationIsSet())
    j["servingLMFidentification"] = o.m_ServingLMFidentification;
  if (o.terminationCauseIsSet())
    j["terminationCause"] = o.m_TerminationCause;
  if (o.velocityEstimateIsSet())
    j["velocityEstimate"] = o.m_VelocityEstimate;
  if (o.altitudeIsSet())
    j["altitude"] = o.m_Altitude;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, EventNotifyData &o) {
  j.at("reportedEventType").get_to(o.m_ReportedEventType);
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("hgmlcCallBackURI") != j.end()) {
    j.at("hgmlcCallBackURI").get_to(o.m_HgmlcCallBackURI);
    o.m_HgmlcCallBackURIIsSet = true;
  }
  j.at("ldrReference").get_to(o.m_LdrReference);
  if (j.find("locationEstimate") != j.end()) {
    j.at("locationEstimate").get_to(o.m_LocationEstimate);
    o.m_LocationEstimateIsSet = true;
  }
  if (j.find("ageOfLocationEstimate") != j.end()) {
    j.at("ageOfLocationEstimate").get_to(o.m_AgeOfLocationEstimate);
    o.m_AgeOfLocationEstimateIsSet = true;
  }
  if (j.find("civicAddress") != j.end()) {
    j.at("civicAddress").get_to(o.m_CivicAddress);
    o.m_CivicAddressIsSet = true;
  }
  if (j.find("localLocationEstimate") != j.end()) {
    j.at("localLocationEstimate").get_to(o.m_LocalLocationEstimate);
    o.m_LocalLocationEstimateIsSet = true;
  }
  if (j.find("positioningDataList") != j.end()) {
    j.at("positioningDataList").get_to(o.m_PositioningDataList);
    o.m_PositioningDataListIsSet = true;
  }
  if (j.find("gnssPositioningDataList") != j.end()) {
    j.at("gnssPositioningDataList").get_to(o.m_GnssPositioningDataList);
    o.m_GnssPositioningDataListIsSet = true;
  }
  if (j.find("servingLMFidentification") != j.end()) {
    j.at("servingLMFidentification").get_to(o.m_ServingLMFidentification);
    o.m_ServingLMFidentificationIsSet = true;
  }
  if (j.find("terminationCause") != j.end()) {
    j.at("terminationCause").get_to(o.m_TerminationCause);
    o.m_TerminationCauseIsSet = true;
  }
  if (j.find("velocityEstimate") != j.end()) {
    j.at("velocityEstimate").get_to(o.m_VelocityEstimate);
    o.m_VelocityEstimateIsSet = true;
  }
  if (j.find("altitude") != j.end()) {
    j.at("altitude").get_to(o.m_Altitude);
    o.m_AltitudeIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

ReportedEventType EventNotifyData::getReportedEventType() const {
  return m_ReportedEventType;
}
void EventNotifyData::setReportedEventType(ReportedEventType const &value) {
  m_ReportedEventType = value;
}
std::string EventNotifyData::getSupi() const { return m_Supi; }
void EventNotifyData::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool EventNotifyData::supiIsSet() const { return m_SupiIsSet; }
void EventNotifyData::unsetSupi() { m_SupiIsSet = false; }
std::string EventNotifyData::getGpsi() const { return m_Gpsi; }
void EventNotifyData::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool EventNotifyData::gpsiIsSet() const { return m_GpsiIsSet; }
void EventNotifyData::unsetGpsi() { m_GpsiIsSet = false; }
std::string EventNotifyData::getHgmlcCallBackURI() const {
  return m_HgmlcCallBackURI;
}
void EventNotifyData::setHgmlcCallBackURI(std::string const &value) {
  m_HgmlcCallBackURI = value;
  m_HgmlcCallBackURIIsSet = true;
}
bool EventNotifyData::hgmlcCallBackURIIsSet() const {
  return m_HgmlcCallBackURIIsSet;
}
void EventNotifyData::unsetHgmlcCallBackURI() {
  m_HgmlcCallBackURIIsSet = false;
}
std::string EventNotifyData::getLdrReference() const { return m_LdrReference; }
void EventNotifyData::setLdrReference(std::string const &value) {
  m_LdrReference = value;
}
GeographicArea EventNotifyData::getLocationEstimate() const {
  return m_LocationEstimate;
}
void EventNotifyData::setLocationEstimate(GeographicArea const &value) {
  m_LocationEstimate = value;
  m_LocationEstimateIsSet = true;
}
bool EventNotifyData::locationEstimateIsSet() const {
  return m_LocationEstimateIsSet;
}
void EventNotifyData::unsetLocationEstimate() {
  m_LocationEstimateIsSet = false;
}
int32_t EventNotifyData::getAgeOfLocationEstimate() const {
  return m_AgeOfLocationEstimate;
}
void EventNotifyData::setAgeOfLocationEstimate(int32_t const value) {
  m_AgeOfLocationEstimate = value;
  m_AgeOfLocationEstimateIsSet = true;
}
bool EventNotifyData::ageOfLocationEstimateIsSet() const {
  return m_AgeOfLocationEstimateIsSet;
}
void EventNotifyData::unsetAgeOfLocationEstimate() {
  m_AgeOfLocationEstimateIsSet = false;
}
CivicAddress EventNotifyData::getCivicAddress() const { return m_CivicAddress; }
void EventNotifyData::setCivicAddress(CivicAddress const &value) {
  m_CivicAddress = value;
  m_CivicAddressIsSet = true;
}
bool EventNotifyData::civicAddressIsSet() const { return m_CivicAddressIsSet; }
void EventNotifyData::unsetCivicAddress() { m_CivicAddressIsSet = false; }
LocalArea EventNotifyData::getLocalLocationEstimate() const {
  return m_LocalLocationEstimate;
}
void EventNotifyData::setLocalLocationEstimate(LocalArea const &value) {
  m_LocalLocationEstimate = value;
  m_LocalLocationEstimateIsSet = true;
}
bool EventNotifyData::localLocationEstimateIsSet() const {
  return m_LocalLocationEstimateIsSet;
}
void EventNotifyData::unsetLocalLocationEstimate() {
  m_LocalLocationEstimateIsSet = false;
}
std::vector<PositioningMethodAndUsage> &
EventNotifyData::getPositioningDataList() {
  return m_PositioningDataList;
}
void EventNotifyData::setPositioningDataList(
    std::vector<PositioningMethodAndUsage> const &value) {
  m_PositioningDataList = value;
  m_PositioningDataListIsSet = true;
}
bool EventNotifyData::positioningDataListIsSet() const {
  return m_PositioningDataListIsSet;
}
void EventNotifyData::unsetPositioningDataList() {
  m_PositioningDataListIsSet = false;
}
std::vector<GnssPositioningMethodAndUsage> &
EventNotifyData::getGnssPositioningDataList() {
  return m_GnssPositioningDataList;
}
void EventNotifyData::setGnssPositioningDataList(
    std::vector<GnssPositioningMethodAndUsage> const &value) {
  m_GnssPositioningDataList = value;
  m_GnssPositioningDataListIsSet = true;
}
bool EventNotifyData::gnssPositioningDataListIsSet() const {
  return m_GnssPositioningDataListIsSet;
}
void EventNotifyData::unsetGnssPositioningDataList() {
  m_GnssPositioningDataListIsSet = false;
}
std::string EventNotifyData::getServingLMFidentification() const {
  return m_ServingLMFidentification;
}
void EventNotifyData::setServingLMFidentification(std::string const &value) {
  m_ServingLMFidentification = value;
  m_ServingLMFidentificationIsSet = true;
}
bool EventNotifyData::servingLMFidentificationIsSet() const {
  return m_ServingLMFidentificationIsSet;
}
void EventNotifyData::unsetServingLMFidentification() {
  m_ServingLMFidentificationIsSet = false;
}
TerminationCause EventNotifyData::getTerminationCause() const {
  return m_TerminationCause;
}
void EventNotifyData::setTerminationCause(TerminationCause const &value) {
  m_TerminationCause = value;
  m_TerminationCauseIsSet = true;
}
bool EventNotifyData::terminationCauseIsSet() const {
  return m_TerminationCauseIsSet;
}
void EventNotifyData::unsetTerminationCause() {
  m_TerminationCauseIsSet = false;
}
VelocityEstimate EventNotifyData::getVelocityEstimate() const {
  return m_VelocityEstimate;
}
void EventNotifyData::setVelocityEstimate(VelocityEstimate const &value) {
  m_VelocityEstimate = value;
  m_VelocityEstimateIsSet = true;
}
bool EventNotifyData::velocityEstimateIsSet() const {
  return m_VelocityEstimateIsSet;
}
void EventNotifyData::unsetVelocityEstimate() {
  m_VelocityEstimateIsSet = false;
}
double EventNotifyData::getAltitude() const { return m_Altitude; }
void EventNotifyData::setAltitude(double const value) {
  m_Altitude = value;
  m_AltitudeIsSet = true;
}
bool EventNotifyData::altitudeIsSet() const { return m_AltitudeIsSet; }
void EventNotifyData::unsetAltitude() { m_AltitudeIsSet = false; }
std::string EventNotifyData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void EventNotifyData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool EventNotifyData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void EventNotifyData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
