/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NssaiAvailabilityInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NssaiAvailabilityInfo::NssaiAvailabilityInfo() {
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_AmfSetId = "";
  m_AmfSetIdIsSet = false;
}

NssaiAvailabilityInfo::~NssaiAvailabilityInfo() {}

void NssaiAvailabilityInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NssaiAvailabilityInfo &o) {
  j = nlohmann::json();
  j["supportedNssaiAvailabilityData"] = o.m_SupportedNssaiAvailabilityData;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.amfSetIdIsSet())
    j["amfSetId"] = o.m_AmfSetId;
}

void from_json(const nlohmann::json &j, NssaiAvailabilityInfo &o) {
  j.at("supportedNssaiAvailabilityData")
      .get_to(o.m_SupportedNssaiAvailabilityData);
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("amfSetId") != j.end()) {
    j.at("amfSetId").get_to(o.m_AmfSetId);
    o.m_AmfSetIdIsSet = true;
  }
}

std::vector<SupportedNssaiAvailabilityData> &
NssaiAvailabilityInfo::getSupportedNssaiAvailabilityData() {
  return m_SupportedNssaiAvailabilityData;
}
void NssaiAvailabilityInfo::setSupportedNssaiAvailabilityData(
    std::vector<SupportedNssaiAvailabilityData> const &value) {
  m_SupportedNssaiAvailabilityData = value;
}
std::string NssaiAvailabilityInfo::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void NssaiAvailabilityInfo::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool NssaiAvailabilityInfo::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void NssaiAvailabilityInfo::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::string NssaiAvailabilityInfo::getAmfSetId() const { return m_AmfSetId; }
void NssaiAvailabilityInfo::setAmfSetId(std::string const &value) {
  m_AmfSetId = value;
  m_AmfSetIdIsSet = true;
}
bool NssaiAvailabilityInfo::amfSetIdIsSet() const { return m_AmfSetIdIsSet; }
void NssaiAvailabilityInfo::unsetAmfSetId() { m_AmfSetIdIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
