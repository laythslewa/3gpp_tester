/**
 * 5G-EIR Equipment Identity Check
 * 5G-EIR Equipment Identity Check Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EquipmentStatusDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

EquipmentStatusDocumentApi::EquipmentStatusDocumentApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void EquipmentStatusDocumentApi::init() { setupRoutes(); }

void EquipmentStatusDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Get(
      *router, base + "/equipment-status",
      Routes::bind(&EquipmentStatusDocumentApi::get_equipment_status_handler,
                   this));

  // Default handler, called when a route is not found
  router->addCustomHandler(
      Routes::bind(&EquipmentStatusDocumentApi::
                       equipment_status_document_api_default_handler,
                   this));
}

void EquipmentStatusDocumentApi::get_equipment_status_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {

  // Getting the query params
  auto peiQuery = request.query().get("pei");
  Pistache::Optional<std::string> pei;
  if (!peiQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(peiQuery.get(), valueQuery_instance)) {
      pei = Pistache::Some(valueQuery_instance);
    }
  }
  auto supiQuery = request.query().get("supi");
  Pistache::Optional<std::string> supi;
  if (!supiQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(supiQuery.get(), valueQuery_instance)) {
      supi = Pistache::Some(valueQuery_instance);
    }
  }
  auto gpsiQuery = request.query().get("gpsi");
  Pistache::Optional<std::string> gpsi;
  if (!gpsiQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(gpsiQuery.get(), valueQuery_instance)) {
      gpsi = Pistache::Some(valueQuery_instance);
    }
  }
  auto supportedFeaturesQuery = request.query().get("supported-features");
  Pistache::Optional<std::string> supportedFeatures;
  if (!supportedFeaturesQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(supportedFeaturesQuery.get(), valueQuery_instance)) {
      supportedFeatures = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->get_equipment_status(pei, supi, gpsi, supportedFeatures, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void EquipmentStatusDocumentApi::equipment_status_document_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
