/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AuthorizedNssaiAvailabilityData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AuthorizedNssaiAvailabilityData::AuthorizedNssaiAvailabilityData() {
  m_RestrictedSnssaiListIsSet = false;
  m_TaiListIsSet = false;
  m_TaiRangeListIsSet = false;
}

AuthorizedNssaiAvailabilityData::~AuthorizedNssaiAvailabilityData() {}

void AuthorizedNssaiAvailabilityData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AuthorizedNssaiAvailabilityData &o) {
  j = nlohmann::json();
  j["tai"] = o.m_Tai;
  j["supportedSnssaiList"] = o.m_SupportedSnssaiList;
  if (o.restrictedSnssaiListIsSet() || !o.m_RestrictedSnssaiList.empty())
    j["restrictedSnssaiList"] = o.m_RestrictedSnssaiList;
  if (o.taiListIsSet() || !o.m_TaiList.empty())
    j["taiList"] = o.m_TaiList;
  if (o.taiRangeListIsSet() || !o.m_TaiRangeList.empty())
    j["taiRangeList"] = o.m_TaiRangeList;
}

void from_json(const nlohmann::json &j, AuthorizedNssaiAvailabilityData &o) {
  j.at("tai").get_to(o.m_Tai);
  j.at("supportedSnssaiList").get_to(o.m_SupportedSnssaiList);
  if (j.find("restrictedSnssaiList") != j.end()) {
    j.at("restrictedSnssaiList").get_to(o.m_RestrictedSnssaiList);
    o.m_RestrictedSnssaiListIsSet = true;
  }
  if (j.find("taiList") != j.end()) {
    j.at("taiList").get_to(o.m_TaiList);
    o.m_TaiListIsSet = true;
  }
  if (j.find("taiRangeList") != j.end()) {
    j.at("taiRangeList").get_to(o.m_TaiRangeList);
    o.m_TaiRangeListIsSet = true;
  }
}

Tai AuthorizedNssaiAvailabilityData::getTai() const { return m_Tai; }
void AuthorizedNssaiAvailabilityData::setTai(Tai const &value) {
  m_Tai = value;
}
std::vector<ExtSnssai> &
AuthorizedNssaiAvailabilityData::getSupportedSnssaiList() {
  return m_SupportedSnssaiList;
}
void AuthorizedNssaiAvailabilityData::setSupportedSnssaiList(
    std::vector<ExtSnssai> const &value) {
  m_SupportedSnssaiList = value;
}
std::vector<RestrictedSnssai> &
AuthorizedNssaiAvailabilityData::getRestrictedSnssaiList() {
  return m_RestrictedSnssaiList;
}
void AuthorizedNssaiAvailabilityData::setRestrictedSnssaiList(
    std::vector<RestrictedSnssai> const &value) {
  m_RestrictedSnssaiList = value;
  m_RestrictedSnssaiListIsSet = true;
}
bool AuthorizedNssaiAvailabilityData::restrictedSnssaiListIsSet() const {
  return m_RestrictedSnssaiListIsSet;
}
void AuthorizedNssaiAvailabilityData::unsetRestrictedSnssaiList() {
  m_RestrictedSnssaiListIsSet = false;
}
std::vector<Tai> &AuthorizedNssaiAvailabilityData::getTaiList() {
  return m_TaiList;
}
void AuthorizedNssaiAvailabilityData::setTaiList(
    std::vector<Tai> const &value) {
  m_TaiList = value;
  m_TaiListIsSet = true;
}
bool AuthorizedNssaiAvailabilityData::taiListIsSet() const {
  return m_TaiListIsSet;
}
void AuthorizedNssaiAvailabilityData::unsetTaiList() { m_TaiListIsSet = false; }
std::vector<TaiRange> &AuthorizedNssaiAvailabilityData::getTaiRangeList() {
  return m_TaiRangeList;
}
void AuthorizedNssaiAvailabilityData::setTaiRangeList(
    std::vector<TaiRange> const &value) {
  m_TaiRangeList = value;
  m_TaiRangeListIsSet = true;
}
bool AuthorizedNssaiAvailabilityData::taiRangeListIsSet() const {
  return m_TaiRangeListIsSet;
}
void AuthorizedNssaiAvailabilityData::unsetTaiRangeList() {
  m_TaiRangeListIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
