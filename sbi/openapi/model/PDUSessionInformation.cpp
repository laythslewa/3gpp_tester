/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PDUSessionInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PDUSessionInformation::PDUSessionInformation() {
  m_NetworkSlicingInfoIsSet = false;
  m_PduSessionID = 0;
  m_PduTypeIsSet = false;
  m_SscModeIsSet = false;
  m_HPlmnIdIsSet = false;
  m_ServingNetworkFunctionIDIsSet = false;
  m_RatTypeIsSet = false;
  m_MAPDUNon3GPPRATTypeIsSet = false;
  m_DnnId = "";
  m_ChargingCharacteristics = "";
  m_ChargingCharacteristicsIsSet = false;
  m_ChargingCharacteristicsSelectionModeIsSet = false;
  m_StartTime = "";
  m_StartTimeIsSet = false;
  m_StopTime = "";
  m_StopTimeIsSet = false;
  m_r_3gppPSDataOffStatusIsSet = false;
  m_SessionStopIndicator = false;
  m_SessionStopIndicatorIsSet = false;
  m_PduAddressIsSet = false;
  m_Diagnostics = 0;
  m_DiagnosticsIsSet = false;
  m_AuthorizedQoSInformationIsSet = false;
  m_SubscribedQoSInformationIsSet = false;
  m_AuthorizedSessionAMBRIsSet = false;
  m_SubscribedSessionAMBRIsSet = false;
  m_ServingCNPlmnIdIsSet = false;
  m_MAPDUSessionInformationIsSet = false;
  m_EnhancedDiagnosticsIsSet = false;
}

PDUSessionInformation::~PDUSessionInformation() {}

void PDUSessionInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PDUSessionInformation &o) {
  j = nlohmann::json();
  if (o.networkSlicingInfoIsSet())
    j["networkSlicingInfo"] = o.m_NetworkSlicingInfo;
  j["pduSessionID"] = o.m_PduSessionID;
  if (o.pduTypeIsSet())
    j["pduType"] = o.m_PduType;
  if (o.sscModeIsSet())
    j["sscMode"] = o.m_SscMode;
  if (o.hPlmnIdIsSet())
    j["hPlmnId"] = o.m_HPlmnId;
  if (o.servingNetworkFunctionIDIsSet())
    j["servingNetworkFunctionID"] = o.m_ServingNetworkFunctionID;
  if (o.ratTypeIsSet())
    j["ratType"] = o.m_RatType;
  if (o.mAPDUNon3GPPRATTypeIsSet())
    j["mAPDUNon3GPPRATType"] = o.m_MAPDUNon3GPPRATType;
  j["dnnId"] = o.m_DnnId;
  if (o.chargingCharacteristicsIsSet())
    j["chargingCharacteristics"] = o.m_ChargingCharacteristics;
  if (o.chargingCharacteristicsSelectionModeIsSet())
    j["chargingCharacteristicsSelectionMode"] =
        o.m_ChargingCharacteristicsSelectionMode;
  if (o.startTimeIsSet())
    j["startTime"] = o.m_StartTime;
  if (o.stopTimeIsSet())
    j["stopTime"] = o.m_StopTime;
  if (o.r3gppPSDataOffStatusIsSet())
    j["3gppPSDataOffStatus"] = o.m_r_3gppPSDataOffStatus;
  if (o.sessionStopIndicatorIsSet())
    j["sessionStopIndicator"] = o.m_SessionStopIndicator;
  if (o.pduAddressIsSet())
    j["pduAddress"] = o.m_PduAddress;
  if (o.diagnosticsIsSet())
    j["diagnostics"] = o.m_Diagnostics;
  if (o.authorizedQoSInformationIsSet())
    j["authorizedQoSInformation"] = o.m_AuthorizedQoSInformation;
  if (o.subscribedQoSInformationIsSet())
    j["subscribedQoSInformation"] = o.m_SubscribedQoSInformation;
  if (o.authorizedSessionAMBRIsSet())
    j["authorizedSessionAMBR"] = o.m_AuthorizedSessionAMBR;
  if (o.subscribedSessionAMBRIsSet())
    j["subscribedSessionAMBR"] = o.m_SubscribedSessionAMBR;
  if (o.servingCNPlmnIdIsSet())
    j["servingCNPlmnId"] = o.m_ServingCNPlmnId;
  if (o.mAPDUSessionInformationIsSet())
    j["mAPDUSessionInformation"] = o.m_MAPDUSessionInformation;
  if (o.enhancedDiagnosticsIsSet() || !o.m_EnhancedDiagnostics.empty())
    j["enhancedDiagnostics"] = o.m_EnhancedDiagnostics;
}

void from_json(const nlohmann::json &j, PDUSessionInformation &o) {
  if (j.find("networkSlicingInfo") != j.end()) {
    j.at("networkSlicingInfo").get_to(o.m_NetworkSlicingInfo);
    o.m_NetworkSlicingInfoIsSet = true;
  }
  j.at("pduSessionID").get_to(o.m_PduSessionID);
  if (j.find("pduType") != j.end()) {
    j.at("pduType").get_to(o.m_PduType);
    o.m_PduTypeIsSet = true;
  }
  if (j.find("sscMode") != j.end()) {
    j.at("sscMode").get_to(o.m_SscMode);
    o.m_SscModeIsSet = true;
  }
  if (j.find("hPlmnId") != j.end()) {
    j.at("hPlmnId").get_to(o.m_HPlmnId);
    o.m_HPlmnIdIsSet = true;
  }
  if (j.find("servingNetworkFunctionID") != j.end()) {
    j.at("servingNetworkFunctionID").get_to(o.m_ServingNetworkFunctionID);
    o.m_ServingNetworkFunctionIDIsSet = true;
  }
  if (j.find("ratType") != j.end()) {
    j.at("ratType").get_to(o.m_RatType);
    o.m_RatTypeIsSet = true;
  }
  if (j.find("mAPDUNon3GPPRATType") != j.end()) {
    j.at("mAPDUNon3GPPRATType").get_to(o.m_MAPDUNon3GPPRATType);
    o.m_MAPDUNon3GPPRATTypeIsSet = true;
  }
  j.at("dnnId").get_to(o.m_DnnId);
  if (j.find("chargingCharacteristics") != j.end()) {
    j.at("chargingCharacteristics").get_to(o.m_ChargingCharacteristics);
    o.m_ChargingCharacteristicsIsSet = true;
  }
  if (j.find("chargingCharacteristicsSelectionMode") != j.end()) {
    j.at("chargingCharacteristicsSelectionMode")
        .get_to(o.m_ChargingCharacteristicsSelectionMode);
    o.m_ChargingCharacteristicsSelectionModeIsSet = true;
  }
  if (j.find("startTime") != j.end()) {
    j.at("startTime").get_to(o.m_StartTime);
    o.m_StartTimeIsSet = true;
  }
  if (j.find("stopTime") != j.end()) {
    j.at("stopTime").get_to(o.m_StopTime);
    o.m_StopTimeIsSet = true;
  }
  if (j.find("3gppPSDataOffStatus") != j.end()) {
    j.at("3gppPSDataOffStatus").get_to(o.m_r_3gppPSDataOffStatus);
    o.m_r_3gppPSDataOffStatusIsSet = true;
  }
  if (j.find("sessionStopIndicator") != j.end()) {
    j.at("sessionStopIndicator").get_to(o.m_SessionStopIndicator);
    o.m_SessionStopIndicatorIsSet = true;
  }
  if (j.find("pduAddress") != j.end()) {
    j.at("pduAddress").get_to(o.m_PduAddress);
    o.m_PduAddressIsSet = true;
  }
  if (j.find("diagnostics") != j.end()) {
    j.at("diagnostics").get_to(o.m_Diagnostics);
    o.m_DiagnosticsIsSet = true;
  }
  if (j.find("authorizedQoSInformation") != j.end()) {
    j.at("authorizedQoSInformation").get_to(o.m_AuthorizedQoSInformation);
    o.m_AuthorizedQoSInformationIsSet = true;
  }
  if (j.find("subscribedQoSInformation") != j.end()) {
    j.at("subscribedQoSInformation").get_to(o.m_SubscribedQoSInformation);
    o.m_SubscribedQoSInformationIsSet = true;
  }
  if (j.find("authorizedSessionAMBR") != j.end()) {
    j.at("authorizedSessionAMBR").get_to(o.m_AuthorizedSessionAMBR);
    o.m_AuthorizedSessionAMBRIsSet = true;
  }
  if (j.find("subscribedSessionAMBR") != j.end()) {
    j.at("subscribedSessionAMBR").get_to(o.m_SubscribedSessionAMBR);
    o.m_SubscribedSessionAMBRIsSet = true;
  }
  if (j.find("servingCNPlmnId") != j.end()) {
    j.at("servingCNPlmnId").get_to(o.m_ServingCNPlmnId);
    o.m_ServingCNPlmnIdIsSet = true;
  }
  if (j.find("mAPDUSessionInformation") != j.end()) {
    j.at("mAPDUSessionInformation").get_to(o.m_MAPDUSessionInformation);
    o.m_MAPDUSessionInformationIsSet = true;
  }
  if (j.find("enhancedDiagnostics") != j.end()) {
    j.at("enhancedDiagnostics").get_to(o.m_EnhancedDiagnostics);
    o.m_EnhancedDiagnosticsIsSet = true;
  }
}

NetworkSlicingInfo PDUSessionInformation::getNetworkSlicingInfo() const {
  return m_NetworkSlicingInfo;
}
void PDUSessionInformation::setNetworkSlicingInfo(
    NetworkSlicingInfo const &value) {
  m_NetworkSlicingInfo = value;
  m_NetworkSlicingInfoIsSet = true;
}
bool PDUSessionInformation::networkSlicingInfoIsSet() const {
  return m_NetworkSlicingInfoIsSet;
}
void PDUSessionInformation::unsetNetworkSlicingInfo() {
  m_NetworkSlicingInfoIsSet = false;
}
int32_t PDUSessionInformation::getPduSessionID() const {
  return m_PduSessionID;
}
void PDUSessionInformation::setPduSessionID(int32_t const value) {
  m_PduSessionID = value;
}
PduSessionType PDUSessionInformation::getPduType() const { return m_PduType; }
void PDUSessionInformation::setPduType(PduSessionType const &value) {
  m_PduType = value;
  m_PduTypeIsSet = true;
}
bool PDUSessionInformation::pduTypeIsSet() const { return m_PduTypeIsSet; }
void PDUSessionInformation::unsetPduType() { m_PduTypeIsSet = false; }
SscMode PDUSessionInformation::getSscMode() const { return m_SscMode; }
void PDUSessionInformation::setSscMode(SscMode const &value) {
  m_SscMode = value;
  m_SscModeIsSet = true;
}
bool PDUSessionInformation::sscModeIsSet() const { return m_SscModeIsSet; }
void PDUSessionInformation::unsetSscMode() { m_SscModeIsSet = false; }
PlmnId PDUSessionInformation::getHPlmnId() const { return m_HPlmnId; }
void PDUSessionInformation::setHPlmnId(PlmnId const &value) {
  m_HPlmnId = value;
  m_HPlmnIdIsSet = true;
}
bool PDUSessionInformation::hPlmnIdIsSet() const { return m_HPlmnIdIsSet; }
void PDUSessionInformation::unsetHPlmnId() { m_HPlmnIdIsSet = false; }
ServingNetworkFunctionID
PDUSessionInformation::getServingNetworkFunctionID() const {
  return m_ServingNetworkFunctionID;
}
void PDUSessionInformation::setServingNetworkFunctionID(
    ServingNetworkFunctionID const &value) {
  m_ServingNetworkFunctionID = value;
  m_ServingNetworkFunctionIDIsSet = true;
}
bool PDUSessionInformation::servingNetworkFunctionIDIsSet() const {
  return m_ServingNetworkFunctionIDIsSet;
}
void PDUSessionInformation::unsetServingNetworkFunctionID() {
  m_ServingNetworkFunctionIDIsSet = false;
}
RatType PDUSessionInformation::getRatType() const { return m_RatType; }
void PDUSessionInformation::setRatType(RatType const &value) {
  m_RatType = value;
  m_RatTypeIsSet = true;
}
bool PDUSessionInformation::ratTypeIsSet() const { return m_RatTypeIsSet; }
void PDUSessionInformation::unsetRatType() { m_RatTypeIsSet = false; }
RatType PDUSessionInformation::getMAPDUNon3GPPRATType() const {
  return m_MAPDUNon3GPPRATType;
}
void PDUSessionInformation::setMAPDUNon3GPPRATType(RatType const &value) {
  m_MAPDUNon3GPPRATType = value;
  m_MAPDUNon3GPPRATTypeIsSet = true;
}
bool PDUSessionInformation::mAPDUNon3GPPRATTypeIsSet() const {
  return m_MAPDUNon3GPPRATTypeIsSet;
}
void PDUSessionInformation::unsetMAPDUNon3GPPRATType() {
  m_MAPDUNon3GPPRATTypeIsSet = false;
}
std::string PDUSessionInformation::getDnnId() const { return m_DnnId; }
void PDUSessionInformation::setDnnId(std::string const &value) {
  m_DnnId = value;
}
std::string PDUSessionInformation::getChargingCharacteristics() const {
  return m_ChargingCharacteristics;
}
void PDUSessionInformation::setChargingCharacteristics(
    std::string const &value) {
  m_ChargingCharacteristics = value;
  m_ChargingCharacteristicsIsSet = true;
}
bool PDUSessionInformation::chargingCharacteristicsIsSet() const {
  return m_ChargingCharacteristicsIsSet;
}
void PDUSessionInformation::unsetChargingCharacteristics() {
  m_ChargingCharacteristicsIsSet = false;
}
ChargingCharacteristicsSelectionMode
PDUSessionInformation::getChargingCharacteristicsSelectionMode() const {
  return m_ChargingCharacteristicsSelectionMode;
}
void PDUSessionInformation::setChargingCharacteristicsSelectionMode(
    ChargingCharacteristicsSelectionMode const &value) {
  m_ChargingCharacteristicsSelectionMode = value;
  m_ChargingCharacteristicsSelectionModeIsSet = true;
}
bool PDUSessionInformation::chargingCharacteristicsSelectionModeIsSet() const {
  return m_ChargingCharacteristicsSelectionModeIsSet;
}
void PDUSessionInformation::unsetChargingCharacteristicsSelectionMode() {
  m_ChargingCharacteristicsSelectionModeIsSet = false;
}
std::string PDUSessionInformation::getStartTime() const { return m_StartTime; }
void PDUSessionInformation::setStartTime(std::string const &value) {
  m_StartTime = value;
  m_StartTimeIsSet = true;
}
bool PDUSessionInformation::startTimeIsSet() const { return m_StartTimeIsSet; }
void PDUSessionInformation::unsetStartTime() { m_StartTimeIsSet = false; }
std::string PDUSessionInformation::getStopTime() const { return m_StopTime; }
void PDUSessionInformation::setStopTime(std::string const &value) {
  m_StopTime = value;
  m_StopTimeIsSet = true;
}
bool PDUSessionInformation::stopTimeIsSet() const { return m_StopTimeIsSet; }
void PDUSessionInformation::unsetStopTime() { m_StopTimeIsSet = false; }
3GPPPSDataOffStatus PDUSessionInformation::getR3gppPSDataOffStatus() const {
  return m_r_3gppPSDataOffStatus;
}
void PDUSessionInformation::setR3gppPSDataOffStatus(
    3GPPPSDataOffStatus const &value) {
  m_r_3gppPSDataOffStatus = value;
  m_r_3gppPSDataOffStatusIsSet = true;
}
bool PDUSessionInformation::r3gppPSDataOffStatusIsSet() const {
  return m_r_3gppPSDataOffStatusIsSet;
}
void PDUSessionInformation::unsetr_3gppPSDataOffStatus() {
  m_r_3gppPSDataOffStatusIsSet = false;
}
bool PDUSessionInformation::isSessionStopIndicator() const {
  return m_SessionStopIndicator;
}
void PDUSessionInformation::setSessionStopIndicator(bool const value) {
  m_SessionStopIndicator = value;
  m_SessionStopIndicatorIsSet = true;
}
bool PDUSessionInformation::sessionStopIndicatorIsSet() const {
  return m_SessionStopIndicatorIsSet;
}
void PDUSessionInformation::unsetSessionStopIndicator() {
  m_SessionStopIndicatorIsSet = false;
}
PDUAddress PDUSessionInformation::getPduAddress() const { return m_PduAddress; }
void PDUSessionInformation::setPduAddress(PDUAddress const &value) {
  m_PduAddress = value;
  m_PduAddressIsSet = true;
}
bool PDUSessionInformation::pduAddressIsSet() const {
  return m_PduAddressIsSet;
}
void PDUSessionInformation::unsetPduAddress() { m_PduAddressIsSet = false; }
int32_t PDUSessionInformation::getDiagnostics() const { return m_Diagnostics; }
void PDUSessionInformation::setDiagnostics(int32_t const value) {
  m_Diagnostics = value;
  m_DiagnosticsIsSet = true;
}
bool PDUSessionInformation::diagnosticsIsSet() const {
  return m_DiagnosticsIsSet;
}
void PDUSessionInformation::unsetDiagnostics() { m_DiagnosticsIsSet = false; }
AuthorizedDefaultQos
PDUSessionInformation::getAuthorizedQoSInformation() const {
  return m_AuthorizedQoSInformation;
}
void PDUSessionInformation::setAuthorizedQoSInformation(
    AuthorizedDefaultQos const &value) {
  m_AuthorizedQoSInformation = value;
  m_AuthorizedQoSInformationIsSet = true;
}
bool PDUSessionInformation::authorizedQoSInformationIsSet() const {
  return m_AuthorizedQoSInformationIsSet;
}
void PDUSessionInformation::unsetAuthorizedQoSInformation() {
  m_AuthorizedQoSInformationIsSet = false;
}
SubscribedDefaultQos
PDUSessionInformation::getSubscribedQoSInformation() const {
  return m_SubscribedQoSInformation;
}
void PDUSessionInformation::setSubscribedQoSInformation(
    SubscribedDefaultQos const &value) {
  m_SubscribedQoSInformation = value;
  m_SubscribedQoSInformationIsSet = true;
}
bool PDUSessionInformation::subscribedQoSInformationIsSet() const {
  return m_SubscribedQoSInformationIsSet;
}
void PDUSessionInformation::unsetSubscribedQoSInformation() {
  m_SubscribedQoSInformationIsSet = false;
}
Ambr PDUSessionInformation::getAuthorizedSessionAMBR() const {
  return m_AuthorizedSessionAMBR;
}
void PDUSessionInformation::setAuthorizedSessionAMBR(Ambr const &value) {
  m_AuthorizedSessionAMBR = value;
  m_AuthorizedSessionAMBRIsSet = true;
}
bool PDUSessionInformation::authorizedSessionAMBRIsSet() const {
  return m_AuthorizedSessionAMBRIsSet;
}
void PDUSessionInformation::unsetAuthorizedSessionAMBR() {
  m_AuthorizedSessionAMBRIsSet = false;
}
Ambr PDUSessionInformation::getSubscribedSessionAMBR() const {
  return m_SubscribedSessionAMBR;
}
void PDUSessionInformation::setSubscribedSessionAMBR(Ambr const &value) {
  m_SubscribedSessionAMBR = value;
  m_SubscribedSessionAMBRIsSet = true;
}
bool PDUSessionInformation::subscribedSessionAMBRIsSet() const {
  return m_SubscribedSessionAMBRIsSet;
}
void PDUSessionInformation::unsetSubscribedSessionAMBR() {
  m_SubscribedSessionAMBRIsSet = false;
}
PlmnId PDUSessionInformation::getServingCNPlmnId() const {
  return m_ServingCNPlmnId;
}
void PDUSessionInformation::setServingCNPlmnId(PlmnId const &value) {
  m_ServingCNPlmnId = value;
  m_ServingCNPlmnIdIsSet = true;
}
bool PDUSessionInformation::servingCNPlmnIdIsSet() const {
  return m_ServingCNPlmnIdIsSet;
}
void PDUSessionInformation::unsetServingCNPlmnId() {
  m_ServingCNPlmnIdIsSet = false;
}
MAPDUSessionInformation
PDUSessionInformation::getMAPDUSessionInformation() const {
  return m_MAPDUSessionInformation;
}
void PDUSessionInformation::setMAPDUSessionInformation(
    MAPDUSessionInformation const &value) {
  m_MAPDUSessionInformation = value;
  m_MAPDUSessionInformationIsSet = true;
}
bool PDUSessionInformation::mAPDUSessionInformationIsSet() const {
  return m_MAPDUSessionInformationIsSet;
}
void PDUSessionInformation::unsetMAPDUSessionInformation() {
  m_MAPDUSessionInformationIsSet = false;
}
std::vector<RanNasRelCause> &PDUSessionInformation::getEnhancedDiagnostics() {
  return m_EnhancedDiagnostics;
}
void PDUSessionInformation::setEnhancedDiagnostics(
    std::vector<RanNasRelCause> const &value) {
  m_EnhancedDiagnostics = value;
  m_EnhancedDiagnosticsIsSet = true;
}
bool PDUSessionInformation::enhancedDiagnosticsIsSet() const {
  return m_EnhancedDiagnosticsIsSet;
}
void PDUSessionInformation::unsetEnhancedDiagnostics() {
  m_EnhancedDiagnosticsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
