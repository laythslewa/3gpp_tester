/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * QueryNIDDAuthorizationDataGPSIOrExternalGroupIdentifierDocumentApi.h
 *
 *
 */

#ifndef QueryNIDDAuthorizationDataGPSIOrExternalGroupIdentifierDocumentApi_H_
#define QueryNIDDAuthorizationDataGPSIOrExternalGroupIdentifierDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "AuthorizationData.h"
#include "VarSnssai.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class QueryNIDDAuthorizationDataGPSIOrExternalGroupIdentifierDocumentApi {
public:
  QueryNIDDAuthorizationDataGPSIOrExternalGroupIdentifierDocumentApi(
      std::shared_ptr<Pistache::Rest::Router>);
  virtual ~QueryNIDDAuthorizationDataGPSIOrExternalGroupIdentifierDocumentApi() {
  }
  void init();

  const std::string base = "";

private:
  void setupRoutes();

  void get_nidd_au_data_handler(const Pistache::Rest::Request &request,
                                Pistache::Http::ResponseWriter response);
  void
  query_nidd_authorization_data_gpsi_or_external_group_identifier_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Retrieve NIDD Authorization Data GPSI or External Group identifier
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId">UE ID</param>
  /// <param name="singleNssai">single NSSAI</param>
  /// <param name="dnn">DNN</param>
  /// <param name="mtcProviderInformation">MTC Provider Information</param>
  /// <param name="ifNoneMatch">Validator for conditional requests, as described
  /// in RFC 7232, 3.2 (optional, default to &quot;&quot;)</param> <param
  /// name="ifModifiedSince">Validator for conditional requests, as described in
  /// RFC 7232, 3.3 (optional, default to &quot;&quot;)</param>
  virtual void get_nidd_au_data(
      const std::string &ueId, const Pistache::Optional<VarSnssai> &singleNssai,
      const Pistache::Optional<std::string> &dnn,
      const Pistache::Optional<std::string> &mtcProviderInformation,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifNoneMatch,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifModifiedSince,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* QueryNIDDAuthorizationDataGPSIOrExternalGroupIdentifierDocumentApi_H_ \
        */
