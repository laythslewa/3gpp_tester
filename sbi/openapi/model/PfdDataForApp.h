/**
 * Nnef_PFDmanagement Service API
 * Packet Flow Description Management Service. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PfdDataForApp.h
 *
 * Represents the PFDs for an application identifier.
 */

#ifndef PfdDataForApp_H_
#define PfdDataForApp_H_

#include "PfdContent.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the PFDs for an application identifier.
/// </summary>
class PfdDataForApp {
public:
  PfdDataForApp();
  virtual ~PfdDataForApp();

  void validate();

  /////////////////////////////////////////////
  /// PfdDataForApp members

  /// <summary>
  /// String providing an application identifier.
  /// </summary>
  std::string getApplicationId() const;
  void setApplicationId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<PfdContent> &getPfds();
  void setPfds(std::vector<PfdContent> const &value);
  bool pfdsIsSet() const;
  void unsetPfds();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getCachingTime() const;
  void setCachingTime(std::string const &value);
  bool cachingTimeIsSet() const;
  void unsetCachingTime();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getPfdTimestamp() const;
  void setPfdTimestamp(std::string const &value);
  bool pfdTimestampIsSet() const;
  void unsetPfdTimestamp();
  /// <summary>
  ///
  /// </summary>
  bool isPartialFlag() const;
  void setPartialFlag(bool const value);
  bool partialFlagIsSet() const;
  void unsetPartialFlag();

  friend void to_json(nlohmann::json &j, const PfdDataForApp &o);
  friend void from_json(const nlohmann::json &j, PfdDataForApp &o);

protected:
  std::string m_ApplicationId;

  std::vector<PfdContent> m_Pfds;
  bool m_PfdsIsSet;
  std::string m_CachingTime;
  bool m_CachingTimeIsSet;
  std::string m_PfdTimestamp;
  bool m_PfdTimestampIsSet;
  bool m_PartialFlag;
  bool m_PartialFlagIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PfdDataForApp_H_ */
