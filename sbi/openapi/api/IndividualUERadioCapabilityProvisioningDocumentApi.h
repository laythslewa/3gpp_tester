/**
 * Nucmf_Provisioning
 * UCMF_Provisioning Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualUERadioCapabilityProvisioningDocumentApi.h
 *
 *
 */

#ifndef IndividualUERadioCapabilityProvisioningDocumentApi_H_
#define IndividualUERadioCapabilityProvisioningDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "ProblemDetails.h"
#include "RacsData.h"
#include "RacsDataPatch.h"
#include "RacsFailureReport.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class IndividualUERadioCapabilityProvisioningDocumentApi {
public:
  IndividualUERadioCapabilityProvisioningDocumentApi(
      std::shared_ptr<Pistache::Rest::Router>);
  virtual ~IndividualUERadioCapabilityProvisioningDocumentApi() {}
  void init();

  const std::string base = "/nucmf-provisioning/v1";

private:
  void setupRoutes();

  void get_provisioning_handler(const Pistache::Rest::Request &request,
                                Pistache::Http::ResponseWriter response);
  void remove_provisioning_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response);
  void replace_provisioning_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);
  void update_provisioning_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response);
  void individual_ue_radio_capability_provisioning_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Get an Individual UE radio capability provisioning
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="provisioningId">Provisioning ID</param>
  virtual void get_provisioning(const std::string &provisioningId,
                                Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Remove an Individual UE radio capability provisioning
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="provisioningId">Provisioning ID</param>
  virtual void
  remove_provisioning(const std::string &provisioningId,
                      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Replace (PUT) an Individual UE radio capability provisioning
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="provisioningId">Provisioning ID</param>
  /// <param name="racsData">update an existing parameter provisioning.</param>
  virtual void
  replace_provisioning(const std::string &provisioningId,
                       const RacsData &racsData,
                       Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Update (PATCH) an Individual UE radio capability provisioning
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="provisioningId">Provisioning ID</param>
  /// <param name="racsDataPatch">update an existing parameter
  /// provisioning.</param>
  virtual void
  update_provisioning(const std::string &provisioningId,
                      const RacsDataPatch &racsDataPatch,
                      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IndividualUERadioCapabilityProvisioningDocumentApi_H_ */
