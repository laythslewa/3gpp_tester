/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PlmnRestriction.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PlmnRestriction::PlmnRestriction() {
  m_RatRestrictionsIsSet = false;
  m_ForbiddenAreasIsSet = false;
  m_ServiceAreaRestrictionIsSet = false;
  m_CoreNetworkTypeRestrictionsIsSet = false;
  m_PrimaryRatRestrictionsIsSet = false;
  m_SecondaryRatRestrictionsIsSet = false;
}

PlmnRestriction::~PlmnRestriction() {}

void PlmnRestriction::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PlmnRestriction &o) {
  j = nlohmann::json();
  if (o.ratRestrictionsIsSet() || !o.m_RatRestrictions.empty())
    j["ratRestrictions"] = o.m_RatRestrictions;
  if (o.forbiddenAreasIsSet() || !o.m_ForbiddenAreas.empty())
    j["forbiddenAreas"] = o.m_ForbiddenAreas;
  if (o.serviceAreaRestrictionIsSet())
    j["serviceAreaRestriction"] = o.m_ServiceAreaRestriction;
  if (o.coreNetworkTypeRestrictionsIsSet() ||
      !o.m_CoreNetworkTypeRestrictions.empty())
    j["coreNetworkTypeRestrictions"] = o.m_CoreNetworkTypeRestrictions;
  if (o.primaryRatRestrictionsIsSet() || !o.m_PrimaryRatRestrictions.empty())
    j["primaryRatRestrictions"] = o.m_PrimaryRatRestrictions;
  if (o.secondaryRatRestrictionsIsSet() ||
      !o.m_SecondaryRatRestrictions.empty())
    j["secondaryRatRestrictions"] = o.m_SecondaryRatRestrictions;
}

void from_json(const nlohmann::json &j, PlmnRestriction &o) {
  if (j.find("ratRestrictions") != j.end()) {
    j.at("ratRestrictions").get_to(o.m_RatRestrictions);
    o.m_RatRestrictionsIsSet = true;
  }
  if (j.find("forbiddenAreas") != j.end()) {
    j.at("forbiddenAreas").get_to(o.m_ForbiddenAreas);
    o.m_ForbiddenAreasIsSet = true;
  }
  if (j.find("serviceAreaRestriction") != j.end()) {
    j.at("serviceAreaRestriction").get_to(o.m_ServiceAreaRestriction);
    o.m_ServiceAreaRestrictionIsSet = true;
  }
  if (j.find("coreNetworkTypeRestrictions") != j.end()) {
    j.at("coreNetworkTypeRestrictions").get_to(o.m_CoreNetworkTypeRestrictions);
    o.m_CoreNetworkTypeRestrictionsIsSet = true;
  }
  if (j.find("primaryRatRestrictions") != j.end()) {
    j.at("primaryRatRestrictions").get_to(o.m_PrimaryRatRestrictions);
    o.m_PrimaryRatRestrictionsIsSet = true;
  }
  if (j.find("secondaryRatRestrictions") != j.end()) {
    j.at("secondaryRatRestrictions").get_to(o.m_SecondaryRatRestrictions);
    o.m_SecondaryRatRestrictionsIsSet = true;
  }
}

std::vector<RatType> &PlmnRestriction::getRatRestrictions() {
  return m_RatRestrictions;
}
void PlmnRestriction::setRatRestrictions(std::vector<RatType> const &value) {
  m_RatRestrictions = value;
  m_RatRestrictionsIsSet = true;
}
bool PlmnRestriction::ratRestrictionsIsSet() const {
  return m_RatRestrictionsIsSet;
}
void PlmnRestriction::unsetRatRestrictions() { m_RatRestrictionsIsSet = false; }
std::vector<Area> &PlmnRestriction::getForbiddenAreas() {
  return m_ForbiddenAreas;
}
void PlmnRestriction::setForbiddenAreas(std::vector<Area> const &value) {
  m_ForbiddenAreas = value;
  m_ForbiddenAreasIsSet = true;
}
bool PlmnRestriction::forbiddenAreasIsSet() const {
  return m_ForbiddenAreasIsSet;
}
void PlmnRestriction::unsetForbiddenAreas() { m_ForbiddenAreasIsSet = false; }
ServiceAreaRestriction PlmnRestriction::getServiceAreaRestriction() const {
  return m_ServiceAreaRestriction;
}
void PlmnRestriction::setServiceAreaRestriction(
    ServiceAreaRestriction const &value) {
  m_ServiceAreaRestriction = value;
  m_ServiceAreaRestrictionIsSet = true;
}
bool PlmnRestriction::serviceAreaRestrictionIsSet() const {
  return m_ServiceAreaRestrictionIsSet;
}
void PlmnRestriction::unsetServiceAreaRestriction() {
  m_ServiceAreaRestrictionIsSet = false;
}
std::vector<CoreNetworkType> &
PlmnRestriction::getCoreNetworkTypeRestrictions() {
  return m_CoreNetworkTypeRestrictions;
}
void PlmnRestriction::setCoreNetworkTypeRestrictions(
    std::vector<CoreNetworkType> const &value) {
  m_CoreNetworkTypeRestrictions = value;
  m_CoreNetworkTypeRestrictionsIsSet = true;
}
bool PlmnRestriction::coreNetworkTypeRestrictionsIsSet() const {
  return m_CoreNetworkTypeRestrictionsIsSet;
}
void PlmnRestriction::unsetCoreNetworkTypeRestrictions() {
  m_CoreNetworkTypeRestrictionsIsSet = false;
}
std::vector<RatType> &PlmnRestriction::getPrimaryRatRestrictions() {
  return m_PrimaryRatRestrictions;
}
void PlmnRestriction::setPrimaryRatRestrictions(
    std::vector<RatType> const &value) {
  m_PrimaryRatRestrictions = value;
  m_PrimaryRatRestrictionsIsSet = true;
}
bool PlmnRestriction::primaryRatRestrictionsIsSet() const {
  return m_PrimaryRatRestrictionsIsSet;
}
void PlmnRestriction::unsetPrimaryRatRestrictions() {
  m_PrimaryRatRestrictionsIsSet = false;
}
std::vector<RatType> &PlmnRestriction::getSecondaryRatRestrictions() {
  return m_SecondaryRatRestrictions;
}
void PlmnRestriction::setSecondaryRatRestrictions(
    std::vector<RatType> const &value) {
  m_SecondaryRatRestrictions = value;
  m_SecondaryRatRestrictionsIsSet = true;
}
bool PlmnRestriction::secondaryRatRestrictionsIsSet() const {
  return m_SecondaryRatRestrictionsIsSet;
}
void PlmnRestriction::unsetSecondaryRatRestrictions() {
  m_SecondaryRatRestrictionsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
