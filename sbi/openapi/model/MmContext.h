/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MmContext.h
 *
 * Represents a Mobility Management Context in UE Context
 */

#ifndef MmContext_H_
#define MmContext_H_

#include "AccessType.h"
#include "EpsNasSecurityMode.h"
#include "ExpectedUeBehavior.h"
#include "GlobalRanNodeId.h"
#include "NasSecurityMode.h"
#include "NssaaStatus.h"
#include "NssaiMapping.h"
#include "Snssai.h"
#include "UeDifferentiationInfo.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a Mobility Management Context in UE Context
/// </summary>
class MmContext {
public:
  MmContext();
  virtual ~MmContext();

  void validate();

  /////////////////////////////////////////////
  /// MmContext members

  /// <summary>
  ///
  /// </summary>
  AccessType getAccessType() const;
  void setAccessType(AccessType const &value);
  /// <summary>
  ///
  /// </summary>
  NasSecurityMode getNasSecurityMode() const;
  void setNasSecurityMode(NasSecurityMode const &value);
  bool nasSecurityModeIsSet() const;
  void unsetNasSecurityMode();
  /// <summary>
  ///
  /// </summary>
  EpsNasSecurityMode getEpsNasSecurityMode() const;
  void setEpsNasSecurityMode(EpsNasSecurityMode const &value);
  bool epsNasSecurityModeIsSet() const;
  void unsetEpsNasSecurityMode();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getNasDownlinkCount() const;
  void setNasDownlinkCount(int32_t const value);
  bool nasDownlinkCountIsSet() const;
  void unsetNasDownlinkCount();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getNasUplinkCount() const;
  void setNasUplinkCount(int32_t const value);
  bool nasUplinkCountIsSet() const;
  void unsetNasUplinkCount();
  /// <summary>
  /// string with format \&quot;bytes\&quot; as defined in OpenAPI
  /// </summary>
  std::string getUeSecurityCapability() const;
  void setUeSecurityCapability(std::string const &value);
  bool ueSecurityCapabilityIsSet() const;
  void unsetUeSecurityCapability();
  /// <summary>
  /// string with format \&quot;bytes\&quot; as defined in OpenAPI
  /// </summary>
  std::string getS1UeNetworkCapability() const;
  void setS1UeNetworkCapability(std::string const &value);
  bool s1UeNetworkCapabilityIsSet() const;
  void unsetS1UeNetworkCapability();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getAllowedNssai();
  void setAllowedNssai(std::vector<Snssai> const &value);
  bool allowedNssaiIsSet() const;
  void unsetAllowedNssai();
  /// <summary>
  ///
  /// </summary>
  std::vector<NssaiMapping> &getNssaiMappingList();
  void setNssaiMappingList(std::vector<NssaiMapping> const &value);
  bool nssaiMappingListIsSet() const;
  void unsetNssaiMappingList();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getAllowedHomeNssai();
  void setAllowedHomeNssai(std::vector<Snssai> const &value);
  bool allowedHomeNssaiIsSet() const;
  void unsetAllowedHomeNssai();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getNsInstanceList();
  void setNsInstanceList(std::vector<std::string> const &value);
  bool nsInstanceListIsSet() const;
  void unsetNsInstanceList();
  /// <summary>
  ///
  /// </summary>
  ExpectedUeBehavior getExpectedUEbehavior() const;
  void setExpectedUEbehavior(ExpectedUeBehavior const &value);
  bool expectedUEbehaviorIsSet() const;
  void unsetExpectedUEbehavior();
  /// <summary>
  ///
  /// </summary>
  UeDifferentiationInfo getUeDifferentiationInfo() const;
  void setUeDifferentiationInfo(UeDifferentiationInfo const &value);
  bool ueDifferentiationInfoIsSet() const;
  void unsetUeDifferentiationInfo();
  /// <summary>
  /// string with format \&quot;bytes\&quot; as defined in OpenAPI
  /// </summary>
  std::string getPlmnAssiUeRadioCapId() const;
  void setPlmnAssiUeRadioCapId(std::string const &value);
  bool plmnAssiUeRadioCapIdIsSet() const;
  void unsetPlmnAssiUeRadioCapId();
  /// <summary>
  /// string with format \&quot;bytes\&quot; as defined in OpenAPI
  /// </summary>
  std::string getManAssiUeRadioCapId() const;
  void setManAssiUeRadioCapId(std::string const &value);
  bool manAssiUeRadioCapIdIsSet() const;
  void unsetManAssiUeRadioCapId();
  /// <summary>
  ///
  /// </summary>
  std::string getUcmfDicEntryId() const;
  void setUcmfDicEntryId(std::string const &value);
  bool ucmfDicEntryIdIsSet() const;
  void unsetUcmfDicEntryId();
  /// <summary>
  ///
  /// </summary>
  GlobalRanNodeId getN3IwfId() const;
  void setN3IwfId(GlobalRanNodeId const &value);
  bool n3IwfIdIsSet() const;
  void unsetN3IwfId();
  /// <summary>
  ///
  /// </summary>
  GlobalRanNodeId getWagfId() const;
  void setWagfId(GlobalRanNodeId const &value);
  bool wagfIdIsSet() const;
  void unsetWagfId();
  /// <summary>
  ///
  /// </summary>
  GlobalRanNodeId getTngfId() const;
  void setTngfId(GlobalRanNodeId const &value);
  bool tngfIdIsSet() const;
  void unsetTngfId();
  /// <summary>
  ///
  /// </summary>
  int32_t getAnN2ApId() const;
  void setAnN2ApId(int32_t const value);
  bool anN2ApIdIsSet() const;
  void unsetAnN2ApId();
  /// <summary>
  ///
  /// </summary>
  std::vector<NssaaStatus> &getNssaaStatusList();
  void setNssaaStatusList(std::vector<NssaaStatus> const &value);
  bool nssaaStatusListIsSet() const;
  void unsetNssaaStatusList();
  /// <summary>
  ///
  /// </summary>
  std::vector<NssaiMapping> &getPendingNssaiMappingList();
  void setPendingNssaiMappingList(std::vector<NssaiMapping> const &value);
  bool pendingNssaiMappingListIsSet() const;
  void unsetPendingNssaiMappingList();

  friend void to_json(nlohmann::json &j, const MmContext &o);
  friend void from_json(const nlohmann::json &j, MmContext &o);

protected:
  AccessType m_AccessType;

  NasSecurityMode m_NasSecurityMode;
  bool m_NasSecurityModeIsSet;
  EpsNasSecurityMode m_EpsNasSecurityMode;
  bool m_EpsNasSecurityModeIsSet;
  int32_t m_NasDownlinkCount;
  bool m_NasDownlinkCountIsSet;
  int32_t m_NasUplinkCount;
  bool m_NasUplinkCountIsSet;
  std::string m_UeSecurityCapability;
  bool m_UeSecurityCapabilityIsSet;
  std::string m_S1UeNetworkCapability;
  bool m_S1UeNetworkCapabilityIsSet;
  std::vector<Snssai> m_AllowedNssai;
  bool m_AllowedNssaiIsSet;
  std::vector<NssaiMapping> m_NssaiMappingList;
  bool m_NssaiMappingListIsSet;
  std::vector<Snssai> m_AllowedHomeNssai;
  bool m_AllowedHomeNssaiIsSet;
  std::vector<std::string> m_NsInstanceList;
  bool m_NsInstanceListIsSet;
  ExpectedUeBehavior m_ExpectedUEbehavior;
  bool m_ExpectedUEbehaviorIsSet;
  UeDifferentiationInfo m_UeDifferentiationInfo;
  bool m_UeDifferentiationInfoIsSet;
  std::string m_PlmnAssiUeRadioCapId;
  bool m_PlmnAssiUeRadioCapIdIsSet;
  std::string m_ManAssiUeRadioCapId;
  bool m_ManAssiUeRadioCapIdIsSet;
  std::string m_UcmfDicEntryId;
  bool m_UcmfDicEntryIdIsSet;
  GlobalRanNodeId m_N3IwfId;
  bool m_N3IwfIdIsSet;
  GlobalRanNodeId m_WagfId;
  bool m_WagfIdIsSet;
  GlobalRanNodeId m_TngfId;
  bool m_TngfIdIsSet;
  int32_t m_AnN2ApId;
  bool m_AnN2ApIdIsSet;
  std::vector<NssaaStatus> m_NssaaStatusList;
  bool m_NssaaStatusListIsSet;
  std::vector<NssaiMapping> m_PendingNssaiMappingList;
  bool m_PendingNssaiMappingListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* MmContext_H_ */
