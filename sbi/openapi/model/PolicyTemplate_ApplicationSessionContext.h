/**
 * M1_PolicyTemplatesProvisioning
 * 5GMS AF M1 Policy Templates Provisioning API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PolicyTemplate_ApplicationSessionContext.h
 *
 *
 */

#ifndef PolicyTemplate_ApplicationSessionContext_H_
#define PolicyTemplate_ApplicationSessionContext_H_

#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class PolicyTemplate_ApplicationSessionContext {
public:
  PolicyTemplate_ApplicationSessionContext();
  virtual ~PolicyTemplate_ApplicationSessionContext();

  void validate();

  /////////////////////////////////////////////
  /// PolicyTemplate_ApplicationSessionContext members

  /// <summary>
  /// Contains an AF application identifier.
  /// </summary>
  std::string getAfAppId() const;
  void setAfAppId(std::string const &value);
  bool afAppIdIsSet() const;
  void unsetAfAppId();
  /// <summary>
  ///
  /// </summary>
  Snssai getSliceInfo() const;
  void setSliceInfo(Snssai const &value);
  bool sliceInfoIsSet() const;
  void unsetSliceInfo();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  /// Contains an identity of an application service provider.
  /// </summary>
  std::string getAspId() const;
  void setAspId(std::string const &value);
  bool aspIdIsSet() const;
  void unsetAspId();

  friend void to_json(nlohmann::json &j,
                      const PolicyTemplate_ApplicationSessionContext &o);
  friend void from_json(const nlohmann::json &j,
                        PolicyTemplate_ApplicationSessionContext &o);

protected:
  std::string m_AfAppId;
  bool m_AfAppIdIsSet;
  Snssai m_SliceInfo;
  bool m_SliceInfoIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  std::string m_AspId;
  bool m_AspIdIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PolicyTemplate_ApplicationSessionContext_H_ */
