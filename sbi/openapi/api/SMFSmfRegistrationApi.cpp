/**
 * Nudm_UECM
 * Nudm Context Management Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SMFSmfRegistrationApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

SMFSmfRegistrationApi::SMFSmfRegistrationApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void SMFSmfRegistrationApi::init() { setupRoutes(); }

void SMFSmfRegistrationApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Get(
      *router, base + "/:ueId/registrations/smf-registrations",
      Routes::bind(&SMFSmfRegistrationApi::get_smf_registration_handler, this));
  Routes::Put(*router,
              base + "/:ueId/registrations/smf-registrations/:pduSessionId",
              Routes::bind(&SMFSmfRegistrationApi::registration_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &SMFSmfRegistrationApi::smf_smf_registration_api_default_handler, this));
}

void SMFSmfRegistrationApi::get_smf_registration_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto ueId = request.param(":ueId").as<std::string>();

  // Getting the query params
  auto singleNssaiQuery = request.query().get("single-nssai");
  Pistache::Optional<Snssai> singleNssai;
  if (!singleNssaiQuery.isEmpty()) {
    Snssai valueQuery_instance;
    if (fromStringValue(singleNssaiQuery.get(), valueQuery_instance)) {
      singleNssai = Pistache::Some(valueQuery_instance);
    }
  }
  auto dnnQuery = request.query().get("dnn");
  Pistache::Optional<std::string> dnn;
  if (!dnnQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(dnnQuery.get(), valueQuery_instance)) {
      dnn = Pistache::Some(valueQuery_instance);
    }
  }
  auto supportedFeaturesQuery = request.query().get("supported-features");
  Pistache::Optional<std::string> supportedFeatures;
  if (!supportedFeaturesQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(supportedFeaturesQuery.get(), valueQuery_instance)) {
      supportedFeatures = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->get_smf_registration(ueId, singleNssai, dnn, supportedFeatures,
                               response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void SMFSmfRegistrationApi::registration_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto ueId = request.param(":ueId").as<std::string>();
  auto pduSessionId = request.param(":pduSessionId").as<int32_t>();

  // Getting the body param

  SmfRegistration smfRegistration;

  try {
    nlohmann::json::parse(request.body()).get_to(smfRegistration);
    this->registration(ueId, pduSessionId, smfRegistration, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void SMFSmfRegistrationApi::smf_smf_registration_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
