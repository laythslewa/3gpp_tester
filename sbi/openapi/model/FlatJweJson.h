/**
 * JOSE Protected Message Forwarding API
 * N32-f Message Forwarding Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * FlatJweJson.h
 *
 * Contains the integrity protected reformatted block
 */

#ifndef FlatJweJson_H_
#define FlatJweJson_H_

#include "Object.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the integrity protected reformatted block
/// </summary>
class FlatJweJson {
public:
  FlatJweJson();
  virtual ~FlatJweJson();

  void validate();

  /////////////////////////////////////////////
  /// FlatJweJson members

  /// <summary>
  ///
  /// </summary>
  std::string getRProtected() const;
  void setRProtected(std::string const &value);
  bool rProtectedIsSet() const;
  void unsetr_protected();
  /// <summary>
  ///
  /// </summary>
  Object getUnprotected() const;
  void setUnprotected(Object const &value);
  bool unprotectedIsSet() const;
  void unsetUnprotected();
  /// <summary>
  ///
  /// </summary>
  Object getHeader() const;
  void setHeader(Object const &value);
  bool headerIsSet() const;
  void unsetHeader();
  /// <summary>
  ///
  /// </summary>
  std::string getEncryptedKey() const;
  void setEncryptedKey(std::string const &value);
  bool encryptedKeyIsSet() const;
  void unsetEncrypted_key();
  /// <summary>
  ///
  /// </summary>
  std::string getAad() const;
  void setAad(std::string const &value);
  bool aadIsSet() const;
  void unsetAad();
  /// <summary>
  ///
  /// </summary>
  std::string getIv() const;
  void setIv(std::string const &value);
  bool ivIsSet() const;
  void unsetIv();
  /// <summary>
  ///
  /// </summary>
  std::string getCiphertext() const;
  void setCiphertext(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getTag() const;
  void setTag(std::string const &value);
  bool tagIsSet() const;
  void unsetTag();

  friend void to_json(nlohmann::json &j, const FlatJweJson &o);
  friend void from_json(const nlohmann::json &j, FlatJweJson &o);

protected:
  std::string m_r_protected;
  bool m_r_protectedIsSet;
  Object m_Unprotected;
  bool m_UnprotectedIsSet;
  Object m_Header;
  bool m_HeaderIsSet;
  std::string m_Encrypted_key;
  bool m_Encrypted_keyIsSet;
  std::string m_Aad;
  bool m_AadIsSet;
  std::string m_Iv;
  bool m_IvIsSet;
  std::string m_Ciphertext;

  std::string m_Tag;
  bool m_TagIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* FlatJweJson_H_ */
