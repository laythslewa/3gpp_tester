/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UeDifferentiationInfo.h
 *
 * Represents the UE Differentiation Information and its validity time
 */

#ifndef UeDifferentiationInfo_H_
#define UeDifferentiationInfo_H_

#include "BatteryIndication.h"
#include "PeriodicCommunicationIndicator.h"
#include "ScheduledCommunicationTime.h"
#include "StationaryIndication.h"
#include "TrafficProfile.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the UE Differentiation Information and its validity time
/// </summary>
class UeDifferentiationInfo {
public:
  UeDifferentiationInfo();
  virtual ~UeDifferentiationInfo();

  void validate();

  /////////////////////////////////////////////
  /// UeDifferentiationInfo members

  /// <summary>
  ///
  /// </summary>
  PeriodicCommunicationIndicator getPeriodicComInd() const;
  void setPeriodicComInd(PeriodicCommunicationIndicator const &value);
  bool periodicComIndIsSet() const;
  void unsetPeriodicComInd();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getPeriodicTime() const;
  void setPeriodicTime(int32_t const value);
  bool periodicTimeIsSet() const;
  void unsetPeriodicTime();
  /// <summary>
  ///
  /// </summary>
  ScheduledCommunicationTime getScheduledComTime() const;
  void setScheduledComTime(ScheduledCommunicationTime const &value);
  bool scheduledComTimeIsSet() const;
  void unsetScheduledComTime();
  /// <summary>
  ///
  /// </summary>
  StationaryIndication getStationaryInd() const;
  void setStationaryInd(StationaryIndication const &value);
  bool stationaryIndIsSet() const;
  void unsetStationaryInd();
  /// <summary>
  ///
  /// </summary>
  TrafficProfile getTrafficProfile() const;
  void setTrafficProfile(TrafficProfile const &value);
  bool trafficProfileIsSet() const;
  void unsetTrafficProfile();
  /// <summary>
  ///
  /// </summary>
  BatteryIndication getBatteryInd() const;
  void setBatteryInd(BatteryIndication const &value);
  bool batteryIndIsSet() const;
  void unsetBatteryInd();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getValidityTime() const;
  void setValidityTime(std::string const &value);
  bool validityTimeIsSet() const;
  void unsetValidityTime();

  friend void to_json(nlohmann::json &j, const UeDifferentiationInfo &o);
  friend void from_json(const nlohmann::json &j, UeDifferentiationInfo &o);

protected:
  PeriodicCommunicationIndicator m_PeriodicComInd;
  bool m_PeriodicComIndIsSet;
  int32_t m_PeriodicTime;
  bool m_PeriodicTimeIsSet;
  ScheduledCommunicationTime m_ScheduledComTime;
  bool m_ScheduledComTimeIsSet;
  StationaryIndication m_StationaryInd;
  bool m_StationaryIndIsSet;
  TrafficProfile m_TrafficProfile;
  bool m_TrafficProfileIsSet;
  BatteryIndication m_BatteryInd;
  bool m_BatteryIndIsSet;
  std::string m_ValidityTime;
  bool m_ValidityTimeIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UeDifferentiationInfo_H_ */
