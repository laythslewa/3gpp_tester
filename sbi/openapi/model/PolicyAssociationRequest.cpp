/**
 * Npcf_UEPolicyControl
 * UE Policy Control Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PolicyAssociationRequest.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PolicyAssociationRequest::PolicyAssociationRequest() {
  m_NotificationUri = "";
  m_AltNotifIpv4AddrsIsSet = false;
  m_AltNotifIpv6AddrsIsSet = false;
  m_AltNotifFqdnsIsSet = false;
  m_Supi = "";
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_AccessTypeIsSet = false;
  m_Pei = "";
  m_PeiIsSet = false;
  m_UserLocIsSet = false;
  m_TimeZone = "";
  m_TimeZoneIsSet = false;
  m_ServingPlmnIsSet = false;
  m_RatTypeIsSet = false;
  m_GroupIdsIsSet = false;
  m_HPcfId = "";
  m_HPcfIdIsSet = false;
  m_UePolReqIsSet = false;
  m_GuamiIsSet = false;
  m_ServiceNameIsSet = false;
  m_ServingNfId = "";
  m_ServingNfIdIsSet = false;
  m_Pc5CapabIsSet = false;
  m_ProSeCapabIsSet = false;
  m_SuppFeat = "";
}

PolicyAssociationRequest::~PolicyAssociationRequest() {}

void PolicyAssociationRequest::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PolicyAssociationRequest &o) {
  j = nlohmann::json();
  j["notificationUri"] = o.m_NotificationUri;
  if (o.altNotifIpv4AddrsIsSet() || !o.m_AltNotifIpv4Addrs.empty())
    j["altNotifIpv4Addrs"] = o.m_AltNotifIpv4Addrs;
  if (o.altNotifIpv6AddrsIsSet() || !o.m_AltNotifIpv6Addrs.empty())
    j["altNotifIpv6Addrs"] = o.m_AltNotifIpv6Addrs;
  if (o.altNotifFqdnsIsSet() || !o.m_AltNotifFqdns.empty())
    j["altNotifFqdns"] = o.m_AltNotifFqdns;
  j["supi"] = o.m_Supi;
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  if (o.accessTypeIsSet())
    j["accessType"] = o.m_AccessType;
  if (o.peiIsSet())
    j["pei"] = o.m_Pei;
  if (o.userLocIsSet())
    j["userLoc"] = o.m_UserLoc;
  if (o.timeZoneIsSet())
    j["timeZone"] = o.m_TimeZone;
  if (o.servingPlmnIsSet())
    j["servingPlmn"] = o.m_ServingPlmn;
  if (o.ratTypeIsSet())
    j["ratType"] = o.m_RatType;
  if (o.groupIdsIsSet() || !o.m_GroupIds.empty())
    j["groupIds"] = o.m_GroupIds;
  if (o.hPcfIdIsSet())
    j["hPcfId"] = o.m_HPcfId;
  if (o.uePolReqIsSet())
    j["uePolReq"] = o.m_UePolReq;
  if (o.guamiIsSet())
    j["guami"] = o.m_Guami;
  if (o.serviceNameIsSet())
    j["serviceName"] = o.m_ServiceName;
  if (o.servingNfIdIsSet())
    j["servingNfId"] = o.m_ServingNfId;
  if (o.pc5CapabIsSet())
    j["pc5Capab"] = o.m_Pc5Capab;
  if (o.proSeCapabIsSet() || !o.m_ProSeCapab.empty())
    j["proSeCapab"] = o.m_ProSeCapab;
  j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, PolicyAssociationRequest &o) {
  j.at("notificationUri").get_to(o.m_NotificationUri);
  if (j.find("altNotifIpv4Addrs") != j.end()) {
    j.at("altNotifIpv4Addrs").get_to(o.m_AltNotifIpv4Addrs);
    o.m_AltNotifIpv4AddrsIsSet = true;
  }
  if (j.find("altNotifIpv6Addrs") != j.end()) {
    j.at("altNotifIpv6Addrs").get_to(o.m_AltNotifIpv6Addrs);
    o.m_AltNotifIpv6AddrsIsSet = true;
  }
  if (j.find("altNotifFqdns") != j.end()) {
    j.at("altNotifFqdns").get_to(o.m_AltNotifFqdns);
    o.m_AltNotifFqdnsIsSet = true;
  }
  j.at("supi").get_to(o.m_Supi);
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("accessType") != j.end()) {
    j.at("accessType").get_to(o.m_AccessType);
    o.m_AccessTypeIsSet = true;
  }
  if (j.find("pei") != j.end()) {
    j.at("pei").get_to(o.m_Pei);
    o.m_PeiIsSet = true;
  }
  if (j.find("userLoc") != j.end()) {
    j.at("userLoc").get_to(o.m_UserLoc);
    o.m_UserLocIsSet = true;
  }
  if (j.find("timeZone") != j.end()) {
    j.at("timeZone").get_to(o.m_TimeZone);
    o.m_TimeZoneIsSet = true;
  }
  if (j.find("servingPlmn") != j.end()) {
    j.at("servingPlmn").get_to(o.m_ServingPlmn);
    o.m_ServingPlmnIsSet = true;
  }
  if (j.find("ratType") != j.end()) {
    j.at("ratType").get_to(o.m_RatType);
    o.m_RatTypeIsSet = true;
  }
  if (j.find("groupIds") != j.end()) {
    j.at("groupIds").get_to(o.m_GroupIds);
    o.m_GroupIdsIsSet = true;
  }
  if (j.find("hPcfId") != j.end()) {
    j.at("hPcfId").get_to(o.m_HPcfId);
    o.m_HPcfIdIsSet = true;
  }
  if (j.find("uePolReq") != j.end()) {
    j.at("uePolReq").get_to(o.m_UePolReq);
    o.m_UePolReqIsSet = true;
  }
  if (j.find("guami") != j.end()) {
    j.at("guami").get_to(o.m_Guami);
    o.m_GuamiIsSet = true;
  }
  if (j.find("serviceName") != j.end()) {
    j.at("serviceName").get_to(o.m_ServiceName);
    o.m_ServiceNameIsSet = true;
  }
  if (j.find("servingNfId") != j.end()) {
    j.at("servingNfId").get_to(o.m_ServingNfId);
    o.m_ServingNfIdIsSet = true;
  }
  if (j.find("pc5Capab") != j.end()) {
    j.at("pc5Capab").get_to(o.m_Pc5Capab);
    o.m_Pc5CapabIsSet = true;
  }
  if (j.find("proSeCapab") != j.end()) {
    j.at("proSeCapab").get_to(o.m_ProSeCapab);
    o.m_ProSeCapabIsSet = true;
  }
  j.at("suppFeat").get_to(o.m_SuppFeat);
}

std::string PolicyAssociationRequest::getNotificationUri() const {
  return m_NotificationUri;
}
void PolicyAssociationRequest::setNotificationUri(std::string const &value) {
  m_NotificationUri = value;
}
std::vector<std::string> &PolicyAssociationRequest::getAltNotifIpv4Addrs() {
  return m_AltNotifIpv4Addrs;
}
void PolicyAssociationRequest::setAltNotifIpv4Addrs(
    std::vector<std::string> const &value) {
  m_AltNotifIpv4Addrs = value;
  m_AltNotifIpv4AddrsIsSet = true;
}
bool PolicyAssociationRequest::altNotifIpv4AddrsIsSet() const {
  return m_AltNotifIpv4AddrsIsSet;
}
void PolicyAssociationRequest::unsetAltNotifIpv4Addrs() {
  m_AltNotifIpv4AddrsIsSet = false;
}
std::vector<Ipv6Addr> &PolicyAssociationRequest::getAltNotifIpv6Addrs() {
  return m_AltNotifIpv6Addrs;
}
void PolicyAssociationRequest::setAltNotifIpv6Addrs(
    std::vector<Ipv6Addr> const &value) {
  m_AltNotifIpv6Addrs = value;
  m_AltNotifIpv6AddrsIsSet = true;
}
bool PolicyAssociationRequest::altNotifIpv6AddrsIsSet() const {
  return m_AltNotifIpv6AddrsIsSet;
}
void PolicyAssociationRequest::unsetAltNotifIpv6Addrs() {
  m_AltNotifIpv6AddrsIsSet = false;
}
std::vector<std::string> &PolicyAssociationRequest::getAltNotifFqdns() {
  return m_AltNotifFqdns;
}
void PolicyAssociationRequest::setAltNotifFqdns(
    std::vector<std::string> const &value) {
  m_AltNotifFqdns = value;
  m_AltNotifFqdnsIsSet = true;
}
bool PolicyAssociationRequest::altNotifFqdnsIsSet() const {
  return m_AltNotifFqdnsIsSet;
}
void PolicyAssociationRequest::unsetAltNotifFqdns() {
  m_AltNotifFqdnsIsSet = false;
}
std::string PolicyAssociationRequest::getSupi() const { return m_Supi; }
void PolicyAssociationRequest::setSupi(std::string const &value) {
  m_Supi = value;
}
std::string PolicyAssociationRequest::getGpsi() const { return m_Gpsi; }
void PolicyAssociationRequest::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool PolicyAssociationRequest::gpsiIsSet() const { return m_GpsiIsSet; }
void PolicyAssociationRequest::unsetGpsi() { m_GpsiIsSet = false; }
AccessType PolicyAssociationRequest::getAccessType() const {
  return m_AccessType;
}
void PolicyAssociationRequest::setAccessType(AccessType const &value) {
  m_AccessType = value;
  m_AccessTypeIsSet = true;
}
bool PolicyAssociationRequest::accessTypeIsSet() const {
  return m_AccessTypeIsSet;
}
void PolicyAssociationRequest::unsetAccessType() { m_AccessTypeIsSet = false; }
std::string PolicyAssociationRequest::getPei() const { return m_Pei; }
void PolicyAssociationRequest::setPei(std::string const &value) {
  m_Pei = value;
  m_PeiIsSet = true;
}
bool PolicyAssociationRequest::peiIsSet() const { return m_PeiIsSet; }
void PolicyAssociationRequest::unsetPei() { m_PeiIsSet = false; }
UserLocation PolicyAssociationRequest::getUserLoc() const { return m_UserLoc; }
void PolicyAssociationRequest::setUserLoc(UserLocation const &value) {
  m_UserLoc = value;
  m_UserLocIsSet = true;
}
bool PolicyAssociationRequest::userLocIsSet() const { return m_UserLocIsSet; }
void PolicyAssociationRequest::unsetUserLoc() { m_UserLocIsSet = false; }
std::string PolicyAssociationRequest::getTimeZone() const { return m_TimeZone; }
void PolicyAssociationRequest::setTimeZone(std::string const &value) {
  m_TimeZone = value;
  m_TimeZoneIsSet = true;
}
bool PolicyAssociationRequest::timeZoneIsSet() const { return m_TimeZoneIsSet; }
void PolicyAssociationRequest::unsetTimeZone() { m_TimeZoneIsSet = false; }
PlmnIdNid PolicyAssociationRequest::getServingPlmn() const {
  return m_ServingPlmn;
}
void PolicyAssociationRequest::setServingPlmn(PlmnIdNid const &value) {
  m_ServingPlmn = value;
  m_ServingPlmnIsSet = true;
}
bool PolicyAssociationRequest::servingPlmnIsSet() const {
  return m_ServingPlmnIsSet;
}
void PolicyAssociationRequest::unsetServingPlmn() {
  m_ServingPlmnIsSet = false;
}
RatType PolicyAssociationRequest::getRatType() const { return m_RatType; }
void PolicyAssociationRequest::setRatType(RatType const &value) {
  m_RatType = value;
  m_RatTypeIsSet = true;
}
bool PolicyAssociationRequest::ratTypeIsSet() const { return m_RatTypeIsSet; }
void PolicyAssociationRequest::unsetRatType() { m_RatTypeIsSet = false; }
std::vector<std::string> &PolicyAssociationRequest::getGroupIds() {
  return m_GroupIds;
}
void PolicyAssociationRequest::setGroupIds(
    std::vector<std::string> const &value) {
  m_GroupIds = value;
  m_GroupIdsIsSet = true;
}
bool PolicyAssociationRequest::groupIdsIsSet() const { return m_GroupIdsIsSet; }
void PolicyAssociationRequest::unsetGroupIds() { m_GroupIdsIsSet = false; }
std::string PolicyAssociationRequest::getHPcfId() const { return m_HPcfId; }
void PolicyAssociationRequest::setHPcfId(std::string const &value) {
  m_HPcfId = value;
  m_HPcfIdIsSet = true;
}
bool PolicyAssociationRequest::hPcfIdIsSet() const { return m_HPcfIdIsSet; }
void PolicyAssociationRequest::unsetHPcfId() { m_HPcfIdIsSet = false; }
std::string PolicyAssociationRequest::getUePolReq() const { return m_UePolReq; }
void PolicyAssociationRequest::setUePolReq(std::string const &value) {
  m_UePolReq = value;
  m_UePolReqIsSet = true;
}
bool PolicyAssociationRequest::uePolReqIsSet() const { return m_UePolReqIsSet; }
void PolicyAssociationRequest::unsetUePolReq() { m_UePolReqIsSet = false; }
Guami PolicyAssociationRequest::getGuami() const { return m_Guami; }
void PolicyAssociationRequest::setGuami(Guami const &value) {
  m_Guami = value;
  m_GuamiIsSet = true;
}
bool PolicyAssociationRequest::guamiIsSet() const { return m_GuamiIsSet; }
void PolicyAssociationRequest::unsetGuami() { m_GuamiIsSet = false; }
ServiceName PolicyAssociationRequest::getServiceName() const {
  return m_ServiceName;
}
void PolicyAssociationRequest::setServiceName(ServiceName const &value) {
  m_ServiceName = value;
  m_ServiceNameIsSet = true;
}
bool PolicyAssociationRequest::serviceNameIsSet() const {
  return m_ServiceNameIsSet;
}
void PolicyAssociationRequest::unsetServiceName() {
  m_ServiceNameIsSet = false;
}
std::string PolicyAssociationRequest::getServingNfId() const {
  return m_ServingNfId;
}
void PolicyAssociationRequest::setServingNfId(std::string const &value) {
  m_ServingNfId = value;
  m_ServingNfIdIsSet = true;
}
bool PolicyAssociationRequest::servingNfIdIsSet() const {
  return m_ServingNfIdIsSet;
}
void PolicyAssociationRequest::unsetServingNfId() {
  m_ServingNfIdIsSet = false;
}
Pc5Capability PolicyAssociationRequest::getPc5Capab() const {
  return m_Pc5Capab;
}
void PolicyAssociationRequest::setPc5Capab(Pc5Capability const &value) {
  m_Pc5Capab = value;
  m_Pc5CapabIsSet = true;
}
bool PolicyAssociationRequest::pc5CapabIsSet() const { return m_Pc5CapabIsSet; }
void PolicyAssociationRequest::unsetPc5Capab() { m_Pc5CapabIsSet = false; }
std::vector<ProSeCapability> &PolicyAssociationRequest::getProSeCapab() {
  return m_ProSeCapab;
}
void PolicyAssociationRequest::setProSeCapab(
    std::vector<ProSeCapability> const &value) {
  m_ProSeCapab = value;
  m_ProSeCapabIsSet = true;
}
bool PolicyAssociationRequest::proSeCapabIsSet() const {
  return m_ProSeCapabIsSet;
}
void PolicyAssociationRequest::unsetProSeCapab() { m_ProSeCapabIsSet = false; }
std::string PolicyAssociationRequest::getSuppFeat() const { return m_SuppFeat; }
void PolicyAssociationRequest::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
