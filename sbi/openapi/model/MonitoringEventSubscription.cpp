/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MonitoringEventSubscription.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

MonitoringEventSubscription::MonitoringEventSubscription() {
  m_Self = "";
  m_SelfIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_MtcProviderId = "";
  m_MtcProviderIdIsSet = false;
  m_ExternalId = "";
  m_ExternalIdIsSet = false;
  m_Msisdn = "";
  m_MsisdnIsSet = false;
  m_ExternalGroupId = "";
  m_ExternalGroupIdIsSet = false;
  m_AddExtGroupIdIsSet = false;
  m_Ipv4Addr = "";
  m_Ipv4AddrIsSet = false;
  m_Ipv6Addr = "";
  m_Ipv6AddrIsSet = false;
  m_NotificationDestination = "";
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
  m_MaximumNumberOfReports = 0;
  m_MaximumNumberOfReportsIsSet = false;
  m_MonitorExpireTime = "";
  m_MonitorExpireTimeIsSet = false;
  m_RepPeriod = 0;
  m_RepPeriodIsSet = false;
  m_GroupReportGuardTime = 0;
  m_GroupReportGuardTimeIsSet = false;
  m_MaximumDetectionTime = 0;
  m_MaximumDetectionTimeIsSet = false;
  m_ReachabilityTypeIsSet = false;
  m_MaximumLatency = 0;
  m_MaximumLatencyIsSet = false;
  m_MaximumResponseTime = 0;
  m_MaximumResponseTimeIsSet = false;
  m_SuggestedNumberOfDlPackets = 0;
  m_SuggestedNumberOfDlPacketsIsSet = false;
  m_IdleStatusIndication = false;
  m_IdleStatusIndicationIsSet = false;
  m_LocationTypeIsSet = false;
  m_AccuracyIsSet = false;
  m_MinimumReportInterval = 0;
  m_MinimumReportIntervalIsSet = false;
  m_MaxRptExpireIntvl = 0;
  m_MaxRptExpireIntvlIsSet = false;
  m_SamplingInterval = 0;
  m_SamplingIntervalIsSet = false;
  m_ReportingLocEstInd = false;
  m_ReportingLocEstIndIsSet = false;
  m_LinearDistance = 0;
  m_LinearDistanceIsSet = false;
  m_LocQoSIsSet = false;
  m_SvcId = "";
  m_SvcIdIsSet = false;
  m_LdrTypeIsSet = false;
  m_VelocityRequestedIsSet = false;
  m_MaxAgeOfLocEst = 0;
  m_MaxAgeOfLocEstIsSet = false;
  m_LocTimeWindowIsSet = false;
  m_SupportedGADShapesIsSet = false;
  m_CodeWord = "";
  m_CodeWordIsSet = false;
  m_AssociationTypeIsSet = false;
  m_PlmnIndication = false;
  m_PlmnIndicationIsSet = false;
  m_LocationAreaIsSet = false;
  m_LocationArea5GIsSet = false;
  m_DddTraDescriptorsIsSet = false;
  m_DddStatiIsSet = false;
  m_ApiNamesIsSet = false;
  m_MonitoringEventReportIsSet = false;
  m_SnssaiIsSet = false;
  m_TgtNsThresholdIsSet = false;
}

MonitoringEventSubscription::~MonitoringEventSubscription() {}

void MonitoringEventSubscription::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const MonitoringEventSubscription &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.mtcProviderIdIsSet())
    j["mtcProviderId"] = o.m_MtcProviderId;
  if (o.externalIdIsSet())
    j["externalId"] = o.m_ExternalId;
  if (o.msisdnIsSet())
    j["msisdn"] = o.m_Msisdn;
  if (o.externalGroupIdIsSet())
    j["externalGroupId"] = o.m_ExternalGroupId;
  if (o.addExtGroupIdIsSet() || !o.m_AddExtGroupId.empty())
    j["addExtGroupId"] = o.m_AddExtGroupId;
  if (o.ipv4AddrIsSet())
    j["ipv4Addr"] = o.m_Ipv4Addr;
  if (o.ipv6AddrIsSet())
    j["ipv6Addr"] = o.m_Ipv6Addr;
  j["notificationDestination"] = o.m_NotificationDestination;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  j["monitoringType"] = o.m_MonitoringType;
  if (o.maximumNumberOfReportsIsSet())
    j["maximumNumberOfReports"] = o.m_MaximumNumberOfReports;
  if (o.monitorExpireTimeIsSet())
    j["monitorExpireTime"] = o.m_MonitorExpireTime;
  if (o.repPeriodIsSet())
    j["repPeriod"] = o.m_RepPeriod;
  if (o.groupReportGuardTimeIsSet())
    j["groupReportGuardTime"] = o.m_GroupReportGuardTime;
  if (o.maximumDetectionTimeIsSet())
    j["maximumDetectionTime"] = o.m_MaximumDetectionTime;
  if (o.reachabilityTypeIsSet())
    j["reachabilityType"] = o.m_ReachabilityType;
  if (o.maximumLatencyIsSet())
    j["maximumLatency"] = o.m_MaximumLatency;
  if (o.maximumResponseTimeIsSet())
    j["maximumResponseTime"] = o.m_MaximumResponseTime;
  if (o.suggestedNumberOfDlPacketsIsSet())
    j["suggestedNumberOfDlPackets"] = o.m_SuggestedNumberOfDlPackets;
  if (o.idleStatusIndicationIsSet())
    j["idleStatusIndication"] = o.m_IdleStatusIndication;
  if (o.locationTypeIsSet())
    j["locationType"] = o.m_LocationType;
  if (o.accuracyIsSet())
    j["accuracy"] = o.m_Accuracy;
  if (o.minimumReportIntervalIsSet())
    j["minimumReportInterval"] = o.m_MinimumReportInterval;
  if (o.maxRptExpireIntvlIsSet())
    j["maxRptExpireIntvl"] = o.m_MaxRptExpireIntvl;
  if (o.samplingIntervalIsSet())
    j["samplingInterval"] = o.m_SamplingInterval;
  if (o.reportingLocEstIndIsSet())
    j["reportingLocEstInd"] = o.m_ReportingLocEstInd;
  if (o.linearDistanceIsSet())
    j["linearDistance"] = o.m_LinearDistance;
  if (o.locQoSIsSet())
    j["locQoS"] = o.m_LocQoS;
  if (o.svcIdIsSet())
    j["svcId"] = o.m_SvcId;
  if (o.ldrTypeIsSet())
    j["ldrType"] = o.m_LdrType;
  if (o.velocityRequestedIsSet())
    j["velocityRequested"] = o.m_VelocityRequested;
  if (o.maxAgeOfLocEstIsSet())
    j["maxAgeOfLocEst"] = o.m_MaxAgeOfLocEst;
  if (o.locTimeWindowIsSet())
    j["locTimeWindow"] = o.m_LocTimeWindow;
  if (o.supportedGADShapesIsSet() || !o.m_SupportedGADShapes.empty())
    j["supportedGADShapes"] = o.m_SupportedGADShapes;
  if (o.codeWordIsSet())
    j["codeWord"] = o.m_CodeWord;
  if (o.associationTypeIsSet())
    j["associationType"] = o.m_AssociationType;
  if (o.plmnIndicationIsSet())
    j["plmnIndication"] = o.m_PlmnIndication;
  if (o.locationAreaIsSet())
    j["locationArea"] = o.m_LocationArea;
  if (o.locationArea5GIsSet())
    j["locationArea5G"] = o.m_LocationArea5G;
  if (o.dddTraDescriptorsIsSet() || !o.m_DddTraDescriptors.empty())
    j["dddTraDescriptors"] = o.m_DddTraDescriptors;
  if (o.dddStatiIsSet() || !o.m_DddStati.empty())
    j["dddStati"] = o.m_DddStati;
  if (o.apiNamesIsSet() || !o.m_ApiNames.empty())
    j["apiNames"] = o.m_ApiNames;
  if (o.monitoringEventReportIsSet())
    j["monitoringEventReport"] = o.m_MonitoringEventReport;
  if (o.snssaiIsSet())
    j["snssai"] = o.m_Snssai;
  if (o.tgtNsThresholdIsSet())
    j["tgtNsThreshold"] = o.m_TgtNsThreshold;
}

void from_json(const nlohmann::json &j, MonitoringEventSubscription &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("mtcProviderId") != j.end()) {
    j.at("mtcProviderId").get_to(o.m_MtcProviderId);
    o.m_MtcProviderIdIsSet = true;
  }
  if (j.find("externalId") != j.end()) {
    j.at("externalId").get_to(o.m_ExternalId);
    o.m_ExternalIdIsSet = true;
  }
  if (j.find("msisdn") != j.end()) {
    j.at("msisdn").get_to(o.m_Msisdn);
    o.m_MsisdnIsSet = true;
  }
  if (j.find("externalGroupId") != j.end()) {
    j.at("externalGroupId").get_to(o.m_ExternalGroupId);
    o.m_ExternalGroupIdIsSet = true;
  }
  if (j.find("addExtGroupId") != j.end()) {
    j.at("addExtGroupId").get_to(o.m_AddExtGroupId);
    o.m_AddExtGroupIdIsSet = true;
  }
  if (j.find("ipv4Addr") != j.end()) {
    j.at("ipv4Addr").get_to(o.m_Ipv4Addr);
    o.m_Ipv4AddrIsSet = true;
  }
  if (j.find("ipv6Addr") != j.end()) {
    j.at("ipv6Addr").get_to(o.m_Ipv6Addr);
    o.m_Ipv6AddrIsSet = true;
  }
  j.at("notificationDestination").get_to(o.m_NotificationDestination);
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  j.at("monitoringType").get_to(o.m_MonitoringType);
  if (j.find("maximumNumberOfReports") != j.end()) {
    j.at("maximumNumberOfReports").get_to(o.m_MaximumNumberOfReports);
    o.m_MaximumNumberOfReportsIsSet = true;
  }
  if (j.find("monitorExpireTime") != j.end()) {
    j.at("monitorExpireTime").get_to(o.m_MonitorExpireTime);
    o.m_MonitorExpireTimeIsSet = true;
  }
  if (j.find("repPeriod") != j.end()) {
    j.at("repPeriod").get_to(o.m_RepPeriod);
    o.m_RepPeriodIsSet = true;
  }
  if (j.find("groupReportGuardTime") != j.end()) {
    j.at("groupReportGuardTime").get_to(o.m_GroupReportGuardTime);
    o.m_GroupReportGuardTimeIsSet = true;
  }
  if (j.find("maximumDetectionTime") != j.end()) {
    j.at("maximumDetectionTime").get_to(o.m_MaximumDetectionTime);
    o.m_MaximumDetectionTimeIsSet = true;
  }
  if (j.find("reachabilityType") != j.end()) {
    j.at("reachabilityType").get_to(o.m_ReachabilityType);
    o.m_ReachabilityTypeIsSet = true;
  }
  if (j.find("maximumLatency") != j.end()) {
    j.at("maximumLatency").get_to(o.m_MaximumLatency);
    o.m_MaximumLatencyIsSet = true;
  }
  if (j.find("maximumResponseTime") != j.end()) {
    j.at("maximumResponseTime").get_to(o.m_MaximumResponseTime);
    o.m_MaximumResponseTimeIsSet = true;
  }
  if (j.find("suggestedNumberOfDlPackets") != j.end()) {
    j.at("suggestedNumberOfDlPackets").get_to(o.m_SuggestedNumberOfDlPackets);
    o.m_SuggestedNumberOfDlPacketsIsSet = true;
  }
  if (j.find("idleStatusIndication") != j.end()) {
    j.at("idleStatusIndication").get_to(o.m_IdleStatusIndication);
    o.m_IdleStatusIndicationIsSet = true;
  }
  if (j.find("locationType") != j.end()) {
    j.at("locationType").get_to(o.m_LocationType);
    o.m_LocationTypeIsSet = true;
  }
  if (j.find("accuracy") != j.end()) {
    j.at("accuracy").get_to(o.m_Accuracy);
    o.m_AccuracyIsSet = true;
  }
  if (j.find("minimumReportInterval") != j.end()) {
    j.at("minimumReportInterval").get_to(o.m_MinimumReportInterval);
    o.m_MinimumReportIntervalIsSet = true;
  }
  if (j.find("maxRptExpireIntvl") != j.end()) {
    j.at("maxRptExpireIntvl").get_to(o.m_MaxRptExpireIntvl);
    o.m_MaxRptExpireIntvlIsSet = true;
  }
  if (j.find("samplingInterval") != j.end()) {
    j.at("samplingInterval").get_to(o.m_SamplingInterval);
    o.m_SamplingIntervalIsSet = true;
  }
  if (j.find("reportingLocEstInd") != j.end()) {
    j.at("reportingLocEstInd").get_to(o.m_ReportingLocEstInd);
    o.m_ReportingLocEstIndIsSet = true;
  }
  if (j.find("linearDistance") != j.end()) {
    j.at("linearDistance").get_to(o.m_LinearDistance);
    o.m_LinearDistanceIsSet = true;
  }
  if (j.find("locQoS") != j.end()) {
    j.at("locQoS").get_to(o.m_LocQoS);
    o.m_LocQoSIsSet = true;
  }
  if (j.find("svcId") != j.end()) {
    j.at("svcId").get_to(o.m_SvcId);
    o.m_SvcIdIsSet = true;
  }
  if (j.find("ldrType") != j.end()) {
    j.at("ldrType").get_to(o.m_LdrType);
    o.m_LdrTypeIsSet = true;
  }
  if (j.find("velocityRequested") != j.end()) {
    j.at("velocityRequested").get_to(o.m_VelocityRequested);
    o.m_VelocityRequestedIsSet = true;
  }
  if (j.find("maxAgeOfLocEst") != j.end()) {
    j.at("maxAgeOfLocEst").get_to(o.m_MaxAgeOfLocEst);
    o.m_MaxAgeOfLocEstIsSet = true;
  }
  if (j.find("locTimeWindow") != j.end()) {
    j.at("locTimeWindow").get_to(o.m_LocTimeWindow);
    o.m_LocTimeWindowIsSet = true;
  }
  if (j.find("supportedGADShapes") != j.end()) {
    j.at("supportedGADShapes").get_to(o.m_SupportedGADShapes);
    o.m_SupportedGADShapesIsSet = true;
  }
  if (j.find("codeWord") != j.end()) {
    j.at("codeWord").get_to(o.m_CodeWord);
    o.m_CodeWordIsSet = true;
  }
  if (j.find("associationType") != j.end()) {
    j.at("associationType").get_to(o.m_AssociationType);
    o.m_AssociationTypeIsSet = true;
  }
  if (j.find("plmnIndication") != j.end()) {
    j.at("plmnIndication").get_to(o.m_PlmnIndication);
    o.m_PlmnIndicationIsSet = true;
  }
  if (j.find("locationArea") != j.end()) {
    j.at("locationArea").get_to(o.m_LocationArea);
    o.m_LocationAreaIsSet = true;
  }
  if (j.find("locationArea5G") != j.end()) {
    j.at("locationArea5G").get_to(o.m_LocationArea5G);
    o.m_LocationArea5GIsSet = true;
  }
  if (j.find("dddTraDescriptors") != j.end()) {
    j.at("dddTraDescriptors").get_to(o.m_DddTraDescriptors);
    o.m_DddTraDescriptorsIsSet = true;
  }
  if (j.find("dddStati") != j.end()) {
    j.at("dddStati").get_to(o.m_DddStati);
    o.m_DddStatiIsSet = true;
  }
  if (j.find("apiNames") != j.end()) {
    j.at("apiNames").get_to(o.m_ApiNames);
    o.m_ApiNamesIsSet = true;
  }
  if (j.find("monitoringEventReport") != j.end()) {
    j.at("monitoringEventReport").get_to(o.m_MonitoringEventReport);
    o.m_MonitoringEventReportIsSet = true;
  }
  if (j.find("snssai") != j.end()) {
    j.at("snssai").get_to(o.m_Snssai);
    o.m_SnssaiIsSet = true;
  }
  if (j.find("tgtNsThreshold") != j.end()) {
    j.at("tgtNsThreshold").get_to(o.m_TgtNsThreshold);
    o.m_TgtNsThresholdIsSet = true;
  }
}

std::string MonitoringEventSubscription::getSelf() const { return m_Self; }
void MonitoringEventSubscription::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool MonitoringEventSubscription::selfIsSet() const { return m_SelfIsSet; }
void MonitoringEventSubscription::unsetSelf() { m_SelfIsSet = false; }
std::string MonitoringEventSubscription::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void MonitoringEventSubscription::setSupportedFeatures(
    std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool MonitoringEventSubscription::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void MonitoringEventSubscription::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::string MonitoringEventSubscription::getMtcProviderId() const {
  return m_MtcProviderId;
}
void MonitoringEventSubscription::setMtcProviderId(std::string const &value) {
  m_MtcProviderId = value;
  m_MtcProviderIdIsSet = true;
}
bool MonitoringEventSubscription::mtcProviderIdIsSet() const {
  return m_MtcProviderIdIsSet;
}
void MonitoringEventSubscription::unsetMtcProviderId() {
  m_MtcProviderIdIsSet = false;
}
std::string MonitoringEventSubscription::getExternalId() const {
  return m_ExternalId;
}
void MonitoringEventSubscription::setExternalId(std::string const &value) {
  m_ExternalId = value;
  m_ExternalIdIsSet = true;
}
bool MonitoringEventSubscription::externalIdIsSet() const {
  return m_ExternalIdIsSet;
}
void MonitoringEventSubscription::unsetExternalId() {
  m_ExternalIdIsSet = false;
}
std::string MonitoringEventSubscription::getMsisdn() const { return m_Msisdn; }
void MonitoringEventSubscription::setMsisdn(std::string const &value) {
  m_Msisdn = value;
  m_MsisdnIsSet = true;
}
bool MonitoringEventSubscription::msisdnIsSet() const { return m_MsisdnIsSet; }
void MonitoringEventSubscription::unsetMsisdn() { m_MsisdnIsSet = false; }
std::string MonitoringEventSubscription::getExternalGroupId() const {
  return m_ExternalGroupId;
}
void MonitoringEventSubscription::setExternalGroupId(std::string const &value) {
  m_ExternalGroupId = value;
  m_ExternalGroupIdIsSet = true;
}
bool MonitoringEventSubscription::externalGroupIdIsSet() const {
  return m_ExternalGroupIdIsSet;
}
void MonitoringEventSubscription::unsetExternalGroupId() {
  m_ExternalGroupIdIsSet = false;
}
std::vector<std::string> &MonitoringEventSubscription::getAddExtGroupId() {
  return m_AddExtGroupId;
}
void MonitoringEventSubscription::setAddExtGroupId(
    std::vector<std::string> const &value) {
  m_AddExtGroupId = value;
  m_AddExtGroupIdIsSet = true;
}
bool MonitoringEventSubscription::addExtGroupIdIsSet() const {
  return m_AddExtGroupIdIsSet;
}
void MonitoringEventSubscription::unsetAddExtGroupId() {
  m_AddExtGroupIdIsSet = false;
}
std::string MonitoringEventSubscription::getIpv4Addr() const {
  return m_Ipv4Addr;
}
void MonitoringEventSubscription::setIpv4Addr(std::string const &value) {
  m_Ipv4Addr = value;
  m_Ipv4AddrIsSet = true;
}
bool MonitoringEventSubscription::ipv4AddrIsSet() const {
  return m_Ipv4AddrIsSet;
}
void MonitoringEventSubscription::unsetIpv4Addr() { m_Ipv4AddrIsSet = false; }
std::string MonitoringEventSubscription::getIpv6Addr() const {
  return m_Ipv6Addr;
}
void MonitoringEventSubscription::setIpv6Addr(std::string const &value) {
  m_Ipv6Addr = value;
  m_Ipv6AddrIsSet = true;
}
bool MonitoringEventSubscription::ipv6AddrIsSet() const {
  return m_Ipv6AddrIsSet;
}
void MonitoringEventSubscription::unsetIpv6Addr() { m_Ipv6AddrIsSet = false; }
std::string MonitoringEventSubscription::getNotificationDestination() const {
  return m_NotificationDestination;
}
void MonitoringEventSubscription::setNotificationDestination(
    std::string const &value) {
  m_NotificationDestination = value;
}
bool MonitoringEventSubscription::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void MonitoringEventSubscription::setRequestTestNotification(bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool MonitoringEventSubscription::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void MonitoringEventSubscription::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig MonitoringEventSubscription::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void MonitoringEventSubscription::setWebsockNotifConfig(
    WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool MonitoringEventSubscription::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void MonitoringEventSubscription::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
MonitoringType MonitoringEventSubscription::getMonitoringType() const {
  return m_MonitoringType;
}
void MonitoringEventSubscription::setMonitoringType(
    MonitoringType const &value) {
  m_MonitoringType = value;
}
int32_t MonitoringEventSubscription::getMaximumNumberOfReports() const {
  return m_MaximumNumberOfReports;
}
void MonitoringEventSubscription::setMaximumNumberOfReports(
    int32_t const value) {
  m_MaximumNumberOfReports = value;
  m_MaximumNumberOfReportsIsSet = true;
}
bool MonitoringEventSubscription::maximumNumberOfReportsIsSet() const {
  return m_MaximumNumberOfReportsIsSet;
}
void MonitoringEventSubscription::unsetMaximumNumberOfReports() {
  m_MaximumNumberOfReportsIsSet = false;
}
std::string MonitoringEventSubscription::getMonitorExpireTime() const {
  return m_MonitorExpireTime;
}
void MonitoringEventSubscription::setMonitorExpireTime(
    std::string const &value) {
  m_MonitorExpireTime = value;
  m_MonitorExpireTimeIsSet = true;
}
bool MonitoringEventSubscription::monitorExpireTimeIsSet() const {
  return m_MonitorExpireTimeIsSet;
}
void MonitoringEventSubscription::unsetMonitorExpireTime() {
  m_MonitorExpireTimeIsSet = false;
}
int32_t MonitoringEventSubscription::getRepPeriod() const {
  return m_RepPeriod;
}
void MonitoringEventSubscription::setRepPeriod(int32_t const value) {
  m_RepPeriod = value;
  m_RepPeriodIsSet = true;
}
bool MonitoringEventSubscription::repPeriodIsSet() const {
  return m_RepPeriodIsSet;
}
void MonitoringEventSubscription::unsetRepPeriod() { m_RepPeriodIsSet = false; }
int32_t MonitoringEventSubscription::getGroupReportGuardTime() const {
  return m_GroupReportGuardTime;
}
void MonitoringEventSubscription::setGroupReportGuardTime(int32_t const value) {
  m_GroupReportGuardTime = value;
  m_GroupReportGuardTimeIsSet = true;
}
bool MonitoringEventSubscription::groupReportGuardTimeIsSet() const {
  return m_GroupReportGuardTimeIsSet;
}
void MonitoringEventSubscription::unsetGroupReportGuardTime() {
  m_GroupReportGuardTimeIsSet = false;
}
int32_t MonitoringEventSubscription::getMaximumDetectionTime() const {
  return m_MaximumDetectionTime;
}
void MonitoringEventSubscription::setMaximumDetectionTime(int32_t const value) {
  m_MaximumDetectionTime = value;
  m_MaximumDetectionTimeIsSet = true;
}
bool MonitoringEventSubscription::maximumDetectionTimeIsSet() const {
  return m_MaximumDetectionTimeIsSet;
}
void MonitoringEventSubscription::unsetMaximumDetectionTime() {
  m_MaximumDetectionTimeIsSet = false;
}
ReachabilityType MonitoringEventSubscription::getReachabilityType() const {
  return m_ReachabilityType;
}
void MonitoringEventSubscription::setReachabilityType(
    ReachabilityType const &value) {
  m_ReachabilityType = value;
  m_ReachabilityTypeIsSet = true;
}
bool MonitoringEventSubscription::reachabilityTypeIsSet() const {
  return m_ReachabilityTypeIsSet;
}
void MonitoringEventSubscription::unsetReachabilityType() {
  m_ReachabilityTypeIsSet = false;
}
int32_t MonitoringEventSubscription::getMaximumLatency() const {
  return m_MaximumLatency;
}
void MonitoringEventSubscription::setMaximumLatency(int32_t const value) {
  m_MaximumLatency = value;
  m_MaximumLatencyIsSet = true;
}
bool MonitoringEventSubscription::maximumLatencyIsSet() const {
  return m_MaximumLatencyIsSet;
}
void MonitoringEventSubscription::unsetMaximumLatency() {
  m_MaximumLatencyIsSet = false;
}
int32_t MonitoringEventSubscription::getMaximumResponseTime() const {
  return m_MaximumResponseTime;
}
void MonitoringEventSubscription::setMaximumResponseTime(int32_t const value) {
  m_MaximumResponseTime = value;
  m_MaximumResponseTimeIsSet = true;
}
bool MonitoringEventSubscription::maximumResponseTimeIsSet() const {
  return m_MaximumResponseTimeIsSet;
}
void MonitoringEventSubscription::unsetMaximumResponseTime() {
  m_MaximumResponseTimeIsSet = false;
}
int32_t MonitoringEventSubscription::getSuggestedNumberOfDlPackets() const {
  return m_SuggestedNumberOfDlPackets;
}
void MonitoringEventSubscription::setSuggestedNumberOfDlPackets(
    int32_t const value) {
  m_SuggestedNumberOfDlPackets = value;
  m_SuggestedNumberOfDlPacketsIsSet = true;
}
bool MonitoringEventSubscription::suggestedNumberOfDlPacketsIsSet() const {
  return m_SuggestedNumberOfDlPacketsIsSet;
}
void MonitoringEventSubscription::unsetSuggestedNumberOfDlPackets() {
  m_SuggestedNumberOfDlPacketsIsSet = false;
}
bool MonitoringEventSubscription::isIdleStatusIndication() const {
  return m_IdleStatusIndication;
}
void MonitoringEventSubscription::setIdleStatusIndication(bool const value) {
  m_IdleStatusIndication = value;
  m_IdleStatusIndicationIsSet = true;
}
bool MonitoringEventSubscription::idleStatusIndicationIsSet() const {
  return m_IdleStatusIndicationIsSet;
}
void MonitoringEventSubscription::unsetIdleStatusIndication() {
  m_IdleStatusIndicationIsSet = false;
}
LocationType MonitoringEventSubscription::getLocationType() const {
  return m_LocationType;
}
void MonitoringEventSubscription::setLocationType(LocationType const &value) {
  m_LocationType = value;
  m_LocationTypeIsSet = true;
}
bool MonitoringEventSubscription::locationTypeIsSet() const {
  return m_LocationTypeIsSet;
}
void MonitoringEventSubscription::unsetLocationType() {
  m_LocationTypeIsSet = false;
}
Accuracy MonitoringEventSubscription::getAccuracy() const { return m_Accuracy; }
void MonitoringEventSubscription::setAccuracy(Accuracy const &value) {
  m_Accuracy = value;
  m_AccuracyIsSet = true;
}
bool MonitoringEventSubscription::accuracyIsSet() const {
  return m_AccuracyIsSet;
}
void MonitoringEventSubscription::unsetAccuracy() { m_AccuracyIsSet = false; }
int32_t MonitoringEventSubscription::getMinimumReportInterval() const {
  return m_MinimumReportInterval;
}
void MonitoringEventSubscription::setMinimumReportInterval(
    int32_t const value) {
  m_MinimumReportInterval = value;
  m_MinimumReportIntervalIsSet = true;
}
bool MonitoringEventSubscription::minimumReportIntervalIsSet() const {
  return m_MinimumReportIntervalIsSet;
}
void MonitoringEventSubscription::unsetMinimumReportInterval() {
  m_MinimumReportIntervalIsSet = false;
}
int32_t MonitoringEventSubscription::getMaxRptExpireIntvl() const {
  return m_MaxRptExpireIntvl;
}
void MonitoringEventSubscription::setMaxRptExpireIntvl(int32_t const value) {
  m_MaxRptExpireIntvl = value;
  m_MaxRptExpireIntvlIsSet = true;
}
bool MonitoringEventSubscription::maxRptExpireIntvlIsSet() const {
  return m_MaxRptExpireIntvlIsSet;
}
void MonitoringEventSubscription::unsetMaxRptExpireIntvl() {
  m_MaxRptExpireIntvlIsSet = false;
}
int32_t MonitoringEventSubscription::getSamplingInterval() const {
  return m_SamplingInterval;
}
void MonitoringEventSubscription::setSamplingInterval(int32_t const value) {
  m_SamplingInterval = value;
  m_SamplingIntervalIsSet = true;
}
bool MonitoringEventSubscription::samplingIntervalIsSet() const {
  return m_SamplingIntervalIsSet;
}
void MonitoringEventSubscription::unsetSamplingInterval() {
  m_SamplingIntervalIsSet = false;
}
bool MonitoringEventSubscription::isReportingLocEstInd() const {
  return m_ReportingLocEstInd;
}
void MonitoringEventSubscription::setReportingLocEstInd(bool const value) {
  m_ReportingLocEstInd = value;
  m_ReportingLocEstIndIsSet = true;
}
bool MonitoringEventSubscription::reportingLocEstIndIsSet() const {
  return m_ReportingLocEstIndIsSet;
}
void MonitoringEventSubscription::unsetReportingLocEstInd() {
  m_ReportingLocEstIndIsSet = false;
}
int32_t MonitoringEventSubscription::getLinearDistance() const {
  return m_LinearDistance;
}
void MonitoringEventSubscription::setLinearDistance(int32_t const value) {
  m_LinearDistance = value;
  m_LinearDistanceIsSet = true;
}
bool MonitoringEventSubscription::linearDistanceIsSet() const {
  return m_LinearDistanceIsSet;
}
void MonitoringEventSubscription::unsetLinearDistance() {
  m_LinearDistanceIsSet = false;
}
LocationQoS MonitoringEventSubscription::getLocQoS() const { return m_LocQoS; }
void MonitoringEventSubscription::setLocQoS(LocationQoS const &value) {
  m_LocQoS = value;
  m_LocQoSIsSet = true;
}
bool MonitoringEventSubscription::locQoSIsSet() const { return m_LocQoSIsSet; }
void MonitoringEventSubscription::unsetLocQoS() { m_LocQoSIsSet = false; }
std::string MonitoringEventSubscription::getSvcId() const { return m_SvcId; }
void MonitoringEventSubscription::setSvcId(std::string const &value) {
  m_SvcId = value;
  m_SvcIdIsSet = true;
}
bool MonitoringEventSubscription::svcIdIsSet() const { return m_SvcIdIsSet; }
void MonitoringEventSubscription::unsetSvcId() { m_SvcIdIsSet = false; }
LdrType MonitoringEventSubscription::getLdrType() const { return m_LdrType; }
void MonitoringEventSubscription::setLdrType(LdrType const &value) {
  m_LdrType = value;
  m_LdrTypeIsSet = true;
}
bool MonitoringEventSubscription::ldrTypeIsSet() const {
  return m_LdrTypeIsSet;
}
void MonitoringEventSubscription::unsetLdrType() { m_LdrTypeIsSet = false; }
VelocityRequested MonitoringEventSubscription::getVelocityRequested() const {
  return m_VelocityRequested;
}
void MonitoringEventSubscription::setVelocityRequested(
    VelocityRequested const &value) {
  m_VelocityRequested = value;
  m_VelocityRequestedIsSet = true;
}
bool MonitoringEventSubscription::velocityRequestedIsSet() const {
  return m_VelocityRequestedIsSet;
}
void MonitoringEventSubscription::unsetVelocityRequested() {
  m_VelocityRequestedIsSet = false;
}
int32_t MonitoringEventSubscription::getMaxAgeOfLocEst() const {
  return m_MaxAgeOfLocEst;
}
void MonitoringEventSubscription::setMaxAgeOfLocEst(int32_t const value) {
  m_MaxAgeOfLocEst = value;
  m_MaxAgeOfLocEstIsSet = true;
}
bool MonitoringEventSubscription::maxAgeOfLocEstIsSet() const {
  return m_MaxAgeOfLocEstIsSet;
}
void MonitoringEventSubscription::unsetMaxAgeOfLocEst() {
  m_MaxAgeOfLocEstIsSet = false;
}
TimeWindow MonitoringEventSubscription::getLocTimeWindow() const {
  return m_LocTimeWindow;
}
void MonitoringEventSubscription::setLocTimeWindow(TimeWindow const &value) {
  m_LocTimeWindow = value;
  m_LocTimeWindowIsSet = true;
}
bool MonitoringEventSubscription::locTimeWindowIsSet() const {
  return m_LocTimeWindowIsSet;
}
void MonitoringEventSubscription::unsetLocTimeWindow() {
  m_LocTimeWindowIsSet = false;
}
std::vector<SupportedGADShapes> &
MonitoringEventSubscription::getSupportedGADShapes() {
  return m_SupportedGADShapes;
}
void MonitoringEventSubscription::setSupportedGADShapes(
    std::vector<SupportedGADShapes> const &value) {
  m_SupportedGADShapes = value;
  m_SupportedGADShapesIsSet = true;
}
bool MonitoringEventSubscription::supportedGADShapesIsSet() const {
  return m_SupportedGADShapesIsSet;
}
void MonitoringEventSubscription::unsetSupportedGADShapes() {
  m_SupportedGADShapesIsSet = false;
}
std::string MonitoringEventSubscription::getCodeWord() const {
  return m_CodeWord;
}
void MonitoringEventSubscription::setCodeWord(std::string const &value) {
  m_CodeWord = value;
  m_CodeWordIsSet = true;
}
bool MonitoringEventSubscription::codeWordIsSet() const {
  return m_CodeWordIsSet;
}
void MonitoringEventSubscription::unsetCodeWord() { m_CodeWordIsSet = false; }
AssociationType MonitoringEventSubscription::getAssociationType() const {
  return m_AssociationType;
}
void MonitoringEventSubscription::setAssociationType(
    AssociationType const &value) {
  m_AssociationType = value;
  m_AssociationTypeIsSet = true;
}
bool MonitoringEventSubscription::associationTypeIsSet() const {
  return m_AssociationTypeIsSet;
}
void MonitoringEventSubscription::unsetAssociationType() {
  m_AssociationTypeIsSet = false;
}
bool MonitoringEventSubscription::isPlmnIndication() const {
  return m_PlmnIndication;
}
void MonitoringEventSubscription::setPlmnIndication(bool const value) {
  m_PlmnIndication = value;
  m_PlmnIndicationIsSet = true;
}
bool MonitoringEventSubscription::plmnIndicationIsSet() const {
  return m_PlmnIndicationIsSet;
}
void MonitoringEventSubscription::unsetPlmnIndication() {
  m_PlmnIndicationIsSet = false;
}
LocationArea MonitoringEventSubscription::getLocationArea() const {
  return m_LocationArea;
}
void MonitoringEventSubscription::setLocationArea(LocationArea const &value) {
  m_LocationArea = value;
  m_LocationAreaIsSet = true;
}
bool MonitoringEventSubscription::locationAreaIsSet() const {
  return m_LocationAreaIsSet;
}
void MonitoringEventSubscription::unsetLocationArea() {
  m_LocationAreaIsSet = false;
}
LocationArea5G MonitoringEventSubscription::getLocationArea5G() const {
  return m_LocationArea5G;
}
void MonitoringEventSubscription::setLocationArea5G(
    LocationArea5G const &value) {
  m_LocationArea5G = value;
  m_LocationArea5GIsSet = true;
}
bool MonitoringEventSubscription::locationArea5GIsSet() const {
  return m_LocationArea5GIsSet;
}
void MonitoringEventSubscription::unsetLocationArea5G() {
  m_LocationArea5GIsSet = false;
}
std::vector<DddTrafficDescriptor> &
MonitoringEventSubscription::getDddTraDescriptors() {
  return m_DddTraDescriptors;
}
void MonitoringEventSubscription::setDddTraDescriptors(
    std::vector<DddTrafficDescriptor> const &value) {
  m_DddTraDescriptors = value;
  m_DddTraDescriptorsIsSet = true;
}
bool MonitoringEventSubscription::dddTraDescriptorsIsSet() const {
  return m_DddTraDescriptorsIsSet;
}
void MonitoringEventSubscription::unsetDddTraDescriptors() {
  m_DddTraDescriptorsIsSet = false;
}
std::vector<DlDataDeliveryStatus> &MonitoringEventSubscription::getDddStati() {
  return m_DddStati;
}
void MonitoringEventSubscription::setDddStati(
    std::vector<DlDataDeliveryStatus> const &value) {
  m_DddStati = value;
  m_DddStatiIsSet = true;
}
bool MonitoringEventSubscription::dddStatiIsSet() const {
  return m_DddStatiIsSet;
}
void MonitoringEventSubscription::unsetDddStati() { m_DddStatiIsSet = false; }
std::vector<std::string> &MonitoringEventSubscription::getApiNames() {
  return m_ApiNames;
}
void MonitoringEventSubscription::setApiNames(
    std::vector<std::string> const &value) {
  m_ApiNames = value;
  m_ApiNamesIsSet = true;
}
bool MonitoringEventSubscription::apiNamesIsSet() const {
  return m_ApiNamesIsSet;
}
void MonitoringEventSubscription::unsetApiNames() { m_ApiNamesIsSet = false; }
MonitoringEventReport
MonitoringEventSubscription::getMonitoringEventReport() const {
  return m_MonitoringEventReport;
}
void MonitoringEventSubscription::setMonitoringEventReport(
    MonitoringEventReport const &value) {
  m_MonitoringEventReport = value;
  m_MonitoringEventReportIsSet = true;
}
bool MonitoringEventSubscription::monitoringEventReportIsSet() const {
  return m_MonitoringEventReportIsSet;
}
void MonitoringEventSubscription::unsetMonitoringEventReport() {
  m_MonitoringEventReportIsSet = false;
}
Snssai MonitoringEventSubscription::getSnssai() const { return m_Snssai; }
void MonitoringEventSubscription::setSnssai(Snssai const &value) {
  m_Snssai = value;
  m_SnssaiIsSet = true;
}
bool MonitoringEventSubscription::snssaiIsSet() const { return m_SnssaiIsSet; }
void MonitoringEventSubscription::unsetSnssai() { m_SnssaiIsSet = false; }
SACInfo MonitoringEventSubscription::getTgtNsThreshold() const {
  return m_TgtNsThreshold;
}
void MonitoringEventSubscription::setTgtNsThreshold(SACInfo const &value) {
  m_TgtNsThreshold = value;
  m_TgtNsThresholdIsSet = true;
}
bool MonitoringEventSubscription::tgtNsThresholdIsSet() const {
  return m_TgtNsThresholdIsSet;
}
void MonitoringEventSubscription::unsetTgtNsThreshold() {
  m_TgtNsThresholdIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
