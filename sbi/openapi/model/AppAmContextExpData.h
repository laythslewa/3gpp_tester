/**
 * 3gpp-am-policyauthorization
 * API for AM policy authorization. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AppAmContextExpData.h
 *
 * Represents an Individual application AM context exposure resource.
 */

#ifndef AppAmContextExpData_H_
#define AppAmContextExpData_H_

#include "AmEventsSubscData.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an Individual application AM context exposure resource.
/// </summary>
class AppAmContextExpData {
public:
  AppAmContextExpData();
  virtual ~AppAmContextExpData();

  void validate();

  /////////////////////////////////////////////
  /// AppAmContextExpData members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const &value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  ///
  /// </summary>
  AmEventsSubscData getEvSubsc() const;
  void setEvSubsc(AmEventsSubscData const &value);
  bool evSubscIsSet() const;
  void unsetEvSubsc();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  /// <summary>
  /// Identifies an application.
  /// </summary>
  std::string getAfAppId() const;
  void setAfAppId(std::string const &value);
  bool afAppIdIsSet() const;
  void unsetAfAppId();

  friend void to_json(nlohmann::json &j, const AppAmContextExpData &o);
  friend void from_json(const nlohmann::json &j, AppAmContextExpData &o);

protected:
  std::string m_Self;
  bool m_SelfIsSet;
  AmEventsSubscData m_EvSubsc;
  bool m_EvSubscIsSet;
  std::string m_Gpsi;

  std::string m_AfAppId;
  bool m_AfAppIdIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AppAmContextExpData_H_ */
