/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MessageWaitingDataDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

MessageWaitingDataDocumentApi::MessageWaitingDataDocumentApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void MessageWaitingDataDocumentApi::init() { setupRoutes(); }

void MessageWaitingDataDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Put(
      *router, base + "/subscription-data/:ueId/context-data/mwd",
      Routes::bind(
          &MessageWaitingDataDocumentApi::create_message_waiting_data_handler,
          this));
  Routes::Delete(
      *router, base + "/subscription-data/:ueId/context-data/mwd",
      Routes::bind(
          &MessageWaitingDataDocumentApi::delete_message_waiting_data_handler,
          this));
  Routes::Patch(
      *router, base + "/subscription-data/:ueId/context-data/mwd",
      Routes::bind(
          &MessageWaitingDataDocumentApi::modify_message_waiting_data_handler,
          this));
  Routes::Get(
      *router, base + "/subscription-data/:ueId/context-data/mwd",
      Routes::bind(
          &MessageWaitingDataDocumentApi::query_message_waiting_data_handler,
          this));

  // Default handler, called when a route is not found
  router->addCustomHandler(
      Routes::bind(&MessageWaitingDataDocumentApi::
                       message_waiting_data_document_api_default_handler,
                   this));
}

void MessageWaitingDataDocumentApi::create_message_waiting_data_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto ueId = request.param(":ueId").as<std::string>();

  // Getting the body param

  MessageWaitingData messageWaitingData;

  try {
    nlohmann::json::parse(request.body()).get_to(messageWaitingData);
    this->create_message_waiting_data(ueId, messageWaitingData, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void MessageWaitingDataDocumentApi::delete_message_waiting_data_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto ueId = request.param(":ueId").as<std::string>();

  try {
    this->delete_message_waiting_data(ueId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void MessageWaitingDataDocumentApi::modify_message_waiting_data_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto ueId = request.param(":ueId").as<std::string>();

  // Getting the body param
  std::vector<PatchItem> patchItem;

  try {
    nlohmann::json::parse(request.body()).get_to(patchItem);
    this->modify_message_waiting_data(ueId, patchItem, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void MessageWaitingDataDocumentApi::query_message_waiting_data_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto ueId = request.param(":ueId").as<std::string>();

  // Getting the query params
  auto fieldsQuery = request.query().get("fields");
  Pistache::Optional<std::vector<std::string>> fields;
  if (!fieldsQuery.isEmpty()) {
    std::vector<std::string> valueQuery_instance;
    if (fromStringValue(fieldsQuery.get(), valueQuery_instance)) {
      fields = Pistache::Some(valueQuery_instance);
    }
  }
  auto supportedFeaturesQuery = request.query().get("supported-features");
  Pistache::Optional<std::string> supportedFeatures;
  if (!supportedFeaturesQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(supportedFeaturesQuery.get(), valueQuery_instance)) {
      supportedFeatures = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->query_message_waiting_data(ueId, fields, supportedFeatures, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void MessageWaitingDataDocumentApi::
    message_waiting_data_document_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
