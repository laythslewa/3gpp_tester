/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TrafficDescriptor.h
 *
 * Represents the Traffic Descriptor
 */

#ifndef TrafficDescriptor_H_
#define TrafficDescriptor_H_

#include "DddTrafficDescriptor.h"
#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the Traffic Descriptor
/// </summary>
class TrafficDescriptor {
public:
  TrafficDescriptor();
  virtual ~TrafficDescriptor();

  void validate();

  /////////////////////////////////////////////
  /// TrafficDescriptor members

  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  Snssai getSNssai() const;
  void setSNssai(Snssai const &value);
  bool sNssaiIsSet() const;
  void unsetSNssai();
  /// <summary>
  ///
  /// </summary>
  std::vector<DddTrafficDescriptor> &getDddTrafficDescriptorList();
  void
  setDddTrafficDescriptorList(std::vector<DddTrafficDescriptor> const &value);
  bool dddTrafficDescriptorListIsSet() const;
  void unsetDddTrafficDescriptorList();

  friend void to_json(nlohmann::json &j, const TrafficDescriptor &o);
  friend void from_json(const nlohmann::json &j, TrafficDescriptor &o);

protected:
  std::string m_Dnn;
  bool m_DnnIsSet;
  Snssai m_SNssai;
  bool m_SNssaiIsSet;
  std::vector<DddTrafficDescriptor> m_DddTrafficDescriptorList;
  bool m_DddTrafficDescriptorListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* TrafficDescriptor_H_ */
