/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RecipientInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RecipientInfo::RecipientInfo() {
  m_RecipientSUPI = "";
  m_RecipientSUPIIsSet = false;
  m_RecipientGPSI = "";
  m_RecipientGPSIIsSet = false;
  m_RecipientOtherAddressIsSet = false;
  m_RecipientReceivedAddressIsSet = false;
  m_RecipientSCCPAddress = "";
  m_RecipientSCCPAddressIsSet = false;
  m_SMDestinationInterfaceIsSet = false;
  m_SMrecipientProtocolId = "";
  m_SMrecipientProtocolIdIsSet = false;
}

RecipientInfo::~RecipientInfo() {}

void RecipientInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const RecipientInfo &o) {
  j = nlohmann::json();
  if (o.recipientSUPIIsSet())
    j["recipientSUPI"] = o.m_RecipientSUPI;
  if (o.recipientGPSIIsSet())
    j["recipientGPSI"] = o.m_RecipientGPSI;
  if (o.recipientOtherAddressIsSet())
    j["recipientOtherAddress"] = o.m_RecipientOtherAddress;
  if (o.recipientReceivedAddressIsSet())
    j["recipientReceivedAddress"] = o.m_RecipientReceivedAddress;
  if (o.recipientSCCPAddressIsSet())
    j["recipientSCCPAddress"] = o.m_RecipientSCCPAddress;
  if (o.sMDestinationInterfaceIsSet())
    j["sMDestinationInterface"] = o.m_SMDestinationInterface;
  if (o.sMrecipientProtocolIdIsSet())
    j["sMrecipientProtocolId"] = o.m_SMrecipientProtocolId;
}

void from_json(const nlohmann::json &j, RecipientInfo &o) {
  if (j.find("recipientSUPI") != j.end()) {
    j.at("recipientSUPI").get_to(o.m_RecipientSUPI);
    o.m_RecipientSUPIIsSet = true;
  }
  if (j.find("recipientGPSI") != j.end()) {
    j.at("recipientGPSI").get_to(o.m_RecipientGPSI);
    o.m_RecipientGPSIIsSet = true;
  }
  if (j.find("recipientOtherAddress") != j.end()) {
    j.at("recipientOtherAddress").get_to(o.m_RecipientOtherAddress);
    o.m_RecipientOtherAddressIsSet = true;
  }
  if (j.find("recipientReceivedAddress") != j.end()) {
    j.at("recipientReceivedAddress").get_to(o.m_RecipientReceivedAddress);
    o.m_RecipientReceivedAddressIsSet = true;
  }
  if (j.find("recipientSCCPAddress") != j.end()) {
    j.at("recipientSCCPAddress").get_to(o.m_RecipientSCCPAddress);
    o.m_RecipientSCCPAddressIsSet = true;
  }
  if (j.find("sMDestinationInterface") != j.end()) {
    j.at("sMDestinationInterface").get_to(o.m_SMDestinationInterface);
    o.m_SMDestinationInterfaceIsSet = true;
  }
  if (j.find("sMrecipientProtocolId") != j.end()) {
    j.at("sMrecipientProtocolId").get_to(o.m_SMrecipientProtocolId);
    o.m_SMrecipientProtocolIdIsSet = true;
  }
}

std::string RecipientInfo::getRecipientSUPI() const { return m_RecipientSUPI; }
void RecipientInfo::setRecipientSUPI(std::string const &value) {
  m_RecipientSUPI = value;
  m_RecipientSUPIIsSet = true;
}
bool RecipientInfo::recipientSUPIIsSet() const { return m_RecipientSUPIIsSet; }
void RecipientInfo::unsetRecipientSUPI() { m_RecipientSUPIIsSet = false; }
std::string RecipientInfo::getRecipientGPSI() const { return m_RecipientGPSI; }
void RecipientInfo::setRecipientGPSI(std::string const &value) {
  m_RecipientGPSI = value;
  m_RecipientGPSIIsSet = true;
}
bool RecipientInfo::recipientGPSIIsSet() const { return m_RecipientGPSIIsSet; }
void RecipientInfo::unsetRecipientGPSI() { m_RecipientGPSIIsSet = false; }
SMAddressInfo RecipientInfo::getRecipientOtherAddress() const {
  return m_RecipientOtherAddress;
}
void RecipientInfo::setRecipientOtherAddress(SMAddressInfo const &value) {
  m_RecipientOtherAddress = value;
  m_RecipientOtherAddressIsSet = true;
}
bool RecipientInfo::recipientOtherAddressIsSet() const {
  return m_RecipientOtherAddressIsSet;
}
void RecipientInfo::unsetRecipientOtherAddress() {
  m_RecipientOtherAddressIsSet = false;
}
SMAddressInfo RecipientInfo::getRecipientReceivedAddress() const {
  return m_RecipientReceivedAddress;
}
void RecipientInfo::setRecipientReceivedAddress(SMAddressInfo const &value) {
  m_RecipientReceivedAddress = value;
  m_RecipientReceivedAddressIsSet = true;
}
bool RecipientInfo::recipientReceivedAddressIsSet() const {
  return m_RecipientReceivedAddressIsSet;
}
void RecipientInfo::unsetRecipientReceivedAddress() {
  m_RecipientReceivedAddressIsSet = false;
}
std::string RecipientInfo::getRecipientSCCPAddress() const {
  return m_RecipientSCCPAddress;
}
void RecipientInfo::setRecipientSCCPAddress(std::string const &value) {
  m_RecipientSCCPAddress = value;
  m_RecipientSCCPAddressIsSet = true;
}
bool RecipientInfo::recipientSCCPAddressIsSet() const {
  return m_RecipientSCCPAddressIsSet;
}
void RecipientInfo::unsetRecipientSCCPAddress() {
  m_RecipientSCCPAddressIsSet = false;
}
SMInterface RecipientInfo::getSMDestinationInterface() const {
  return m_SMDestinationInterface;
}
void RecipientInfo::setSMDestinationInterface(SMInterface const &value) {
  m_SMDestinationInterface = value;
  m_SMDestinationInterfaceIsSet = true;
}
bool RecipientInfo::sMDestinationInterfaceIsSet() const {
  return m_SMDestinationInterfaceIsSet;
}
void RecipientInfo::unsetSMDestinationInterface() {
  m_SMDestinationInterfaceIsSet = false;
}
std::string RecipientInfo::getSMrecipientProtocolId() const {
  return m_SMrecipientProtocolId;
}
void RecipientInfo::setSMrecipientProtocolId(std::string const &value) {
  m_SMrecipientProtocolId = value;
  m_SMrecipientProtocolIdIsSet = true;
}
bool RecipientInfo::sMrecipientProtocolIdIsSet() const {
  return m_SMrecipientProtocolIdIsSet;
}
void RecipientInfo::unsetSMrecipientProtocolId() {
  m_SMrecipientProtocolIdIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
