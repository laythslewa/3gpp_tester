/**
 * 3gpp-nidd
 * API for non IP data delivery. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NiddConfiguration.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NiddConfiguration::NiddConfiguration() {
  m_Self = "";
  m_SelfIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_MtcProviderId = "";
  m_MtcProviderIdIsSet = false;
  m_ExternalId = "";
  m_ExternalIdIsSet = false;
  m_Msisdn = "";
  m_MsisdnIsSet = false;
  m_ExternalGroupId = "";
  m_ExternalGroupIdIsSet = false;
  m_Duration = "";
  m_DurationIsSet = false;
  m_ReliableDataService = false;
  m_ReliableDataServiceIsSet = false;
  m_RdsPortsIsSet = false;
  m_PdnEstablishmentOptionIsSet = false;
  m_NotificationDestination = "";
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
  m_MaximumPacketSize = 0;
  m_MaximumPacketSizeIsSet = false;
  m_NiddDownlinkDataTransfersIsSet = false;
  m_StatusIsSet = false;
}

NiddConfiguration::~NiddConfiguration() {}

void NiddConfiguration::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NiddConfiguration &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.mtcProviderIdIsSet())
    j["mtcProviderId"] = o.m_MtcProviderId;
  if (o.externalIdIsSet())
    j["externalId"] = o.m_ExternalId;
  if (o.msisdnIsSet())
    j["msisdn"] = o.m_Msisdn;
  if (o.externalGroupIdIsSet())
    j["externalGroupId"] = o.m_ExternalGroupId;
  if (o.durationIsSet())
    j["duration"] = o.m_Duration;
  if (o.reliableDataServiceIsSet())
    j["reliableDataService"] = o.m_ReliableDataService;
  if (o.rdsPortsIsSet() || !o.m_RdsPorts.empty())
    j["rdsPorts"] = o.m_RdsPorts;
  if (o.pdnEstablishmentOptionIsSet())
    j["pdnEstablishmentOption"] = o.m_PdnEstablishmentOption;
  j["notificationDestination"] = o.m_NotificationDestination;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  if (o.maximumPacketSizeIsSet())
    j["maximumPacketSize"] = o.m_MaximumPacketSize;
  if (o.niddDownlinkDataTransfersIsSet() ||
      !o.m_NiddDownlinkDataTransfers.empty())
    j["niddDownlinkDataTransfers"] = o.m_NiddDownlinkDataTransfers;
  if (o.statusIsSet())
    j["status"] = o.m_Status;
}

void from_json(const nlohmann::json &j, NiddConfiguration &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("mtcProviderId") != j.end()) {
    j.at("mtcProviderId").get_to(o.m_MtcProviderId);
    o.m_MtcProviderIdIsSet = true;
  }
  if (j.find("externalId") != j.end()) {
    j.at("externalId").get_to(o.m_ExternalId);
    o.m_ExternalIdIsSet = true;
  }
  if (j.find("msisdn") != j.end()) {
    j.at("msisdn").get_to(o.m_Msisdn);
    o.m_MsisdnIsSet = true;
  }
  if (j.find("externalGroupId") != j.end()) {
    j.at("externalGroupId").get_to(o.m_ExternalGroupId);
    o.m_ExternalGroupIdIsSet = true;
  }
  if (j.find("duration") != j.end()) {
    j.at("duration").get_to(o.m_Duration);
    o.m_DurationIsSet = true;
  }
  if (j.find("reliableDataService") != j.end()) {
    j.at("reliableDataService").get_to(o.m_ReliableDataService);
    o.m_ReliableDataServiceIsSet = true;
  }
  if (j.find("rdsPorts") != j.end()) {
    j.at("rdsPorts").get_to(o.m_RdsPorts);
    o.m_RdsPortsIsSet = true;
  }
  if (j.find("pdnEstablishmentOption") != j.end()) {
    j.at("pdnEstablishmentOption").get_to(o.m_PdnEstablishmentOption);
    o.m_PdnEstablishmentOptionIsSet = true;
  }
  j.at("notificationDestination").get_to(o.m_NotificationDestination);
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  if (j.find("maximumPacketSize") != j.end()) {
    j.at("maximumPacketSize").get_to(o.m_MaximumPacketSize);
    o.m_MaximumPacketSizeIsSet = true;
  }
  if (j.find("niddDownlinkDataTransfers") != j.end()) {
    j.at("niddDownlinkDataTransfers").get_to(o.m_NiddDownlinkDataTransfers);
    o.m_NiddDownlinkDataTransfersIsSet = true;
  }
  if (j.find("status") != j.end()) {
    j.at("status").get_to(o.m_Status);
    o.m_StatusIsSet = true;
  }
}

std::string NiddConfiguration::getSelf() const { return m_Self; }
void NiddConfiguration::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool NiddConfiguration::selfIsSet() const { return m_SelfIsSet; }
void NiddConfiguration::unsetSelf() { m_SelfIsSet = false; }
std::string NiddConfiguration::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void NiddConfiguration::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool NiddConfiguration::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void NiddConfiguration::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::string NiddConfiguration::getMtcProviderId() const {
  return m_MtcProviderId;
}
void NiddConfiguration::setMtcProviderId(std::string const &value) {
  m_MtcProviderId = value;
  m_MtcProviderIdIsSet = true;
}
bool NiddConfiguration::mtcProviderIdIsSet() const {
  return m_MtcProviderIdIsSet;
}
void NiddConfiguration::unsetMtcProviderId() { m_MtcProviderIdIsSet = false; }
std::string NiddConfiguration::getExternalId() const { return m_ExternalId; }
void NiddConfiguration::setExternalId(std::string const &value) {
  m_ExternalId = value;
  m_ExternalIdIsSet = true;
}
bool NiddConfiguration::externalIdIsSet() const { return m_ExternalIdIsSet; }
void NiddConfiguration::unsetExternalId() { m_ExternalIdIsSet = false; }
std::string NiddConfiguration::getMsisdn() const { return m_Msisdn; }
void NiddConfiguration::setMsisdn(std::string const &value) {
  m_Msisdn = value;
  m_MsisdnIsSet = true;
}
bool NiddConfiguration::msisdnIsSet() const { return m_MsisdnIsSet; }
void NiddConfiguration::unsetMsisdn() { m_MsisdnIsSet = false; }
std::string NiddConfiguration::getExternalGroupId() const {
  return m_ExternalGroupId;
}
void NiddConfiguration::setExternalGroupId(std::string const &value) {
  m_ExternalGroupId = value;
  m_ExternalGroupIdIsSet = true;
}
bool NiddConfiguration::externalGroupIdIsSet() const {
  return m_ExternalGroupIdIsSet;
}
void NiddConfiguration::unsetExternalGroupId() {
  m_ExternalGroupIdIsSet = false;
}
std::string NiddConfiguration::getDuration() const { return m_Duration; }
void NiddConfiguration::setDuration(std::string const &value) {
  m_Duration = value;
  m_DurationIsSet = true;
}
bool NiddConfiguration::durationIsSet() const { return m_DurationIsSet; }
void NiddConfiguration::unsetDuration() { m_DurationIsSet = false; }
bool NiddConfiguration::isReliableDataService() const {
  return m_ReliableDataService;
}
void NiddConfiguration::setReliableDataService(bool const value) {
  m_ReliableDataService = value;
  m_ReliableDataServiceIsSet = true;
}
bool NiddConfiguration::reliableDataServiceIsSet() const {
  return m_ReliableDataServiceIsSet;
}
void NiddConfiguration::unsetReliableDataService() {
  m_ReliableDataServiceIsSet = false;
}
std::vector<RdsPort> &NiddConfiguration::getRdsPorts() { return m_RdsPorts; }
void NiddConfiguration::setRdsPorts(std::vector<RdsPort> const &value) {
  m_RdsPorts = value;
  m_RdsPortsIsSet = true;
}
bool NiddConfiguration::rdsPortsIsSet() const { return m_RdsPortsIsSet; }
void NiddConfiguration::unsetRdsPorts() { m_RdsPortsIsSet = false; }
PdnEstablishmentOptions NiddConfiguration::getPdnEstablishmentOption() const {
  return m_PdnEstablishmentOption;
}
void NiddConfiguration::setPdnEstablishmentOption(
    PdnEstablishmentOptions const &value) {
  m_PdnEstablishmentOption = value;
  m_PdnEstablishmentOptionIsSet = true;
}
bool NiddConfiguration::pdnEstablishmentOptionIsSet() const {
  return m_PdnEstablishmentOptionIsSet;
}
void NiddConfiguration::unsetPdnEstablishmentOption() {
  m_PdnEstablishmentOptionIsSet = false;
}
std::string NiddConfiguration::getNotificationDestination() const {
  return m_NotificationDestination;
}
void NiddConfiguration::setNotificationDestination(std::string const &value) {
  m_NotificationDestination = value;
}
bool NiddConfiguration::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void NiddConfiguration::setRequestTestNotification(bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool NiddConfiguration::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void NiddConfiguration::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig NiddConfiguration::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void NiddConfiguration::setWebsockNotifConfig(WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool NiddConfiguration::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void NiddConfiguration::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
int32_t NiddConfiguration::getMaximumPacketSize() const {
  return m_MaximumPacketSize;
}
void NiddConfiguration::setMaximumPacketSize(int32_t const value) {
  m_MaximumPacketSize = value;
  m_MaximumPacketSizeIsSet = true;
}
bool NiddConfiguration::maximumPacketSizeIsSet() const {
  return m_MaximumPacketSizeIsSet;
}
void NiddConfiguration::unsetMaximumPacketSize() {
  m_MaximumPacketSizeIsSet = false;
}
std::vector<NiddDownlinkDataTransfer> &
NiddConfiguration::getNiddDownlinkDataTransfers() {
  return m_NiddDownlinkDataTransfers;
}
void NiddConfiguration::setNiddDownlinkDataTransfers(
    std::vector<NiddDownlinkDataTransfer> const &value) {
  m_NiddDownlinkDataTransfers = value;
  m_NiddDownlinkDataTransfersIsSet = true;
}
bool NiddConfiguration::niddDownlinkDataTransfersIsSet() const {
  return m_NiddDownlinkDataTransfersIsSet;
}
void NiddConfiguration::unsetNiddDownlinkDataTransfers() {
  m_NiddDownlinkDataTransfersIsSet = false;
}
NiddStatus NiddConfiguration::getStatus() const { return m_Status; }
void NiddConfiguration::setStatus(NiddStatus const &value) {
  m_Status = value;
  m_StatusIsSet = true;
}
bool NiddConfiguration::statusIsSet() const { return m_StatusIsSet; }
void NiddConfiguration::unsetStatus() { m_StatusIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
