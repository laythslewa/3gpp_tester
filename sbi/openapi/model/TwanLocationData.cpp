/**
 * Nhss_imsSDM
 * Nhss Subscriber Data Management Service for IMS. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "TwanLocationData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

TwanLocationData::TwanLocationData() {
  m_TwanSsid = "";
  m_TwanBssid = "";
  m_TwanBssidIsSet = false;
  m_CivicAddressIsSet = false;
  m_TwanOperatorName = "";
  m_TwanOperatorNameIsSet = false;
  m_TimeZone = "";
  m_TimeZoneIsSet = false;
  m_LogicalAccessId = "";
  m_LogicalAccessIdIsSet = false;
}

TwanLocationData::~TwanLocationData() {}

void TwanLocationData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const TwanLocationData &o) {
  j = nlohmann::json();
  j["twanSsid"] = o.m_TwanSsid;
  j["plmnId"] = o.m_PlmnId;
  if (o.twanBssidIsSet())
    j["twanBssid"] = o.m_TwanBssid;
  if (o.civicAddressIsSet())
    j["civicAddress"] = o.m_CivicAddress;
  if (o.twanOperatorNameIsSet())
    j["twanOperatorName"] = o.m_TwanOperatorName;
  if (o.timeZoneIsSet())
    j["timeZone"] = o.m_TimeZone;
  if (o.logicalAccessIdIsSet())
    j["logicalAccessId"] = o.m_LogicalAccessId;
}

void from_json(const nlohmann::json &j, TwanLocationData &o) {
  j.at("twanSsid").get_to(o.m_TwanSsid);
  j.at("plmnId").get_to(o.m_PlmnId);
  if (j.find("twanBssid") != j.end()) {
    j.at("twanBssid").get_to(o.m_TwanBssid);
    o.m_TwanBssidIsSet = true;
  }
  if (j.find("civicAddress") != j.end()) {
    j.at("civicAddress").get_to(o.m_CivicAddress);
    o.m_CivicAddressIsSet = true;
  }
  if (j.find("twanOperatorName") != j.end()) {
    j.at("twanOperatorName").get_to(o.m_TwanOperatorName);
    o.m_TwanOperatorNameIsSet = true;
  }
  if (j.find("timeZone") != j.end()) {
    j.at("timeZone").get_to(o.m_TimeZone);
    o.m_TimeZoneIsSet = true;
  }
  if (j.find("logicalAccessId") != j.end()) {
    j.at("logicalAccessId").get_to(o.m_LogicalAccessId);
    o.m_LogicalAccessIdIsSet = true;
  }
}

std::string TwanLocationData::getTwanSsid() const { return m_TwanSsid; }
void TwanLocationData::setTwanSsid(std::string const &value) {
  m_TwanSsid = value;
}
PlmnId TwanLocationData::getPlmnId() const { return m_PlmnId; }
void TwanLocationData::setPlmnId(PlmnId const &value) { m_PlmnId = value; }
std::string TwanLocationData::getTwanBssid() const { return m_TwanBssid; }
void TwanLocationData::setTwanBssid(std::string const &value) {
  m_TwanBssid = value;
  m_TwanBssidIsSet = true;
}
bool TwanLocationData::twanBssidIsSet() const { return m_TwanBssidIsSet; }
void TwanLocationData::unsetTwanBssid() { m_TwanBssidIsSet = false; }
std::string TwanLocationData::getCivicAddress() const { return m_CivicAddress; }
void TwanLocationData::setCivicAddress(std::string const &value) {
  m_CivicAddress = value;
  m_CivicAddressIsSet = true;
}
bool TwanLocationData::civicAddressIsSet() const { return m_CivicAddressIsSet; }
void TwanLocationData::unsetCivicAddress() { m_CivicAddressIsSet = false; }
std::string TwanLocationData::getTwanOperatorName() const {
  return m_TwanOperatorName;
}
void TwanLocationData::setTwanOperatorName(std::string const &value) {
  m_TwanOperatorName = value;
  m_TwanOperatorNameIsSet = true;
}
bool TwanLocationData::twanOperatorNameIsSet() const {
  return m_TwanOperatorNameIsSet;
}
void TwanLocationData::unsetTwanOperatorName() {
  m_TwanOperatorNameIsSet = false;
}
std::string TwanLocationData::getTimeZone() const { return m_TimeZone; }
void TwanLocationData::setTimeZone(std::string const &value) {
  m_TimeZone = value;
  m_TimeZoneIsSet = true;
}
bool TwanLocationData::timeZoneIsSet() const { return m_TimeZoneIsSet; }
void TwanLocationData::unsetTimeZone() { m_TimeZoneIsSet = false; }
std::string TwanLocationData::getLogicalAccessId() const {
  return m_LogicalAccessId;
}
void TwanLocationData::setLogicalAccessId(std::string const &value) {
  m_LogicalAccessId = value;
  m_LogicalAccessIdIsSet = true;
}
bool TwanLocationData::logicalAccessIdIsSet() const {
  return m_LogicalAccessIdIsSet;
}
void TwanLocationData::unsetLogicalAccessId() {
  m_LogicalAccessIdIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
