/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RoamingQBCInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RoamingQBCInformation::RoamingQBCInformation() {
  m_MultipleQFIcontainerIsSet = false;
  m_UPFID = "";
  m_UPFIDIsSet = false;
  m_RoamingChargingProfileIsSet = false;
}

RoamingQBCInformation::~RoamingQBCInformation() {}

void RoamingQBCInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const RoamingQBCInformation &o) {
  j = nlohmann::json();
  if (o.multipleQFIcontainerIsSet() || !o.m_MultipleQFIcontainer.empty())
    j["multipleQFIcontainer"] = o.m_MultipleQFIcontainer;
  if (o.uPFIDIsSet())
    j["uPFID"] = o.m_UPFID;
  if (o.roamingChargingProfileIsSet())
    j["roamingChargingProfile"] = o.m_RoamingChargingProfile;
}

void from_json(const nlohmann::json &j, RoamingQBCInformation &o) {
  if (j.find("multipleQFIcontainer") != j.end()) {
    j.at("multipleQFIcontainer").get_to(o.m_MultipleQFIcontainer);
    o.m_MultipleQFIcontainerIsSet = true;
  }
  if (j.find("uPFID") != j.end()) {
    j.at("uPFID").get_to(o.m_UPFID);
    o.m_UPFIDIsSet = true;
  }
  if (j.find("roamingChargingProfile") != j.end()) {
    j.at("roamingChargingProfile").get_to(o.m_RoamingChargingProfile);
    o.m_RoamingChargingProfileIsSet = true;
  }
}

std::vector<MultipleQFIcontainer> &
RoamingQBCInformation::getMultipleQFIcontainer() {
  return m_MultipleQFIcontainer;
}
void RoamingQBCInformation::setMultipleQFIcontainer(
    std::vector<MultipleQFIcontainer> const &value) {
  m_MultipleQFIcontainer = value;
  m_MultipleQFIcontainerIsSet = true;
}
bool RoamingQBCInformation::multipleQFIcontainerIsSet() const {
  return m_MultipleQFIcontainerIsSet;
}
void RoamingQBCInformation::unsetMultipleQFIcontainer() {
  m_MultipleQFIcontainerIsSet = false;
}
std::string RoamingQBCInformation::getUPFID() const { return m_UPFID; }
void RoamingQBCInformation::setUPFID(std::string const &value) {
  m_UPFID = value;
  m_UPFIDIsSet = true;
}
bool RoamingQBCInformation::uPFIDIsSet() const { return m_UPFIDIsSet; }
void RoamingQBCInformation::unsetUPFID() { m_UPFIDIsSet = false; }
RoamingChargingProfile
RoamingQBCInformation::getRoamingChargingProfile() const {
  return m_RoamingChargingProfile;
}
void RoamingQBCInformation::setRoamingChargingProfile(
    RoamingChargingProfile const &value) {
  m_RoamingChargingProfile = value;
  m_RoamingChargingProfileIsSet = true;
}
bool RoamingQBCInformation::roamingChargingProfileIsSet() const {
  return m_RoamingChargingProfileIsSet;
}
void RoamingQBCInformation::unsetRoamingChargingProfile() {
  m_RoamingChargingProfileIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
