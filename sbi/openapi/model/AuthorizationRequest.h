/**
 * Nhss_imsUECM
 * Nhss UE Context Management Service for IMS. © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AuthorizationRequest.h
 *
 * Ims authorization request data
 */

#ifndef AuthorizationRequest_H_
#define AuthorizationRequest_H_

#include "AuthorizationType.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Ims authorization request data
/// </summary>
class AuthorizationRequest {
public:
  AuthorizationRequest();
  virtual ~AuthorizationRequest();

  void validate();

  /////////////////////////////////////////////
  /// AuthorizationRequest members

  /// <summary>
  ///
  /// </summary>
  std::string getImpi() const;
  void setImpi(std::string const &value);
  bool impiIsSet() const;
  void unsetImpi();
  /// <summary>
  ///
  /// </summary>
  AuthorizationType getAuthorizationType() const;
  void setAuthorizationType(AuthorizationType const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getVisitedNetworkIdentifier() const;
  void setVisitedNetworkIdentifier(std::string const &value);
  bool visitedNetworkIdentifierIsSet() const;
  void unsetVisitedNetworkIdentifier();
  /// <summary>
  ///
  /// </summary>
  bool isEmergencyIndicator() const;
  void setEmergencyIndicator(bool const value);
  bool emergencyIndicatorIsSet() const;
  void unsetEmergencyIndicator();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  friend void to_json(nlohmann::json &j, const AuthorizationRequest &o);
  friend void from_json(const nlohmann::json &j, AuthorizationRequest &o);

protected:
  std::string m_Impi;
  bool m_ImpiIsSet;
  AuthorizationType m_AuthorizationType;

  std::string m_VisitedNetworkIdentifier;
  bool m_VisitedNetworkIdentifierIsSet;
  bool m_EmergencyIndicator;
  bool m_EmergencyIndicatorIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AuthorizationRequest_H_ */
