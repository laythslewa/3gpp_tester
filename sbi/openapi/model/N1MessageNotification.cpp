/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "N1MessageNotification.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

N1MessageNotification::N1MessageNotification() {
  m_N1NotifySubscriptionId = "";
  m_N1NotifySubscriptionIdIsSet = false;
  m_LcsCorrelationId = "";
  m_LcsCorrelationIdIsSet = false;
  m_RegistrationCtxtContainerIsSet = false;
  m_NewLmfIdentification = "";
  m_NewLmfIdentificationIsSet = false;
  m_GuamiIsSet = false;
  m_CIoT5GSOptimisation = false;
  m_CIoT5GSOptimisationIsSet = false;
  m_EcgiIsSet = false;
  m_NcgiIsSet = false;
}

N1MessageNotification::~N1MessageNotification() {}

void N1MessageNotification::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const N1MessageNotification &o) {
  j = nlohmann::json();
  if (o.n1NotifySubscriptionIdIsSet())
    j["n1NotifySubscriptionId"] = o.m_N1NotifySubscriptionId;
  j["n1MessageContainer"] = o.m_N1MessageContainer;
  if (o.lcsCorrelationIdIsSet())
    j["lcsCorrelationId"] = o.m_LcsCorrelationId;
  if (o.registrationCtxtContainerIsSet())
    j["registrationCtxtContainer"] = o.m_RegistrationCtxtContainer;
  if (o.newLmfIdentificationIsSet())
    j["newLmfIdentification"] = o.m_NewLmfIdentification;
  if (o.guamiIsSet())
    j["guami"] = o.m_Guami;
  if (o.cIoT5GSOptimisationIsSet())
    j["cIoT5GSOptimisation"] = o.m_CIoT5GSOptimisation;
  if (o.ecgiIsSet())
    j["ecgi"] = o.m_Ecgi;
  if (o.ncgiIsSet())
    j["ncgi"] = o.m_Ncgi;
}

void from_json(const nlohmann::json &j, N1MessageNotification &o) {
  if (j.find("n1NotifySubscriptionId") != j.end()) {
    j.at("n1NotifySubscriptionId").get_to(o.m_N1NotifySubscriptionId);
    o.m_N1NotifySubscriptionIdIsSet = true;
  }
  j.at("n1MessageContainer").get_to(o.m_N1MessageContainer);
  if (j.find("lcsCorrelationId") != j.end()) {
    j.at("lcsCorrelationId").get_to(o.m_LcsCorrelationId);
    o.m_LcsCorrelationIdIsSet = true;
  }
  if (j.find("registrationCtxtContainer") != j.end()) {
    j.at("registrationCtxtContainer").get_to(o.m_RegistrationCtxtContainer);
    o.m_RegistrationCtxtContainerIsSet = true;
  }
  if (j.find("newLmfIdentification") != j.end()) {
    j.at("newLmfIdentification").get_to(o.m_NewLmfIdentification);
    o.m_NewLmfIdentificationIsSet = true;
  }
  if (j.find("guami") != j.end()) {
    j.at("guami").get_to(o.m_Guami);
    o.m_GuamiIsSet = true;
  }
  if (j.find("cIoT5GSOptimisation") != j.end()) {
    j.at("cIoT5GSOptimisation").get_to(o.m_CIoT5GSOptimisation);
    o.m_CIoT5GSOptimisationIsSet = true;
  }
  if (j.find("ecgi") != j.end()) {
    j.at("ecgi").get_to(o.m_Ecgi);
    o.m_EcgiIsSet = true;
  }
  if (j.find("ncgi") != j.end()) {
    j.at("ncgi").get_to(o.m_Ncgi);
    o.m_NcgiIsSet = true;
  }
}

std::string N1MessageNotification::getN1NotifySubscriptionId() const {
  return m_N1NotifySubscriptionId;
}
void N1MessageNotification::setN1NotifySubscriptionId(
    std::string const &value) {
  m_N1NotifySubscriptionId = value;
  m_N1NotifySubscriptionIdIsSet = true;
}
bool N1MessageNotification::n1NotifySubscriptionIdIsSet() const {
  return m_N1NotifySubscriptionIdIsSet;
}
void N1MessageNotification::unsetN1NotifySubscriptionId() {
  m_N1NotifySubscriptionIdIsSet = false;
}
N1MessageContainer N1MessageNotification::getN1MessageContainer() const {
  return m_N1MessageContainer;
}
void N1MessageNotification::setN1MessageContainer(
    N1MessageContainer const &value) {
  m_N1MessageContainer = value;
}
std::string N1MessageNotification::getLcsCorrelationId() const {
  return m_LcsCorrelationId;
}
void N1MessageNotification::setLcsCorrelationId(std::string const &value) {
  m_LcsCorrelationId = value;
  m_LcsCorrelationIdIsSet = true;
}
bool N1MessageNotification::lcsCorrelationIdIsSet() const {
  return m_LcsCorrelationIdIsSet;
}
void N1MessageNotification::unsetLcsCorrelationId() {
  m_LcsCorrelationIdIsSet = false;
}
RegistrationContextContainer
N1MessageNotification::getRegistrationCtxtContainer() const {
  return m_RegistrationCtxtContainer;
}
void N1MessageNotification::setRegistrationCtxtContainer(
    RegistrationContextContainer const &value) {
  m_RegistrationCtxtContainer = value;
  m_RegistrationCtxtContainerIsSet = true;
}
bool N1MessageNotification::registrationCtxtContainerIsSet() const {
  return m_RegistrationCtxtContainerIsSet;
}
void N1MessageNotification::unsetRegistrationCtxtContainer() {
  m_RegistrationCtxtContainerIsSet = false;
}
std::string N1MessageNotification::getNewLmfIdentification() const {
  return m_NewLmfIdentification;
}
void N1MessageNotification::setNewLmfIdentification(std::string const &value) {
  m_NewLmfIdentification = value;
  m_NewLmfIdentificationIsSet = true;
}
bool N1MessageNotification::newLmfIdentificationIsSet() const {
  return m_NewLmfIdentificationIsSet;
}
void N1MessageNotification::unsetNewLmfIdentification() {
  m_NewLmfIdentificationIsSet = false;
}
Guami N1MessageNotification::getGuami() const { return m_Guami; }
void N1MessageNotification::setGuami(Guami const &value) {
  m_Guami = value;
  m_GuamiIsSet = true;
}
bool N1MessageNotification::guamiIsSet() const { return m_GuamiIsSet; }
void N1MessageNotification::unsetGuami() { m_GuamiIsSet = false; }
bool N1MessageNotification::isCIoT5GSOptimisation() const {
  return m_CIoT5GSOptimisation;
}
void N1MessageNotification::setCIoT5GSOptimisation(bool const value) {
  m_CIoT5GSOptimisation = value;
  m_CIoT5GSOptimisationIsSet = true;
}
bool N1MessageNotification::cIoT5GSOptimisationIsSet() const {
  return m_CIoT5GSOptimisationIsSet;
}
void N1MessageNotification::unsetCIoT5GSOptimisation() {
  m_CIoT5GSOptimisationIsSet = false;
}
Ecgi N1MessageNotification::getEcgi() const { return m_Ecgi; }
void N1MessageNotification::setEcgi(Ecgi const &value) {
  m_Ecgi = value;
  m_EcgiIsSet = true;
}
bool N1MessageNotification::ecgiIsSet() const { return m_EcgiIsSet; }
void N1MessageNotification::unsetEcgi() { m_EcgiIsSet = false; }
Ncgi N1MessageNotification::getNcgi() const { return m_Ncgi; }
void N1MessageNotification::setNcgi(Ncgi const &value) {
  m_Ncgi = value;
  m_NcgiIsSet = true;
}
bool N1MessageNotification::ncgiIsSet() const { return m_NcgiIsSet; }
void N1MessageNotification::unsetNcgi() { m_NcgiIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
