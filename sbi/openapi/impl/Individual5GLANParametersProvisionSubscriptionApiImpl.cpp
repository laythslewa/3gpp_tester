/**
 * 3gpp-5glan-pp
 * API for 5G LAN Parameter Provision. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "Individual5GLANParametersProvisionSubscriptionApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

Individual5GLANParametersProvisionSubscriptionApiImpl::
    Individual5GLANParametersProvisionSubscriptionApiImpl(
        std::shared_ptr<Pistache::Rest::Router> rtr)
    : Individual5GLANParametersProvisionSubscriptionApi(rtr) {}

void Individual5GLANParametersProvisionSubscriptionApiImpl::
    af_id_subscriptions_subscription_id_delete(
        const std::string &afId, const std::string &subscriptionId,
        Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void Individual5GLANParametersProvisionSubscriptionApiImpl::
    af_id_subscriptions_subscription_id_get(
        const std::string &afId, const std::string &subscriptionId,
        Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void Individual5GLANParametersProvisionSubscriptionApiImpl::
    af_id_subscriptions_subscription_id_patch(
        const std::string &afId, const std::string &subscriptionId,
        const 5GLanParametersProvisionPatch & r_5GLanParametersProvisionPatch,
        Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void Individual5GLANParametersProvisionSubscriptionApiImpl::
    af_id_subscriptions_subscription_id_put(
        const std::string &afId, const std::string &subscriptionId,
        const 5GLanParametersProvision & r_5GLanParametersProvision,
        Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
