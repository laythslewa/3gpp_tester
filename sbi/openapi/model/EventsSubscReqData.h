/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EventsSubscReqData.h
 *
 * Identifies the events the application subscribes to.
 */

#ifndef EventsSubscReqData_H_
#define EventsSubscReqData_H_

#include "AfEventSubscription.h"
#include "QosMonitoringInformation.h"
#include "RequestedQosMonitoringParameter.h"
#include "RequiredAccessInfo.h"
#include "UsageThreshold.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Identifies the events the application subscribes to.
/// </summary>
class EventsSubscReqData {
public:
  EventsSubscReqData();
  virtual ~EventsSubscReqData();

  void validate();

  /////////////////////////////////////////////
  /// EventsSubscReqData members

  /// <summary>
  ///
  /// </summary>
  std::vector<AfEventSubscription> &getEvents();
  void setEvents(std::vector<AfEventSubscription> const &value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNotifUri() const;
  void setNotifUri(std::string const &value);
  bool notifUriIsSet() const;
  void unsetNotifUri();
  /// <summary>
  ///
  /// </summary>
  std::vector<RequestedQosMonitoringParameter> &getReqQosMonParams();
  void
  setReqQosMonParams(std::vector<RequestedQosMonitoringParameter> const &value);
  bool reqQosMonParamsIsSet() const;
  void unsetReqQosMonParams();
  /// <summary>
  ///
  /// </summary>
  QosMonitoringInformation getQosMon() const;
  void setQosMon(QosMonitoringInformation const &value);
  bool qosMonIsSet() const;
  void unsetQosMon();
  /// <summary>
  ///
  /// </summary>
  std::vector<RequiredAccessInfo> &getReqAnis();
  void setReqAnis(std::vector<RequiredAccessInfo> const &value);
  bool reqAnisIsSet() const;
  void unsetReqAnis();
  /// <summary>
  ///
  /// </summary>
  UsageThreshold getUsgThres() const;
  void setUsgThres(UsageThreshold const &value);
  bool usgThresIsSet() const;
  void unsetUsgThres();
  /// <summary>
  ///
  /// </summary>
  std::string getNotifCorreId() const;
  void setNotifCorreId(std::string const &value);
  bool notifCorreIdIsSet() const;
  void unsetNotifCorreId();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getAfAppIds();
  void setAfAppIds(std::vector<std::string> const &value);
  bool afAppIdsIsSet() const;
  void unsetAfAppIds();
  /// <summary>
  ///
  /// </summary>
  bool isDirectNotifInd() const;
  void setDirectNotifInd(bool const value);
  bool directNotifIndIsSet() const;
  void unsetDirectNotifInd();

  friend void to_json(nlohmann::json &j, const EventsSubscReqData &o);
  friend void from_json(const nlohmann::json &j, EventsSubscReqData &o);

protected:
  std::vector<AfEventSubscription> m_Events;

  std::string m_NotifUri;
  bool m_NotifUriIsSet;
  std::vector<RequestedQosMonitoringParameter> m_ReqQosMonParams;
  bool m_ReqQosMonParamsIsSet;
  QosMonitoringInformation m_QosMon;
  bool m_QosMonIsSet;
  std::vector<RequiredAccessInfo> m_ReqAnis;
  bool m_ReqAnisIsSet;
  UsageThreshold m_UsgThres;
  bool m_UsgThresIsSet;
  std::string m_NotifCorreId;
  bool m_NotifCorreIdIsSet;
  std::vector<std::string> m_AfAppIds;
  bool m_AfAppIdsIsSet;
  bool m_DirectNotifInd;
  bool m_DirectNotifIndIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* EventsSubscReqData_H_ */
