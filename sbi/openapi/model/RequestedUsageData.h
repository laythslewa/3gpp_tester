/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RequestedUsageData.h
 *
 * Contains usage data requested by the PCF requesting usage reports for the
 * corresponding usage monitoring data instances.
 */

#ifndef RequestedUsageData_H_
#define RequestedUsageData_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains usage data requested by the PCF requesting usage reports for the
/// corresponding usage monitoring data instances.
/// </summary>
class RequestedUsageData {
public:
  RequestedUsageData();
  virtual ~RequestedUsageData();

  void validate();

  /////////////////////////////////////////////
  /// RequestedUsageData members

  /// <summary>
  /// An array of usage monitoring data id references to the usage monitoring
  /// data instances for which the PCF is requesting a usage report. This
  /// attribute shall only be provided when allUmIds is not set to true.
  /// </summary>
  std::vector<std::string> &getRefUmIds();
  void setRefUmIds(std::vector<std::string> const &value);
  bool refUmIdsIsSet() const;
  void unsetRefUmIds();
  /// <summary>
  /// This boolean indicates whether requested usage data applies to all usage
  /// monitoring data instances. When it&#39;s not included, it means requested
  /// usage data shall only apply to the usage monitoring data instances
  /// referenced by the refUmIds attribute.
  /// </summary>
  bool isAllUmIds() const;
  void setAllUmIds(bool const value);
  bool allUmIdsIsSet() const;
  void unsetAllUmIds();

  friend void to_json(nlohmann::json &j, const RequestedUsageData &o);
  friend void from_json(const nlohmann::json &j, RequestedUsageData &o);

protected:
  std::vector<std::string> m_RefUmIds;
  bool m_RefUmIdsIsSet;
  bool m_AllUmIds;
  bool m_AllUmIdsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* RequestedUsageData_H_ */
