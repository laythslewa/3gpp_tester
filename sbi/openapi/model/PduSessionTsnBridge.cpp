/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PduSessionTsnBridge.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PduSessionTsnBridge::PduSessionTsnBridge() {
  m_TsnBridgeManContIsSet = false;
  m_TsnPortManContDsttIsSet = false;
  m_TsnPortManContNwttsIsSet = false;
}

PduSessionTsnBridge::~PduSessionTsnBridge() {}

void PduSessionTsnBridge::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PduSessionTsnBridge &o) {
  j = nlohmann::json();
  j["tsnBridgeInfo"] = o.m_TsnBridgeInfo;
  if (o.tsnBridgeManContIsSet())
    j["tsnBridgeManCont"] = o.m_TsnBridgeManCont;
  if (o.tsnPortManContDsttIsSet())
    j["tsnPortManContDstt"] = o.m_TsnPortManContDstt;
  if (o.tsnPortManContNwttsIsSet() || !o.m_TsnPortManContNwtts.empty())
    j["tsnPortManContNwtts"] = o.m_TsnPortManContNwtts;
}

void from_json(const nlohmann::json &j, PduSessionTsnBridge &o) {
  j.at("tsnBridgeInfo").get_to(o.m_TsnBridgeInfo);
  if (j.find("tsnBridgeManCont") != j.end()) {
    j.at("tsnBridgeManCont").get_to(o.m_TsnBridgeManCont);
    o.m_TsnBridgeManContIsSet = true;
  }
  if (j.find("tsnPortManContDstt") != j.end()) {
    j.at("tsnPortManContDstt").get_to(o.m_TsnPortManContDstt);
    o.m_TsnPortManContDsttIsSet = true;
  }
  if (j.find("tsnPortManContNwtts") != j.end()) {
    j.at("tsnPortManContNwtts").get_to(o.m_TsnPortManContNwtts);
    o.m_TsnPortManContNwttsIsSet = true;
  }
}

TsnBridgeInfo PduSessionTsnBridge::getTsnBridgeInfo() const {
  return m_TsnBridgeInfo;
}
void PduSessionTsnBridge::setTsnBridgeInfo(TsnBridgeInfo const &value) {
  m_TsnBridgeInfo = value;
}
BridgeManagementContainer PduSessionTsnBridge::getTsnBridgeManCont() const {
  return m_TsnBridgeManCont;
}
void PduSessionTsnBridge::setTsnBridgeManCont(
    BridgeManagementContainer const &value) {
  m_TsnBridgeManCont = value;
  m_TsnBridgeManContIsSet = true;
}
bool PduSessionTsnBridge::tsnBridgeManContIsSet() const {
  return m_TsnBridgeManContIsSet;
}
void PduSessionTsnBridge::unsetTsnBridgeManCont() {
  m_TsnBridgeManContIsSet = false;
}
PortManagementContainer PduSessionTsnBridge::getTsnPortManContDstt() const {
  return m_TsnPortManContDstt;
}
void PduSessionTsnBridge::setTsnPortManContDstt(
    PortManagementContainer const &value) {
  m_TsnPortManContDstt = value;
  m_TsnPortManContDsttIsSet = true;
}
bool PduSessionTsnBridge::tsnPortManContDsttIsSet() const {
  return m_TsnPortManContDsttIsSet;
}
void PduSessionTsnBridge::unsetTsnPortManContDstt() {
  m_TsnPortManContDsttIsSet = false;
}
std::vector<PortManagementContainer> &
PduSessionTsnBridge::getTsnPortManContNwtts() {
  return m_TsnPortManContNwtts;
}
void PduSessionTsnBridge::setTsnPortManContNwtts(
    std::vector<PortManagementContainer> const &value) {
  m_TsnPortManContNwtts = value;
  m_TsnPortManContNwttsIsSet = true;
}
bool PduSessionTsnBridge::tsnPortManContNwttsIsSet() const {
  return m_TsnPortManContNwttsIsSet;
}
void PduSessionTsnBridge::unsetTsnPortManContNwtts() {
  m_TsnPortManContNwttsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
