/**
 * NSSF NS Selection
 * NSSF Network Slice Selection Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SliceInfoForUEConfigurationUpdate.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SliceInfoForUEConfigurationUpdate::SliceInfoForUEConfigurationUpdate() {
  m_SubscribedNssaiIsSet = false;
  m_AllowedNssaiCurrentAccessIsSet = false;
  m_AllowedNssaiOtherAccessIsSet = false;
  m_DefaultConfiguredSnssaiInd = false;
  m_DefaultConfiguredSnssaiIndIsSet = false;
  m_RequestedNssaiIsSet = false;
  m_MappingOfNssaiIsSet = false;
}

SliceInfoForUEConfigurationUpdate::~SliceInfoForUEConfigurationUpdate() {}

void SliceInfoForUEConfigurationUpdate::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SliceInfoForUEConfigurationUpdate &o) {
  j = nlohmann::json();
  if (o.subscribedNssaiIsSet() || !o.m_SubscribedNssai.empty())
    j["subscribedNssai"] = o.m_SubscribedNssai;
  if (o.allowedNssaiCurrentAccessIsSet())
    j["allowedNssaiCurrentAccess"] = o.m_AllowedNssaiCurrentAccess;
  if (o.allowedNssaiOtherAccessIsSet())
    j["allowedNssaiOtherAccess"] = o.m_AllowedNssaiOtherAccess;
  if (o.defaultConfiguredSnssaiIndIsSet())
    j["defaultConfiguredSnssaiInd"] = o.m_DefaultConfiguredSnssaiInd;
  if (o.requestedNssaiIsSet() || !o.m_RequestedNssai.empty())
    j["requestedNssai"] = o.m_RequestedNssai;
  if (o.mappingOfNssaiIsSet() || !o.m_MappingOfNssai.empty())
    j["mappingOfNssai"] = o.m_MappingOfNssai;
}

void from_json(const nlohmann::json &j, SliceInfoForUEConfigurationUpdate &o) {
  if (j.find("subscribedNssai") != j.end()) {
    j.at("subscribedNssai").get_to(o.m_SubscribedNssai);
    o.m_SubscribedNssaiIsSet = true;
  }
  if (j.find("allowedNssaiCurrentAccess") != j.end()) {
    j.at("allowedNssaiCurrentAccess").get_to(o.m_AllowedNssaiCurrentAccess);
    o.m_AllowedNssaiCurrentAccessIsSet = true;
  }
  if (j.find("allowedNssaiOtherAccess") != j.end()) {
    j.at("allowedNssaiOtherAccess").get_to(o.m_AllowedNssaiOtherAccess);
    o.m_AllowedNssaiOtherAccessIsSet = true;
  }
  if (j.find("defaultConfiguredSnssaiInd") != j.end()) {
    j.at("defaultConfiguredSnssaiInd").get_to(o.m_DefaultConfiguredSnssaiInd);
    o.m_DefaultConfiguredSnssaiIndIsSet = true;
  }
  if (j.find("requestedNssai") != j.end()) {
    j.at("requestedNssai").get_to(o.m_RequestedNssai);
    o.m_RequestedNssaiIsSet = true;
  }
  if (j.find("mappingOfNssai") != j.end()) {
    j.at("mappingOfNssai").get_to(o.m_MappingOfNssai);
    o.m_MappingOfNssaiIsSet = true;
  }
}

std::vector<SubscribedSnssai> &
SliceInfoForUEConfigurationUpdate::getSubscribedNssai() {
  return m_SubscribedNssai;
}
void SliceInfoForUEConfigurationUpdate::setSubscribedNssai(
    std::vector<SubscribedSnssai> const &value) {
  m_SubscribedNssai = value;
  m_SubscribedNssaiIsSet = true;
}
bool SliceInfoForUEConfigurationUpdate::subscribedNssaiIsSet() const {
  return m_SubscribedNssaiIsSet;
}
void SliceInfoForUEConfigurationUpdate::unsetSubscribedNssai() {
  m_SubscribedNssaiIsSet = false;
}
AllowedNssai
SliceInfoForUEConfigurationUpdate::getAllowedNssaiCurrentAccess() const {
  return m_AllowedNssaiCurrentAccess;
}
void SliceInfoForUEConfigurationUpdate::setAllowedNssaiCurrentAccess(
    AllowedNssai const &value) {
  m_AllowedNssaiCurrentAccess = value;
  m_AllowedNssaiCurrentAccessIsSet = true;
}
bool SliceInfoForUEConfigurationUpdate::allowedNssaiCurrentAccessIsSet() const {
  return m_AllowedNssaiCurrentAccessIsSet;
}
void SliceInfoForUEConfigurationUpdate::unsetAllowedNssaiCurrentAccess() {
  m_AllowedNssaiCurrentAccessIsSet = false;
}
AllowedNssai
SliceInfoForUEConfigurationUpdate::getAllowedNssaiOtherAccess() const {
  return m_AllowedNssaiOtherAccess;
}
void SliceInfoForUEConfigurationUpdate::setAllowedNssaiOtherAccess(
    AllowedNssai const &value) {
  m_AllowedNssaiOtherAccess = value;
  m_AllowedNssaiOtherAccessIsSet = true;
}
bool SliceInfoForUEConfigurationUpdate::allowedNssaiOtherAccessIsSet() const {
  return m_AllowedNssaiOtherAccessIsSet;
}
void SliceInfoForUEConfigurationUpdate::unsetAllowedNssaiOtherAccess() {
  m_AllowedNssaiOtherAccessIsSet = false;
}
bool SliceInfoForUEConfigurationUpdate::isDefaultConfiguredSnssaiInd() const {
  return m_DefaultConfiguredSnssaiInd;
}
void SliceInfoForUEConfigurationUpdate::setDefaultConfiguredSnssaiInd(
    bool const value) {
  m_DefaultConfiguredSnssaiInd = value;
  m_DefaultConfiguredSnssaiIndIsSet = true;
}
bool SliceInfoForUEConfigurationUpdate::defaultConfiguredSnssaiIndIsSet()
    const {
  return m_DefaultConfiguredSnssaiIndIsSet;
}
void SliceInfoForUEConfigurationUpdate::unsetDefaultConfiguredSnssaiInd() {
  m_DefaultConfiguredSnssaiIndIsSet = false;
}
std::vector<Snssai> &SliceInfoForUEConfigurationUpdate::getRequestedNssai() {
  return m_RequestedNssai;
}
void SliceInfoForUEConfigurationUpdate::setRequestedNssai(
    std::vector<Snssai> const &value) {
  m_RequestedNssai = value;
  m_RequestedNssaiIsSet = true;
}
bool SliceInfoForUEConfigurationUpdate::requestedNssaiIsSet() const {
  return m_RequestedNssaiIsSet;
}
void SliceInfoForUEConfigurationUpdate::unsetRequestedNssai() {
  m_RequestedNssaiIsSet = false;
}
std::vector<MappingOfSnssai> &
SliceInfoForUEConfigurationUpdate::getMappingOfNssai() {
  return m_MappingOfNssai;
}
void SliceInfoForUEConfigurationUpdate::setMappingOfNssai(
    std::vector<MappingOfSnssai> const &value) {
  m_MappingOfNssai = value;
  m_MappingOfNssaiIsSet = true;
}
bool SliceInfoForUEConfigurationUpdate::mappingOfNssaiIsSet() const {
  return m_MappingOfNssaiIsSet;
}
void SliceInfoForUEConfigurationUpdate::unsetMappingOfNssai() {
  m_MappingOfNssaiIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
