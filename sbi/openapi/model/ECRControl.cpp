/**
 * 3gpp-ecr-control
 * API for enhanced converage restriction control. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ECRControl.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ECRControl::ECRControl() {
  m_SupportedFeatures = "";
  m_MtcProviderId = "";
  m_MtcProviderIdIsSet = false;
  m_ScsAsId = "";
  m_ScsAsIdIsSet = false;
  m_ExternalId = "";
  m_ExternalIdIsSet = false;
  m_Msisdn = "";
  m_MsisdnIsSet = false;
  m_EcrDataWbsIsSet = false;
  m_RestrictedPlmnIdsIsSet = false;
  m_AllowedPlmnIdsIsSet = false;
}

ECRControl::~ECRControl() {}

void ECRControl::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ECRControl &o) {
  j = nlohmann::json();
  j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.mtcProviderIdIsSet())
    j["mtcProviderId"] = o.m_MtcProviderId;
  if (o.scsAsIdIsSet())
    j["scsAsId"] = o.m_ScsAsId;
  if (o.externalIdIsSet())
    j["externalId"] = o.m_ExternalId;
  if (o.msisdnIsSet())
    j["msisdn"] = o.m_Msisdn;
  if (o.ecrDataWbsIsSet() || !o.m_EcrDataWbs.empty())
    j["ecrDataWbs"] = o.m_EcrDataWbs;
  if (o.restrictedPlmnIdsIsSet() || !o.m_RestrictedPlmnIds.empty())
    j["restrictedPlmnIds"] = o.m_RestrictedPlmnIds;
  if (o.allowedPlmnIdsIsSet() || !o.m_AllowedPlmnIds.empty())
    j["allowedPlmnIds"] = o.m_AllowedPlmnIds;
}

void from_json(const nlohmann::json &j, ECRControl &o) {
  j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
  if (j.find("mtcProviderId") != j.end()) {
    j.at("mtcProviderId").get_to(o.m_MtcProviderId);
    o.m_MtcProviderIdIsSet = true;
  }
  if (j.find("scsAsId") != j.end()) {
    j.at("scsAsId").get_to(o.m_ScsAsId);
    o.m_ScsAsIdIsSet = true;
  }
  if (j.find("externalId") != j.end()) {
    j.at("externalId").get_to(o.m_ExternalId);
    o.m_ExternalIdIsSet = true;
  }
  if (j.find("msisdn") != j.end()) {
    j.at("msisdn").get_to(o.m_Msisdn);
    o.m_MsisdnIsSet = true;
  }
  if (j.find("ecrDataWbs") != j.end()) {
    j.at("ecrDataWbs").get_to(o.m_EcrDataWbs);
    o.m_EcrDataWbsIsSet = true;
  }
  if (j.find("restrictedPlmnIds") != j.end()) {
    j.at("restrictedPlmnIds").get_to(o.m_RestrictedPlmnIds);
    o.m_RestrictedPlmnIdsIsSet = true;
  }
  if (j.find("allowedPlmnIds") != j.end()) {
    j.at("allowedPlmnIds").get_to(o.m_AllowedPlmnIds);
    o.m_AllowedPlmnIdsIsSet = true;
  }
}

std::string ECRControl::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void ECRControl::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
}
std::string ECRControl::getMtcProviderId() const { return m_MtcProviderId; }
void ECRControl::setMtcProviderId(std::string const &value) {
  m_MtcProviderId = value;
  m_MtcProviderIdIsSet = true;
}
bool ECRControl::mtcProviderIdIsSet() const { return m_MtcProviderIdIsSet; }
void ECRControl::unsetMtcProviderId() { m_MtcProviderIdIsSet = false; }
std::string ECRControl::getScsAsId() const { return m_ScsAsId; }
void ECRControl::setScsAsId(std::string const &value) {
  m_ScsAsId = value;
  m_ScsAsIdIsSet = true;
}
bool ECRControl::scsAsIdIsSet() const { return m_ScsAsIdIsSet; }
void ECRControl::unsetScsAsId() { m_ScsAsIdIsSet = false; }
std::string ECRControl::getExternalId() const { return m_ExternalId; }
void ECRControl::setExternalId(std::string const &value) {
  m_ExternalId = value;
  m_ExternalIdIsSet = true;
}
bool ECRControl::externalIdIsSet() const { return m_ExternalIdIsSet; }
void ECRControl::unsetExternalId() { m_ExternalIdIsSet = false; }
std::string ECRControl::getMsisdn() const { return m_Msisdn; }
void ECRControl::setMsisdn(std::string const &value) {
  m_Msisdn = value;
  m_MsisdnIsSet = true;
}
bool ECRControl::msisdnIsSet() const { return m_MsisdnIsSet; }
void ECRControl::unsetMsisdn() { m_MsisdnIsSet = false; }
std::vector<PlmnEcRestrictionDataWb> &ECRControl::getEcrDataWbs() {
  return m_EcrDataWbs;
}
void ECRControl::setEcrDataWbs(
    std::vector<PlmnEcRestrictionDataWb> const &value) {
  m_EcrDataWbs = value;
  m_EcrDataWbsIsSet = true;
}
bool ECRControl::ecrDataWbsIsSet() const { return m_EcrDataWbsIsSet; }
void ECRControl::unsetEcrDataWbs() { m_EcrDataWbsIsSet = false; }
std::vector<PlmnId> &ECRControl::getRestrictedPlmnIds() {
  return m_RestrictedPlmnIds;
}
void ECRControl::setRestrictedPlmnIds(std::vector<PlmnId> const &value) {
  m_RestrictedPlmnIds = value;
  m_RestrictedPlmnIdsIsSet = true;
}
bool ECRControl::restrictedPlmnIdsIsSet() const {
  return m_RestrictedPlmnIdsIsSet;
}
void ECRControl::unsetRestrictedPlmnIds() { m_RestrictedPlmnIdsIsSet = false; }
std::vector<PlmnId> &ECRControl::getAllowedPlmnIds() {
  return m_AllowedPlmnIds;
}
void ECRControl::setAllowedPlmnIds(std::vector<PlmnId> const &value) {
  m_AllowedPlmnIds = value;
  m_AllowedPlmnIdsIsSet = true;
}
bool ECRControl::allowedPlmnIdsIsSet() const { return m_AllowedPlmnIdsIsSet; }
void ECRControl::unsetAllowedPlmnIds() { m_AllowedPlmnIdsIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
