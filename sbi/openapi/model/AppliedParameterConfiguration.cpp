/**
 * 3gpp-network-parameter-configuration
 * API for network parameter configuration. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AppliedParameterConfiguration.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AppliedParameterConfiguration::AppliedParameterConfiguration() {
  m_ExternalIdsIsSet = false;
  m_MsisdnsIsSet = false;
  m_MaximumLatency = 0;
  m_MaximumLatencyIsSet = false;
  m_MaximumResponseTime = 0;
  m_MaximumResponseTimeIsSet = false;
  m_MaximumDetectionTime = 0;
  m_MaximumDetectionTimeIsSet = false;
}

AppliedParameterConfiguration::~AppliedParameterConfiguration() {}

void AppliedParameterConfiguration::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AppliedParameterConfiguration &o) {
  j = nlohmann::json();
  if (o.externalIdsIsSet() || !o.m_ExternalIds.empty())
    j["externalIds"] = o.m_ExternalIds;
  if (o.msisdnsIsSet() || !o.m_Msisdns.empty())
    j["msisdns"] = o.m_Msisdns;
  if (o.maximumLatencyIsSet())
    j["maximumLatency"] = o.m_MaximumLatency;
  if (o.maximumResponseTimeIsSet())
    j["maximumResponseTime"] = o.m_MaximumResponseTime;
  if (o.maximumDetectionTimeIsSet())
    j["maximumDetectionTime"] = o.m_MaximumDetectionTime;
}

void from_json(const nlohmann::json &j, AppliedParameterConfiguration &o) {
  if (j.find("externalIds") != j.end()) {
    j.at("externalIds").get_to(o.m_ExternalIds);
    o.m_ExternalIdsIsSet = true;
  }
  if (j.find("msisdns") != j.end()) {
    j.at("msisdns").get_to(o.m_Msisdns);
    o.m_MsisdnsIsSet = true;
  }
  if (j.find("maximumLatency") != j.end()) {
    j.at("maximumLatency").get_to(o.m_MaximumLatency);
    o.m_MaximumLatencyIsSet = true;
  }
  if (j.find("maximumResponseTime") != j.end()) {
    j.at("maximumResponseTime").get_to(o.m_MaximumResponseTime);
    o.m_MaximumResponseTimeIsSet = true;
  }
  if (j.find("maximumDetectionTime") != j.end()) {
    j.at("maximumDetectionTime").get_to(o.m_MaximumDetectionTime);
    o.m_MaximumDetectionTimeIsSet = true;
  }
}

std::vector<std::string> &AppliedParameterConfiguration::getExternalIds() {
  return m_ExternalIds;
}
void AppliedParameterConfiguration::setExternalIds(
    std::vector<std::string> const &value) {
  m_ExternalIds = value;
  m_ExternalIdsIsSet = true;
}
bool AppliedParameterConfiguration::externalIdsIsSet() const {
  return m_ExternalIdsIsSet;
}
void AppliedParameterConfiguration::unsetExternalIds() {
  m_ExternalIdsIsSet = false;
}
std::vector<std::string> &AppliedParameterConfiguration::getMsisdns() {
  return m_Msisdns;
}
void AppliedParameterConfiguration::setMsisdns(
    std::vector<std::string> const &value) {
  m_Msisdns = value;
  m_MsisdnsIsSet = true;
}
bool AppliedParameterConfiguration::msisdnsIsSet() const {
  return m_MsisdnsIsSet;
}
void AppliedParameterConfiguration::unsetMsisdns() { m_MsisdnsIsSet = false; }
int32_t AppliedParameterConfiguration::getMaximumLatency() const {
  return m_MaximumLatency;
}
void AppliedParameterConfiguration::setMaximumLatency(int32_t const value) {
  m_MaximumLatency = value;
  m_MaximumLatencyIsSet = true;
}
bool AppliedParameterConfiguration::maximumLatencyIsSet() const {
  return m_MaximumLatencyIsSet;
}
void AppliedParameterConfiguration::unsetMaximumLatency() {
  m_MaximumLatencyIsSet = false;
}
int32_t AppliedParameterConfiguration::getMaximumResponseTime() const {
  return m_MaximumResponseTime;
}
void AppliedParameterConfiguration::setMaximumResponseTime(
    int32_t const value) {
  m_MaximumResponseTime = value;
  m_MaximumResponseTimeIsSet = true;
}
bool AppliedParameterConfiguration::maximumResponseTimeIsSet() const {
  return m_MaximumResponseTimeIsSet;
}
void AppliedParameterConfiguration::unsetMaximumResponseTime() {
  m_MaximumResponseTimeIsSet = false;
}
int32_t AppliedParameterConfiguration::getMaximumDetectionTime() const {
  return m_MaximumDetectionTime;
}
void AppliedParameterConfiguration::setMaximumDetectionTime(
    int32_t const value) {
  m_MaximumDetectionTime = value;
  m_MaximumDetectionTimeIsSet = true;
}
bool AppliedParameterConfiguration::maximumDetectionTimeIsSet() const {
  return m_MaximumDetectionTimeIsSet;
}
void AppliedParameterConfiguration::unsetMaximumDetectionTime() {
  m_MaximumDetectionTimeIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
