/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ServiceProfileChargingInformation.h
 *
 *
 */

#ifndef ServiceProfileChargingInformation_H_
#define ServiceProfileChargingInformation_H_

#include "Snssai.h"
#include "Throughput.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class ServiceProfileChargingInformation {
public:
  ServiceProfileChargingInformation();
  virtual ~ServiceProfileChargingInformation();

  void validate();

  /////////////////////////////////////////////
  /// ServiceProfileChargingInformation members

  /// <summary>
  ///
  /// </summary>
  std::string getServiceProfileIdentifier() const;
  void setServiceProfileIdentifier(std::string const &value);
  bool serviceProfileIdentifierIsSet() const;
  void unsetServiceProfileIdentifier();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getSNSSAIList();
  void setSNSSAIList(std::vector<Snssai> const &value);
  bool sNSSAIListIsSet() const;
  void unsetSNSSAIList();
  /// <summary>
  ///
  /// </summary>
  int32_t getLatency() const;
  void setLatency(int32_t const value);
  bool latencyIsSet() const;
  void unsetLatency();
  /// <summary>
  ///
  /// </summary>
  double getAvailability() const;
  void setAvailability(double const value);
  bool availabilityIsSet() const;
  void unsetAvailability();
  /// <summary>
  ///
  /// </summary>
  int32_t getJitter() const;
  void setJitter(int32_t const value);
  bool jitterIsSet() const;
  void unsetJitter();
  /// <summary>
  ///
  /// </summary>
  std::string getReliability() const;
  void setReliability(std::string const &value);
  bool reliabilityIsSet() const;
  void unsetReliability();
  /// <summary>
  ///
  /// </summary>
  int32_t getMaxNumberofUEs() const;
  void setMaxNumberofUEs(int32_t const value);
  bool maxNumberofUEsIsSet() const;
  void unsetMaxNumberofUEs();
  /// <summary>
  ///
  /// </summary>
  std::string getCoverageArea() const;
  void setCoverageArea(std::string const &value);
  bool coverageAreaIsSet() const;
  void unsetCoverageArea();
  /// <summary>
  ///
  /// </summary>
  Throughput getDLThptPerSlice() const;
  void setDLThptPerSlice(Throughput const &value);
  bool dLThptPerSliceIsSet() const;
  void unsetDLThptPerSlice();
  /// <summary>
  ///
  /// </summary>
  Throughput getDLThptPerUE() const;
  void setDLThptPerUE(Throughput const &value);
  bool dLThptPerUEIsSet() const;
  void unsetDLThptPerUE();
  /// <summary>
  ///
  /// </summary>
  Throughput getULThptPerSlice() const;
  void setULThptPerSlice(Throughput const &value);
  bool uLThptPerSliceIsSet() const;
  void unsetULThptPerSlice();
  /// <summary>
  ///
  /// </summary>
  Throughput getULThptPerUE() const;
  void setULThptPerUE(Throughput const &value);
  bool uLThptPerUEIsSet() const;
  void unsetULThptPerUE();
  /// <summary>
  ///
  /// </summary>
  int32_t getMaxNumberofPDUsessions() const;
  void setMaxNumberofPDUsessions(int32_t const value);
  bool maxNumberofPDUsessionsIsSet() const;
  void unsetMaxNumberofPDUsessions();
  /// <summary>
  ///
  /// </summary>
  std::string getKPIMonitoringList() const;
  void setKPIMonitoringList(std::string const &value);
  bool kPIMonitoringListIsSet() const;
  void unsetKPIMonitoringList();
  /// <summary>
  ///
  /// </summary>
  int32_t getSupportedAccessTechnology() const;
  void setSupportedAccessTechnology(int32_t const value);
  bool supportedAccessTechnologyIsSet() const;
  void unsetSupportedAccessTechnology();
  /// <summary>
  ///
  /// </summary>
  std::string getAddServiceProfileInfo() const;
  void setAddServiceProfileInfo(std::string const &value);
  bool addServiceProfileInfoIsSet() const;
  void unsetAddServiceProfileInfo();

  friend void to_json(nlohmann::json &j,
                      const ServiceProfileChargingInformation &o);
  friend void from_json(const nlohmann::json &j,
                        ServiceProfileChargingInformation &o);

protected:
  std::string m_ServiceProfileIdentifier;
  bool m_ServiceProfileIdentifierIsSet;
  std::vector<Snssai> m_SNSSAIList;
  bool m_SNSSAIListIsSet;
  int32_t m_Latency;
  bool m_LatencyIsSet;
  double m_Availability;
  bool m_AvailabilityIsSet;
  int32_t m_Jitter;
  bool m_JitterIsSet;
  std::string m_Reliability;
  bool m_ReliabilityIsSet;
  int32_t m_MaxNumberofUEs;
  bool m_MaxNumberofUEsIsSet;
  std::string m_CoverageArea;
  bool m_CoverageAreaIsSet;
  Throughput m_DLThptPerSlice;
  bool m_DLThptPerSliceIsSet;
  Throughput m_DLThptPerUE;
  bool m_DLThptPerUEIsSet;
  Throughput m_ULThptPerSlice;
  bool m_ULThptPerSliceIsSet;
  Throughput m_ULThptPerUE;
  bool m_ULThptPerUEIsSet;
  int32_t m_MaxNumberofPDUsessions;
  bool m_MaxNumberofPDUsessionsIsSet;
  std::string m_KPIMonitoringList;
  bool m_KPIMonitoringListIsSet;
  int32_t m_SupportedAccessTechnology;
  bool m_SupportedAccessTechnologyIsSet;
  std::string m_AddServiceProfileInfo;
  bool m_AddServiceProfileInfoIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ServiceProfileChargingInformation_H_ */
