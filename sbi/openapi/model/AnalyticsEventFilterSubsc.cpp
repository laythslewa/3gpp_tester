/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AnalyticsEventFilterSubsc.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AnalyticsEventFilterSubsc::AnalyticsEventFilterSubsc() {
  m_NwPerfReqsIsSet = false;
  m_LocAreaIsSet = false;
  m_AppIdsIsSet = false;
  m_Dnn = "";
  m_DnnIsSet = false;
  m_ExcepRequsIsSet = false;
  m_ExptAnaTypeIsSet = false;
  m_ExptUeBehavIsSet = false;
  m_ReptThldsIsSet = false;
  m_SnssaiIsSet = false;
  m_QosReqIsSet = false;
  m_QosFlowRetThdsIsSet = false;
  m_RanUeThrouThdsIsSet = false;
  m_ExtraReportReqIsSet = false;
}

AnalyticsEventFilterSubsc::~AnalyticsEventFilterSubsc() {}

void AnalyticsEventFilterSubsc::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AnalyticsEventFilterSubsc &o) {
  j = nlohmann::json();
  if (o.nwPerfReqsIsSet() || !o.m_NwPerfReqs.empty())
    j["nwPerfReqs"] = o.m_NwPerfReqs;
  if (o.locAreaIsSet())
    j["locArea"] = o.m_LocArea;
  if (o.appIdsIsSet() || !o.m_AppIds.empty())
    j["appIds"] = o.m_AppIds;
  if (o.dnnIsSet())
    j["dnn"] = o.m_Dnn;
  if (o.excepRequsIsSet() || !o.m_ExcepRequs.empty())
    j["excepRequs"] = o.m_ExcepRequs;
  if (o.exptAnaTypeIsSet())
    j["exptAnaType"] = o.m_ExptAnaType;
  if (o.exptUeBehavIsSet())
    j["exptUeBehav"] = o.m_ExptUeBehav;
  if (o.reptThldsIsSet() || !o.m_ReptThlds.empty())
    j["reptThlds"] = o.m_ReptThlds;
  if (o.snssaiIsSet())
    j["snssai"] = o.m_Snssai;
  if (o.qosReqIsSet())
    j["qosReq"] = o.m_QosReq;
  if (o.qosFlowRetThdsIsSet() || !o.m_QosFlowRetThds.empty())
    j["qosFlowRetThds"] = o.m_QosFlowRetThds;
  if (o.ranUeThrouThdsIsSet() || !o.m_RanUeThrouThds.empty())
    j["ranUeThrouThds"] = o.m_RanUeThrouThds;
  if (o.extraReportReqIsSet())
    j["extraReportReq"] = o.m_ExtraReportReq;
}

void from_json(const nlohmann::json &j, AnalyticsEventFilterSubsc &o) {
  if (j.find("nwPerfReqs") != j.end()) {
    j.at("nwPerfReqs").get_to(o.m_NwPerfReqs);
    o.m_NwPerfReqsIsSet = true;
  }
  if (j.find("locArea") != j.end()) {
    j.at("locArea").get_to(o.m_LocArea);
    o.m_LocAreaIsSet = true;
  }
  if (j.find("appIds") != j.end()) {
    j.at("appIds").get_to(o.m_AppIds);
    o.m_AppIdsIsSet = true;
  }
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
  if (j.find("excepRequs") != j.end()) {
    j.at("excepRequs").get_to(o.m_ExcepRequs);
    o.m_ExcepRequsIsSet = true;
  }
  if (j.find("exptAnaType") != j.end()) {
    j.at("exptAnaType").get_to(o.m_ExptAnaType);
    o.m_ExptAnaTypeIsSet = true;
  }
  if (j.find("exptUeBehav") != j.end()) {
    j.at("exptUeBehav").get_to(o.m_ExptUeBehav);
    o.m_ExptUeBehavIsSet = true;
  }
  if (j.find("reptThlds") != j.end()) {
    j.at("reptThlds").get_to(o.m_ReptThlds);
    o.m_ReptThldsIsSet = true;
  }
  if (j.find("snssai") != j.end()) {
    j.at("snssai").get_to(o.m_Snssai);
    o.m_SnssaiIsSet = true;
  }
  if (j.find("qosReq") != j.end()) {
    j.at("qosReq").get_to(o.m_QosReq);
    o.m_QosReqIsSet = true;
  }
  if (j.find("qosFlowRetThds") != j.end()) {
    j.at("qosFlowRetThds").get_to(o.m_QosFlowRetThds);
    o.m_QosFlowRetThdsIsSet = true;
  }
  if (j.find("ranUeThrouThds") != j.end()) {
    j.at("ranUeThrouThds").get_to(o.m_RanUeThrouThds);
    o.m_RanUeThrouThdsIsSet = true;
  }
  if (j.find("extraReportReq") != j.end()) {
    j.at("extraReportReq").get_to(o.m_ExtraReportReq);
    o.m_ExtraReportReqIsSet = true;
  }
}

std::vector<NetworkPerfRequirement> &
AnalyticsEventFilterSubsc::getNwPerfReqs() {
  return m_NwPerfReqs;
}
void AnalyticsEventFilterSubsc::setNwPerfReqs(
    std::vector<NetworkPerfRequirement> const &value) {
  m_NwPerfReqs = value;
  m_NwPerfReqsIsSet = true;
}
bool AnalyticsEventFilterSubsc::nwPerfReqsIsSet() const {
  return m_NwPerfReqsIsSet;
}
void AnalyticsEventFilterSubsc::unsetNwPerfReqs() { m_NwPerfReqsIsSet = false; }
LocationArea5G AnalyticsEventFilterSubsc::getLocArea() const {
  return m_LocArea;
}
void AnalyticsEventFilterSubsc::setLocArea(LocationArea5G const &value) {
  m_LocArea = value;
  m_LocAreaIsSet = true;
}
bool AnalyticsEventFilterSubsc::locAreaIsSet() const { return m_LocAreaIsSet; }
void AnalyticsEventFilterSubsc::unsetLocArea() { m_LocAreaIsSet = false; }
std::vector<std::string> &AnalyticsEventFilterSubsc::getAppIds() {
  return m_AppIds;
}
void AnalyticsEventFilterSubsc::setAppIds(
    std::vector<std::string> const &value) {
  m_AppIds = value;
  m_AppIdsIsSet = true;
}
bool AnalyticsEventFilterSubsc::appIdsIsSet() const { return m_AppIdsIsSet; }
void AnalyticsEventFilterSubsc::unsetAppIds() { m_AppIdsIsSet = false; }
std::string AnalyticsEventFilterSubsc::getDnn() const { return m_Dnn; }
void AnalyticsEventFilterSubsc::setDnn(std::string const &value) {
  m_Dnn = value;
  m_DnnIsSet = true;
}
bool AnalyticsEventFilterSubsc::dnnIsSet() const { return m_DnnIsSet; }
void AnalyticsEventFilterSubsc::unsetDnn() { m_DnnIsSet = false; }
std::vector<Exception> &AnalyticsEventFilterSubsc::getExcepRequs() {
  return m_ExcepRequs;
}
void AnalyticsEventFilterSubsc::setExcepRequs(
    std::vector<Exception> const &value) {
  m_ExcepRequs = value;
  m_ExcepRequsIsSet = true;
}
bool AnalyticsEventFilterSubsc::excepRequsIsSet() const {
  return m_ExcepRequsIsSet;
}
void AnalyticsEventFilterSubsc::unsetExcepRequs() { m_ExcepRequsIsSet = false; }
ExpectedAnalyticsType AnalyticsEventFilterSubsc::getExptAnaType() const {
  return m_ExptAnaType;
}
void AnalyticsEventFilterSubsc::setExptAnaType(
    ExpectedAnalyticsType const &value) {
  m_ExptAnaType = value;
  m_ExptAnaTypeIsSet = true;
}
bool AnalyticsEventFilterSubsc::exptAnaTypeIsSet() const {
  return m_ExptAnaTypeIsSet;
}
void AnalyticsEventFilterSubsc::unsetExptAnaType() {
  m_ExptAnaTypeIsSet = false;
}
ExpectedUeBehaviourData AnalyticsEventFilterSubsc::getExptUeBehav() const {
  return m_ExptUeBehav;
}
void AnalyticsEventFilterSubsc::setExptUeBehav(
    ExpectedUeBehaviourData const &value) {
  m_ExptUeBehav = value;
  m_ExptUeBehavIsSet = true;
}
bool AnalyticsEventFilterSubsc::exptUeBehavIsSet() const {
  return m_ExptUeBehavIsSet;
}
void AnalyticsEventFilterSubsc::unsetExptUeBehav() {
  m_ExptUeBehavIsSet = false;
}
std::vector<ThresholdLevel> &AnalyticsEventFilterSubsc::getReptThlds() {
  return m_ReptThlds;
}
void AnalyticsEventFilterSubsc::setReptThlds(
    std::vector<ThresholdLevel> const &value) {
  m_ReptThlds = value;
  m_ReptThldsIsSet = true;
}
bool AnalyticsEventFilterSubsc::reptThldsIsSet() const {
  return m_ReptThldsIsSet;
}
void AnalyticsEventFilterSubsc::unsetReptThlds() { m_ReptThldsIsSet = false; }
Snssai AnalyticsEventFilterSubsc::getSnssai() const { return m_Snssai; }
void AnalyticsEventFilterSubsc::setSnssai(Snssai const &value) {
  m_Snssai = value;
  m_SnssaiIsSet = true;
}
bool AnalyticsEventFilterSubsc::snssaiIsSet() const { return m_SnssaiIsSet; }
void AnalyticsEventFilterSubsc::unsetSnssai() { m_SnssaiIsSet = false; }
QosRequirement AnalyticsEventFilterSubsc::getQosReq() const { return m_QosReq; }
void AnalyticsEventFilterSubsc::setQosReq(QosRequirement const &value) {
  m_QosReq = value;
  m_QosReqIsSet = true;
}
bool AnalyticsEventFilterSubsc::qosReqIsSet() const { return m_QosReqIsSet; }
void AnalyticsEventFilterSubsc::unsetQosReq() { m_QosReqIsSet = false; }
std::vector<RetainabilityThreshold> &
AnalyticsEventFilterSubsc::getQosFlowRetThds() {
  return m_QosFlowRetThds;
}
void AnalyticsEventFilterSubsc::setQosFlowRetThds(
    std::vector<RetainabilityThreshold> const &value) {
  m_QosFlowRetThds = value;
  m_QosFlowRetThdsIsSet = true;
}
bool AnalyticsEventFilterSubsc::qosFlowRetThdsIsSet() const {
  return m_QosFlowRetThdsIsSet;
}
void AnalyticsEventFilterSubsc::unsetQosFlowRetThds() {
  m_QosFlowRetThdsIsSet = false;
}
std::vector<std::string> &AnalyticsEventFilterSubsc::getRanUeThrouThds() {
  return m_RanUeThrouThds;
}
void AnalyticsEventFilterSubsc::setRanUeThrouThds(
    std::vector<std::string> const &value) {
  m_RanUeThrouThds = value;
  m_RanUeThrouThdsIsSet = true;
}
bool AnalyticsEventFilterSubsc::ranUeThrouThdsIsSet() const {
  return m_RanUeThrouThdsIsSet;
}
void AnalyticsEventFilterSubsc::unsetRanUeThrouThds() {
  m_RanUeThrouThdsIsSet = false;
}
EventReportingRequirement AnalyticsEventFilterSubsc::getExtraReportReq() const {
  return m_ExtraReportReq;
}
void AnalyticsEventFilterSubsc::setExtraReportReq(
    EventReportingRequirement const &value) {
  m_ExtraReportReq = value;
  m_ExtraReportReqIsSet = true;
}
bool AnalyticsEventFilterSubsc::extraReportReqIsSet() const {
  return m_ExtraReportReqIsSet;
}
void AnalyticsEventFilterSubsc::unsetExtraReportReq() {
  m_ExtraReportReqIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
