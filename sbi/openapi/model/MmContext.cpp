/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MmContext.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

MmContext::MmContext() {
  m_NasSecurityModeIsSet = false;
  m_EpsNasSecurityModeIsSet = false;
  m_NasDownlinkCount = 0;
  m_NasDownlinkCountIsSet = false;
  m_NasUplinkCount = 0;
  m_NasUplinkCountIsSet = false;
  m_UeSecurityCapabilityIsSet = false;
  m_S1UeNetworkCapabilityIsSet = false;
  m_AllowedNssaiIsSet = false;
  m_NssaiMappingListIsSet = false;
  m_AllowedHomeNssaiIsSet = false;
  m_NsInstanceListIsSet = false;
  m_ExpectedUEbehaviorIsSet = false;
  m_UeDifferentiationInfoIsSet = false;
  m_PlmnAssiUeRadioCapIdIsSet = false;
  m_ManAssiUeRadioCapIdIsSet = false;
  m_UcmfDicEntryId = "";
  m_UcmfDicEntryIdIsSet = false;
  m_N3IwfIdIsSet = false;
  m_WagfIdIsSet = false;
  m_TngfIdIsSet = false;
  m_AnN2ApId = 0;
  m_AnN2ApIdIsSet = false;
  m_NssaaStatusListIsSet = false;
  m_PendingNssaiMappingListIsSet = false;
}

MmContext::~MmContext() {}

void MmContext::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const MmContext &o) {
  j = nlohmann::json();
  j["accessType"] = o.m_AccessType;
  if (o.nasSecurityModeIsSet())
    j["nasSecurityMode"] = o.m_NasSecurityMode;
  if (o.epsNasSecurityModeIsSet())
    j["epsNasSecurityMode"] = o.m_EpsNasSecurityMode;
  if (o.nasDownlinkCountIsSet())
    j["nasDownlinkCount"] = o.m_NasDownlinkCount;
  if (o.nasUplinkCountIsSet())
    j["nasUplinkCount"] = o.m_NasUplinkCount;
  if (o.ueSecurityCapabilityIsSet())
    j["ueSecurityCapability"] = o.m_UeSecurityCapability;
  if (o.s1UeNetworkCapabilityIsSet())
    j["s1UeNetworkCapability"] = o.m_S1UeNetworkCapability;
  if (o.allowedNssaiIsSet() || !o.m_AllowedNssai.empty())
    j["allowedNssai"] = o.m_AllowedNssai;
  if (o.nssaiMappingListIsSet() || !o.m_NssaiMappingList.empty())
    j["nssaiMappingList"] = o.m_NssaiMappingList;
  if (o.allowedHomeNssaiIsSet() || !o.m_AllowedHomeNssai.empty())
    j["allowedHomeNssai"] = o.m_AllowedHomeNssai;
  if (o.nsInstanceListIsSet() || !o.m_NsInstanceList.empty())
    j["nsInstanceList"] = o.m_NsInstanceList;
  if (o.expectedUEbehaviorIsSet())
    j["expectedUEbehavior"] = o.m_ExpectedUEbehavior;
  if (o.ueDifferentiationInfoIsSet())
    j["ueDifferentiationInfo"] = o.m_UeDifferentiationInfo;
  if (o.plmnAssiUeRadioCapIdIsSet())
    j["plmnAssiUeRadioCapId"] = o.m_PlmnAssiUeRadioCapId;
  if (o.manAssiUeRadioCapIdIsSet())
    j["manAssiUeRadioCapId"] = o.m_ManAssiUeRadioCapId;
  if (o.ucmfDicEntryIdIsSet())
    j["ucmfDicEntryId"] = o.m_UcmfDicEntryId;
  if (o.n3IwfIdIsSet())
    j["n3IwfId"] = o.m_N3IwfId;
  if (o.wagfIdIsSet())
    j["wagfId"] = o.m_WagfId;
  if (o.tngfIdIsSet())
    j["tngfId"] = o.m_TngfId;
  if (o.anN2ApIdIsSet())
    j["anN2ApId"] = o.m_AnN2ApId;
  if (o.nssaaStatusListIsSet() || !o.m_NssaaStatusList.empty())
    j["nssaaStatusList"] = o.m_NssaaStatusList;
  if (o.pendingNssaiMappingListIsSet() || !o.m_PendingNssaiMappingList.empty())
    j["pendingNssaiMappingList"] = o.m_PendingNssaiMappingList;
}

void from_json(const nlohmann::json &j, MmContext &o) {
  j.at("accessType").get_to(o.m_AccessType);
  if (j.find("nasSecurityMode") != j.end()) {
    j.at("nasSecurityMode").get_to(o.m_NasSecurityMode);
    o.m_NasSecurityModeIsSet = true;
  }
  if (j.find("epsNasSecurityMode") != j.end()) {
    j.at("epsNasSecurityMode").get_to(o.m_EpsNasSecurityMode);
    o.m_EpsNasSecurityModeIsSet = true;
  }
  if (j.find("nasDownlinkCount") != j.end()) {
    j.at("nasDownlinkCount").get_to(o.m_NasDownlinkCount);
    o.m_NasDownlinkCountIsSet = true;
  }
  if (j.find("nasUplinkCount") != j.end()) {
    j.at("nasUplinkCount").get_to(o.m_NasUplinkCount);
    o.m_NasUplinkCountIsSet = true;
  }
  if (j.find("ueSecurityCapability") != j.end()) {
    j.at("ueSecurityCapability").get_to(o.m_UeSecurityCapability);
    o.m_UeSecurityCapabilityIsSet = true;
  }
  if (j.find("s1UeNetworkCapability") != j.end()) {
    j.at("s1UeNetworkCapability").get_to(o.m_S1UeNetworkCapability);
    o.m_S1UeNetworkCapabilityIsSet = true;
  }
  if (j.find("allowedNssai") != j.end()) {
    j.at("allowedNssai").get_to(o.m_AllowedNssai);
    o.m_AllowedNssaiIsSet = true;
  }
  if (j.find("nssaiMappingList") != j.end()) {
    j.at("nssaiMappingList").get_to(o.m_NssaiMappingList);
    o.m_NssaiMappingListIsSet = true;
  }
  if (j.find("allowedHomeNssai") != j.end()) {
    j.at("allowedHomeNssai").get_to(o.m_AllowedHomeNssai);
    o.m_AllowedHomeNssaiIsSet = true;
  }
  if (j.find("nsInstanceList") != j.end()) {
    j.at("nsInstanceList").get_to(o.m_NsInstanceList);
    o.m_NsInstanceListIsSet = true;
  }
  if (j.find("expectedUEbehavior") != j.end()) {
    j.at("expectedUEbehavior").get_to(o.m_ExpectedUEbehavior);
    o.m_ExpectedUEbehaviorIsSet = true;
  }
  if (j.find("ueDifferentiationInfo") != j.end()) {
    j.at("ueDifferentiationInfo").get_to(o.m_UeDifferentiationInfo);
    o.m_UeDifferentiationInfoIsSet = true;
  }
  if (j.find("plmnAssiUeRadioCapId") != j.end()) {
    j.at("plmnAssiUeRadioCapId").get_to(o.m_PlmnAssiUeRadioCapId);
    o.m_PlmnAssiUeRadioCapIdIsSet = true;
  }
  if (j.find("manAssiUeRadioCapId") != j.end()) {
    j.at("manAssiUeRadioCapId").get_to(o.m_ManAssiUeRadioCapId);
    o.m_ManAssiUeRadioCapIdIsSet = true;
  }
  if (j.find("ucmfDicEntryId") != j.end()) {
    j.at("ucmfDicEntryId").get_to(o.m_UcmfDicEntryId);
    o.m_UcmfDicEntryIdIsSet = true;
  }
  if (j.find("n3IwfId") != j.end()) {
    j.at("n3IwfId").get_to(o.m_N3IwfId);
    o.m_N3IwfIdIsSet = true;
  }
  if (j.find("wagfId") != j.end()) {
    j.at("wagfId").get_to(o.m_WagfId);
    o.m_WagfIdIsSet = true;
  }
  if (j.find("tngfId") != j.end()) {
    j.at("tngfId").get_to(o.m_TngfId);
    o.m_TngfIdIsSet = true;
  }
  if (j.find("anN2ApId") != j.end()) {
    j.at("anN2ApId").get_to(o.m_AnN2ApId);
    o.m_AnN2ApIdIsSet = true;
  }
  if (j.find("nssaaStatusList") != j.end()) {
    j.at("nssaaStatusList").get_to(o.m_NssaaStatusList);
    o.m_NssaaStatusListIsSet = true;
  }
  if (j.find("pendingNssaiMappingList") != j.end()) {
    j.at("pendingNssaiMappingList").get_to(o.m_PendingNssaiMappingList);
    o.m_PendingNssaiMappingListIsSet = true;
  }
}

AccessType MmContext::getAccessType() const { return m_AccessType; }
void MmContext::setAccessType(AccessType const &value) { m_AccessType = value; }
NasSecurityMode MmContext::getNasSecurityMode() const {
  return m_NasSecurityMode;
}
void MmContext::setNasSecurityMode(NasSecurityMode const &value) {
  m_NasSecurityMode = value;
  m_NasSecurityModeIsSet = true;
}
bool MmContext::nasSecurityModeIsSet() const { return m_NasSecurityModeIsSet; }
void MmContext::unsetNasSecurityMode() { m_NasSecurityModeIsSet = false; }
EpsNasSecurityMode MmContext::getEpsNasSecurityMode() const {
  return m_EpsNasSecurityMode;
}
void MmContext::setEpsNasSecurityMode(EpsNasSecurityMode const &value) {
  m_EpsNasSecurityMode = value;
  m_EpsNasSecurityModeIsSet = true;
}
bool MmContext::epsNasSecurityModeIsSet() const {
  return m_EpsNasSecurityModeIsSet;
}
void MmContext::unsetEpsNasSecurityMode() { m_EpsNasSecurityModeIsSet = false; }
int32_t MmContext::getNasDownlinkCount() const { return m_NasDownlinkCount; }
void MmContext::setNasDownlinkCount(int32_t const value) {
  m_NasDownlinkCount = value;
  m_NasDownlinkCountIsSet = true;
}
bool MmContext::nasDownlinkCountIsSet() const {
  return m_NasDownlinkCountIsSet;
}
void MmContext::unsetNasDownlinkCount() { m_NasDownlinkCountIsSet = false; }
int32_t MmContext::getNasUplinkCount() const { return m_NasUplinkCount; }
void MmContext::setNasUplinkCount(int32_t const value) {
  m_NasUplinkCount = value;
  m_NasUplinkCountIsSet = true;
}
bool MmContext::nasUplinkCountIsSet() const { return m_NasUplinkCountIsSet; }
void MmContext::unsetNasUplinkCount() { m_NasUplinkCountIsSet = false; }
std::string MmContext::getUeSecurityCapability() const {
  return m_UeSecurityCapability;
}
void MmContext::setUeSecurityCapability(std::string const &value) {
  m_UeSecurityCapability = value;
  m_UeSecurityCapabilityIsSet = true;
}
bool MmContext::ueSecurityCapabilityIsSet() const {
  return m_UeSecurityCapabilityIsSet;
}
void MmContext::unsetUeSecurityCapability() {
  m_UeSecurityCapabilityIsSet = false;
}
std::string MmContext::getS1UeNetworkCapability() const {
  return m_S1UeNetworkCapability;
}
void MmContext::setS1UeNetworkCapability(std::string const &value) {
  m_S1UeNetworkCapability = value;
  m_S1UeNetworkCapabilityIsSet = true;
}
bool MmContext::s1UeNetworkCapabilityIsSet() const {
  return m_S1UeNetworkCapabilityIsSet;
}
void MmContext::unsetS1UeNetworkCapability() {
  m_S1UeNetworkCapabilityIsSet = false;
}
std::vector<Snssai> &MmContext::getAllowedNssai() { return m_AllowedNssai; }
void MmContext::setAllowedNssai(std::vector<Snssai> const &value) {
  m_AllowedNssai = value;
  m_AllowedNssaiIsSet = true;
}
bool MmContext::allowedNssaiIsSet() const { return m_AllowedNssaiIsSet; }
void MmContext::unsetAllowedNssai() { m_AllowedNssaiIsSet = false; }
std::vector<NssaiMapping> &MmContext::getNssaiMappingList() {
  return m_NssaiMappingList;
}
void MmContext::setNssaiMappingList(std::vector<NssaiMapping> const &value) {
  m_NssaiMappingList = value;
  m_NssaiMappingListIsSet = true;
}
bool MmContext::nssaiMappingListIsSet() const {
  return m_NssaiMappingListIsSet;
}
void MmContext::unsetNssaiMappingList() { m_NssaiMappingListIsSet = false; }
std::vector<Snssai> &MmContext::getAllowedHomeNssai() {
  return m_AllowedHomeNssai;
}
void MmContext::setAllowedHomeNssai(std::vector<Snssai> const &value) {
  m_AllowedHomeNssai = value;
  m_AllowedHomeNssaiIsSet = true;
}
bool MmContext::allowedHomeNssaiIsSet() const {
  return m_AllowedHomeNssaiIsSet;
}
void MmContext::unsetAllowedHomeNssai() { m_AllowedHomeNssaiIsSet = false; }
std::vector<std::string> &MmContext::getNsInstanceList() {
  return m_NsInstanceList;
}
void MmContext::setNsInstanceList(std::vector<std::string> const &value) {
  m_NsInstanceList = value;
  m_NsInstanceListIsSet = true;
}
bool MmContext::nsInstanceListIsSet() const { return m_NsInstanceListIsSet; }
void MmContext::unsetNsInstanceList() { m_NsInstanceListIsSet = false; }
ExpectedUeBehavior MmContext::getExpectedUEbehavior() const {
  return m_ExpectedUEbehavior;
}
void MmContext::setExpectedUEbehavior(ExpectedUeBehavior const &value) {
  m_ExpectedUEbehavior = value;
  m_ExpectedUEbehaviorIsSet = true;
}
bool MmContext::expectedUEbehaviorIsSet() const {
  return m_ExpectedUEbehaviorIsSet;
}
void MmContext::unsetExpectedUEbehavior() { m_ExpectedUEbehaviorIsSet = false; }
UeDifferentiationInfo MmContext::getUeDifferentiationInfo() const {
  return m_UeDifferentiationInfo;
}
void MmContext::setUeDifferentiationInfo(UeDifferentiationInfo const &value) {
  m_UeDifferentiationInfo = value;
  m_UeDifferentiationInfoIsSet = true;
}
bool MmContext::ueDifferentiationInfoIsSet() const {
  return m_UeDifferentiationInfoIsSet;
}
void MmContext::unsetUeDifferentiationInfo() {
  m_UeDifferentiationInfoIsSet = false;
}
std::string MmContext::getPlmnAssiUeRadioCapId() const {
  return m_PlmnAssiUeRadioCapId;
}
void MmContext::setPlmnAssiUeRadioCapId(std::string const &value) {
  m_PlmnAssiUeRadioCapId = value;
  m_PlmnAssiUeRadioCapIdIsSet = true;
}
bool MmContext::plmnAssiUeRadioCapIdIsSet() const {
  return m_PlmnAssiUeRadioCapIdIsSet;
}
void MmContext::unsetPlmnAssiUeRadioCapId() {
  m_PlmnAssiUeRadioCapIdIsSet = false;
}
std::string MmContext::getManAssiUeRadioCapId() const {
  return m_ManAssiUeRadioCapId;
}
void MmContext::setManAssiUeRadioCapId(std::string const &value) {
  m_ManAssiUeRadioCapId = value;
  m_ManAssiUeRadioCapIdIsSet = true;
}
bool MmContext::manAssiUeRadioCapIdIsSet() const {
  return m_ManAssiUeRadioCapIdIsSet;
}
void MmContext::unsetManAssiUeRadioCapId() {
  m_ManAssiUeRadioCapIdIsSet = false;
}
std::string MmContext::getUcmfDicEntryId() const { return m_UcmfDicEntryId; }
void MmContext::setUcmfDicEntryId(std::string const &value) {
  m_UcmfDicEntryId = value;
  m_UcmfDicEntryIdIsSet = true;
}
bool MmContext::ucmfDicEntryIdIsSet() const { return m_UcmfDicEntryIdIsSet; }
void MmContext::unsetUcmfDicEntryId() { m_UcmfDicEntryIdIsSet = false; }
GlobalRanNodeId MmContext::getN3IwfId() const { return m_N3IwfId; }
void MmContext::setN3IwfId(GlobalRanNodeId const &value) {
  m_N3IwfId = value;
  m_N3IwfIdIsSet = true;
}
bool MmContext::n3IwfIdIsSet() const { return m_N3IwfIdIsSet; }
void MmContext::unsetN3IwfId() { m_N3IwfIdIsSet = false; }
GlobalRanNodeId MmContext::getWagfId() const { return m_WagfId; }
void MmContext::setWagfId(GlobalRanNodeId const &value) {
  m_WagfId = value;
  m_WagfIdIsSet = true;
}
bool MmContext::wagfIdIsSet() const { return m_WagfIdIsSet; }
void MmContext::unsetWagfId() { m_WagfIdIsSet = false; }
GlobalRanNodeId MmContext::getTngfId() const { return m_TngfId; }
void MmContext::setTngfId(GlobalRanNodeId const &value) {
  m_TngfId = value;
  m_TngfIdIsSet = true;
}
bool MmContext::tngfIdIsSet() const { return m_TngfIdIsSet; }
void MmContext::unsetTngfId() { m_TngfIdIsSet = false; }
int32_t MmContext::getAnN2ApId() const { return m_AnN2ApId; }
void MmContext::setAnN2ApId(int32_t const value) {
  m_AnN2ApId = value;
  m_AnN2ApIdIsSet = true;
}
bool MmContext::anN2ApIdIsSet() const { return m_AnN2ApIdIsSet; }
void MmContext::unsetAnN2ApId() { m_AnN2ApIdIsSet = false; }
std::vector<NssaaStatus> &MmContext::getNssaaStatusList() {
  return m_NssaaStatusList;
}
void MmContext::setNssaaStatusList(std::vector<NssaaStatus> const &value) {
  m_NssaaStatusList = value;
  m_NssaaStatusListIsSet = true;
}
bool MmContext::nssaaStatusListIsSet() const { return m_NssaaStatusListIsSet; }
void MmContext::unsetNssaaStatusList() { m_NssaaStatusListIsSet = false; }
std::vector<NssaiMapping> &MmContext::getPendingNssaiMappingList() {
  return m_PendingNssaiMappingList;
}
void MmContext::setPendingNssaiMappingList(
    std::vector<NssaiMapping> const &value) {
  m_PendingNssaiMappingList = value;
  m_PendingNssaiMappingListIsSet = true;
}
bool MmContext::pendingNssaiMappingListIsSet() const {
  return m_PendingNssaiMappingListIsSet;
}
void MmContext::unsetPendingNssaiMappingList() {
  m_PendingNssaiMappingListIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
