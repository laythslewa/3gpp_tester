/**
 * Npcf_UEPolicyControl
 * UE Policy Control Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualUEPolicyAssociationDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

IndividualUEPolicyAssociationDocumentApi::
    IndividualUEPolicyAssociationDocumentApi(
        std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void IndividualUEPolicyAssociationDocumentApi::init() { setupRoutes(); }

void IndividualUEPolicyAssociationDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Delete(
      *router, base + "/policies/:polAssoId",
      Routes::bind(&IndividualUEPolicyAssociationDocumentApi::
                       delete_individual_ue_policy_association_handler,
                   this));
  Routes::Get(*router, base + "/policies/:polAssoId",
              Routes::bind(&IndividualUEPolicyAssociationDocumentApi::
                               read_individual_ue_policy_association_handler,
                           this));
  Routes::Post(
      *router, base + "/policies/:polAssoId/update",
      Routes::bind(
          &IndividualUEPolicyAssociationDocumentApi::
              report_observed_event_triggers_for_individual_ue_policy_association_handler,
          this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &IndividualUEPolicyAssociationDocumentApi::
          individual_ue_policy_association_document_api_default_handler,
      this));
}

void IndividualUEPolicyAssociationDocumentApi::
    delete_individual_ue_policy_association_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto polAssoId = request.param(":polAssoId").as<std::string>();

  try {
    this->delete_individual_ue_policy_association(polAssoId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualUEPolicyAssociationDocumentApi::
    read_individual_ue_policy_association_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto polAssoId = request.param(":polAssoId").as<std::string>();

  try {
    this->read_individual_ue_policy_association(polAssoId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualUEPolicyAssociationDocumentApi::
    report_observed_event_triggers_for_individual_ue_policy_association_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto polAssoId = request.param(":polAssoId").as<std::string>();

  // Getting the body param

  PolicyAssociationUpdateRequest policyAssociationUpdateRequest;

  try {
    nlohmann::json::parse(request.body())
        .get_to(policyAssociationUpdateRequest);
    this->report_observed_event_triggers_for_individual_ue_policy_association(
        polAssoId, policyAssociationUpdateRequest, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void IndividualUEPolicyAssociationDocumentApi::
    individual_ue_policy_association_document_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
