/**
 * VAE_FileDistribution
 * API for VAE File Distribution Service Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "FileDistributionData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

FileDistributionData::FileDistributionData() {
  m_GroupId = "";
  m_GroupIdIsSet = false;
  m_ServiceClass = "";
  m_ServiceClassIsSet = false;
  m_MaxBitrate = "";
  m_MaxDelay = 0;
  m_LocalMbmsInfoIsSet = false;
  m_LocalMbmsActInd = false;
  m_LocalMbmsActIndIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
}

FileDistributionData::~FileDistributionData() {}

void FileDistributionData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const FileDistributionData &o) {
  j = nlohmann::json();
  if (o.groupIdIsSet())
    j["groupId"] = o.m_GroupId;
  j["fileLists"] = o.m_FileLists;
  if (o.serviceClassIsSet())
    j["serviceClass"] = o.m_ServiceClass;
  j["geoArea"] = o.m_GeoArea;
  j["maxBitrate"] = o.m_MaxBitrate;
  j["maxDelay"] = o.m_MaxDelay;
  if (o.localMbmsInfoIsSet())
    j["localMbmsInfo"] = o.m_LocalMbmsInfo;
  if (o.localMbmsActIndIsSet())
    j["localMbmsActInd"] = o.m_LocalMbmsActInd;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, FileDistributionData &o) {
  if (j.find("groupId") != j.end()) {
    j.at("groupId").get_to(o.m_GroupId);
    o.m_GroupIdIsSet = true;
  }
  j.at("fileLists").get_to(o.m_FileLists);
  if (j.find("serviceClass") != j.end()) {
    j.at("serviceClass").get_to(o.m_ServiceClass);
    o.m_ServiceClassIsSet = true;
  }
  j.at("geoArea").get_to(o.m_GeoArea);
  j.at("maxBitrate").get_to(o.m_MaxBitrate);
  j.at("maxDelay").get_to(o.m_MaxDelay);
  if (j.find("localMbmsInfo") != j.end()) {
    j.at("localMbmsInfo").get_to(o.m_LocalMbmsInfo);
    o.m_LocalMbmsInfoIsSet = true;
  }
  if (j.find("localMbmsActInd") != j.end()) {
    j.at("localMbmsActInd").get_to(o.m_LocalMbmsActInd);
    o.m_LocalMbmsActIndIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::string FileDistributionData::getGroupId() const { return m_GroupId; }
void FileDistributionData::setGroupId(std::string const &value) {
  m_GroupId = value;
  m_GroupIdIsSet = true;
}
bool FileDistributionData::groupIdIsSet() const { return m_GroupIdIsSet; }
void FileDistributionData::unsetGroupId() { m_GroupIdIsSet = false; }
std::vector<FileList> &FileDistributionData::getFileLists() {
  return m_FileLists;
}
void FileDistributionData::setFileLists(std::vector<FileList> const &value) {
  m_FileLists = value;
}
std::string FileDistributionData::getServiceClass() const {
  return m_ServiceClass;
}
void FileDistributionData::setServiceClass(std::string const &value) {
  m_ServiceClass = value;
  m_ServiceClassIsSet = true;
}
bool FileDistributionData::serviceClassIsSet() const {
  return m_ServiceClassIsSet;
}
void FileDistributionData::unsetServiceClass() { m_ServiceClassIsSet = false; }
GeographicArea FileDistributionData::getGeoArea() const { return m_GeoArea; }
void FileDistributionData::setGeoArea(GeographicArea const &value) {
  m_GeoArea = value;
}
std::string FileDistributionData::getMaxBitrate() const { return m_MaxBitrate; }
void FileDistributionData::setMaxBitrate(std::string const &value) {
  m_MaxBitrate = value;
}
int32_t FileDistributionData::getMaxDelay() const { return m_MaxDelay; }
void FileDistributionData::setMaxDelay(int32_t const value) {
  m_MaxDelay = value;
}
LocalMbmsInfo FileDistributionData::getLocalMbmsInfo() const {
  return m_LocalMbmsInfo;
}
void FileDistributionData::setLocalMbmsInfo(LocalMbmsInfo const &value) {
  m_LocalMbmsInfo = value;
  m_LocalMbmsInfoIsSet = true;
}
bool FileDistributionData::localMbmsInfoIsSet() const {
  return m_LocalMbmsInfoIsSet;
}
void FileDistributionData::unsetLocalMbmsInfo() {
  m_LocalMbmsInfoIsSet = false;
}
bool FileDistributionData::isLocalMbmsActInd() const {
  return m_LocalMbmsActInd;
}
void FileDistributionData::setLocalMbmsActInd(bool const value) {
  m_LocalMbmsActInd = value;
  m_LocalMbmsActIndIsSet = true;
}
bool FileDistributionData::localMbmsActIndIsSet() const {
  return m_LocalMbmsActIndIsSet;
}
void FileDistributionData::unsetLocalMbmsActInd() {
  m_LocalMbmsActIndIsSet = false;
}
std::string FileDistributionData::getSuppFeat() const { return m_SuppFeat; }
void FileDistributionData::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool FileDistributionData::suppFeatIsSet() const { return m_SuppFeatIsSet; }
void FileDistributionData::unsetSuppFeat() { m_SuppFeatIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
