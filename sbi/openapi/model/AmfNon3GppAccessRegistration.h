/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AmfNon3GppAccessRegistration.h
 *
 *
 */

#ifndef AmfNon3GppAccessRegistration_H_
#define AmfNon3GppAccessRegistration_H_

#include "BackupAmfInfo.h"
#include "ContextInfo.h"
#include "Guami.h"
#include "ImsVoPs.h"
#include "RatType.h"
#include "ServiceName.h"
#include "VgmlcAddress.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class AmfNon3GppAccessRegistration {
public:
  AmfNon3GppAccessRegistration();
  virtual ~AmfNon3GppAccessRegistration();

  void validate();

  /////////////////////////////////////////////
  /// AmfNon3GppAccessRegistration members

  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getAmfInstanceId() const;
  void setAmfInstanceId(std::string const &value);
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  bool isPurgeFlag() const;
  void setPurgeFlag(bool const value);
  bool purgeFlagIsSet() const;
  void unsetPurgeFlag();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  ///
  /// </summary>
  ImsVoPs getImsVoPs() const;
  void setImsVoPs(ImsVoPs const &value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getDeregCallbackUri() const;
  void setDeregCallbackUri(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  ServiceName getAmfServiceNameDereg() const;
  void setAmfServiceNameDereg(ServiceName const &value);
  bool amfServiceNameDeregIsSet() const;
  void unsetAmfServiceNameDereg();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getPcscfRestorationCallbackUri() const;
  void setPcscfRestorationCallbackUri(std::string const &value);
  bool pcscfRestorationCallbackUriIsSet() const;
  void unsetPcscfRestorationCallbackUri();
  /// <summary>
  ///
  /// </summary>
  ServiceName getAmfServiceNamePcscfRest() const;
  void setAmfServiceNamePcscfRest(ServiceName const &value);
  bool amfServiceNamePcscfRestIsSet() const;
  void unsetAmfServiceNamePcscfRest();
  /// <summary>
  ///
  /// </summary>
  Guami getGuami() const;
  void setGuami(Guami const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<BackupAmfInfo> &getBackupAmfInfo();
  void setBackupAmfInfo(std::vector<BackupAmfInfo> const &value);
  bool backupAmfInfoIsSet() const;
  void unsetBackupAmfInfo();
  /// <summary>
  ///
  /// </summary>
  RatType getRatType() const;
  void setRatType(RatType const &value);
  /// <summary>
  ///
  /// </summary>
  bool isUrrpIndicator() const;
  void setUrrpIndicator(bool const value);
  bool urrpIndicatorIsSet() const;
  void unsetUrrpIndicator();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getAmfEeSubscriptionId() const;
  void setAmfEeSubscriptionId(std::string const &value);
  bool amfEeSubscriptionIdIsSet() const;
  void unsetAmfEeSubscriptionId();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getRegistrationTime() const;
  void setRegistrationTime(std::string const &value);
  bool registrationTimeIsSet() const;
  void unsetRegistrationTime();
  /// <summary>
  ///
  /// </summary>
  VgmlcAddress getVgmlcAddress() const;
  void setVgmlcAddress(VgmlcAddress const &value);
  bool vgmlcAddressIsSet() const;
  void unsetVgmlcAddress();
  /// <summary>
  ///
  /// </summary>
  ContextInfo getContextInfo() const;
  void setContextInfo(ContextInfo const &value);
  bool contextInfoIsSet() const;
  void unsetContextInfo();
  /// <summary>
  ///
  /// </summary>
  bool isNoEeSubscriptionInd() const;
  void setNoEeSubscriptionInd(bool const value);
  bool noEeSubscriptionIndIsSet() const;
  void unsetNoEeSubscriptionInd();
  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();

  friend void to_json(nlohmann::json &j, const AmfNon3GppAccessRegistration &o);
  friend void from_json(const nlohmann::json &j,
                        AmfNon3GppAccessRegistration &o);

protected:
  std::string m_AmfInstanceId;

  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  bool m_PurgeFlag;
  bool m_PurgeFlagIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  ImsVoPs m_ImsVoPs;

  std::string m_DeregCallbackUri;

  ServiceName m_AmfServiceNameDereg;
  bool m_AmfServiceNameDeregIsSet;
  std::string m_PcscfRestorationCallbackUri;
  bool m_PcscfRestorationCallbackUriIsSet;
  ServiceName m_AmfServiceNamePcscfRest;
  bool m_AmfServiceNamePcscfRestIsSet;
  Guami m_Guami;

  std::vector<BackupAmfInfo> m_BackupAmfInfo;
  bool m_BackupAmfInfoIsSet;
  RatType m_RatType;

  bool m_UrrpIndicator;
  bool m_UrrpIndicatorIsSet;
  std::string m_AmfEeSubscriptionId;
  bool m_AmfEeSubscriptionIdIsSet;
  std::string m_RegistrationTime;
  bool m_RegistrationTimeIsSet;
  VgmlcAddress m_VgmlcAddress;
  bool m_VgmlcAddressIsSet;
  ContextInfo m_ContextInfo;
  bool m_ContextInfoIsSet;
  bool m_NoEeSubscriptionInd;
  bool m_NoEeSubscriptionIndIsSet;
  std::string m_Supi;
  bool m_SupiIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AmfNon3GppAccessRegistration_H_ */
