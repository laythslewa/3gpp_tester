/**
 * SS_NetworkResourceAdaptation
 * SS Network Resource Adaptation Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualUnicastSubscriptionDocumentApi.h
 *
 *
 */

#ifndef IndividualUnicastSubscriptionDocumentApi_H_
#define IndividualUnicastSubscriptionDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "ProblemDetails.h"
#include "UnicastSubscription.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class IndividualUnicastSubscriptionDocumentApi {
public:
  IndividualUnicastSubscriptionDocumentApi(
      std::shared_ptr<Pistache::Rest::Router>);
  virtual ~IndividualUnicastSubscriptionDocumentApi() {}
  void init();

  const std::string base = "/ss-nra/v1";

private:
  void setupRoutes();

  void
  delete_unicast_subscription_handler(const Pistache::Rest::Request &request,
                                      Pistache::Http::ResponseWriter response);
  void
  get_unicast_subscription_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response);
  void individual_unicast_subscription_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Delete an existing Individual Unicast Subscription
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="uniSubId">Unicast Subscription ID</param>
  virtual void
  delete_unicast_subscription(const std::string &uniSubId,
                              Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Reads an existing Individual Unicast Subscription
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="uniSubId">Unicast Subscription ID</param>
  virtual void
  get_unicast_subscription(const std::string &uniSubId,
                           Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IndividualUnicastSubscriptionDocumentApi_H_ */
