/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ReleaseData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ReleaseData::ReleaseData() {
  m_CauseIsSet = false;
  m_NgApCauseIsSet = false;
  m_r_5gMmCauseValue = 0;
  m_r_5gMmCauseValueIsSet = false;
  m_UeLocationIsSet = false;
  m_UeTimeZone = "";
  m_UeTimeZoneIsSet = false;
  m_AddUeLocationIsSet = false;
  m_SecondaryRatUsageReportIsSet = false;
  m_SecondaryRatUsageInfoIsSet = false;
  m_N4InfoIsSet = false;
  m_N4InfoExt1IsSet = false;
  m_N4InfoExt2IsSet = false;
}

ReleaseData::~ReleaseData() {}

void ReleaseData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ReleaseData &o) {
  j = nlohmann::json();
  if (o.causeIsSet())
    j["cause"] = o.m_Cause;
  if (o.ngApCauseIsSet())
    j["ngApCause"] = o.m_NgApCause;
  if (o.r5gMmCauseValueIsSet())
    j["5gMmCauseValue"] = o.m_r_5gMmCauseValue;
  if (o.ueLocationIsSet())
    j["ueLocation"] = o.m_UeLocation;
  if (o.ueTimeZoneIsSet())
    j["ueTimeZone"] = o.m_UeTimeZone;
  if (o.addUeLocationIsSet())
    j["addUeLocation"] = o.m_AddUeLocation;
  if (o.secondaryRatUsageReportIsSet() || !o.m_SecondaryRatUsageReport.empty())
    j["secondaryRatUsageReport"] = o.m_SecondaryRatUsageReport;
  if (o.secondaryRatUsageInfoIsSet() || !o.m_SecondaryRatUsageInfo.empty())
    j["secondaryRatUsageInfo"] = o.m_SecondaryRatUsageInfo;
  if (o.n4InfoIsSet())
    j["n4Info"] = o.m_N4Info;
  if (o.n4InfoExt1IsSet())
    j["n4InfoExt1"] = o.m_N4InfoExt1;
  if (o.n4InfoExt2IsSet())
    j["n4InfoExt2"] = o.m_N4InfoExt2;
}

void from_json(const nlohmann::json &j, ReleaseData &o) {
  if (j.find("cause") != j.end()) {
    j.at("cause").get_to(o.m_Cause);
    o.m_CauseIsSet = true;
  }
  if (j.find("ngApCause") != j.end()) {
    j.at("ngApCause").get_to(o.m_NgApCause);
    o.m_NgApCauseIsSet = true;
  }
  if (j.find("5gMmCauseValue") != j.end()) {
    j.at("5gMmCauseValue").get_to(o.m_r_5gMmCauseValue);
    o.m_r_5gMmCauseValueIsSet = true;
  }
  if (j.find("ueLocation") != j.end()) {
    j.at("ueLocation").get_to(o.m_UeLocation);
    o.m_UeLocationIsSet = true;
  }
  if (j.find("ueTimeZone") != j.end()) {
    j.at("ueTimeZone").get_to(o.m_UeTimeZone);
    o.m_UeTimeZoneIsSet = true;
  }
  if (j.find("addUeLocation") != j.end()) {
    j.at("addUeLocation").get_to(o.m_AddUeLocation);
    o.m_AddUeLocationIsSet = true;
  }
  if (j.find("secondaryRatUsageReport") != j.end()) {
    j.at("secondaryRatUsageReport").get_to(o.m_SecondaryRatUsageReport);
    o.m_SecondaryRatUsageReportIsSet = true;
  }
  if (j.find("secondaryRatUsageInfo") != j.end()) {
    j.at("secondaryRatUsageInfo").get_to(o.m_SecondaryRatUsageInfo);
    o.m_SecondaryRatUsageInfoIsSet = true;
  }
  if (j.find("n4Info") != j.end()) {
    j.at("n4Info").get_to(o.m_N4Info);
    o.m_N4InfoIsSet = true;
  }
  if (j.find("n4InfoExt1") != j.end()) {
    j.at("n4InfoExt1").get_to(o.m_N4InfoExt1);
    o.m_N4InfoExt1IsSet = true;
  }
  if (j.find("n4InfoExt2") != j.end()) {
    j.at("n4InfoExt2").get_to(o.m_N4InfoExt2);
    o.m_N4InfoExt2IsSet = true;
  }
}

Cause ReleaseData::getCause() const { return m_Cause; }
void ReleaseData::setCause(Cause const &value) {
  m_Cause = value;
  m_CauseIsSet = true;
}
bool ReleaseData::causeIsSet() const { return m_CauseIsSet; }
void ReleaseData::unsetCause() { m_CauseIsSet = false; }
NgApCause ReleaseData::getNgApCause() const { return m_NgApCause; }
void ReleaseData::setNgApCause(NgApCause const &value) {
  m_NgApCause = value;
  m_NgApCauseIsSet = true;
}
bool ReleaseData::ngApCauseIsSet() const { return m_NgApCauseIsSet; }
void ReleaseData::unsetNgApCause() { m_NgApCauseIsSet = false; }
int32_t ReleaseData::getR5gMmCauseValue() const { return m_r_5gMmCauseValue; }
void ReleaseData::setR5gMmCauseValue(int32_t const value) {
  m_r_5gMmCauseValue = value;
  m_r_5gMmCauseValueIsSet = true;
}
bool ReleaseData::r5gMmCauseValueIsSet() const {
  return m_r_5gMmCauseValueIsSet;
}
void ReleaseData::unsetr_5gMmCauseValue() { m_r_5gMmCauseValueIsSet = false; }
UserLocation ReleaseData::getUeLocation() const { return m_UeLocation; }
void ReleaseData::setUeLocation(UserLocation const &value) {
  m_UeLocation = value;
  m_UeLocationIsSet = true;
}
bool ReleaseData::ueLocationIsSet() const { return m_UeLocationIsSet; }
void ReleaseData::unsetUeLocation() { m_UeLocationIsSet = false; }
std::string ReleaseData::getUeTimeZone() const { return m_UeTimeZone; }
void ReleaseData::setUeTimeZone(std::string const &value) {
  m_UeTimeZone = value;
  m_UeTimeZoneIsSet = true;
}
bool ReleaseData::ueTimeZoneIsSet() const { return m_UeTimeZoneIsSet; }
void ReleaseData::unsetUeTimeZone() { m_UeTimeZoneIsSet = false; }
UserLocation ReleaseData::getAddUeLocation() const { return m_AddUeLocation; }
void ReleaseData::setAddUeLocation(UserLocation const &value) {
  m_AddUeLocation = value;
  m_AddUeLocationIsSet = true;
}
bool ReleaseData::addUeLocationIsSet() const { return m_AddUeLocationIsSet; }
void ReleaseData::unsetAddUeLocation() { m_AddUeLocationIsSet = false; }
std::vector<SecondaryRatUsageReport> &
ReleaseData::getSecondaryRatUsageReport() {
  return m_SecondaryRatUsageReport;
}
void ReleaseData::setSecondaryRatUsageReport(
    std::vector<SecondaryRatUsageReport> const &value) {
  m_SecondaryRatUsageReport = value;
  m_SecondaryRatUsageReportIsSet = true;
}
bool ReleaseData::secondaryRatUsageReportIsSet() const {
  return m_SecondaryRatUsageReportIsSet;
}
void ReleaseData::unsetSecondaryRatUsageReport() {
  m_SecondaryRatUsageReportIsSet = false;
}
std::vector<SecondaryRatUsageInfo> &ReleaseData::getSecondaryRatUsageInfo() {
  return m_SecondaryRatUsageInfo;
}
void ReleaseData::setSecondaryRatUsageInfo(
    std::vector<SecondaryRatUsageInfo> const &value) {
  m_SecondaryRatUsageInfo = value;
  m_SecondaryRatUsageInfoIsSet = true;
}
bool ReleaseData::secondaryRatUsageInfoIsSet() const {
  return m_SecondaryRatUsageInfoIsSet;
}
void ReleaseData::unsetSecondaryRatUsageInfo() {
  m_SecondaryRatUsageInfoIsSet = false;
}
N4Information ReleaseData::getN4Info() const { return m_N4Info; }
void ReleaseData::setN4Info(N4Information const &value) {
  m_N4Info = value;
  m_N4InfoIsSet = true;
}
bool ReleaseData::n4InfoIsSet() const { return m_N4InfoIsSet; }
void ReleaseData::unsetN4Info() { m_N4InfoIsSet = false; }
N4Information ReleaseData::getN4InfoExt1() const { return m_N4InfoExt1; }
void ReleaseData::setN4InfoExt1(N4Information const &value) {
  m_N4InfoExt1 = value;
  m_N4InfoExt1IsSet = true;
}
bool ReleaseData::n4InfoExt1IsSet() const { return m_N4InfoExt1IsSet; }
void ReleaseData::unsetN4InfoExt1() { m_N4InfoExt1IsSet = false; }
N4Information ReleaseData::getN4InfoExt2() const { return m_N4InfoExt2; }
void ReleaseData::setN4InfoExt2(N4Information const &value) {
  m_N4InfoExt2 = value;
  m_N4InfoExt2IsSet = true;
}
bool ReleaseData::n4InfoExt2IsSet() const { return m_N4InfoExt2IsSet; }
void ReleaseData::unsetN4InfoExt2() { m_N4InfoExt2IsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
