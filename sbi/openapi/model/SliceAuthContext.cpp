/**
 * Nnssaaf_NSSAA
 * Network Slice-Specific Authentication and Authorization Service. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SliceAuthContext.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SliceAuthContext::SliceAuthContext() {
  m_Gpsi = "";
  m_AuthCtxId = "";
  m_EapMessage = "";
}

SliceAuthContext::~SliceAuthContext() {}

void SliceAuthContext::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SliceAuthContext &o) {
  j = nlohmann::json();
  j["gpsi"] = o.m_Gpsi;
  j["snssai"] = o.m_Snssai;
  j["authCtxId"] = o.m_AuthCtxId;
  j["eapMessage"] = o.m_EapMessage;
}

void from_json(const nlohmann::json &j, SliceAuthContext &o) {
  j.at("gpsi").get_to(o.m_Gpsi);
  j.at("snssai").get_to(o.m_Snssai);
  j.at("authCtxId").get_to(o.m_AuthCtxId);
  j.at("eapMessage").get_to(o.m_EapMessage);
}

std::string SliceAuthContext::getGpsi() const { return m_Gpsi; }
void SliceAuthContext::setGpsi(std::string const &value) { m_Gpsi = value; }
Snssai SliceAuthContext::getSnssai() const { return m_Snssai; }
void SliceAuthContext::setSnssai(Snssai const &value) { m_Snssai = value; }
std::string SliceAuthContext::getAuthCtxId() const { return m_AuthCtxId; }
void SliceAuthContext::setAuthCtxId(std::string const &value) {
  m_AuthCtxId = value;
}
std::string SliceAuthContext::getEapMessage() const { return m_EapMessage; }
void SliceAuthContext::setEapMessage(std::string const &value) {
  m_EapMessage = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
