/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RetainabilityThreshold.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RetainabilityThreshold::RetainabilityThreshold() {
  m_RelFlowNum = 0;
  m_RelFlowNumIsSet = false;
  m_RelTimeUnitIsSet = false;
  m_RelFlowRatio = 0;
  m_RelFlowRatioIsSet = false;
}

RetainabilityThreshold::~RetainabilityThreshold() {}

void RetainabilityThreshold::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const RetainabilityThreshold &o) {
  j = nlohmann::json();
  if (o.relFlowNumIsSet())
    j["relFlowNum"] = o.m_RelFlowNum;
  if (o.relTimeUnitIsSet())
    j["relTimeUnit"] = o.m_RelTimeUnit;
  if (o.relFlowRatioIsSet())
    j["relFlowRatio"] = o.m_RelFlowRatio;
}

void from_json(const nlohmann::json &j, RetainabilityThreshold &o) {
  if (j.find("relFlowNum") != j.end()) {
    j.at("relFlowNum").get_to(o.m_RelFlowNum);
    o.m_RelFlowNumIsSet = true;
  }
  if (j.find("relTimeUnit") != j.end()) {
    j.at("relTimeUnit").get_to(o.m_RelTimeUnit);
    o.m_RelTimeUnitIsSet = true;
  }
  if (j.find("relFlowRatio") != j.end()) {
    j.at("relFlowRatio").get_to(o.m_RelFlowRatio);
    o.m_RelFlowRatioIsSet = true;
  }
}

int32_t RetainabilityThreshold::getRelFlowNum() const { return m_RelFlowNum; }
void RetainabilityThreshold::setRelFlowNum(int32_t const value) {
  m_RelFlowNum = value;
  m_RelFlowNumIsSet = true;
}
bool RetainabilityThreshold::relFlowNumIsSet() const {
  return m_RelFlowNumIsSet;
}
void RetainabilityThreshold::unsetRelFlowNum() { m_RelFlowNumIsSet = false; }
TimeUnit RetainabilityThreshold::getRelTimeUnit() const {
  return m_RelTimeUnit;
}
void RetainabilityThreshold::setRelTimeUnit(TimeUnit const &value) {
  m_RelTimeUnit = value;
  m_RelTimeUnitIsSet = true;
}
bool RetainabilityThreshold::relTimeUnitIsSet() const {
  return m_RelTimeUnitIsSet;
}
void RetainabilityThreshold::unsetRelTimeUnit() { m_RelTimeUnitIsSet = false; }
int32_t RetainabilityThreshold::getRelFlowRatio() const {
  return m_RelFlowRatio;
}
void RetainabilityThreshold::setRelFlowRatio(int32_t const value) {
  m_RelFlowRatio = value;
  m_RelFlowRatioIsSet = true;
}
bool RetainabilityThreshold::relFlowRatioIsSet() const {
  return m_RelFlowRatioIsSet;
}
void RetainabilityThreshold::unsetRelFlowRatio() {
  m_RelFlowRatioIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
