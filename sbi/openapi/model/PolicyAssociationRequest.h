/**
 * Npcf_UEPolicyControl
 * UE Policy Control Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PolicyAssociationRequest.h
 *
 * Represents information that the NF service consumer provides when requesting
 * the creation of a policy association.
 */

#ifndef PolicyAssociationRequest_H_
#define PolicyAssociationRequest_H_

#include "AccessType.h"
#include "Guami.h"
#include "Ipv6Addr.h"
#include "Pc5Capability.h"
#include "PlmnIdNid.h"
#include "ProSeCapability.h"
#include "RatType.h"
#include "ServiceName.h"
#include "UserLocation.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents information that the NF service consumer provides when requesting
/// the creation of a policy association.
/// </summary>
class PolicyAssociationRequest {
public:
  PolicyAssociationRequest();
  virtual ~PolicyAssociationRequest();

  void validate();

  /////////////////////////////////////////////
  /// PolicyAssociationRequest members

  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNotificationUri() const;
  void setNotificationUri(std::string const &value);
  /// <summary>
  /// Alternate or backup IPv4 Address(es) where to send Notifications.
  /// </summary>
  std::vector<std::string> &getAltNotifIpv4Addrs();
  void setAltNotifIpv4Addrs(std::vector<std::string> const &value);
  bool altNotifIpv4AddrsIsSet() const;
  void unsetAltNotifIpv4Addrs();
  /// <summary>
  /// Alternate or backup IPv6 Address(es) where to send Notifications.
  /// </summary>
  std::vector<Ipv6Addr> &getAltNotifIpv6Addrs();
  void setAltNotifIpv6Addrs(std::vector<Ipv6Addr> const &value);
  bool altNotifIpv6AddrsIsSet() const;
  void unsetAltNotifIpv6Addrs();
  /// <summary>
  /// Alternate or backup FQDN(s) where to send Notifications.
  /// </summary>
  std::vector<std::string> &getAltNotifFqdns();
  void setAltNotifFqdns(std::vector<std::string> const &value);
  bool altNotifFqdnsIsSet() const;
  void unsetAltNotifFqdns();
  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  ///
  /// </summary>
  AccessType getAccessType() const;
  void setAccessType(AccessType const &value);
  bool accessTypeIsSet() const;
  void unsetAccessType();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  ///
  /// </summary>
  UserLocation getUserLoc() const;
  void setUserLoc(UserLocation const &value);
  bool userLocIsSet() const;
  void unsetUserLoc();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getTimeZone() const;
  void setTimeZone(std::string const &value);
  bool timeZoneIsSet() const;
  void unsetTimeZone();
  /// <summary>
  ///
  /// </summary>
  PlmnIdNid getServingPlmn() const;
  void setServingPlmn(PlmnIdNid const &value);
  bool servingPlmnIsSet() const;
  void unsetServingPlmn();
  /// <summary>
  ///
  /// </summary>
  RatType getRatType() const;
  void setRatType(RatType const &value);
  bool ratTypeIsSet() const;
  void unsetRatType();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getGroupIds();
  void setGroupIds(std::vector<std::string> const &value);
  bool groupIdsIsSet() const;
  void unsetGroupIds();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getHPcfId() const;
  void setHPcfId(std::string const &value);
  bool hPcfIdIsSet() const;
  void unsetHPcfId();
  /// <summary>
  /// string with format \&quot;bytes\&quot; as defined in OpenAPI
  /// </summary>
  std::string getUePolReq() const;
  void setUePolReq(std::string const &value);
  bool uePolReqIsSet() const;
  void unsetUePolReq();
  /// <summary>
  ///
  /// </summary>
  Guami getGuami() const;
  void setGuami(Guami const &value);
  bool guamiIsSet() const;
  void unsetGuami();
  /// <summary>
  ///
  /// </summary>
  ServiceName getServiceName() const;
  void setServiceName(ServiceName const &value);
  bool serviceNameIsSet() const;
  void unsetServiceName();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getServingNfId() const;
  void setServingNfId(std::string const &value);
  bool servingNfIdIsSet() const;
  void unsetServingNfId();
  /// <summary>
  ///
  /// </summary>
  Pc5Capability getPc5Capab() const;
  void setPc5Capab(Pc5Capability const &value);
  bool pc5CapabIsSet() const;
  void unsetPc5Capab();
  /// <summary>
  ///
  /// </summary>
  std::vector<ProSeCapability> &getProSeCapab();
  void setProSeCapab(std::vector<ProSeCapability> const &value);
  bool proSeCapabIsSet() const;
  void unsetProSeCapab();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);

  friend void to_json(nlohmann::json &j, const PolicyAssociationRequest &o);
  friend void from_json(const nlohmann::json &j, PolicyAssociationRequest &o);

protected:
  std::string m_NotificationUri;

  std::vector<std::string> m_AltNotifIpv4Addrs;
  bool m_AltNotifIpv4AddrsIsSet;
  std::vector<Ipv6Addr> m_AltNotifIpv6Addrs;
  bool m_AltNotifIpv6AddrsIsSet;
  std::vector<std::string> m_AltNotifFqdns;
  bool m_AltNotifFqdnsIsSet;
  std::string m_Supi;

  std::string m_Gpsi;
  bool m_GpsiIsSet;
  AccessType m_AccessType;
  bool m_AccessTypeIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  UserLocation m_UserLoc;
  bool m_UserLocIsSet;
  std::string m_TimeZone;
  bool m_TimeZoneIsSet;
  PlmnIdNid m_ServingPlmn;
  bool m_ServingPlmnIsSet;
  RatType m_RatType;
  bool m_RatTypeIsSet;
  std::vector<std::string> m_GroupIds;
  bool m_GroupIdsIsSet;
  std::string m_HPcfId;
  bool m_HPcfIdIsSet;
  std::string m_UePolReq;
  bool m_UePolReqIsSet;
  Guami m_Guami;
  bool m_GuamiIsSet;
  ServiceName m_ServiceName;
  bool m_ServiceNameIsSet;
  std::string m_ServingNfId;
  bool m_ServingNfIdIsSet;
  Pc5Capability m_Pc5Capab;
  bool m_Pc5CapabIsSet;
  std::vector<ProSeCapability> m_ProSeCapab;
  bool m_ProSeCapabIsSet;
  std::string m_SuppFeat;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PolicyAssociationRequest_H_ */
