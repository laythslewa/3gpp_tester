/**
 * Nudsf_Timer
 * Nudsf Timer Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SearchCondition.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SearchCondition::SearchCondition() {
  m_SchemaId = "";
  m_SchemaIdIsSet = false;
}

SearchCondition::~SearchCondition() {}

void SearchCondition::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SearchCondition &o) {
  j = nlohmann::json();
  j["cond"] = o.m_Cond;
  j["units"] = o.m_Units;
  if (o.schemaIdIsSet())
    j["schemaId"] = o.m_SchemaId;
}

void from_json(const nlohmann::json &j, SearchCondition &o) {
  j.at("cond").get_to(o.m_Cond);
  j.at("units").get_to(o.m_Units);
  if (j.find("schemaId") != j.end()) {
    j.at("schemaId").get_to(o.m_SchemaId);
    o.m_SchemaIdIsSet = true;
  }
}

ConditionOperator SearchCondition::getCond() const { return m_Cond; }
void SearchCondition::setCond(ConditionOperator const &value) {
  m_Cond = value;
}
std::vector<SearchExpression> &SearchCondition::getUnits() { return m_Units; }
void SearchCondition::setUnits(std::vector<SearchExpression> const &value) {
  m_Units = value;
}
std::string SearchCondition::getSchemaId() const { return m_SchemaId; }
void SearchCondition::setSchemaId(std::string const &value) {
  m_SchemaId = value;
  m_SchemaIdIsSet = true;
}
bool SearchCondition::schemaIdIsSet() const { return m_SchemaIdIsSet; }
void SearchCondition::unsetSchemaId() { m_SchemaIdIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
