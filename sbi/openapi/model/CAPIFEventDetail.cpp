/**
 * CAPIF_Events_API
 * API for event subscription management. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "CAPIFEventDetail.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

CAPIFEventDetail::CAPIFEventDetail() {
  m_ServiceAPIDescriptionsIsSet = false;
  m_ApiIdsIsSet = false;
  m_ApiInvokerIdsIsSet = false;
  m_AccCtrlPolListIsSet = false;
  m_InvocationLogsIsSet = false;
  m_ApiTopoHideIsSet = false;
}

CAPIFEventDetail::~CAPIFEventDetail() {}

void CAPIFEventDetail::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const CAPIFEventDetail &o) {
  j = nlohmann::json();
  if (o.serviceAPIDescriptionsIsSet() || !o.m_ServiceAPIDescriptions.empty())
    j["serviceAPIDescriptions"] = o.m_ServiceAPIDescriptions;
  if (o.apiIdsIsSet() || !o.m_ApiIds.empty())
    j["apiIds"] = o.m_ApiIds;
  if (o.apiInvokerIdsIsSet() || !o.m_ApiInvokerIds.empty())
    j["apiInvokerIds"] = o.m_ApiInvokerIds;
  if (o.accCtrlPolListIsSet())
    j["accCtrlPolList"] = o.m_AccCtrlPolList;
  if (o.invocationLogsIsSet() || !o.m_InvocationLogs.empty())
    j["invocationLogs"] = o.m_InvocationLogs;
  if (o.apiTopoHideIsSet())
    j["apiTopoHide"] = o.m_ApiTopoHide;
}

void from_json(const nlohmann::json &j, CAPIFEventDetail &o) {
  if (j.find("serviceAPIDescriptions") != j.end()) {
    j.at("serviceAPIDescriptions").get_to(o.m_ServiceAPIDescriptions);
    o.m_ServiceAPIDescriptionsIsSet = true;
  }
  if (j.find("apiIds") != j.end()) {
    j.at("apiIds").get_to(o.m_ApiIds);
    o.m_ApiIdsIsSet = true;
  }
  if (j.find("apiInvokerIds") != j.end()) {
    j.at("apiInvokerIds").get_to(o.m_ApiInvokerIds);
    o.m_ApiInvokerIdsIsSet = true;
  }
  if (j.find("accCtrlPolList") != j.end()) {
    j.at("accCtrlPolList").get_to(o.m_AccCtrlPolList);
    o.m_AccCtrlPolListIsSet = true;
  }
  if (j.find("invocationLogs") != j.end()) {
    j.at("invocationLogs").get_to(o.m_InvocationLogs);
    o.m_InvocationLogsIsSet = true;
  }
  if (j.find("apiTopoHide") != j.end()) {
    j.at("apiTopoHide").get_to(o.m_ApiTopoHide);
    o.m_ApiTopoHideIsSet = true;
  }
}

std::vector<ServiceAPIDescription> &
CAPIFEventDetail::getServiceAPIDescriptions() {
  return m_ServiceAPIDescriptions;
}
void CAPIFEventDetail::setServiceAPIDescriptions(
    std::vector<ServiceAPIDescription> const &value) {
  m_ServiceAPIDescriptions = value;
  m_ServiceAPIDescriptionsIsSet = true;
}
bool CAPIFEventDetail::serviceAPIDescriptionsIsSet() const {
  return m_ServiceAPIDescriptionsIsSet;
}
void CAPIFEventDetail::unsetServiceAPIDescriptions() {
  m_ServiceAPIDescriptionsIsSet = false;
}
std::vector<std::string> &CAPIFEventDetail::getApiIds() { return m_ApiIds; }
void CAPIFEventDetail::setApiIds(std::vector<std::string> const &value) {
  m_ApiIds = value;
  m_ApiIdsIsSet = true;
}
bool CAPIFEventDetail::apiIdsIsSet() const { return m_ApiIdsIsSet; }
void CAPIFEventDetail::unsetApiIds() { m_ApiIdsIsSet = false; }
std::vector<std::string> &CAPIFEventDetail::getApiInvokerIds() {
  return m_ApiInvokerIds;
}
void CAPIFEventDetail::setApiInvokerIds(std::vector<std::string> const &value) {
  m_ApiInvokerIds = value;
  m_ApiInvokerIdsIsSet = true;
}
bool CAPIFEventDetail::apiInvokerIdsIsSet() const {
  return m_ApiInvokerIdsIsSet;
}
void CAPIFEventDetail::unsetApiInvokerIds() { m_ApiInvokerIdsIsSet = false; }
AccessControlPolicyListExt CAPIFEventDetail::getAccCtrlPolList() const {
  return m_AccCtrlPolList;
}
void CAPIFEventDetail::setAccCtrlPolList(
    AccessControlPolicyListExt const &value) {
  m_AccCtrlPolList = value;
  m_AccCtrlPolListIsSet = true;
}
bool CAPIFEventDetail::accCtrlPolListIsSet() const {
  return m_AccCtrlPolListIsSet;
}
void CAPIFEventDetail::unsetAccCtrlPolList() { m_AccCtrlPolListIsSet = false; }
std::vector<InvocationLog> &CAPIFEventDetail::getInvocationLogs() {
  return m_InvocationLogs;
}
void CAPIFEventDetail::setInvocationLogs(
    std::vector<InvocationLog> const &value) {
  m_InvocationLogs = value;
  m_InvocationLogsIsSet = true;
}
bool CAPIFEventDetail::invocationLogsIsSet() const {
  return m_InvocationLogsIsSet;
}
void CAPIFEventDetail::unsetInvocationLogs() { m_InvocationLogsIsSet = false; }
TopologyHiding CAPIFEventDetail::getApiTopoHide() const {
  return m_ApiTopoHide;
}
void CAPIFEventDetail::setApiTopoHide(TopologyHiding const &value) {
  m_ApiTopoHide = value;
  m_ApiTopoHideIsSet = true;
}
bool CAPIFEventDetail::apiTopoHideIsSet() const { return m_ApiTopoHideIsSet; }
void CAPIFEventDetail::unsetApiTopoHide() { m_ApiTopoHideIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
