/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeRegStatusUpdateReqData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeRegStatusUpdateReqData::UeRegStatusUpdateReqData() {
  m_ToReleaseSessionListIsSet = false;
  m_PcfReselectedInd = false;
  m_PcfReselectedIndIsSet = false;
  m_SmfChangeInfoListIsSet = false;
  m_AnalyticsNotUsedListIsSet = false;
}

UeRegStatusUpdateReqData::~UeRegStatusUpdateReqData() {}

void UeRegStatusUpdateReqData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UeRegStatusUpdateReqData &o) {
  j = nlohmann::json();
  j["transferStatus"] = o.m_TransferStatus;
  if (o.toReleaseSessionListIsSet() || !o.m_ToReleaseSessionList.empty())
    j["toReleaseSessionList"] = o.m_ToReleaseSessionList;
  if (o.pcfReselectedIndIsSet())
    j["pcfReselectedInd"] = o.m_PcfReselectedInd;
  if (o.smfChangeInfoListIsSet() || !o.m_SmfChangeInfoList.empty())
    j["smfChangeInfoList"] = o.m_SmfChangeInfoList;
  if (o.analyticsNotUsedListIsSet() || !o.m_AnalyticsNotUsedList.empty())
    j["analyticsNotUsedList"] = o.m_AnalyticsNotUsedList;
}

void from_json(const nlohmann::json &j, UeRegStatusUpdateReqData &o) {
  j.at("transferStatus").get_to(o.m_TransferStatus);
  if (j.find("toReleaseSessionList") != j.end()) {
    j.at("toReleaseSessionList").get_to(o.m_ToReleaseSessionList);
    o.m_ToReleaseSessionListIsSet = true;
  }
  if (j.find("pcfReselectedInd") != j.end()) {
    j.at("pcfReselectedInd").get_to(o.m_PcfReselectedInd);
    o.m_PcfReselectedIndIsSet = true;
  }
  if (j.find("smfChangeInfoList") != j.end()) {
    j.at("smfChangeInfoList").get_to(o.m_SmfChangeInfoList);
    o.m_SmfChangeInfoListIsSet = true;
  }
  if (j.find("analyticsNotUsedList") != j.end()) {
    j.at("analyticsNotUsedList").get_to(o.m_AnalyticsNotUsedList);
    o.m_AnalyticsNotUsedListIsSet = true;
  }
}

UeContextTransferStatus UeRegStatusUpdateReqData::getTransferStatus() const {
  return m_TransferStatus;
}
void UeRegStatusUpdateReqData::setTransferStatus(
    UeContextTransferStatus const &value) {
  m_TransferStatus = value;
}
std::vector<int32_t> &UeRegStatusUpdateReqData::getToReleaseSessionList() {
  return m_ToReleaseSessionList;
}
void UeRegStatusUpdateReqData::setToReleaseSessionList(
    std::vector<int32_t> const value) {
  m_ToReleaseSessionList = value;
  m_ToReleaseSessionListIsSet = true;
}
bool UeRegStatusUpdateReqData::toReleaseSessionListIsSet() const {
  return m_ToReleaseSessionListIsSet;
}
void UeRegStatusUpdateReqData::unsetToReleaseSessionList() {
  m_ToReleaseSessionListIsSet = false;
}
bool UeRegStatusUpdateReqData::isPcfReselectedInd() const {
  return m_PcfReselectedInd;
}
void UeRegStatusUpdateReqData::setPcfReselectedInd(bool const value) {
  m_PcfReselectedInd = value;
  m_PcfReselectedIndIsSet = true;
}
bool UeRegStatusUpdateReqData::pcfReselectedIndIsSet() const {
  return m_PcfReselectedIndIsSet;
}
void UeRegStatusUpdateReqData::unsetPcfReselectedInd() {
  m_PcfReselectedIndIsSet = false;
}
std::vector<SmfChangeInfo> &UeRegStatusUpdateReqData::getSmfChangeInfoList() {
  return m_SmfChangeInfoList;
}
void UeRegStatusUpdateReqData::setSmfChangeInfoList(
    std::vector<SmfChangeInfo> const &value) {
  m_SmfChangeInfoList = value;
  m_SmfChangeInfoListIsSet = true;
}
bool UeRegStatusUpdateReqData::smfChangeInfoListIsSet() const {
  return m_SmfChangeInfoListIsSet;
}
void UeRegStatusUpdateReqData::unsetSmfChangeInfoList() {
  m_SmfChangeInfoListIsSet = false;
}
std::vector<std::string> &UeRegStatusUpdateReqData::getAnalyticsNotUsedList() {
  return m_AnalyticsNotUsedList;
}
void UeRegStatusUpdateReqData::setAnalyticsNotUsedList(
    std::vector<std::string> const &value) {
  m_AnalyticsNotUsedList = value;
  m_AnalyticsNotUsedListIsSet = true;
}
bool UeRegStatusUpdateReqData::analyticsNotUsedListIsSet() const {
  return m_AnalyticsNotUsedListIsSet;
}
void UeRegStatusUpdateReqData::unsetAnalyticsNotUsedList() {
  m_AnalyticsNotUsedListIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
