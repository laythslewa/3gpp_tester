/**
 * 3gpp-bdt
 * API for BDT resouce management. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ExNotification.h
 *
 * Represents a Background Data Transfer notification.
 */

#ifndef ExNotification_H_
#define ExNotification_H_

#include "LocationArea5G.h"
#include "TimeWindow.h"
#include "TransferPolicy.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a Background Data Transfer notification.
/// </summary>
class ExNotification {
public:
  ExNotification();
  virtual ~ExNotification();

  void validate();

  /////////////////////////////////////////////
  /// ExNotification members

  /// <summary>
  /// string identifying a BDT Reference ID as defined in subclause 5.3.3 of
  /// 3GPP TS 29.154.
  /// </summary>
  std::string getBdtRefId() const;
  void setBdtRefId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  LocationArea5G getLocationArea5G() const;
  void setLocationArea5G(LocationArea5G const &value);
  bool locationArea5GIsSet() const;
  void unsetLocationArea5G();
  /// <summary>
  ///
  /// </summary>
  TimeWindow getTimeWindow() const;
  void setTimeWindow(TimeWindow const &value);
  bool timeWindowIsSet() const;
  void unsetTimeWindow();
  /// <summary>
  /// This IE indicates a list of the candidate transfer policies from which the
  /// AF may select a new transfer policy due to network performance
  /// degradation.
  /// </summary>
  std::vector<TransferPolicy> &getCandPolicies();
  void setCandPolicies(std::vector<TransferPolicy> const &value);
  bool candPoliciesIsSet() const;
  void unsetCandPolicies();

  friend void to_json(nlohmann::json &j, const ExNotification &o);
  friend void from_json(const nlohmann::json &j, ExNotification &o);

protected:
  std::string m_BdtRefId;

  LocationArea5G m_LocationArea5G;
  bool m_LocationArea5GIsSet;
  TimeWindow m_TimeWindow;
  bool m_TimeWindowIsSet;
  std::vector<TransferPolicy> m_CandPolicies;
  bool m_CandPoliciesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ExNotification_H_ */
