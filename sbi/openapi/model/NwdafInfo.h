/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NwdafInfo.h
 *
 * Information of a NWDAF NF Instance
 */

#ifndef NwdafInfo_H_
#define NwdafInfo_H_

#include "EventId.h"
#include "NFType.h"
#include "NwdafCapability.h"
#include "NwdafEvent.h"
#include "Tai.h"
#include "TaiRange.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Information of a NWDAF NF Instance
/// </summary>
class NwdafInfo {
public:
  NwdafInfo();
  virtual ~NwdafInfo();

  void validate();

  /////////////////////////////////////////////
  /// NwdafInfo members

  /// <summary>
  ///
  /// </summary>
  std::vector<EventId> &getEventIds();
  void setEventIds(std::vector<EventId> const &value);
  bool eventIdsIsSet() const;
  void unsetEventIds();
  /// <summary>
  ///
  /// </summary>
  std::vector<NwdafEvent> &getNwdafEvents();
  void setNwdafEvents(std::vector<NwdafEvent> const &value);
  bool nwdafEventsIsSet() const;
  void unsetNwdafEvents();
  /// <summary>
  ///
  /// </summary>
  std::vector<Tai> &getTaiList();
  void setTaiList(std::vector<Tai> const &value);
  bool taiListIsSet() const;
  void unsetTaiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<TaiRange> &getTaiRangeList();
  void setTaiRangeList(std::vector<TaiRange> const &value);
  bool taiRangeListIsSet() const;
  void unsetTaiRangeList();
  /// <summary>
  ///
  /// </summary>
  NwdafCapability getNwdafCapability() const;
  void setNwdafCapability(NwdafCapability const &value);
  bool nwdafCapabilityIsSet() const;
  void unsetNwdafCapability();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getAnalyticsDelay() const;
  void setAnalyticsDelay(int32_t const value);
  bool analyticsDelayIsSet() const;
  void unsetAnalyticsDelay();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getServingNfSetIdList();
  void setServingNfSetIdList(std::vector<std::string> const &value);
  bool servingNfSetIdListIsSet() const;
  void unsetServingNfSetIdList();
  /// <summary>
  ///
  /// </summary>
  std::vector<NFType> &getServingNfTypeList();
  void setServingNfTypeList(std::vector<NFType> const &value);
  bool servingNfTypeListIsSet() const;
  void unsetServingNfTypeList();
  /// <summary>
  ///
  /// </summary>
  std::vector<NwdafEvent> &getMlAnalyticsIds();
  void setMlAnalyticsIds(std::vector<NwdafEvent> const &value);
  bool mlAnalyticsIdsIsSet() const;
  void unsetMlAnalyticsIds();

  friend void to_json(nlohmann::json &j, const NwdafInfo &o);
  friend void from_json(const nlohmann::json &j, NwdafInfo &o);

protected:
  std::vector<EventId> m_EventIds;
  bool m_EventIdsIsSet;
  std::vector<NwdafEvent> m_NwdafEvents;
  bool m_NwdafEventsIsSet;
  std::vector<Tai> m_TaiList;
  bool m_TaiListIsSet;
  std::vector<TaiRange> m_TaiRangeList;
  bool m_TaiRangeListIsSet;
  NwdafCapability m_NwdafCapability;
  bool m_NwdafCapabilityIsSet;
  int32_t m_AnalyticsDelay;
  bool m_AnalyticsDelayIsSet;
  std::vector<std::string> m_ServingNfSetIdList;
  bool m_ServingNfSetIdListIsSet;
  std::vector<NFType> m_ServingNfTypeList;
  bool m_ServingNfTypeListIsSet;
  std::vector<NwdafEvent> m_MlAnalyticsIds;
  bool m_MlAnalyticsIdsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NwdafInfo_H_ */
