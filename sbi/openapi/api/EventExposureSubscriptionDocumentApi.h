/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EventExposureSubscriptionDocumentApi.h
 *
 *
 */

#ifndef EventExposureSubscriptionDocumentApi_H_
#define EventExposureSubscriptionDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "EeSubscription.h"
#include "PatchItem.h"
#include "PatchResult.h"
#include "ProblemDetails.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class EventExposureSubscriptionDocumentApi {
public:
  EventExposureSubscriptionDocumentApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~EventExposureSubscriptionDocumentApi() {}
  void init();

  const std::string base = "";

private:
  void setupRoutes();

  void modify_eesubscription_handler(const Pistache::Rest::Request &request,
                                     Pistache::Http::ResponseWriter response);
  void queryee_subscription_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);
  void removeee_subscriptions_handler(const Pistache::Rest::Request &request,
                                      Pistache::Http::ResponseWriter response);
  void update_eesubscriptions_handler(const Pistache::Rest::Request &request,
                                      Pistache::Http::ResponseWriter response);
  void event_exposure_subscription_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Modify an individual ee subscription of a UE
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId">UE id</param>
  /// <param name="subsId"></param>
  /// <param name="patchItem"></param>
  /// <param name="supportedFeatures">Features required to be supported by the
  /// target NF (optional, default to &quot;&quot;)</param>
  virtual void modify_eesubscription(
      const std::string &ueId, const std::string &subsId,
      const std::vector<PatchItem> &patchItem,
      const Pistache::Optional<std::string> &supportedFeatures,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Retrieve a eeSubscription
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId"></param>
  /// <param name="subsId">Unique ID of the subscription to remove</param>
  virtual void
  queryee_subscription(const std::string &ueId, const std::string &subsId,
                       Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Deletes a eeSubscription
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId"></param>
  /// <param name="subsId">Unique ID of the subscription to remove</param>
  virtual void
  removeee_subscriptions(const std::string &ueId, const std::string &subsId,
                         Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Update an individual ee subscriptions of a UE
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId"></param>
  /// <param name="subsId"></param>
  /// <param name="eeSubscription"></param>
  virtual void
  update_eesubscriptions(const std::string &ueId, const std::string &subsId,
                         const EeSubscription &eeSubscription,
                         Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* EventExposureSubscriptionDocumentApi_H_ */
