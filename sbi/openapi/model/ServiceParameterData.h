/**
 * 3gpp-service-parameter
 * API for AF service paramter © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ServiceParameterData.h
 *
 * Represents an individual Service Parameter subscription resource.
 */

#ifndef ServiceParameterData_H_
#define ServiceParameterData_H_

#include "Ipv6Addr.h"
#include "Snssai.h"
#include "UrspRuleRequest.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an individual Service Parameter subscription resource.
/// </summary>
class ServiceParameterData {
public:
  ServiceParameterData();
  virtual ~ServiceParameterData();

  void validate();

  /////////////////////////////////////////////
  /// ServiceParameterData members

  /// <summary>
  /// Identifies a service on behalf of which the AF is issuing the request.
  /// </summary>
  std::string getAfServiceId() const;
  void setAfServiceId(std::string const &value);
  bool afServiceIdIsSet() const;
  void unsetAfServiceId();
  /// <summary>
  /// Identifies an application.
  /// </summary>
  std::string getAppId() const;
  void setAppId(std::string const &value);
  bool appIdIsSet() const;
  void unsetAppId();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more
  /// information.
  /// </summary>
  std::string getExternalGroupId() const;
  void setExternalGroupId(std::string const &value);
  bool externalGroupIdIsSet() const;
  void unsetExternalGroupId();
  /// <summary>
  /// Identifies whether the AF request applies to any UE. This attribute shall
  /// set to \&quot;true\&quot; if applicable for any UE, otherwise, set to
  /// \&quot;false\&quot;.
  /// </summary>
  bool isAnyUeInd() const;
  void setAnyUeInd(bool const value);
  bool anyUeIndIsSet() const;
  void unsetAnyUeInd();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getUeIpv4() const;
  void setUeIpv4(std::string const &value);
  bool ueIpv4IsSet() const;
  void unsetUeIpv4();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getUeIpv6() const;
  void setUeIpv6(Ipv6Addr const &value);
  bool ueIpv6IsSet() const;
  void unsetUeIpv6();
  /// <summary>
  /// String identifying a MAC address formatted in the hexadecimal notation
  /// according to clause 1.1 and clause 2.1 of RFC 7042
  /// </summary>
  std::string getUeMac() const;
  void setUeMac(std::string const &value);
  bool ueMacIsSet() const;
  void unsetUeMac();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const &value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  /// Represents configuration parameters for V2X communications over PC5
  /// reference point.
  /// </summary>
  std::string getParamOverPc5() const;
  void setParamOverPc5(std::string const &value);
  bool paramOverPc5IsSet() const;
  void unsetParamOverPc5();
  /// <summary>
  /// Represents configuration parameters for V2X communications over Uu
  /// reference point.
  /// </summary>
  std::string getParamOverUu() const;
  void setParamOverUu(std::string const &value);
  bool paramOverUuIsSet() const;
  void unsetParamOverUu();
  /// <summary>
  /// Represents the service parameters for 5G ProSe direct discovery.
  /// </summary>
  std::string getParamForProSeDd() const;
  void setParamForProSeDd(std::string const &value);
  bool paramForProSeDdIsSet() const;
  void unsetParamForProSeDd();
  /// <summary>
  /// Represents the service parameters for 5G ProSe direct communications.
  /// </summary>
  std::string getParamForProSeDc() const;
  void setParamForProSeDc(std::string const &value);
  bool paramForProSeDcIsSet() const;
  void unsetParamForProSeDc();
  /// <summary>
  /// Represents the service parameters for 5G ProSe UE-to-network relay.
  /// </summary>
  std::string getParamForProSeU2N() const;
  void setParamForProSeU2N(std::string const &value);
  bool paramForProSeU2NIsSet() const;
  void unsetParamForProSeU2N();
  /// <summary>
  /// Represents the service parameters for 5G ProSe usage reporting
  /// configuration and rules.
  /// </summary>
  std::string getParamForProSeUsageRep() const;
  void setParamForProSeUsageRep(std::string const &value);
  bool paramForProSeUsageRepIsSet() const;
  void unsetParamForProSeUsageRep();
  /// <summary>
  /// Represents the service parameters for 5G ProSe service path selection.
  /// </summary>
  std::string getParamForProSeServPathSel() const;
  void setParamForProSeServPathSel(std::string const &value);
  bool paramForProSeServPathSelIsSet() const;
  void unsetParamForProSeServPathSel();
  /// <summary>
  /// Contains the service parameter used to influence the URSP.
  /// </summary>
  std::vector<UrspRuleRequest> &getUrspInfluence();
  void setUrspInfluence(std::vector<UrspRuleRequest> const &value);
  bool urspInfluenceIsSet() const;
  void unsetUrspInfluence();
  /// <summary>
  /// String uniquely identifying MTC provider information.
  /// </summary>
  std::string getMtcProviderId() const;
  void setMtcProviderId(std::string const &value);
  bool mtcProviderIdIsSet() const;
  void unsetMtcProviderId();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();

  friend void to_json(nlohmann::json &j, const ServiceParameterData &o);
  friend void from_json(const nlohmann::json &j, ServiceParameterData &o);

protected:
  std::string m_AfServiceId;
  bool m_AfServiceIdIsSet;
  std::string m_AppId;
  bool m_AppIdIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  std::string m_ExternalGroupId;
  bool m_ExternalGroupIdIsSet;
  bool m_AnyUeInd;
  bool m_AnyUeIndIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_UeIpv4;
  bool m_UeIpv4IsSet;
  Ipv6Addr m_UeIpv6;
  bool m_UeIpv6IsSet;
  std::string m_UeMac;
  bool m_UeMacIsSet;
  std::string m_Self;
  bool m_SelfIsSet;
  std::string m_ParamOverPc5;
  bool m_ParamOverPc5IsSet;
  std::string m_ParamOverUu;
  bool m_ParamOverUuIsSet;
  std::string m_ParamForProSeDd;
  bool m_ParamForProSeDdIsSet;
  std::string m_ParamForProSeDc;
  bool m_ParamForProSeDcIsSet;
  std::string m_ParamForProSeU2N;
  bool m_ParamForProSeU2NIsSet;
  std::string m_ParamForProSeUsageRep;
  bool m_ParamForProSeUsageRepIsSet;
  std::string m_ParamForProSeServPathSel;
  bool m_ParamForProSeServPathSelIsSet;
  std::vector<UrspRuleRequest> m_UrspInfluence;
  bool m_UrspInfluenceIsSet;
  std::string m_MtcProviderId;
  bool m_MtcProviderIdIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ServiceParameterData_H_ */
