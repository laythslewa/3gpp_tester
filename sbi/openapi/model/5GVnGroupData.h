/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * 5GVnGroupData.h
 *
 *
 */

#ifndef 5GVnGroupData_H_
#define 5GVnGroupData_H_

#include "AppDescriptor.h"
#include "IpAddress.h"
#include "PduSessionType.h"
#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class 5GVnGroupData {
public:
  5GVnGroupData();
  virtual ~5GVnGroupData();

  void validate();

  /////////////////////////////////////////////
  /// 5GVnGroupData members

  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  Snssai getSNssai() const;
  void setSNssai(Snssai const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<PduSessionType> &getPduSessionTypes();
  void setPduSessionTypes(std::vector<PduSessionType> const &value);
  bool pduSessionTypesIsSet() const;
  void unsetPduSessionTypes();
  /// <summary>
  ///
  /// </summary>
  std::vector<AppDescriptor> &getAppDescriptors();
  void setAppDescriptors(std::vector<AppDescriptor> const &value);
  bool appDescriptorsIsSet() const;
  void unsetAppDescriptors();
  /// <summary>
  ///
  /// </summary>
  bool isSecondaryAuth() const;
  void setSecondaryAuth(bool const value);
  bool secondaryAuthIsSet() const;
  void unsetSecondaryAuth();
  /// <summary>
  ///
  /// </summary>
  IpAddress getDnAaaAddress() const;
  void setDnAaaAddress(IpAddress const &value);
  bool dnAaaAddressIsSet() const;
  void unsetDnAaaAddress();
  /// <summary>
  ///
  /// </summary>
  std::vector<IpAddress> &getAdditionalDnAaaAddresses();
  void setAdditionalDnAaaAddresses(std::vector<IpAddress> const &value);
  bool additionalDnAaaAddressesIsSet() const;
  void unsetAdditionalDnAaaAddresses();
  /// <summary>
  /// Fully Qualified Domain Name
  /// </summary>
  std::string getDnAaaFqdn() const;
  void setDnAaaFqdn(std::string const &value);
  bool dnAaaFqdnIsSet() const;
  void unsetDnAaaFqdn();

  friend void to_json(nlohmann::json & j, const 5GVnGroupData & o);
  friend void from_json(const nlohmann::json &j, 5GVnGroupData & o);

protected:
  std::string m_Dnn;

  Snssai m_SNssai;

  std::vector<PduSessionType> m_PduSessionTypes;
  bool m_PduSessionTypesIsSet;
  std::vector<AppDescriptor> m_AppDescriptors;
  bool m_AppDescriptorsIsSet;
  bool m_SecondaryAuth;
  bool m_SecondaryAuthIsSet;
  IpAddress m_DnAaaAddress;
  bool m_DnAaaAddressIsSet;
  std::vector<IpAddress> m_AdditionalDnAaaAddresses;
  bool m_AdditionalDnAaaAddressesIsSet;
  std::string m_DnAaaFqdn;
  bool m_DnAaaFqdnIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* 5GVnGroupData_H_ */
