/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PDUSessionChargingInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PDUSessionChargingInformation::PDUSessionChargingInformation() {
  m_ChargingId = 0;
  m_ChargingIdIsSet = false;
  m_UserInformationIsSet = false;
  m_UserLocationinfoIsSet = false;
  m_MAPDUNon3GPPUserLocationInfoIsSet = false;
  m_UserLocationTime = "";
  m_UserLocationTimeIsSet = false;
  m_PresenceReportingAreaInformationIsSet = false;
  m_UetimeZone = "";
  m_UetimeZoneIsSet = false;
  m_UnitCountInactivityTimer = 0;
  m_UnitCountInactivityTimerIsSet = false;
  m_RANSecondaryRATUsageReportIsSet = false;
}

PDUSessionChargingInformation::~PDUSessionChargingInformation() {}

void PDUSessionChargingInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PDUSessionChargingInformation &o) {
  j = nlohmann::json();
  if (o.chargingIdIsSet())
    j["chargingId"] = o.m_ChargingId;
  if (o.userInformationIsSet())
    j["userInformation"] = o.m_UserInformation;
  if (o.userLocationinfoIsSet())
    j["userLocationinfo"] = o.m_UserLocationinfo;
  if (o.mAPDUNon3GPPUserLocationInfoIsSet())
    j["mAPDUNon3GPPUserLocationInfo"] = o.m_MAPDUNon3GPPUserLocationInfo;
  if (o.userLocationTimeIsSet())
    j["userLocationTime"] = o.m_UserLocationTime;
  if (o.presenceReportingAreaInformationIsSet() ||
      !o.m_PresenceReportingAreaInformation.empty())
    j["presenceReportingAreaInformation"] =
        o.m_PresenceReportingAreaInformation;
  if (o.uetimeZoneIsSet())
    j["uetimeZone"] = o.m_UetimeZone;
  j["pduSessionInformation"] = o.m_PduSessionInformation;
  if (o.unitCountInactivityTimerIsSet())
    j["unitCountInactivityTimer"] = o.m_UnitCountInactivityTimer;
  if (o.rANSecondaryRATUsageReportIsSet())
    j["rANSecondaryRATUsageReport"] = o.m_RANSecondaryRATUsageReport;
}

void from_json(const nlohmann::json &j, PDUSessionChargingInformation &o) {
  if (j.find("chargingId") != j.end()) {
    j.at("chargingId").get_to(o.m_ChargingId);
    o.m_ChargingIdIsSet = true;
  }
  if (j.find("userInformation") != j.end()) {
    j.at("userInformation").get_to(o.m_UserInformation);
    o.m_UserInformationIsSet = true;
  }
  if (j.find("userLocationinfo") != j.end()) {
    j.at("userLocationinfo").get_to(o.m_UserLocationinfo);
    o.m_UserLocationinfoIsSet = true;
  }
  if (j.find("mAPDUNon3GPPUserLocationInfo") != j.end()) {
    j.at("mAPDUNon3GPPUserLocationInfo")
        .get_to(o.m_MAPDUNon3GPPUserLocationInfo);
    o.m_MAPDUNon3GPPUserLocationInfoIsSet = true;
  }
  if (j.find("userLocationTime") != j.end()) {
    j.at("userLocationTime").get_to(o.m_UserLocationTime);
    o.m_UserLocationTimeIsSet = true;
  }
  if (j.find("presenceReportingAreaInformation") != j.end()) {
    j.at("presenceReportingAreaInformation")
        .get_to(o.m_PresenceReportingAreaInformation);
    o.m_PresenceReportingAreaInformationIsSet = true;
  }
  if (j.find("uetimeZone") != j.end()) {
    j.at("uetimeZone").get_to(o.m_UetimeZone);
    o.m_UetimeZoneIsSet = true;
  }
  j.at("pduSessionInformation").get_to(o.m_PduSessionInformation);
  if (j.find("unitCountInactivityTimer") != j.end()) {
    j.at("unitCountInactivityTimer").get_to(o.m_UnitCountInactivityTimer);
    o.m_UnitCountInactivityTimerIsSet = true;
  }
  if (j.find("rANSecondaryRATUsageReport") != j.end()) {
    j.at("rANSecondaryRATUsageReport").get_to(o.m_RANSecondaryRATUsageReport);
    o.m_RANSecondaryRATUsageReportIsSet = true;
  }
}

int32_t PDUSessionChargingInformation::getChargingId() const {
  return m_ChargingId;
}
void PDUSessionChargingInformation::setChargingId(int32_t const value) {
  m_ChargingId = value;
  m_ChargingIdIsSet = true;
}
bool PDUSessionChargingInformation::chargingIdIsSet() const {
  return m_ChargingIdIsSet;
}
void PDUSessionChargingInformation::unsetChargingId() {
  m_ChargingIdIsSet = false;
}
UserInformation PDUSessionChargingInformation::getUserInformation() const {
  return m_UserInformation;
}
void PDUSessionChargingInformation::setUserInformation(
    UserInformation const &value) {
  m_UserInformation = value;
  m_UserInformationIsSet = true;
}
bool PDUSessionChargingInformation::userInformationIsSet() const {
  return m_UserInformationIsSet;
}
void PDUSessionChargingInformation::unsetUserInformation() {
  m_UserInformationIsSet = false;
}
UserLocation PDUSessionChargingInformation::getUserLocationinfo() const {
  return m_UserLocationinfo;
}
void PDUSessionChargingInformation::setUserLocationinfo(
    UserLocation const &value) {
  m_UserLocationinfo = value;
  m_UserLocationinfoIsSet = true;
}
bool PDUSessionChargingInformation::userLocationinfoIsSet() const {
  return m_UserLocationinfoIsSet;
}
void PDUSessionChargingInformation::unsetUserLocationinfo() {
  m_UserLocationinfoIsSet = false;
}
UserLocation
PDUSessionChargingInformation::getMAPDUNon3GPPUserLocationInfo() const {
  return m_MAPDUNon3GPPUserLocationInfo;
}
void PDUSessionChargingInformation::setMAPDUNon3GPPUserLocationInfo(
    UserLocation const &value) {
  m_MAPDUNon3GPPUserLocationInfo = value;
  m_MAPDUNon3GPPUserLocationInfoIsSet = true;
}
bool PDUSessionChargingInformation::mAPDUNon3GPPUserLocationInfoIsSet() const {
  return m_MAPDUNon3GPPUserLocationInfoIsSet;
}
void PDUSessionChargingInformation::unsetMAPDUNon3GPPUserLocationInfo() {
  m_MAPDUNon3GPPUserLocationInfoIsSet = false;
}
std::string PDUSessionChargingInformation::getUserLocationTime() const {
  return m_UserLocationTime;
}
void PDUSessionChargingInformation::setUserLocationTime(
    std::string const &value) {
  m_UserLocationTime = value;
  m_UserLocationTimeIsSet = true;
}
bool PDUSessionChargingInformation::userLocationTimeIsSet() const {
  return m_UserLocationTimeIsSet;
}
void PDUSessionChargingInformation::unsetUserLocationTime() {
  m_UserLocationTimeIsSet = false;
}
std::map<std::string, PresenceInfo> &
PDUSessionChargingInformation::getPresenceReportingAreaInformation() {
  return m_PresenceReportingAreaInformation;
}
void PDUSessionChargingInformation::setPresenceReportingAreaInformation(
    std::map<std::string, PresenceInfo> const &value) {
  m_PresenceReportingAreaInformation = value;
  m_PresenceReportingAreaInformationIsSet = true;
}
bool PDUSessionChargingInformation::presenceReportingAreaInformationIsSet()
    const {
  return m_PresenceReportingAreaInformationIsSet;
}
void PDUSessionChargingInformation::unsetPresenceReportingAreaInformation() {
  m_PresenceReportingAreaInformationIsSet = false;
}
std::string PDUSessionChargingInformation::getUetimeZone() const {
  return m_UetimeZone;
}
void PDUSessionChargingInformation::setUetimeZone(std::string const &value) {
  m_UetimeZone = value;
  m_UetimeZoneIsSet = true;
}
bool PDUSessionChargingInformation::uetimeZoneIsSet() const {
  return m_UetimeZoneIsSet;
}
void PDUSessionChargingInformation::unsetUetimeZone() {
  m_UetimeZoneIsSet = false;
}
PDUSessionInformation
PDUSessionChargingInformation::getPduSessionInformation() const {
  return m_PduSessionInformation;
}
void PDUSessionChargingInformation::setPduSessionInformation(
    PDUSessionInformation const &value) {
  m_PduSessionInformation = value;
}
int32_t PDUSessionChargingInformation::getUnitCountInactivityTimer() const {
  return m_UnitCountInactivityTimer;
}
void PDUSessionChargingInformation::setUnitCountInactivityTimer(
    int32_t const value) {
  m_UnitCountInactivityTimer = value;
  m_UnitCountInactivityTimerIsSet = true;
}
bool PDUSessionChargingInformation::unitCountInactivityTimerIsSet() const {
  return m_UnitCountInactivityTimerIsSet;
}
void PDUSessionChargingInformation::unsetUnitCountInactivityTimer() {
  m_UnitCountInactivityTimerIsSet = false;
}
RANSecondaryRATUsageReport
PDUSessionChargingInformation::getRANSecondaryRATUsageReport() const {
  return m_RANSecondaryRATUsageReport;
}
void PDUSessionChargingInformation::setRANSecondaryRATUsageReport(
    RANSecondaryRATUsageReport const &value) {
  m_RANSecondaryRATUsageReport = value;
  m_RANSecondaryRATUsageReportIsSet = true;
}
bool PDUSessionChargingInformation::rANSecondaryRATUsageReportIsSet() const {
  return m_RANSecondaryRATUsageReportIsSet;
}
void PDUSessionChargingInformation::unsetRANSecondaryRATUsageReport() {
  m_RANSecondaryRATUsageReportIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
