/**
 * NSSF NS Selection
 * NSSF Network Slice Selection Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * NetworkSliceInformationDocumentApiImpl.h
 *
 *
 */

#ifndef NETWORK_SLICE_INFORMATION_DOCUMENT_API_IMPL_H_
#define NETWORK_SLICE_INFORMATION_DOCUMENT_API_IMPL_H_

#include <memory>
#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>

#include <NetworkSliceInformationDocumentApi.h>

#include <pistache/optional.h>

#include "AuthorizedNetworkSliceInfo.h"
#include "NFType.h"
#include "PlmnId.h"
#include "ProblemDetails.h"
#include "RedirectResponse.h"
#include "SliceInfoForPDUSession.h"
#include "SliceInfoForRegistration.h"
#include "SliceInfoForUEConfigurationUpdate.h"
#include "Tai.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class NetworkSliceInformationDocumentApiImpl
    : public org::openapitools::server::api::
          NetworkSliceInformationDocumentApi {
public:
  NetworkSliceInformationDocumentApiImpl(
      std::shared_ptr<Pistache::Rest::Router>);
  ~NetworkSliceInformationDocumentApiImpl() {}

  void
  n_s_selection_get(const Pistache::Optional<NFType> &nfType,
                    const Pistache::Optional<std::string> &nfId,
                    const Pistache::Optional<SliceInfoForRegistration>
                        &sliceInfoRequestForRegistration,
                    const Pistache::Optional<SliceInfoForPDUSession>
                        &sliceInfoRequestForPduSession,
                    const Pistache::Optional<SliceInfoForUEConfigurationUpdate>
                        &sliceInfoRequestForUeCu,
                    const Pistache::Optional<PlmnId> &homePlmnId,
                    const Pistache::Optional<Tai> &tai,
                    const Pistache::Optional<std::string> &supportedFeatures,
                    Pistache::Http::ResponseWriter &response);
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif