/**
 * M5_ConsumptionReporting
 * 5GMS AF M5 Consumption Reporting API Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ConsumptionReportingUnit.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ConsumptionReportingUnit::ConsumptionReportingUnit() {
  m_MediaConsumed = "";
  m_StartTime = "";
  m_Duration = 0;
  m_LocationsIsSet = false;
}

ConsumptionReportingUnit::~ConsumptionReportingUnit() {}

void ConsumptionReportingUnit::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ConsumptionReportingUnit &o) {
  j = nlohmann::json();
  j["mediaConsumed"] = o.m_MediaConsumed;
  j["startTime"] = o.m_StartTime;
  j["duration"] = o.m_Duration;
  if (o.locationsIsSet() || !o.m_Locations.empty())
    j["locations"] = o.m_Locations;
}

void from_json(const nlohmann::json &j, ConsumptionReportingUnit &o) {
  j.at("mediaConsumed").get_to(o.m_MediaConsumed);
  j.at("startTime").get_to(o.m_StartTime);
  j.at("duration").get_to(o.m_Duration);
  if (j.find("locations") != j.end()) {
    j.at("locations").get_to(o.m_Locations);
    o.m_LocationsIsSet = true;
  }
}

std::string ConsumptionReportingUnit::getMediaConsumed() const {
  return m_MediaConsumed;
}
void ConsumptionReportingUnit::setMediaConsumed(std::string const &value) {
  m_MediaConsumed = value;
}
std::string ConsumptionReportingUnit::getStartTime() const {
  return m_StartTime;
}
void ConsumptionReportingUnit::setStartTime(std::string const &value) {
  m_StartTime = value;
}
int32_t ConsumptionReportingUnit::getDuration() const { return m_Duration; }
void ConsumptionReportingUnit::setDuration(int32_t const value) {
  m_Duration = value;
}
std::vector<TypedLocation> &ConsumptionReportingUnit::getLocations() {
  return m_Locations;
}
void ConsumptionReportingUnit::setLocations(
    std::vector<TypedLocation> const &value) {
  m_Locations = value;
  m_LocationsIsSet = true;
}
bool ConsumptionReportingUnit::locationsIsSet() const {
  return m_LocationsIsSet;
}
void ConsumptionReportingUnit::unsetLocations() { m_LocationsIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
