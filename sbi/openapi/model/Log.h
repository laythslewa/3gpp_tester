/**
 * CAPIF_Logging_API_Invocation_API
 * API for invocation logs. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Log.h
 *
 * Represents an individual service API invocation log entry.
 */

#ifndef Log_H_
#define Log_H_

#include "AnyType.h"
#include "InterfaceDescription.h"
#include "Operation.h"
#include "Protocol.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an individual service API invocation log entry.
/// </summary>
class Log {
public:
  Log();
  virtual ~Log();

  void validate();

  /////////////////////////////////////////////
  /// Log members

  /// <summary>
  /// String identifying the API invoked.
  /// </summary>
  std::string getApiId() const;
  void setApiId(std::string const &value);
  /// <summary>
  /// Name of the API which was invoked, it is set as {apiName} part of the URI
  /// structure as defined in subclause 4.4 of 3GPP TS 29.501.
  /// </summary>
  std::string getApiName() const;
  void setApiName(std::string const &value);
  /// <summary>
  /// Version of the API which was invoked
  /// </summary>
  std::string getApiVersion() const;
  void setApiVersion(std::string const &value);
  /// <summary>
  /// Name of the specific resource invoked
  /// </summary>
  std::string getResourceName() const;
  void setResourceName(std::string const &value);
  /// <summary>
  /// string providing an URI formatted according to IETF RFC 3986.
  /// </summary>
  std::string getUri() const;
  void setUri(std::string const &value);
  bool uriIsSet() const;
  void unsetUri();
  /// <summary>
  ///
  /// </summary>
  Protocol getProtocol() const;
  void setProtocol(Protocol const &value);
  /// <summary>
  ///
  /// </summary>
  Operation getOperation() const;
  void setOperation(Operation const &value);
  bool operationIsSet() const;
  void unsetOperation();
  /// <summary>
  /// For HTTP protocol, it contains HTTP status code of the invocation
  /// </summary>
  std::string getResult() const;
  void setResult(std::string const &value);
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getInvocationTime() const;
  void setInvocationTime(std::string const &value);
  bool invocationTimeIsSet() const;
  void unsetInvocationTime();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of milliseconds.
  /// </summary>
  int32_t getInvocationLatency() const;
  void setInvocationLatency(int32_t const value);
  bool invocationLatencyIsSet() const;
  void unsetInvocationLatency();
  /// <summary>
  /// List of input parameters. Can be any value - string, number, boolean,
  /// array or object.
  /// </summary>
  AnyType getInputParameters() const;
  void setInputParameters(AnyType const &value);
  bool inputParametersIsSet() const;
  void unsetInputParameters();
  /// <summary>
  /// List of output parameters. Can be any value - string, number, boolean,
  /// array or object.
  /// </summary>
  AnyType getOutputParameters() const;
  void setOutputParameters(AnyType const &value);
  bool outputParametersIsSet() const;
  void unsetOutputParameters();
  /// <summary>
  ///
  /// </summary>
  InterfaceDescription getSrcInterface() const;
  void setSrcInterface(InterfaceDescription const &value);
  bool srcInterfaceIsSet() const;
  void unsetSrcInterface();
  /// <summary>
  ///
  /// </summary>
  InterfaceDescription getDestInterface() const;
  void setDestInterface(InterfaceDescription const &value);
  bool destInterfaceIsSet() const;
  void unsetDestInterface();
  /// <summary>
  /// It includes the node identifier (as defined in IETF RFC 7239 of all
  /// forwarding entities between the API invoker and the AEF, concatenated with
  /// comma and space, e.g. 192.0.2.43:80, unknown:_OBFport, 203.0.113.60
  /// </summary>
  std::string getFwdInterface() const;
  void setFwdInterface(std::string const &value);
  bool fwdInterfaceIsSet() const;
  void unsetFwdInterface();

  friend void to_json(nlohmann::json &j, const Log &o);
  friend void from_json(const nlohmann::json &j, Log &o);

protected:
  std::string m_ApiId;

  std::string m_ApiName;

  std::string m_ApiVersion;

  std::string m_ResourceName;

  std::string m_Uri;
  bool m_UriIsSet;
  Protocol m_Protocol;

  Operation m_Operation;
  bool m_OperationIsSet;
  std::string m_Result;

  std::string m_InvocationTime;
  bool m_InvocationTimeIsSet;
  int32_t m_InvocationLatency;
  bool m_InvocationLatencyIsSet;
  AnyType m_InputParameters;
  bool m_InputParametersIsSet;
  AnyType m_OutputParameters;
  bool m_OutputParametersIsSet;
  InterfaceDescription m_SrcInterface;
  bool m_SrcInterfaceIsSet;
  InterfaceDescription m_DestInterface;
  bool m_DestInterfaceIsSet;
  std::string m_FwdInterface;
  bool m_FwdInterfaceIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* Log_H_ */
