/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. © 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EventsSubscPutData.h
 *
 * Identifies the events the application subscribes to within an Events
 * Subscription sub-resource data. It may contain the notification of the
 * already met events
 */

#ifndef EventsSubscPutData_H_
#define EventsSubscPutData_H_

#include "AccNetChargingAddress.h"
#include "AccessNetChargingIdentifier.h"
#include "AccessType.h"
#include "AccumulatedUsage.h"
#include "AdditionalAccessInfo.h"
#include "AfEventNotification.h"
#include "AfEventSubscription.h"
#include "AnGwAddress.h"
#include "AppDetectionReport.h"
#include "BridgeManagementContainer.h"
#include "EventsNotification.h"
#include "EventsSubscReqData.h"
#include "NetLocAccessSupport.h"
#include "OutOfCreditInformation.h"
#include "PlmnIdNid.h"
#include "PortManagementContainer.h"
#include "QosMonitoringInformation.h"
#include "QosMonitoringReport.h"
#include "QosNotificationControlInfo.h"
#include "RanNasRelCause.h"
#include "RatType.h"
#include "RequestedQosMonitoringParameter.h"
#include "RequiredAccessInfo.h"
#include "ResourcesAllocationInfo.h"
#include "SatelliteBackhaulCategory.h"
#include "UsageThreshold.h"
#include "UserLocation.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Identifies the events the application subscribes to within an Events
/// Subscription sub-resource data. It may contain the notification of the
/// already met events
/// </summary>
class EventsSubscPutData {
public:
  EventsSubscPutData();
  virtual ~EventsSubscPutData();

  void validate();

  /////////////////////////////////////////////
  /// EventsSubscPutData members

  /// <summary>
  ///
  /// </summary>
  std::vector<AfEventSubscription> &getEvents();
  void setEvents(std::vector<AfEventSubscription> const &value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNotifUri() const;
  void setNotifUri(std::string const &value);
  bool notifUriIsSet() const;
  void unsetNotifUri();
  /// <summary>
  ///
  /// </summary>
  std::vector<RequestedQosMonitoringParameter> &getReqQosMonParams();
  void
  setReqQosMonParams(std::vector<RequestedQosMonitoringParameter> const &value);
  bool reqQosMonParamsIsSet() const;
  void unsetReqQosMonParams();
  /// <summary>
  ///
  /// </summary>
  QosMonitoringInformation getQosMon() const;
  void setQosMon(QosMonitoringInformation const &value);
  bool qosMonIsSet() const;
  void unsetQosMon();
  /// <summary>
  ///
  /// </summary>
  std::vector<RequiredAccessInfo> &getReqAnis();
  void setReqAnis(std::vector<RequiredAccessInfo> const &value);
  bool reqAnisIsSet() const;
  void unsetReqAnis();
  /// <summary>
  ///
  /// </summary>
  UsageThreshold getUsgThres() const;
  void setUsgThres(UsageThreshold const &value);
  bool usgThresIsSet() const;
  void unsetUsgThres();
  /// <summary>
  ///
  /// </summary>
  std::string getNotifCorreId() const;
  void setNotifCorreId(std::string const &value);
  bool notifCorreIdIsSet() const;
  void unsetNotifCorreId();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getAfAppIds();
  void setAfAppIds(std::vector<std::string> const &value);
  bool afAppIdsIsSet() const;
  void unsetAfAppIds();
  /// <summary>
  ///
  /// </summary>
  bool isDirectNotifInd() const;
  void setDirectNotifInd(bool const value);
  bool directNotifIndIsSet() const;
  void unsetDirectNotifInd();
  /// <summary>
  /// includes the detected application report.
  /// </summary>
  std::vector<AppDetectionReport> &getAdReports();
  void setAdReports(std::vector<AppDetectionReport> const &value);
  bool adReportsIsSet() const;
  void unsetAdReports();
  /// <summary>
  ///
  /// </summary>
  AccessType getAccessType() const;
  void setAccessType(AccessType const &value);
  bool accessTypeIsSet() const;
  void unsetAccessType();
  /// <summary>
  ///
  /// </summary>
  AdditionalAccessInfo getAddAccessInfo() const;
  void setAddAccessInfo(AdditionalAccessInfo const &value);
  bool addAccessInfoIsSet() const;
  void unsetAddAccessInfo();
  /// <summary>
  ///
  /// </summary>
  AdditionalAccessInfo getRelAccessInfo() const;
  void setRelAccessInfo(AdditionalAccessInfo const &value);
  bool relAccessInfoIsSet() const;
  void unsetRelAccessInfo();
  /// <summary>
  ///
  /// </summary>
  AccNetChargingAddress getAnChargAddr() const;
  void setAnChargAddr(AccNetChargingAddress const &value);
  bool anChargAddrIsSet() const;
  void unsetAnChargAddr();
  /// <summary>
  ///
  /// </summary>
  std::vector<AccessNetChargingIdentifier> &getAnChargIds();
  void setAnChargIds(std::vector<AccessNetChargingIdentifier> const &value);
  bool anChargIdsIsSet() const;
  void unsetAnChargIds();
  /// <summary>
  ///
  /// </summary>
  AnGwAddress getAnGwAddr() const;
  void setAnGwAddr(AnGwAddress const &value);
  bool anGwAddrIsSet() const;
  void unsetAnGwAddr();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getEvSubsUri() const;
  void setEvSubsUri(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<AfEventNotification> &getEvNotifs();
  void setEvNotifs(std::vector<AfEventNotification> const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<ResourcesAllocationInfo> &getFailedResourcAllocReports();
  void setFailedResourcAllocReports(
      std::vector<ResourcesAllocationInfo> const &value);
  bool failedResourcAllocReportsIsSet() const;
  void unsetFailedResourcAllocReports();
  /// <summary>
  ///
  /// </summary>
  std::vector<ResourcesAllocationInfo> &getSuccResourcAllocReports();
  void
  setSuccResourcAllocReports(std::vector<ResourcesAllocationInfo> const &value);
  bool succResourcAllocReportsIsSet() const;
  void unsetSuccResourcAllocReports();
  /// <summary>
  ///
  /// </summary>
  NetLocAccessSupport getNoNetLocSupp() const;
  void setNoNetLocSupp(NetLocAccessSupport const &value);
  bool noNetLocSuppIsSet() const;
  void unsetNoNetLocSupp();
  /// <summary>
  ///
  /// </summary>
  std::vector<OutOfCreditInformation> &getOutOfCredReports();
  void setOutOfCredReports(std::vector<OutOfCreditInformation> const &value);
  bool outOfCredReportsIsSet() const;
  void unsetOutOfCredReports();
  /// <summary>
  ///
  /// </summary>
  PlmnIdNid getPlmnId() const;
  void setPlmnId(PlmnIdNid const &value);
  bool plmnIdIsSet() const;
  void unsetPlmnId();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosNotificationControlInfo> &getQncReports();
  void setQncReports(std::vector<QosNotificationControlInfo> const &value);
  bool qncReportsIsSet() const;
  void unsetQncReports();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosMonitoringReport> &getQosMonReports();
  void setQosMonReports(std::vector<QosMonitoringReport> const &value);
  bool qosMonReportsIsSet() const;
  void unsetQosMonReports();
  /// <summary>
  /// Contains the RAN and/or NAS release cause.
  /// </summary>
  std::vector<RanNasRelCause> &getRanNasRelCauses();
  void setRanNasRelCauses(std::vector<RanNasRelCause> const &value);
  bool ranNasRelCausesIsSet() const;
  void unsetRanNasRelCauses();
  /// <summary>
  ///
  /// </summary>
  RatType getRatType() const;
  void setRatType(RatType const &value);
  bool ratTypeIsSet() const;
  void unsetRatType();
  /// <summary>
  ///
  /// </summary>
  SatelliteBackhaulCategory getSatBackhaulCategory() const;
  void setSatBackhaulCategory(SatelliteBackhaulCategory const &value);
  bool satBackhaulCategoryIsSet() const;
  void unsetSatBackhaulCategory();
  /// <summary>
  ///
  /// </summary>
  UserLocation getUeLoc() const;
  void setUeLoc(UserLocation const &value);
  bool ueLocIsSet() const;
  void unsetUeLoc();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getUeTimeZone() const;
  void setUeTimeZone(std::string const &value);
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();
  /// <summary>
  ///
  /// </summary>
  AccumulatedUsage getUsgRep() const;
  void setUsgRep(AccumulatedUsage const &value);
  bool usgRepIsSet() const;
  void unsetUsgRep();
  /// <summary>
  ///
  /// </summary>
  BridgeManagementContainer getTsnBridgeManCont() const;
  void setTsnBridgeManCont(BridgeManagementContainer const &value);
  bool tsnBridgeManContIsSet() const;
  void unsetTsnBridgeManCont();
  /// <summary>
  ///
  /// </summary>
  PortManagementContainer getTsnPortManContDstt() const;
  void setTsnPortManContDstt(PortManagementContainer const &value);
  bool tsnPortManContDsttIsSet() const;
  void unsetTsnPortManContDstt();
  /// <summary>
  ///
  /// </summary>
  std::vector<PortManagementContainer> &getTsnPortManContNwtts();
  void
  setTsnPortManContNwtts(std::vector<PortManagementContainer> const &value);
  bool tsnPortManContNwttsIsSet() const;
  void unsetTsnPortManContNwtts();

  friend void to_json(nlohmann::json &j, const EventsSubscPutData &o);
  friend void from_json(const nlohmann::json &j, EventsSubscPutData &o);

protected:
  std::vector<AfEventSubscription> m_Events;

  std::string m_NotifUri;
  bool m_NotifUriIsSet;
  std::vector<RequestedQosMonitoringParameter> m_ReqQosMonParams;
  bool m_ReqQosMonParamsIsSet;
  QosMonitoringInformation m_QosMon;
  bool m_QosMonIsSet;
  std::vector<RequiredAccessInfo> m_ReqAnis;
  bool m_ReqAnisIsSet;
  UsageThreshold m_UsgThres;
  bool m_UsgThresIsSet;
  std::string m_NotifCorreId;
  bool m_NotifCorreIdIsSet;
  std::vector<std::string> m_AfAppIds;
  bool m_AfAppIdsIsSet;
  bool m_DirectNotifInd;
  bool m_DirectNotifIndIsSet;
  std::vector<AppDetectionReport> m_AdReports;
  bool m_AdReportsIsSet;
  AccessType m_AccessType;
  bool m_AccessTypeIsSet;
  AdditionalAccessInfo m_AddAccessInfo;
  bool m_AddAccessInfoIsSet;
  AdditionalAccessInfo m_RelAccessInfo;
  bool m_RelAccessInfoIsSet;
  AccNetChargingAddress m_AnChargAddr;
  bool m_AnChargAddrIsSet;
  std::vector<AccessNetChargingIdentifier> m_AnChargIds;
  bool m_AnChargIdsIsSet;
  AnGwAddress m_AnGwAddr;
  bool m_AnGwAddrIsSet;
  std::string m_EvSubsUri;

  std::vector<AfEventNotification> m_EvNotifs;

  std::vector<ResourcesAllocationInfo> m_FailedResourcAllocReports;
  bool m_FailedResourcAllocReportsIsSet;
  std::vector<ResourcesAllocationInfo> m_SuccResourcAllocReports;
  bool m_SuccResourcAllocReportsIsSet;
  NetLocAccessSupport m_NoNetLocSupp;
  bool m_NoNetLocSuppIsSet;
  std::vector<OutOfCreditInformation> m_OutOfCredReports;
  bool m_OutOfCredReportsIsSet;
  PlmnIdNid m_PlmnId;
  bool m_PlmnIdIsSet;
  std::vector<QosNotificationControlInfo> m_QncReports;
  bool m_QncReportsIsSet;
  std::vector<QosMonitoringReport> m_QosMonReports;
  bool m_QosMonReportsIsSet;
  std::vector<RanNasRelCause> m_RanNasRelCauses;
  bool m_RanNasRelCausesIsSet;
  RatType m_RatType;
  bool m_RatTypeIsSet;
  SatelliteBackhaulCategory m_SatBackhaulCategory;
  bool m_SatBackhaulCategoryIsSet;
  UserLocation m_UeLoc;
  bool m_UeLocIsSet;
  std::string m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  AccumulatedUsage m_UsgRep;
  bool m_UsgRepIsSet;
  BridgeManagementContainer m_TsnBridgeManCont;
  bool m_TsnBridgeManContIsSet;
  PortManagementContainer m_TsnPortManContDstt;
  bool m_TsnPortManContDsttIsSet;
  std::vector<PortManagementContainer> m_TsnPortManContNwtts;
  bool m_TsnPortManContNwttsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* EventsSubscPutData_H_ */
