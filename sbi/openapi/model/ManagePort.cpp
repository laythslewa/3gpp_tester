/**
 * 3gpp-nidd
 * API for non IP data delivery. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ManagePort.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ManagePort::ManagePort() {
  m_Self = "";
  m_SelfIsSet = false;
  m_AppId = "";
  m_ManageEntityIsSet = false;
  m_SkipUeInquiry = false;
  m_SkipUeInquiryIsSet = false;
  m_SupportedFormatsIsSet = false;
  m_ConfiguredFormatIsSet = false;
}

ManagePort::~ManagePort() {}

void ManagePort::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ManagePort &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  j["appId"] = o.m_AppId;
  if (o.manageEntityIsSet())
    j["manageEntity"] = o.m_ManageEntity;
  if (o.skipUeInquiryIsSet())
    j["skipUeInquiry"] = o.m_SkipUeInquiry;
  if (o.supportedFormatsIsSet() || !o.m_SupportedFormats.empty())
    j["supportedFormats"] = o.m_SupportedFormats;
  if (o.configuredFormatIsSet())
    j["configuredFormat"] = o.m_ConfiguredFormat;
}

void from_json(const nlohmann::json &j, ManagePort &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  j.at("appId").get_to(o.m_AppId);
  if (j.find("manageEntity") != j.end()) {
    j.at("manageEntity").get_to(o.m_ManageEntity);
    o.m_ManageEntityIsSet = true;
  }
  if (j.find("skipUeInquiry") != j.end()) {
    j.at("skipUeInquiry").get_to(o.m_SkipUeInquiry);
    o.m_SkipUeInquiryIsSet = true;
  }
  if (j.find("supportedFormats") != j.end()) {
    j.at("supportedFormats").get_to(o.m_SupportedFormats);
    o.m_SupportedFormatsIsSet = true;
  }
  if (j.find("configuredFormat") != j.end()) {
    j.at("configuredFormat").get_to(o.m_ConfiguredFormat);
    o.m_ConfiguredFormatIsSet = true;
  }
}

std::string ManagePort::getSelf() const { return m_Self; }
void ManagePort::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool ManagePort::selfIsSet() const { return m_SelfIsSet; }
void ManagePort::unsetSelf() { m_SelfIsSet = false; }
std::string ManagePort::getAppId() const { return m_AppId; }
void ManagePort::setAppId(std::string const &value) { m_AppId = value; }
ManageEntity ManagePort::getManageEntity() const { return m_ManageEntity; }
void ManagePort::setManageEntity(ManageEntity const &value) {
  m_ManageEntity = value;
  m_ManageEntityIsSet = true;
}
bool ManagePort::manageEntityIsSet() const { return m_ManageEntityIsSet; }
void ManagePort::unsetManageEntity() { m_ManageEntityIsSet = false; }
bool ManagePort::isSkipUeInquiry() const { return m_SkipUeInquiry; }
void ManagePort::setSkipUeInquiry(bool const value) {
  m_SkipUeInquiry = value;
  m_SkipUeInquiryIsSet = true;
}
bool ManagePort::skipUeInquiryIsSet() const { return m_SkipUeInquiryIsSet; }
void ManagePort::unsetSkipUeInquiry() { m_SkipUeInquiryIsSet = false; }
std::vector<SerializationFormat> &ManagePort::getSupportedFormats() {
  return m_SupportedFormats;
}
void ManagePort::setSupportedFormats(
    std::vector<SerializationFormat> const &value) {
  m_SupportedFormats = value;
  m_SupportedFormatsIsSet = true;
}
bool ManagePort::supportedFormatsIsSet() const {
  return m_SupportedFormatsIsSet;
}
void ManagePort::unsetSupportedFormats() { m_SupportedFormatsIsSet = false; }
SerializationFormat ManagePort::getConfiguredFormat() const {
  return m_ConfiguredFormat;
}
void ManagePort::setConfiguredFormat(SerializationFormat const &value) {
  m_ConfiguredFormat = value;
  m_ConfiguredFormatIsSet = true;
}
bool ManagePort::configuredFormatIsSet() const {
  return m_ConfiguredFormatIsSet;
}
void ManagePort::unsetConfiguredFormat() { m_ConfiguredFormatIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
