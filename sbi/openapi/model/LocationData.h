/**
 * LMF Location
 * LMF Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * LocationData.h
 *
 * Information within Determine Location Response.
 */

#ifndef LocationData_H_
#define LocationData_H_

#include "AccuracyFulfilmentIndicator.h"
#include "CivicAddress.h"
#include "Ecgi.h"
#include "GeographicArea.h"
#include "GnssPositioningMethodAndUsage.h"
#include "LocalArea.h"
#include "Ncgi.h"
#include "PositioningMethodAndUsage.h"
#include "VelocityEstimate.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Information within Determine Location Response.
/// </summary>
class LocationData {
public:
  LocationData();
  virtual ~LocationData();

  void validate();

  /////////////////////////////////////////////
  /// LocationData members

  /// <summary>
  ///
  /// </summary>
  GeographicArea getLocationEstimate() const;
  void setLocationEstimate(GeographicArea const &value);
  /// <summary>
  ///
  /// </summary>
  AccuracyFulfilmentIndicator getAccuracyFulfilmentIndicator() const;
  void setAccuracyFulfilmentIndicator(AccuracyFulfilmentIndicator const &value);
  bool accuracyFulfilmentIndicatorIsSet() const;
  void unsetAccuracyFulfilmentIndicator();
  /// <summary>
  /// Indicates value of the age of the location estimate.
  /// </summary>
  int32_t getAgeOfLocationEstimate() const;
  void setAgeOfLocationEstimate(int32_t const value);
  bool ageOfLocationEstimateIsSet() const;
  void unsetAgeOfLocationEstimate();
  /// <summary>
  ///
  /// </summary>
  VelocityEstimate getVelocityEstimate() const;
  void setVelocityEstimate(VelocityEstimate const &value);
  bool velocityEstimateIsSet() const;
  void unsetVelocityEstimate();
  /// <summary>
  ///
  /// </summary>
  CivicAddress getCivicAddress() const;
  void setCivicAddress(CivicAddress const &value);
  bool civicAddressIsSet() const;
  void unsetCivicAddress();
  /// <summary>
  ///
  /// </summary>
  LocalArea getLocalLocationEstimate() const;
  void setLocalLocationEstimate(LocalArea const &value);
  bool localLocationEstimateIsSet() const;
  void unsetLocalLocationEstimate();
  /// <summary>
  ///
  /// </summary>
  std::vector<PositioningMethodAndUsage> &getPositioningDataList();
  void
  setPositioningDataList(std::vector<PositioningMethodAndUsage> const &value);
  bool positioningDataListIsSet() const;
  void unsetPositioningDataList();
  /// <summary>
  ///
  /// </summary>
  std::vector<GnssPositioningMethodAndUsage> &getGnssPositioningDataList();
  void setGnssPositioningDataList(
      std::vector<GnssPositioningMethodAndUsage> const &value);
  bool gnssPositioningDataListIsSet() const;
  void unsetGnssPositioningDataList();
  /// <summary>
  ///
  /// </summary>
  Ecgi getEcgi() const;
  void setEcgi(Ecgi const &value);
  bool ecgiIsSet() const;
  void unsetEcgi();
  /// <summary>
  ///
  /// </summary>
  Ncgi getNcgi() const;
  void setNcgi(Ncgi const &value);
  bool ncgiIsSet() const;
  void unsetNcgi();
  /// <summary>
  /// Indicates value of altitude.
  /// </summary>
  double getAltitude() const;
  void setAltitude(double const value);
  bool altitudeIsSet() const;
  void unsetAltitude();
  /// <summary>
  /// Specifies the measured uncompensated atmospheric pressure.
  /// </summary>
  int32_t getBarometricPressure() const;
  void setBarometricPressure(int32_t const value);
  bool barometricPressureIsSet() const;
  void unsetBarometricPressure();
  /// <summary>
  /// LMF identification.
  /// </summary>
  std::string getServingLMFIdentification() const;
  void setServingLMFIdentification(std::string const &value);
  bool servingLMFIdentificationIsSet() const;
  void unsetServingLMFIdentification();

  friend void to_json(nlohmann::json &j, const LocationData &o);
  friend void from_json(const nlohmann::json &j, LocationData &o);

protected:
  GeographicArea m_LocationEstimate;

  AccuracyFulfilmentIndicator m_AccuracyFulfilmentIndicator;
  bool m_AccuracyFulfilmentIndicatorIsSet;
  int32_t m_AgeOfLocationEstimate;
  bool m_AgeOfLocationEstimateIsSet;
  VelocityEstimate m_VelocityEstimate;
  bool m_VelocityEstimateIsSet;
  CivicAddress m_CivicAddress;
  bool m_CivicAddressIsSet;
  LocalArea m_LocalLocationEstimate;
  bool m_LocalLocationEstimateIsSet;
  std::vector<PositioningMethodAndUsage> m_PositioningDataList;
  bool m_PositioningDataListIsSet;
  std::vector<GnssPositioningMethodAndUsage> m_GnssPositioningDataList;
  bool m_GnssPositioningDataListIsSet;
  Ecgi m_Ecgi;
  bool m_EcgiIsSet;
  Ncgi m_Ncgi;
  bool m_NcgiIsSet;
  double m_Altitude;
  bool m_AltitudeIsSet;
  int32_t m_BarometricPressure;
  bool m_BarometricPressureIsSet;
  std::string m_ServingLMFIdentification;
  bool m_ServingLMFIdentificationIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* LocationData_H_ */
