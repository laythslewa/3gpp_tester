/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PDUAddress.h
 *
 *
 */

#ifndef PDUAddress_H_
#define PDUAddress_H_

#include "Ipv6Addr.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class PDUAddress {
public:
  PDUAddress();
  virtual ~PDUAddress();

  void validate();

  /////////////////////////////////////////////
  /// PDUAddress members

  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getPduIPv4Address() const;
  void setPduIPv4Address(std::string const &value);
  bool pduIPv4AddressIsSet() const;
  void unsetPduIPv4Address();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getPduIPv6AddresswithPrefix() const;
  void setPduIPv6AddresswithPrefix(Ipv6Addr const &value);
  bool pduIPv6AddresswithPrefixIsSet() const;
  void unsetPduIPv6AddresswithPrefix();
  /// <summary>
  ///
  /// </summary>
  int32_t getPduAddressprefixlength() const;
  void setPduAddressprefixlength(int32_t const value);
  bool pduAddressprefixlengthIsSet() const;
  void unsetPduAddressprefixlength();
  /// <summary>
  ///
  /// </summary>
  bool isIPv4dynamicAddressFlag() const;
  void setIPv4dynamicAddressFlag(bool const value);
  bool iPv4dynamicAddressFlagIsSet() const;
  void unsetIPv4dynamicAddressFlag();
  /// <summary>
  ///
  /// </summary>
  bool isIPv6dynamicPrefixFlag() const;
  void setIPv6dynamicPrefixFlag(bool const value);
  bool iPv6dynamicPrefixFlagIsSet() const;
  void unsetIPv6dynamicPrefixFlag();

  friend void to_json(nlohmann::json &j, const PDUAddress &o);
  friend void from_json(const nlohmann::json &j, PDUAddress &o);

protected:
  std::string m_PduIPv4Address;
  bool m_PduIPv4AddressIsSet;
  Ipv6Addr m_PduIPv6AddresswithPrefix;
  bool m_PduIPv6AddresswithPrefixIsSet;
  int32_t m_PduAddressprefixlength;
  bool m_PduAddressprefixlengthIsSet;
  bool m_IPv4dynamicAddressFlag;
  bool m_IPv4dynamicAddressFlagIsSet;
  bool m_IPv6dynamicPrefixFlag;
  bool m_IPv6dynamicPrefixFlagIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PDUAddress_H_ */
