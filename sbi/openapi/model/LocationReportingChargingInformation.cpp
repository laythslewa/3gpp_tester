/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "LocationReportingChargingInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

LocationReportingChargingInformation::LocationReportingChargingInformation() {
  m_LocationReportingMessageType = 0;
  m_UserInformationIsSet = false;
  m_UserLocationinfoIsSet = false;
  m_PSCellInformationIsSet = false;
  m_UetimeZone = "";
  m_UetimeZoneIsSet = false;
  m_RATTypeIsSet = false;
  m_PresenceReportingAreaInformationIsSet = false;
}

LocationReportingChargingInformation::~LocationReportingChargingInformation() {}

void LocationReportingChargingInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const LocationReportingChargingInformation &o) {
  j = nlohmann::json();
  j["locationReportingMessageType"] = o.m_LocationReportingMessageType;
  if (o.userInformationIsSet())
    j["userInformation"] = o.m_UserInformation;
  if (o.userLocationinfoIsSet())
    j["userLocationinfo"] = o.m_UserLocationinfo;
  if (o.pSCellInformationIsSet())
    j["pSCellInformation"] = o.m_PSCellInformation;
  if (o.uetimeZoneIsSet())
    j["uetimeZone"] = o.m_UetimeZone;
  if (o.rATTypeIsSet())
    j["rATType"] = o.m_RATType;
  if (o.presenceReportingAreaInformationIsSet() ||
      !o.m_PresenceReportingAreaInformation.empty())
    j["presenceReportingAreaInformation"] =
        o.m_PresenceReportingAreaInformation;
}

void from_json(const nlohmann::json &j,
               LocationReportingChargingInformation &o) {
  j.at("locationReportingMessageType").get_to(o.m_LocationReportingMessageType);
  if (j.find("userInformation") != j.end()) {
    j.at("userInformation").get_to(o.m_UserInformation);
    o.m_UserInformationIsSet = true;
  }
  if (j.find("userLocationinfo") != j.end()) {
    j.at("userLocationinfo").get_to(o.m_UserLocationinfo);
    o.m_UserLocationinfoIsSet = true;
  }
  if (j.find("pSCellInformation") != j.end()) {
    j.at("pSCellInformation").get_to(o.m_PSCellInformation);
    o.m_PSCellInformationIsSet = true;
  }
  if (j.find("uetimeZone") != j.end()) {
    j.at("uetimeZone").get_to(o.m_UetimeZone);
    o.m_UetimeZoneIsSet = true;
  }
  if (j.find("rATType") != j.end()) {
    j.at("rATType").get_to(o.m_RATType);
    o.m_RATTypeIsSet = true;
  }
  if (j.find("presenceReportingAreaInformation") != j.end()) {
    j.at("presenceReportingAreaInformation")
        .get_to(o.m_PresenceReportingAreaInformation);
    o.m_PresenceReportingAreaInformationIsSet = true;
  }
}

int32_t
LocationReportingChargingInformation::getLocationReportingMessageType() const {
  return m_LocationReportingMessageType;
}
void LocationReportingChargingInformation::setLocationReportingMessageType(
    int32_t const value) {
  m_LocationReportingMessageType = value;
}
UserInformation
LocationReportingChargingInformation::getUserInformation() const {
  return m_UserInformation;
}
void LocationReportingChargingInformation::setUserInformation(
    UserInformation const &value) {
  m_UserInformation = value;
  m_UserInformationIsSet = true;
}
bool LocationReportingChargingInformation::userInformationIsSet() const {
  return m_UserInformationIsSet;
}
void LocationReportingChargingInformation::unsetUserInformation() {
  m_UserInformationIsSet = false;
}
UserLocation LocationReportingChargingInformation::getUserLocationinfo() const {
  return m_UserLocationinfo;
}
void LocationReportingChargingInformation::setUserLocationinfo(
    UserLocation const &value) {
  m_UserLocationinfo = value;
  m_UserLocationinfoIsSet = true;
}
bool LocationReportingChargingInformation::userLocationinfoIsSet() const {
  return m_UserLocationinfoIsSet;
}
void LocationReportingChargingInformation::unsetUserLocationinfo() {
  m_UserLocationinfoIsSet = false;
}
PSCellInformation
LocationReportingChargingInformation::getPSCellInformation() const {
  return m_PSCellInformation;
}
void LocationReportingChargingInformation::setPSCellInformation(
    PSCellInformation const &value) {
  m_PSCellInformation = value;
  m_PSCellInformationIsSet = true;
}
bool LocationReportingChargingInformation::pSCellInformationIsSet() const {
  return m_PSCellInformationIsSet;
}
void LocationReportingChargingInformation::unsetPSCellInformation() {
  m_PSCellInformationIsSet = false;
}
std::string LocationReportingChargingInformation::getUetimeZone() const {
  return m_UetimeZone;
}
void LocationReportingChargingInformation::setUetimeZone(
    std::string const &value) {
  m_UetimeZone = value;
  m_UetimeZoneIsSet = true;
}
bool LocationReportingChargingInformation::uetimeZoneIsSet() const {
  return m_UetimeZoneIsSet;
}
void LocationReportingChargingInformation::unsetUetimeZone() {
  m_UetimeZoneIsSet = false;
}
RatType LocationReportingChargingInformation::getRATType() const {
  return m_RATType;
}
void LocationReportingChargingInformation::setRATType(RatType const &value) {
  m_RATType = value;
  m_RATTypeIsSet = true;
}
bool LocationReportingChargingInformation::rATTypeIsSet() const {
  return m_RATTypeIsSet;
}
void LocationReportingChargingInformation::unsetRATType() {
  m_RATTypeIsSet = false;
}
std::map<std::string, PresenceInfo> &
LocationReportingChargingInformation::getPresenceReportingAreaInformation() {
  return m_PresenceReportingAreaInformation;
}
void LocationReportingChargingInformation::setPresenceReportingAreaInformation(
    std::map<std::string, PresenceInfo> const &value) {
  m_PresenceReportingAreaInformation = value;
  m_PresenceReportingAreaInformationIsSet = true;
}
bool LocationReportingChargingInformation::
    presenceReportingAreaInformationIsSet() const {
  return m_PresenceReportingAreaInformationIsSet;
}
void LocationReportingChargingInformation::
    unsetPresenceReportingAreaInformation() {
  m_PresenceReportingAreaInformationIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
