/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EutraLocation.h
 *
 *
 */

#ifndef EutraLocation_H_
#define EutraLocation_H_

#include "Ecgi.h"
#include "GlobalRanNodeId.h"
#include "Tai.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class EutraLocation {
public:
  EutraLocation();
  virtual ~EutraLocation();

  void validate();

  /////////////////////////////////////////////
  /// EutraLocation members

  /// <summary>
  ///
  /// </summary>
  Tai getTai() const;
  void setTai(Tai const &value);
  /// <summary>
  ///
  /// </summary>
  bool isIgnoreTai() const;
  void setIgnoreTai(bool const value);
  bool ignoreTaiIsSet() const;
  void unsetIgnoreTai();
  /// <summary>
  ///
  /// </summary>
  Ecgi getEcgi() const;
  void setEcgi(Ecgi const &value);
  /// <summary>
  /// This flag when present shall indicate that the Ecgi shall be ignored When
  /// present, it shall be set as follows: - true: ecgi shall be ignored. -
  /// false (default): ecgi shall not be ignored.
  /// </summary>
  bool isIgnoreEcgi() const;
  void setIgnoreEcgi(bool const value);
  bool ignoreEcgiIsSet() const;
  void unsetIgnoreEcgi();
  /// <summary>
  /// The value represents the elapsed time in minutes since the last network
  /// contact of the mobile station.  Value \&quot;0\&quot; indicates that the
  /// location information was obtained after a successful paging procedure for
  /// Active Location Retrieval when the UE is in idle mode or after a
  /// successful NG-RAN location reporting procedure with the eNB when the UE is
  /// in connected mode. Any other value than \&quot;0\&quot; indicates that the
  /// location information is the last known one. See 3GPP TS 29.002
  /// clause 17.7.8.
  /// </summary>
  int32_t getAgeOfLocationInformation() const;
  void setAgeOfLocationInformation(int32_t const value);
  bool ageOfLocationInformationIsSet() const;
  void unsetAgeOfLocationInformation();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getUeLocationTimestamp() const;
  void setUeLocationTimestamp(std::string const &value);
  bool ueLocationTimestampIsSet() const;
  void unsetUeLocationTimestamp();
  /// <summary>
  /// Refer to geographical Information. See 3GPP TS 23.032 clause 7.3.2. Only
  /// the description of an ellipsoid point with uncertainty circle is allowed
  /// to be used.
  /// </summary>
  std::string getGeographicalInformation() const;
  void setGeographicalInformation(std::string const &value);
  bool geographicalInformationIsSet() const;
  void unsetGeographicalInformation();
  /// <summary>
  /// Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999)
  /// [24] clause 3.88.2. Only the description of an ellipsoid point with
  /// uncertainty circle is allowed to be used.
  /// </summary>
  std::string getGeodeticInformation() const;
  void setGeodeticInformation(std::string const &value);
  bool geodeticInformationIsSet() const;
  void unsetGeodeticInformation();
  /// <summary>
  ///
  /// </summary>
  GlobalRanNodeId getGlobalNgenbId() const;
  void setGlobalNgenbId(GlobalRanNodeId const &value);
  bool globalNgenbIdIsSet() const;
  void unsetGlobalNgenbId();
  /// <summary>
  ///
  /// </summary>
  GlobalRanNodeId getGlobalENbId() const;
  void setGlobalENbId(GlobalRanNodeId const &value);
  bool globalENbIdIsSet() const;
  void unsetGlobalENbId();

  friend void to_json(nlohmann::json &j, const EutraLocation &o);
  friend void from_json(const nlohmann::json &j, EutraLocation &o);

protected:
  Tai m_Tai;

  bool m_IgnoreTai;
  bool m_IgnoreTaiIsSet;
  Ecgi m_Ecgi;

  bool m_IgnoreEcgi;
  bool m_IgnoreEcgiIsSet;
  int32_t m_AgeOfLocationInformation;
  bool m_AgeOfLocationInformationIsSet;
  std::string m_UeLocationTimestamp;
  bool m_UeLocationTimestampIsSet;
  std::string m_GeographicalInformation;
  bool m_GeographicalInformationIsSet;
  std::string m_GeodeticInformation;
  bool m_GeodeticInformationIsSet;
  GlobalRanNodeId m_GlobalNgenbId;
  bool m_GlobalNgenbIdIsSet;
  GlobalRanNodeId m_GlobalENbId;
  bool m_GlobalENbIdIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* EutraLocation_H_ */
