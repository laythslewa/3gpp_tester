/**
 * 3gpp-as-session-with-qos
 * API for setting us an AS session with required QoS. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UserPlaneNotificationData.h
 *
 * Represents the parameters to be conveyed in a user plane event(s)
 * notification.
 */

#ifndef UserPlaneNotificationData_H_
#define UserPlaneNotificationData_H_

#include "UserPlaneEventReport.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the parameters to be conveyed in a user plane event(s)
/// notification.
/// </summary>
class UserPlaneNotificationData {
public:
  UserPlaneNotificationData();
  virtual ~UserPlaneNotificationData();

  void validate();

  /////////////////////////////////////////////
  /// UserPlaneNotificationData members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getTransaction() const;
  void setTransaction(std::string const &value);
  /// <summary>
  /// Contains the reported event and applicable information
  /// </summary>
  std::vector<UserPlaneEventReport> &getEventReports();
  void setEventReports(std::vector<UserPlaneEventReport> const &value);

  friend void to_json(nlohmann::json &j, const UserPlaneNotificationData &o);
  friend void from_json(const nlohmann::json &j, UserPlaneNotificationData &o);

protected:
  std::string m_Transaction;

  std::vector<UserPlaneEventReport> m_EventReports;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UserPlaneNotificationData_H_ */
