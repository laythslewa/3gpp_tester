/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualSMPolicyDocumentApi.h
 *
 *
 */

#ifndef IndividualSMPolicyDocumentApi_H_
#define IndividualSMPolicyDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "ProblemDetails.h"
#include "RedirectResponse.h"
#include "SmPolicyControl.h"
#include "SmPolicyDecision.h"
#include "SmPolicyDeleteData.h"
#include "SmPolicyUpdateContextData.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class IndividualSMPolicyDocumentApi {
public:
  IndividualSMPolicyDocumentApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~IndividualSMPolicyDocumentApi() {}
  void init();

  const std::string base = "/npcf-smpolicycontrol/v1";

private:
  void setupRoutes();

  void delete_sm_policy_handler(const Pistache::Rest::Request &request,
                                Pistache::Http::ResponseWriter response);
  void get_sm_policy_handler(const Pistache::Rest::Request &request,
                             Pistache::Http::ResponseWriter response);
  void update_sm_policy_handler(const Pistache::Rest::Request &request,
                                Pistache::Http::ResponseWriter response);
  void individual_sm_policy_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Delete an existing Individual SM Policy
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="smPolicyId">Identifier of a policy association</param>
  /// <param name="smPolicyDeleteData"></param>
  virtual void delete_sm_policy(const std::string &smPolicyId,
                                const SmPolicyDeleteData &smPolicyDeleteData,
                                Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Read an Individual SM Policy
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="smPolicyId">Identifier of a policy association</param>
  virtual void get_sm_policy(const std::string &smPolicyId,
                             Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Update an existing Individual SM Policy
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="smPolicyId">Identifier of a policy association</param>
  /// <param name="smPolicyUpdateContextData"></param>
  virtual void
  update_sm_policy(const std::string &smPolicyId,
                   const SmPolicyUpdateContextData &smPolicyUpdateContextData,
                   Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IndividualSMPolicyDocumentApi_H_ */
