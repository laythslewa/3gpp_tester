/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UserInformation.h
 *
 *
 */

#ifndef UserInformation_H_
#define UserInformation_H_

#include "RoamerInOut.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class UserInformation {
public:
  UserInformation();
  virtual ~UserInformation();

  void validate();

  /////////////////////////////////////////////
  /// UserInformation members

  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getServedGPSI() const;
  void setServedGPSI(std::string const &value);
  bool servedGPSIIsSet() const;
  void unsetServedGPSI();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getServedPEI() const;
  void setServedPEI(std::string const &value);
  bool servedPEIIsSet() const;
  void unsetServedPEI();
  /// <summary>
  ///
  /// </summary>
  bool isUnauthenticatedFlag() const;
  void setUnauthenticatedFlag(bool const value);
  bool unauthenticatedFlagIsSet() const;
  void unsetUnauthenticatedFlag();
  /// <summary>
  ///
  /// </summary>
  RoamerInOut getRoamerInOut() const;
  void setRoamerInOut(RoamerInOut const &value);
  bool roamerInOutIsSet() const;
  void unsetRoamerInOut();

  friend void to_json(nlohmann::json &j, const UserInformation &o);
  friend void from_json(const nlohmann::json &j, UserInformation &o);

protected:
  std::string m_ServedGPSI;
  bool m_ServedGPSIIsSet;
  std::string m_ServedPEI;
  bool m_ServedPEIIsSet;
  bool m_UnauthenticatedFlag;
  bool m_UnauthenticatedFlagIsSet;
  RoamerInOut m_RoamerInOut;
  bool m_RoamerInOutIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UserInformation_H_ */
