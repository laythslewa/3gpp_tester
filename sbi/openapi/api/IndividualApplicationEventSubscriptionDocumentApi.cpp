/**
 * Naf_EventExposure
 * AF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualApplicationEventSubscriptionDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

IndividualApplicationEventSubscriptionDocumentApi::
    IndividualApplicationEventSubscriptionDocumentApi(
        std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void IndividualApplicationEventSubscriptionDocumentApi::init() {
  setupRoutes();
}

void IndividualApplicationEventSubscriptionDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Delete(
      *router, base + "/subscriptions/:subscriptionId",
      Routes::bind(&IndividualApplicationEventSubscriptionDocumentApi::
                       delete_af_event_exposure_subsc_handler,
                   this));
  Routes::Get(*router, base + "/subscriptions/:subscriptionId",
              Routes::bind(&IndividualApplicationEventSubscriptionDocumentApi::
                               get_af_event_exposure_subsc_handler,
                           this));
  Routes::Put(*router, base + "/subscriptions/:subscriptionId",
              Routes::bind(&IndividualApplicationEventSubscriptionDocumentApi::
                               put_af_event_exposure_subsc_handler,
                           this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &IndividualApplicationEventSubscriptionDocumentApi::
          individual_application_event_subscription_document_api_default_handler,
      this));
}

void IndividualApplicationEventSubscriptionDocumentApi::
    delete_af_event_exposure_subsc_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto subscriptionId = request.param(":subscriptionId").as<std::string>();

  try {
    this->delete_af_event_exposure_subsc(subscriptionId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualApplicationEventSubscriptionDocumentApi::
    get_af_event_exposure_subsc_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto subscriptionId = request.param(":subscriptionId").as<std::string>();

  // Getting the query params
  auto suppFeatQuery = request.query().get("supp-feat");
  Pistache::Optional<std::string> suppFeat;
  if (!suppFeatQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(suppFeatQuery.get(), valueQuery_instance)) {
      suppFeat = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->get_af_event_exposure_subsc(subscriptionId, suppFeat, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualApplicationEventSubscriptionDocumentApi::
    put_af_event_exposure_subsc_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto subscriptionId = request.param(":subscriptionId").as<std::string>();

  // Getting the body param

  AfEventExposureSubsc afEventExposureSubsc;

  try {
    nlohmann::json::parse(request.body()).get_to(afEventExposureSubsc);
    this->put_af_event_exposure_subsc(subscriptionId, afEventExposureSubsc,
                                      response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void IndividualApplicationEventSubscriptionDocumentApi::
    individual_application_event_subscription_document_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
