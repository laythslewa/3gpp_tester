/**
 * Npcf_UEPolicyControl
 * UE Policy Control Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UeRequestedValueRep.h
 *
 * Contains the current applicable values corresponding to the policy control
 * request triggers.
 */

#ifndef UeRequestedValueRep_H_
#define UeRequestedValueRep_H_

#include "CmState.h"
#include "PlmnId.h"
#include "PresenceInfo.h"
#include "UserLocation.h"
#include <map>
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the current applicable values corresponding to the policy control
/// request triggers.
/// </summary>
class UeRequestedValueRep {
public:
  UeRequestedValueRep();
  virtual ~UeRequestedValueRep();

  void validate();

  /////////////////////////////////////////////
  /// UeRequestedValueRep members

  /// <summary>
  ///
  /// </summary>
  UserLocation getUserLoc() const;
  void setUserLoc(UserLocation const &value);
  bool userLocIsSet() const;
  void unsetUserLoc();
  /// <summary>
  /// Contains the UE presence statuses for tracking areas. The praId attribute
  /// within the PresenceInfo data type is the key of the map.
  /// </summary>
  std::map<std::string, PresenceInfo> &getPraStatuses();
  void setPraStatuses(std::map<std::string, PresenceInfo> const &value);
  bool praStatusesIsSet() const;
  void unsetPraStatuses();
  /// <summary>
  ///
  /// </summary>
  PlmnId getPlmnId() const;
  void setPlmnId(PlmnId const &value);
  bool plmnIdIsSet() const;
  void unsetPlmnId();
  /// <summary>
  ///
  /// </summary>
  CmState getConnectState() const;
  void setConnectState(CmState const &value);
  bool connectStateIsSet() const;
  void unsetConnectState();

  friend void to_json(nlohmann::json &j, const UeRequestedValueRep &o);
  friend void from_json(const nlohmann::json &j, UeRequestedValueRep &o);

protected:
  UserLocation m_UserLoc;
  bool m_UserLocIsSet;
  std::map<std::string, PresenceInfo> m_PraStatuses;
  bool m_PraStatusesIsSet;
  PlmnId m_PlmnId;
  bool m_PlmnIdIsSet;
  CmState m_ConnectState;
  bool m_ConnectStateIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UeRequestedValueRep_H_ */
