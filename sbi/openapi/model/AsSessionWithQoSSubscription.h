/**
 * 3gpp-as-session-with-qos
 * API for setting us an AS session with required QoS. © 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AsSessionWithQoSSubscription.h
 *
 * Represents an individual AS session with required QoS subscription resource.
 */

#ifndef AsSessionWithQoSSubscription_H_
#define AsSessionWithQoSSubscription_H_

#include "EthFlowDescription.h"
#include "FlowInfo.h"
#include "QosMonitoringInformation.h"
#include "Snssai.h"
#include "SponsorInformation.h"
#include "TscQosRequirement.h"
#include "UsageThreshold.h"
#include "WebsockNotifConfig.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an individual AS session with required QoS subscription resource.
/// </summary>
class AsSessionWithQoSSubscription {
public:
  AsSessionWithQoSSubscription();
  virtual ~AsSessionWithQoSSubscription();

  void validate();

  /////////////////////////////////////////////
  /// AsSessionWithQoSSubscription members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const &value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getNotificationDestination() const;
  void setNotificationDestination(std::string const &value);
  /// <summary>
  /// Identifies the external Application Identifier.
  /// </summary>
  std::string getExterAppId() const;
  void setExterAppId(std::string const &value);
  bool exterAppIdIsSet() const;
  void unsetExterAppId();
  /// <summary>
  /// Describe the data flow which requires QoS.
  /// </summary>
  std::vector<FlowInfo> &getFlowInfo();
  void setFlowInfo(std::vector<FlowInfo> const &value);
  bool flowInfoIsSet() const;
  void unsetFlowInfo();
  /// <summary>
  /// Identifies Ethernet packet flows.
  /// </summary>
  std::vector<EthFlowDescription> &getEthFlowInfo();
  void setEthFlowInfo(std::vector<EthFlowDescription> const &value);
  bool ethFlowInfoIsSet() const;
  void unsetEthFlowInfo();
  /// <summary>
  /// Identifies a pre-defined QoS information
  /// </summary>
  std::string getQosReference() const;
  void setQosReference(std::string const &value);
  bool qosReferenceIsSet() const;
  void unsetQosReference();
  /// <summary>
  /// Identifies an ordered list of pre-defined QoS information. The lower the
  /// index of the array for a given entry, the higher the priority.
  /// </summary>
  std::vector<std::string> &getAltQoSReferences();
  void setAltQoSReferences(std::vector<std::string> const &value);
  bool altQoSReferencesIsSet() const;
  void unsetAltQoSReferences();
  /// <summary>
  ///
  /// </summary>
  bool isDisUeNotif() const;
  void setDisUeNotif(bool const value);
  bool disUeNotifIsSet() const;
  void unsetDisUeNotif();
  /// <summary>
  /// string identifying a Ipv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in IETF RFC 1166.
  /// </summary>
  std::string getUeIpv4Addr() const;
  void setUeIpv4Addr(std::string const &value);
  bool ueIpv4AddrIsSet() const;
  void unsetUeIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  std::string getIpDomain() const;
  void setIpDomain(std::string const &value);
  bool ipDomainIsSet() const;
  void unsetIpDomain();
  /// <summary>
  /// string identifying a Ipv6 address formatted according to clause 4 in IETF
  /// RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC
  /// 5952 shall not be used.
  /// </summary>
  std::string getUeIpv6Addr() const;
  void setUeIpv6Addr(std::string const &value);
  bool ueIpv6AddrIsSet() const;
  void unsetUeIpv6Addr();
  /// <summary>
  /// String identifying a MAC address formatted in the hexadecimal notation
  /// according to clause 1.1 and clause 2.1 of RFC 7042
  /// </summary>
  std::string getMacAddr() const;
  void setMacAddr(std::string const &value);
  bool macAddrIsSet() const;
  void unsetMacAddr();
  /// <summary>
  ///
  /// </summary>
  UsageThreshold getUsageThreshold() const;
  void setUsageThreshold(UsageThreshold const &value);
  bool usageThresholdIsSet() const;
  void unsetUsageThreshold();
  /// <summary>
  ///
  /// </summary>
  SponsorInformation getSponsorInfo() const;
  void setSponsorInfo(SponsorInformation const &value);
  bool sponsorInfoIsSet() const;
  void unsetSponsorInfo();
  /// <summary>
  ///
  /// </summary>
  QosMonitoringInformation getQosMonInfo() const;
  void setQosMonInfo(QosMonitoringInformation const &value);
  bool qosMonInfoIsSet() const;
  void unsetQosMonInfo();
  /// <summary>
  ///
  /// </summary>
  bool isLocalNotifInd() const;
  void setLocalNotifInd(bool const value);
  bool localNotifIndIsSet() const;
  void unsetLocalNotifInd();
  /// <summary>
  ///
  /// </summary>
  TscQosRequirement getTscQosReq() const;
  void setTscQosReq(TscQosRequirement const &value);
  bool tscQosReqIsSet() const;
  void unsetTscQosReq();
  /// <summary>
  /// Set to true by the SCS/AS to request the SCEF to send a test notification
  /// as defined in subclause 5.2.5.3. Set to false or omitted otherwise.
  /// </summary>
  bool isRequestTestNotification() const;
  void setRequestTestNotification(bool const value);
  bool requestTestNotificationIsSet() const;
  void unsetRequestTestNotification();
  /// <summary>
  ///
  /// </summary>
  WebsockNotifConfig getWebsockNotifConfig() const;
  void setWebsockNotifConfig(WebsockNotifConfig const &value);
  bool websockNotifConfigIsSet() const;
  void unsetWebsockNotifConfig();

  friend void to_json(nlohmann::json &j, const AsSessionWithQoSSubscription &o);
  friend void from_json(const nlohmann::json &j,
                        AsSessionWithQoSSubscription &o);

protected:
  std::string m_Self;
  bool m_SelfIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  std::string m_NotificationDestination;

  std::string m_ExterAppId;
  bool m_ExterAppIdIsSet;
  std::vector<FlowInfo> m_FlowInfo;
  bool m_FlowInfoIsSet;
  std::vector<EthFlowDescription> m_EthFlowInfo;
  bool m_EthFlowInfoIsSet;
  std::string m_QosReference;
  bool m_QosReferenceIsSet;
  std::vector<std::string> m_AltQoSReferences;
  bool m_AltQoSReferencesIsSet;
  bool m_DisUeNotif;
  bool m_DisUeNotifIsSet;
  std::string m_UeIpv4Addr;
  bool m_UeIpv4AddrIsSet;
  std::string m_IpDomain;
  bool m_IpDomainIsSet;
  std::string m_UeIpv6Addr;
  bool m_UeIpv6AddrIsSet;
  std::string m_MacAddr;
  bool m_MacAddrIsSet;
  UsageThreshold m_UsageThreshold;
  bool m_UsageThresholdIsSet;
  SponsorInformation m_SponsorInfo;
  bool m_SponsorInfoIsSet;
  QosMonitoringInformation m_QosMonInfo;
  bool m_QosMonInfoIsSet;
  bool m_LocalNotifInd;
  bool m_LocalNotifIndIsSet;
  TscQosRequirement m_TscQosReq;
  bool m_TscQosReqIsSet;
  bool m_RequestTestNotification;
  bool m_RequestTestNotificationIsSet;
  WebsockNotifConfig m_WebsockNotifConfig;
  bool m_WebsockNotifConfigIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AsSessionWithQoSSubscription_H_ */
