/**
 * VAE_FileDistribution
 * API for VAE File Distribution Service Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "LocalMbmsInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

LocalMbmsInfo::LocalMbmsInfo() {
  m_MbmsEnbIpv4MulAddr = "";
  m_MbmsEnbIpv4MulAddrIsSet = false;
  m_MbmsEnbIpv6MulAddrIsSet = false;
  m_MbmsGwIpv4SsmAddr = "";
  m_MbmsGwIpv4SsmAddrIsSet = false;
  m_MbmsGwIpv6SsmAddrIsSet = false;
  m_Cteid = "";
  m_CteidIsSet = false;
  m_BmscIpv4Addr = "";
  m_BmscIpv4AddrIsSet = false;
  m_BmscIpv6AddrIsSet = false;
  m_BmscPort = 0;
  m_BmscPortIsSet = false;
}

LocalMbmsInfo::~LocalMbmsInfo() {}

void LocalMbmsInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const LocalMbmsInfo &o) {
  j = nlohmann::json();
  if (o.mbmsEnbIpv4MulAddrIsSet())
    j["mbmsEnbIpv4MulAddr"] = o.m_MbmsEnbIpv4MulAddr;
  if (o.mbmsEnbIpv6MulAddrIsSet())
    j["mbmsEnbIpv6MulAddr"] = o.m_MbmsEnbIpv6MulAddr;
  if (o.mbmsGwIpv4SsmAddrIsSet())
    j["mbmsGwIpv4SsmAddr"] = o.m_MbmsGwIpv4SsmAddr;
  if (o.mbmsGwIpv6SsmAddrIsSet())
    j["mbmsGwIpv6SsmAddr"] = o.m_MbmsGwIpv6SsmAddr;
  if (o.cteidIsSet())
    j["cteid"] = o.m_Cteid;
  if (o.bmscIpv4AddrIsSet())
    j["bmscIpv4Addr"] = o.m_BmscIpv4Addr;
  if (o.bmscIpv6AddrIsSet())
    j["bmscIpv6Addr"] = o.m_BmscIpv6Addr;
  if (o.bmscPortIsSet())
    j["bmscPort"] = o.m_BmscPort;
}

void from_json(const nlohmann::json &j, LocalMbmsInfo &o) {
  if (j.find("mbmsEnbIpv4MulAddr") != j.end()) {
    j.at("mbmsEnbIpv4MulAddr").get_to(o.m_MbmsEnbIpv4MulAddr);
    o.m_MbmsEnbIpv4MulAddrIsSet = true;
  }
  if (j.find("mbmsEnbIpv6MulAddr") != j.end()) {
    j.at("mbmsEnbIpv6MulAddr").get_to(o.m_MbmsEnbIpv6MulAddr);
    o.m_MbmsEnbIpv6MulAddrIsSet = true;
  }
  if (j.find("mbmsGwIpv4SsmAddr") != j.end()) {
    j.at("mbmsGwIpv4SsmAddr").get_to(o.m_MbmsGwIpv4SsmAddr);
    o.m_MbmsGwIpv4SsmAddrIsSet = true;
  }
  if (j.find("mbmsGwIpv6SsmAddr") != j.end()) {
    j.at("mbmsGwIpv6SsmAddr").get_to(o.m_MbmsGwIpv6SsmAddr);
    o.m_MbmsGwIpv6SsmAddrIsSet = true;
  }
  if (j.find("cteid") != j.end()) {
    j.at("cteid").get_to(o.m_Cteid);
    o.m_CteidIsSet = true;
  }
  if (j.find("bmscIpv4Addr") != j.end()) {
    j.at("bmscIpv4Addr").get_to(o.m_BmscIpv4Addr);
    o.m_BmscIpv4AddrIsSet = true;
  }
  if (j.find("bmscIpv6Addr") != j.end()) {
    j.at("bmscIpv6Addr").get_to(o.m_BmscIpv6Addr);
    o.m_BmscIpv6AddrIsSet = true;
  }
  if (j.find("bmscPort") != j.end()) {
    j.at("bmscPort").get_to(o.m_BmscPort);
    o.m_BmscPortIsSet = true;
  }
}

std::string LocalMbmsInfo::getMbmsEnbIpv4MulAddr() const {
  return m_MbmsEnbIpv4MulAddr;
}
void LocalMbmsInfo::setMbmsEnbIpv4MulAddr(std::string const &value) {
  m_MbmsEnbIpv4MulAddr = value;
  m_MbmsEnbIpv4MulAddrIsSet = true;
}
bool LocalMbmsInfo::mbmsEnbIpv4MulAddrIsSet() const {
  return m_MbmsEnbIpv4MulAddrIsSet;
}
void LocalMbmsInfo::unsetMbmsEnbIpv4MulAddr() {
  m_MbmsEnbIpv4MulAddrIsSet = false;
}
Ipv6Prefix LocalMbmsInfo::getMbmsEnbIpv6MulAddr() const {
  return m_MbmsEnbIpv6MulAddr;
}
void LocalMbmsInfo::setMbmsEnbIpv6MulAddr(Ipv6Prefix const &value) {
  m_MbmsEnbIpv6MulAddr = value;
  m_MbmsEnbIpv6MulAddrIsSet = true;
}
bool LocalMbmsInfo::mbmsEnbIpv6MulAddrIsSet() const {
  return m_MbmsEnbIpv6MulAddrIsSet;
}
void LocalMbmsInfo::unsetMbmsEnbIpv6MulAddr() {
  m_MbmsEnbIpv6MulAddrIsSet = false;
}
std::string LocalMbmsInfo::getMbmsGwIpv4SsmAddr() const {
  return m_MbmsGwIpv4SsmAddr;
}
void LocalMbmsInfo::setMbmsGwIpv4SsmAddr(std::string const &value) {
  m_MbmsGwIpv4SsmAddr = value;
  m_MbmsGwIpv4SsmAddrIsSet = true;
}
bool LocalMbmsInfo::mbmsGwIpv4SsmAddrIsSet() const {
  return m_MbmsGwIpv4SsmAddrIsSet;
}
void LocalMbmsInfo::unsetMbmsGwIpv4SsmAddr() {
  m_MbmsGwIpv4SsmAddrIsSet = false;
}
Ipv6Addr LocalMbmsInfo::getMbmsGwIpv6SsmAddr() const {
  return m_MbmsGwIpv6SsmAddr;
}
void LocalMbmsInfo::setMbmsGwIpv6SsmAddr(Ipv6Addr const &value) {
  m_MbmsGwIpv6SsmAddr = value;
  m_MbmsGwIpv6SsmAddrIsSet = true;
}
bool LocalMbmsInfo::mbmsGwIpv6SsmAddrIsSet() const {
  return m_MbmsGwIpv6SsmAddrIsSet;
}
void LocalMbmsInfo::unsetMbmsGwIpv6SsmAddr() {
  m_MbmsGwIpv6SsmAddrIsSet = false;
}
std::string LocalMbmsInfo::getCteid() const { return m_Cteid; }
void LocalMbmsInfo::setCteid(std::string const &value) {
  m_Cteid = value;
  m_CteidIsSet = true;
}
bool LocalMbmsInfo::cteidIsSet() const { return m_CteidIsSet; }
void LocalMbmsInfo::unsetCteid() { m_CteidIsSet = false; }
std::string LocalMbmsInfo::getBmscIpv4Addr() const { return m_BmscIpv4Addr; }
void LocalMbmsInfo::setBmscIpv4Addr(std::string const &value) {
  m_BmscIpv4Addr = value;
  m_BmscIpv4AddrIsSet = true;
}
bool LocalMbmsInfo::bmscIpv4AddrIsSet() const { return m_BmscIpv4AddrIsSet; }
void LocalMbmsInfo::unsetBmscIpv4Addr() { m_BmscIpv4AddrIsSet = false; }
Ipv6Addr LocalMbmsInfo::getBmscIpv6Addr() const { return m_BmscIpv6Addr; }
void LocalMbmsInfo::setBmscIpv6Addr(Ipv6Addr const &value) {
  m_BmscIpv6Addr = value;
  m_BmscIpv6AddrIsSet = true;
}
bool LocalMbmsInfo::bmscIpv6AddrIsSet() const { return m_BmscIpv6AddrIsSet; }
void LocalMbmsInfo::unsetBmscIpv6Addr() { m_BmscIpv6AddrIsSet = false; }
int32_t LocalMbmsInfo::getBmscPort() const { return m_BmscPort; }
void LocalMbmsInfo::setBmscPort(int32_t const value) {
  m_BmscPort = value;
  m_BmscPortIsSet = true;
}
bool LocalMbmsInfo::bmscPortIsSet() const { return m_BmscPortIsSet; }
void LocalMbmsInfo::unsetBmscPort() { m_BmscPortIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
