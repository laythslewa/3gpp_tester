/**
 * JOSE Protected Message Forwarding API
 * N32-f Message Forwarding Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DataToIntegrityProtectBlock.h
 *
 * Data to be integrity protected
 */

#ifndef DataToIntegrityProtectBlock_H_
#define DataToIntegrityProtectBlock_H_

#include "HttpHeader.h"
#include "HttpPayload.h"
#include "MetaData.h"
#include "RequestLine.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data to be integrity protected
/// </summary>
class DataToIntegrityProtectBlock {
public:
  DataToIntegrityProtectBlock();
  virtual ~DataToIntegrityProtectBlock();

  void validate();

  /////////////////////////////////////////////
  /// DataToIntegrityProtectBlock members

  /// <summary>
  ///
  /// </summary>
  MetaData getMetaData() const;
  void setMetaData(MetaData const &value);
  bool metaDataIsSet() const;
  void unsetMetaData();
  /// <summary>
  ///
  /// </summary>
  RequestLine getRequestLine() const;
  void setRequestLine(RequestLine const &value);
  bool requestLineIsSet() const;
  void unsetRequestLine();
  /// <summary>
  ///
  /// </summary>
  std::string getStatusLine() const;
  void setStatusLine(std::string const &value);
  bool statusLineIsSet() const;
  void unsetStatusLine();
  /// <summary>
  ///
  /// </summary>
  std::vector<HttpHeader> &getHeaders();
  void setHeaders(std::vector<HttpHeader> const &value);
  bool headersIsSet() const;
  void unsetHeaders();
  /// <summary>
  ///
  /// </summary>
  std::vector<HttpPayload> &getPayload();
  void setPayload(std::vector<HttpPayload> const &value);
  bool payloadIsSet() const;
  void unsetPayload();

  friend void to_json(nlohmann::json &j, const DataToIntegrityProtectBlock &o);
  friend void from_json(const nlohmann::json &j,
                        DataToIntegrityProtectBlock &o);

protected:
  MetaData m_MetaData;
  bool m_MetaDataIsSet;
  RequestLine m_RequestLine;
  bool m_RequestLineIsSet;
  std::string m_StatusLine;
  bool m_StatusLineIsSet;
  std::vector<HttpHeader> m_Headers;
  bool m_HeadersIsSet;
  std::vector<HttpPayload> m_Payload;
  bool m_PayloadIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* DataToIntegrityProtectBlock_H_ */
