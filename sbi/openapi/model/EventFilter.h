/**
 * Nnwdaf_AnalyticsInfo
 * Nnwdaf_AnalyticsInfo Service API. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EventFilter.h
 *
 * Represents the event filters used to identify the requested analytics.
 */

#ifndef EventFilter_H_
#define EventFilter_H_

#include "BwRequirement.h"
#include "ExceptionId.h"
#include "ExpectedAnalyticsType.h"
#include "ExpectedUeBehaviourData.h"
#include "NFType.h"
#include "NetworkAreaInfo.h"
#include "NetworkPerfType.h"
#include "NsiIdInfo.h"
#include "QosRequirement.h"
#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the event filters used to identify the requested analytics.
/// </summary>
class EventFilter {
public:
  EventFilter();
  virtual ~EventFilter();

  void validate();

  /////////////////////////////////////////////
  /// EventFilter members

  /// <summary>
  /// FALSE represents not applicable for all slices. TRUE represents applicable
  /// for all slices.
  /// </summary>
  bool isAnySlice() const;
  void setAnySlice(bool const value);
  bool anySliceIsSet() const;
  void unsetAnySlice();
  /// <summary>
  /// Identification(s) of network slice to which the subscription belongs.
  /// </summary>
  std::vector<Snssai> &getSnssais();
  void setSnssais(std::vector<Snssai> const &value);
  bool snssaisIsSet() const;
  void unsetSnssais();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getAppIds();
  void setAppIds(std::vector<std::string> const &value);
  bool appIdsIsSet() const;
  void unsetAppIds();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getDnns();
  void setDnns(std::vector<std::string> const &value);
  bool dnnsIsSet() const;
  void unsetDnns();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getDnais();
  void setDnais(std::vector<std::string> const &value);
  bool dnaisIsSet() const;
  void unsetDnais();
  /// <summary>
  ///
  /// </summary>
  NetworkAreaInfo getNetworkArea() const;
  void setNetworkArea(NetworkAreaInfo const &value);
  bool networkAreaIsSet() const;
  void unsetNetworkArea();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getNfInstanceIds();
  void setNfInstanceIds(std::vector<std::string> const &value);
  bool nfInstanceIdsIsSet() const;
  void unsetNfInstanceIds();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getNfSetIds();
  void setNfSetIds(std::vector<std::string> const &value);
  bool nfSetIdsIsSet() const;
  void unsetNfSetIds();
  /// <summary>
  ///
  /// </summary>
  std::vector<NFType> &getNfTypes();
  void setNfTypes(std::vector<NFType> const &value);
  bool nfTypesIsSet() const;
  void unsetNfTypes();
  /// <summary>
  ///
  /// </summary>
  std::vector<NsiIdInfo> &getNsiIdInfos();
  void setNsiIdInfos(std::vector<NsiIdInfo> const &value);
  bool nsiIdInfosIsSet() const;
  void unsetNsiIdInfos();
  /// <summary>
  ///
  /// </summary>
  QosRequirement getQosRequ() const;
  void setQosRequ(QosRequirement const &value);
  bool qosRequIsSet() const;
  void unsetQosRequ();
  /// <summary>
  ///
  /// </summary>
  std::vector<NetworkPerfType> &getNwPerfTypes();
  void setNwPerfTypes(std::vector<NetworkPerfType> const &value);
  bool nwPerfTypesIsSet() const;
  void unsetNwPerfTypes();
  /// <summary>
  ///
  /// </summary>
  std::vector<BwRequirement> &getBwRequs();
  void setBwRequs(std::vector<BwRequirement> const &value);
  bool bwRequsIsSet() const;
  void unsetBwRequs();
  /// <summary>
  ///
  /// </summary>
  std::vector<ExceptionId> &getExcepIds();
  void setExcepIds(std::vector<ExceptionId> const &value);
  bool excepIdsIsSet() const;
  void unsetExcepIds();
  /// <summary>
  ///
  /// </summary>
  ExpectedAnalyticsType getExptAnaType() const;
  void setExptAnaType(ExpectedAnalyticsType const &value);
  bool exptAnaTypeIsSet() const;
  void unsetExptAnaType();
  /// <summary>
  ///
  /// </summary>
  ExpectedUeBehaviourData getExptUeBehav() const;
  void setExptUeBehav(ExpectedUeBehaviourData const &value);
  bool exptUeBehavIsSet() const;
  void unsetExptUeBehav();

  friend void to_json(nlohmann::json &j, const EventFilter &o);
  friend void from_json(const nlohmann::json &j, EventFilter &o);

protected:
  bool m_AnySlice;
  bool m_AnySliceIsSet;
  std::vector<Snssai> m_Snssais;
  bool m_SnssaisIsSet;
  std::vector<std::string> m_AppIds;
  bool m_AppIdsIsSet;
  std::vector<std::string> m_Dnns;
  bool m_DnnsIsSet;
  std::vector<std::string> m_Dnais;
  bool m_DnaisIsSet;
  NetworkAreaInfo m_NetworkArea;
  bool m_NetworkAreaIsSet;
  std::vector<std::string> m_NfInstanceIds;
  bool m_NfInstanceIdsIsSet;
  std::vector<std::string> m_NfSetIds;
  bool m_NfSetIdsIsSet;
  std::vector<NFType> m_NfTypes;
  bool m_NfTypesIsSet;
  std::vector<NsiIdInfo> m_NsiIdInfos;
  bool m_NsiIdInfosIsSet;
  QosRequirement m_QosRequ;
  bool m_QosRequIsSet;
  std::vector<NetworkPerfType> m_NwPerfTypes;
  bool m_NwPerfTypesIsSet;
  std::vector<BwRequirement> m_BwRequs;
  bool m_BwRequsIsSet;
  std::vector<ExceptionId> m_ExcepIds;
  bool m_ExcepIdsIsSet;
  ExpectedAnalyticsType m_ExptAnaType;
  bool m_ExptAnaTypeIsSet;
  ExpectedUeBehaviourData m_ExptUeBehav;
  bool m_ExptUeBehavIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* EventFilter_H_ */
