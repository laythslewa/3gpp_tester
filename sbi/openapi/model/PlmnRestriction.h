/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PlmnRestriction.h
 *
 *
 */

#ifndef PlmnRestriction_H_
#define PlmnRestriction_H_

#include "Area.h"
#include "CoreNetworkType.h"
#include "RatType.h"
#include "ServiceAreaRestriction.h"
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class PlmnRestriction {
public:
  PlmnRestriction();
  virtual ~PlmnRestriction();

  void validate();

  /////////////////////////////////////////////
  /// PlmnRestriction members

  /// <summary>
  ///
  /// </summary>
  std::vector<RatType> &getRatRestrictions();
  void setRatRestrictions(std::vector<RatType> const &value);
  bool ratRestrictionsIsSet() const;
  void unsetRatRestrictions();
  /// <summary>
  ///
  /// </summary>
  std::vector<Area> &getForbiddenAreas();
  void setForbiddenAreas(std::vector<Area> const &value);
  bool forbiddenAreasIsSet() const;
  void unsetForbiddenAreas();
  /// <summary>
  ///
  /// </summary>
  ServiceAreaRestriction getServiceAreaRestriction() const;
  void setServiceAreaRestriction(ServiceAreaRestriction const &value);
  bool serviceAreaRestrictionIsSet() const;
  void unsetServiceAreaRestriction();
  /// <summary>
  ///
  /// </summary>
  std::vector<CoreNetworkType> &getCoreNetworkTypeRestrictions();
  void
  setCoreNetworkTypeRestrictions(std::vector<CoreNetworkType> const &value);
  bool coreNetworkTypeRestrictionsIsSet() const;
  void unsetCoreNetworkTypeRestrictions();
  /// <summary>
  ///
  /// </summary>
  std::vector<RatType> &getPrimaryRatRestrictions();
  void setPrimaryRatRestrictions(std::vector<RatType> const &value);
  bool primaryRatRestrictionsIsSet() const;
  void unsetPrimaryRatRestrictions();
  /// <summary>
  ///
  /// </summary>
  std::vector<RatType> &getSecondaryRatRestrictions();
  void setSecondaryRatRestrictions(std::vector<RatType> const &value);
  bool secondaryRatRestrictionsIsSet() const;
  void unsetSecondaryRatRestrictions();

  friend void to_json(nlohmann::json &j, const PlmnRestriction &o);
  friend void from_json(const nlohmann::json &j, PlmnRestriction &o);

protected:
  std::vector<RatType> m_RatRestrictions;
  bool m_RatRestrictionsIsSet;
  std::vector<Area> m_ForbiddenAreas;
  bool m_ForbiddenAreasIsSet;
  ServiceAreaRestriction m_ServiceAreaRestriction;
  bool m_ServiceAreaRestrictionIsSet;
  std::vector<CoreNetworkType> m_CoreNetworkTypeRestrictions;
  bool m_CoreNetworkTypeRestrictionsIsSet;
  std::vector<RatType> m_PrimaryRatRestrictions;
  bool m_PrimaryRatRestrictionsIsSet;
  std::vector<RatType> m_SecondaryRatRestrictions;
  bool m_SecondaryRatRestrictionsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PlmnRestriction_H_ */
