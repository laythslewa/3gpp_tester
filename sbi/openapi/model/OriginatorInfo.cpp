/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "OriginatorInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OriginatorInfo::OriginatorInfo() {
  m_OriginatorSUPI = "";
  m_OriginatorSUPIIsSet = false;
  m_OriginatorGPSI = "";
  m_OriginatorGPSIIsSet = false;
  m_OriginatorOtherAddressIsSet = false;
  m_OriginatorReceivedAddressIsSet = false;
  m_OriginatorSCCPAddress = "";
  m_OriginatorSCCPAddressIsSet = false;
  m_SMOriginatorInterfaceIsSet = false;
  m_SMOriginatorProtocolId = "";
  m_SMOriginatorProtocolIdIsSet = false;
}

OriginatorInfo::~OriginatorInfo() {}

void OriginatorInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const OriginatorInfo &o) {
  j = nlohmann::json();
  if (o.originatorSUPIIsSet())
    j["originatorSUPI"] = o.m_OriginatorSUPI;
  if (o.originatorGPSIIsSet())
    j["originatorGPSI"] = o.m_OriginatorGPSI;
  if (o.originatorOtherAddressIsSet())
    j["originatorOtherAddress"] = o.m_OriginatorOtherAddress;
  if (o.originatorReceivedAddressIsSet())
    j["originatorReceivedAddress"] = o.m_OriginatorReceivedAddress;
  if (o.originatorSCCPAddressIsSet())
    j["originatorSCCPAddress"] = o.m_OriginatorSCCPAddress;
  if (o.sMOriginatorInterfaceIsSet())
    j["sMOriginatorInterface"] = o.m_SMOriginatorInterface;
  if (o.sMOriginatorProtocolIdIsSet())
    j["sMOriginatorProtocolId"] = o.m_SMOriginatorProtocolId;
}

void from_json(const nlohmann::json &j, OriginatorInfo &o) {
  if (j.find("originatorSUPI") != j.end()) {
    j.at("originatorSUPI").get_to(o.m_OriginatorSUPI);
    o.m_OriginatorSUPIIsSet = true;
  }
  if (j.find("originatorGPSI") != j.end()) {
    j.at("originatorGPSI").get_to(o.m_OriginatorGPSI);
    o.m_OriginatorGPSIIsSet = true;
  }
  if (j.find("originatorOtherAddress") != j.end()) {
    j.at("originatorOtherAddress").get_to(o.m_OriginatorOtherAddress);
    o.m_OriginatorOtherAddressIsSet = true;
  }
  if (j.find("originatorReceivedAddress") != j.end()) {
    j.at("originatorReceivedAddress").get_to(o.m_OriginatorReceivedAddress);
    o.m_OriginatorReceivedAddressIsSet = true;
  }
  if (j.find("originatorSCCPAddress") != j.end()) {
    j.at("originatorSCCPAddress").get_to(o.m_OriginatorSCCPAddress);
    o.m_OriginatorSCCPAddressIsSet = true;
  }
  if (j.find("sMOriginatorInterface") != j.end()) {
    j.at("sMOriginatorInterface").get_to(o.m_SMOriginatorInterface);
    o.m_SMOriginatorInterfaceIsSet = true;
  }
  if (j.find("sMOriginatorProtocolId") != j.end()) {
    j.at("sMOriginatorProtocolId").get_to(o.m_SMOriginatorProtocolId);
    o.m_SMOriginatorProtocolIdIsSet = true;
  }
}

std::string OriginatorInfo::getOriginatorSUPI() const {
  return m_OriginatorSUPI;
}
void OriginatorInfo::setOriginatorSUPI(std::string const &value) {
  m_OriginatorSUPI = value;
  m_OriginatorSUPIIsSet = true;
}
bool OriginatorInfo::originatorSUPIIsSet() const {
  return m_OriginatorSUPIIsSet;
}
void OriginatorInfo::unsetOriginatorSUPI() { m_OriginatorSUPIIsSet = false; }
std::string OriginatorInfo::getOriginatorGPSI() const {
  return m_OriginatorGPSI;
}
void OriginatorInfo::setOriginatorGPSI(std::string const &value) {
  m_OriginatorGPSI = value;
  m_OriginatorGPSIIsSet = true;
}
bool OriginatorInfo::originatorGPSIIsSet() const {
  return m_OriginatorGPSIIsSet;
}
void OriginatorInfo::unsetOriginatorGPSI() { m_OriginatorGPSIIsSet = false; }
SMAddressInfo OriginatorInfo::getOriginatorOtherAddress() const {
  return m_OriginatorOtherAddress;
}
void OriginatorInfo::setOriginatorOtherAddress(SMAddressInfo const &value) {
  m_OriginatorOtherAddress = value;
  m_OriginatorOtherAddressIsSet = true;
}
bool OriginatorInfo::originatorOtherAddressIsSet() const {
  return m_OriginatorOtherAddressIsSet;
}
void OriginatorInfo::unsetOriginatorOtherAddress() {
  m_OriginatorOtherAddressIsSet = false;
}
SMAddressInfo OriginatorInfo::getOriginatorReceivedAddress() const {
  return m_OriginatorReceivedAddress;
}
void OriginatorInfo::setOriginatorReceivedAddress(SMAddressInfo const &value) {
  m_OriginatorReceivedAddress = value;
  m_OriginatorReceivedAddressIsSet = true;
}
bool OriginatorInfo::originatorReceivedAddressIsSet() const {
  return m_OriginatorReceivedAddressIsSet;
}
void OriginatorInfo::unsetOriginatorReceivedAddress() {
  m_OriginatorReceivedAddressIsSet = false;
}
std::string OriginatorInfo::getOriginatorSCCPAddress() const {
  return m_OriginatorSCCPAddress;
}
void OriginatorInfo::setOriginatorSCCPAddress(std::string const &value) {
  m_OriginatorSCCPAddress = value;
  m_OriginatorSCCPAddressIsSet = true;
}
bool OriginatorInfo::originatorSCCPAddressIsSet() const {
  return m_OriginatorSCCPAddressIsSet;
}
void OriginatorInfo::unsetOriginatorSCCPAddress() {
  m_OriginatorSCCPAddressIsSet = false;
}
SMInterface OriginatorInfo::getSMOriginatorInterface() const {
  return m_SMOriginatorInterface;
}
void OriginatorInfo::setSMOriginatorInterface(SMInterface const &value) {
  m_SMOriginatorInterface = value;
  m_SMOriginatorInterfaceIsSet = true;
}
bool OriginatorInfo::sMOriginatorInterfaceIsSet() const {
  return m_SMOriginatorInterfaceIsSet;
}
void OriginatorInfo::unsetSMOriginatorInterface() {
  m_SMOriginatorInterfaceIsSet = false;
}
std::string OriginatorInfo::getSMOriginatorProtocolId() const {
  return m_SMOriginatorProtocolId;
}
void OriginatorInfo::setSMOriginatorProtocolId(std::string const &value) {
  m_SMOriginatorProtocolId = value;
  m_SMOriginatorProtocolIdIsSet = true;
}
bool OriginatorInfo::sMOriginatorProtocolIdIsSet() const {
  return m_SMOriginatorProtocolIdIsSet;
}
void OriginatorInfo::unsetSMOriginatorProtocolId() {
  m_SMOriginatorProtocolIdIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
