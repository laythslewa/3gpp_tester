/**
 * Nudsf_Timer
 * Nudsf Timer Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SearchExpression.h
 *
 * A logical expression element
 */

#ifndef SearchExpression_H_
#define SearchExpression_H_

#include "ComparisonOperator.h"
#include "ConditionOperator.h"
#include "SearchComparison.h"
#include "SearchCondition.h"
#include "SearchExpression.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// A logical expression element
/// </summary>
class SearchExpression {
public:
  SearchExpression();
  virtual ~SearchExpression();

  void validate();

  /////////////////////////////////////////////
  /// SearchExpression members

  /// <summary>
  ///
  /// </summary>
  ConditionOperator getCond() const;
  void setCond(ConditionOperator const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<SearchExpression> &getUnits();
  void setUnits(std::vector<SearchExpression> const &value);
  /// <summary>
  /// Represents the Identifier of a Meta schema.
  /// </summary>
  std::string getSchemaId() const;
  void setSchemaId(std::string const &value);
  bool schemaIdIsSet() const;
  void unsetSchemaId();
  /// <summary>
  ///
  /// </summary>
  ComparisonOperator getOp() const;
  void setOp(ComparisonOperator const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getTag() const;
  void setTag(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getValue() const;
  void setValue(std::string const &value);

  friend void to_json(nlohmann::json &j, const SearchExpression &o);
  friend void from_json(const nlohmann::json &j, SearchExpression &o);

protected:
  ConditionOperator m_Cond;

  std::vector<SearchExpression> m_Units;

  std::string m_SchemaId;
  bool m_SchemaIdIsSet;
  ComparisonOperator m_Op;

  std::string m_Tag;

  std::string m_Value;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SearchExpression_H_ */
