/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RANSecondaryRATUsageReport.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RANSecondaryRATUsageReport::RANSecondaryRATUsageReport() {
  m_RANSecondaryRATTypeIsSet = false;
  m_QosFlowsUsageReportsIsSet = false;
}

RANSecondaryRATUsageReport::~RANSecondaryRATUsageReport() {}

void RANSecondaryRATUsageReport::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const RANSecondaryRATUsageReport &o) {
  j = nlohmann::json();
  if (o.rANSecondaryRATTypeIsSet())
    j["rANSecondaryRATType"] = o.m_RANSecondaryRATType;
  if (o.qosFlowsUsageReportsIsSet() || !o.m_QosFlowsUsageReports.empty())
    j["qosFlowsUsageReports"] = o.m_QosFlowsUsageReports;
}

void from_json(const nlohmann::json &j, RANSecondaryRATUsageReport &o) {
  if (j.find("rANSecondaryRATType") != j.end()) {
    j.at("rANSecondaryRATType").get_to(o.m_RANSecondaryRATType);
    o.m_RANSecondaryRATTypeIsSet = true;
  }
  if (j.find("qosFlowsUsageReports") != j.end()) {
    j.at("qosFlowsUsageReports").get_to(o.m_QosFlowsUsageReports);
    o.m_QosFlowsUsageReportsIsSet = true;
  }
}

RatType RANSecondaryRATUsageReport::getRANSecondaryRATType() const {
  return m_RANSecondaryRATType;
}
void RANSecondaryRATUsageReport::setRANSecondaryRATType(RatType const &value) {
  m_RANSecondaryRATType = value;
  m_RANSecondaryRATTypeIsSet = true;
}
bool RANSecondaryRATUsageReport::rANSecondaryRATTypeIsSet() const {
  return m_RANSecondaryRATTypeIsSet;
}
void RANSecondaryRATUsageReport::unsetRANSecondaryRATType() {
  m_RANSecondaryRATTypeIsSet = false;
}
std::vector<QosFlowsUsageReport> &
RANSecondaryRATUsageReport::getQosFlowsUsageReports() {
  return m_QosFlowsUsageReports;
}
void RANSecondaryRATUsageReport::setQosFlowsUsageReports(
    std::vector<QosFlowsUsageReport> const &value) {
  m_QosFlowsUsageReports = value;
  m_QosFlowsUsageReportsIsSet = true;
}
bool RANSecondaryRATUsageReport::qosFlowsUsageReportsIsSet() const {
  return m_QosFlowsUsageReportsIsSet;
}
void RANSecondaryRATUsageReport::unsetQosFlowsUsageReports() {
  m_QosFlowsUsageReportsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
