/**
 * SS_NetworkResourceAdaptation
 * SS Network Resource Adaptation Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UnicastSubscription.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UnicastSubscription::UnicastSubscription() {
  m_UniQosReq = "";
  m_UniQosReqIsSet = false;
  m_Duration = "";
  m_DurationIsSet = false;
  m_NotifUri = "";
  m_ReqTestNotif = false;
  m_ReqTestNotifIsSet = false;
  m_WsNotifCfgIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
}

UnicastSubscription::~UnicastSubscription() {}

void UnicastSubscription::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UnicastSubscription &o) {
  j = nlohmann::json();
  j["valTgtUe"] = o.m_ValTgtUe;
  if (o.uniQosReqIsSet())
    j["uniQosReq"] = o.m_UniQosReq;
  if (o.durationIsSet())
    j["duration"] = o.m_Duration;
  j["notifUri"] = o.m_NotifUri;
  if (o.reqTestNotifIsSet())
    j["reqTestNotif"] = o.m_ReqTestNotif;
  if (o.wsNotifCfgIsSet())
    j["wsNotifCfg"] = o.m_WsNotifCfg;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, UnicastSubscription &o) {
  j.at("valTgtUe").get_to(o.m_ValTgtUe);
  if (j.find("uniQosReq") != j.end()) {
    j.at("uniQosReq").get_to(o.m_UniQosReq);
    o.m_UniQosReqIsSet = true;
  }
  if (j.find("duration") != j.end()) {
    j.at("duration").get_to(o.m_Duration);
    o.m_DurationIsSet = true;
  }
  j.at("notifUri").get_to(o.m_NotifUri);
  if (j.find("reqTestNotif") != j.end()) {
    j.at("reqTestNotif").get_to(o.m_ReqTestNotif);
    o.m_ReqTestNotifIsSet = true;
  }
  if (j.find("wsNotifCfg") != j.end()) {
    j.at("wsNotifCfg").get_to(o.m_WsNotifCfg);
    o.m_WsNotifCfgIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

ValTargetUe UnicastSubscription::getValTgtUe() const { return m_ValTgtUe; }
void UnicastSubscription::setValTgtUe(ValTargetUe const &value) {
  m_ValTgtUe = value;
}
std::string UnicastSubscription::getUniQosReq() const { return m_UniQosReq; }
void UnicastSubscription::setUniQosReq(std::string const &value) {
  m_UniQosReq = value;
  m_UniQosReqIsSet = true;
}
bool UnicastSubscription::uniQosReqIsSet() const { return m_UniQosReqIsSet; }
void UnicastSubscription::unsetUniQosReq() { m_UniQosReqIsSet = false; }
std::string UnicastSubscription::getDuration() const { return m_Duration; }
void UnicastSubscription::setDuration(std::string const &value) {
  m_Duration = value;
  m_DurationIsSet = true;
}
bool UnicastSubscription::durationIsSet() const { return m_DurationIsSet; }
void UnicastSubscription::unsetDuration() { m_DurationIsSet = false; }
std::string UnicastSubscription::getNotifUri() const { return m_NotifUri; }
void UnicastSubscription::setNotifUri(std::string const &value) {
  m_NotifUri = value;
}
bool UnicastSubscription::isReqTestNotif() const { return m_ReqTestNotif; }
void UnicastSubscription::setReqTestNotif(bool const value) {
  m_ReqTestNotif = value;
  m_ReqTestNotifIsSet = true;
}
bool UnicastSubscription::reqTestNotifIsSet() const {
  return m_ReqTestNotifIsSet;
}
void UnicastSubscription::unsetReqTestNotif() { m_ReqTestNotifIsSet = false; }
WebsockNotifConfig UnicastSubscription::getWsNotifCfg() const {
  return m_WsNotifCfg;
}
void UnicastSubscription::setWsNotifCfg(WebsockNotifConfig const &value) {
  m_WsNotifCfg = value;
  m_WsNotifCfgIsSet = true;
}
bool UnicastSubscription::wsNotifCfgIsSet() const { return m_WsNotifCfgIsSet; }
void UnicastSubscription::unsetWsNotifCfg() { m_WsNotifCfgIsSet = false; }
std::string UnicastSubscription::getSuppFeat() const { return m_SuppFeat; }
void UnicastSubscription::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool UnicastSubscription::suppFeatIsSet() const { return m_SuppFeatIsSet; }
void UnicastSubscription::unsetSuppFeat() { m_SuppFeatIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
