/**
 * Nchf_SpendingLimitControl
 * Nchf Spending Limit Control Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SpendingLimitStatus.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SpendingLimitStatus::SpendingLimitStatus() {
  m_Supi = "";
  m_SupiIsSet = false;
  m_NotifId = "";
  m_NotifIdIsSet = false;
  m_StatusInfosIsSet = false;
  m_Expiry = "";
  m_ExpiryIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

SpendingLimitStatus::~SpendingLimitStatus() {}

void SpendingLimitStatus::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SpendingLimitStatus &o) {
  j = nlohmann::json();
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  if (o.notifIdIsSet())
    j["notifId"] = o.m_NotifId;
  if (o.statusInfosIsSet() || !o.m_StatusInfos.empty())
    j["statusInfos"] = o.m_StatusInfos;
  if (o.expiryIsSet())
    j["expiry"] = o.m_Expiry;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, SpendingLimitStatus &o) {
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("notifId") != j.end()) {
    j.at("notifId").get_to(o.m_NotifId);
    o.m_NotifIdIsSet = true;
  }
  if (j.find("statusInfos") != j.end()) {
    j.at("statusInfos").get_to(o.m_StatusInfos);
    o.m_StatusInfosIsSet = true;
  }
  if (j.find("expiry") != j.end()) {
    j.at("expiry").get_to(o.m_Expiry);
    o.m_ExpiryIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

std::string SpendingLimitStatus::getSupi() const { return m_Supi; }
void SpendingLimitStatus::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool SpendingLimitStatus::supiIsSet() const { return m_SupiIsSet; }
void SpendingLimitStatus::unsetSupi() { m_SupiIsSet = false; }
std::string SpendingLimitStatus::getNotifId() const { return m_NotifId; }
void SpendingLimitStatus::setNotifId(std::string const &value) {
  m_NotifId = value;
  m_NotifIdIsSet = true;
}
bool SpendingLimitStatus::notifIdIsSet() const { return m_NotifIdIsSet; }
void SpendingLimitStatus::unsetNotifId() { m_NotifIdIsSet = false; }
std::map<std::string, PolicyCounterInfo> &
SpendingLimitStatus::getStatusInfos() {
  return m_StatusInfos;
}
void SpendingLimitStatus::setStatusInfos(
    std::map<std::string, PolicyCounterInfo> const &value) {
  m_StatusInfos = value;
  m_StatusInfosIsSet = true;
}
bool SpendingLimitStatus::statusInfosIsSet() const {
  return m_StatusInfosIsSet;
}
void SpendingLimitStatus::unsetStatusInfos() { m_StatusInfosIsSet = false; }
std::string SpendingLimitStatus::getExpiry() const { return m_Expiry; }
void SpendingLimitStatus::setExpiry(std::string const &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}
bool SpendingLimitStatus::expiryIsSet() const { return m_ExpiryIsSet; }
void SpendingLimitStatus::unsetExpiry() { m_ExpiryIsSet = false; }
std::string SpendingLimitStatus::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void SpendingLimitStatus::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool SpendingLimitStatus::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void SpendingLimitStatus::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
