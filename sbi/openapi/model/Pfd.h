/**
 * 3gpp-pfd-management
 * API for PFD management. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Pfd.h
 *
 * Represents a PFD for an external Application Identifier.
 */

#ifndef Pfd_H_
#define Pfd_H_

#include "DomainNameProtocol.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a PFD for an external Application Identifier.
/// </summary>
class Pfd {
public:
  Pfd();
  virtual ~Pfd();

  void validate();

  /////////////////////////////////////////////
  /// Pfd members

  /// <summary>
  /// Identifies a PDF of an application identifier.
  /// </summary>
  std::string getPfdId() const;
  void setPfdId(std::string const &value);
  /// <summary>
  /// Represents a 3-tuple with protocol, server ip and server port for UL/DL
  /// application traffic. The content of the string has the same encoding as
  /// the IPFilterRule AVP value as defined in IETF RFC 6733.
  /// </summary>
  std::vector<std::string> &getFlowDescriptions();
  void setFlowDescriptions(std::vector<std::string> const &value);
  bool flowDescriptionsIsSet() const;
  void unsetFlowDescriptions();
  /// <summary>
  /// Indicates a URL or a regular expression which is used to match the
  /// significant parts of the URL.
  /// </summary>
  std::vector<std::string> &getUrls();
  void setUrls(std::vector<std::string> const &value);
  bool urlsIsSet() const;
  void unsetUrls();
  /// <summary>
  /// Indicates an FQDN or a regular expression as a domain name matching
  /// criteria.
  /// </summary>
  std::vector<std::string> &getDomainNames();
  void setDomainNames(std::vector<std::string> const &value);
  bool domainNamesIsSet() const;
  void unsetDomainNames();
  /// <summary>
  ///
  /// </summary>
  DomainNameProtocol getDnProtocol() const;
  void setDnProtocol(DomainNameProtocol const &value);
  bool dnProtocolIsSet() const;
  void unsetDnProtocol();

  friend void to_json(nlohmann::json &j, const Pfd &o);
  friend void from_json(const nlohmann::json &j, Pfd &o);

protected:
  std::string m_PfdId;

  std::vector<std::string> m_FlowDescriptions;
  bool m_FlowDescriptionsIsSet;
  std::vector<std::string> m_Urls;
  bool m_UrlsIsSet;
  std::vector<std::string> m_DomainNames;
  bool m_DomainNamesIsSet;
  DomainNameProtocol m_DnProtocol;
  bool m_DnProtocolIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* Pfd_H_ */
