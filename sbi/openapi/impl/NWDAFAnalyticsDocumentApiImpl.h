/**
 * Nnwdaf_AnalyticsInfo
 * Nnwdaf_AnalyticsInfo Service API. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * NWDAFAnalyticsDocumentApiImpl.h
 *
 *
 */

#ifndef NWDAF_ANALYTICS_DOCUMENT_API_IMPL_H_
#define NWDAF_ANALYTICS_DOCUMENT_API_IMPL_H_

#include <memory>
#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>

#include <NWDAFAnalyticsDocumentApi.h>

#include <pistache/optional.h>

#include "AnalyticsData.h"
#include "EventFilter.h"
#include "EventId.h"
#include "EventReportingRequirement.h"
#include "ProblemDetails.h"
#include "ProblemDetailsAnalyticsInfoRequest.h"
#include "TargetUeInformation.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class NWDAFAnalyticsDocumentApiImpl
    : public org::openapitools::server::api::NWDAFAnalyticsDocumentApi {
public:
  NWDAFAnalyticsDocumentApiImpl(std::shared_ptr<Pistache::Rest::Router>);
  ~NWDAFAnalyticsDocumentApiImpl() {}

  void get_nwdaf_analytics(
      const Pistache::Optional<EventId> &eventId,
      const Pistache::Optional<EventReportingRequirement> &anaReq,
      const Pistache::Optional<EventFilter> &eventFilter,
      const Pistache::Optional<std::string> &supportedFeatures,
      const Pistache::Optional<TargetUeInformation> &tgtUe,
      Pistache::Http::ResponseWriter &response);
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif