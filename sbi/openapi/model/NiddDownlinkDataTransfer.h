/**
 * 3gpp-nidd
 * API for non IP data delivery. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NiddDownlinkDataTransfer.h
 *
 * Represents the received NIDD downlink data from the SCS/AS.
 */

#ifndef NiddDownlinkDataTransfer_H_
#define NiddDownlinkDataTransfer_H_

#include "DeliveryStatus.h"
#include "PdnEstablishmentOptions.h"
#include "RdsPort.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the received NIDD downlink data from the SCS/AS.
/// </summary>
class NiddDownlinkDataTransfer {
public:
  NiddDownlinkDataTransfer();
  virtual ~NiddDownlinkDataTransfer();

  void validate();

  /////////////////////////////////////////////
  /// NiddDownlinkDataTransfer members

  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clause 4.6.2 of 3GPP TS 23.682 for more information.
  /// </summary>
  std::string getExternalId() const;
  void setExternalId(std::string const &value);
  bool externalIdIsSet() const;
  void unsetExternalId();
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more
  /// information.
  /// </summary>
  std::string getExternalGroupId() const;
  void setExternalGroupId(std::string const &value);
  bool externalGroupIdIsSet() const;
  void unsetExternalGroupId();
  /// <summary>
  /// string formatted according to subclause 3.3 of 3GPP TS 23.003 that
  /// describes an MSISDN.
  /// </summary>
  std::string getMsisdn() const;
  void setMsisdn(std::string const &value);
  bool msisdnIsSet() const;
  void unsetMsisdn();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const &value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  /// String with format \&quot;byte\&quot; as defined in OpenAPI Specification,
  /// i.e, base64-encoded characters.
  /// </summary>
  std::string getData() const;
  void setData(std::string const &value);
  /// <summary>
  /// The reliable data service (as defined in subclause 4.5.15.3 of 3GPP
  /// TS 23.682) to indicate if a reliable data service acknowledgment is
  /// enabled or not.
  /// </summary>
  bool isReliableDataService() const;
  void setReliableDataService(bool const value);
  bool reliableDataServiceIsSet() const;
  void unsetReliableDataService();
  /// <summary>
  ///
  /// </summary>
  RdsPort getRdsPort() const;
  void setRdsPort(RdsPort const &value);
  bool rdsPortIsSet() const;
  void unsetRdsPort();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getMaximumLatency() const;
  void setMaximumLatency(int32_t const value);
  bool maximumLatencyIsSet() const;
  void unsetMaximumLatency();
  /// <summary>
  /// It is used to indicate the priority of the non-IP data packet relative to
  /// other non-IP data packets.
  /// </summary>
  int32_t getPriority() const;
  void setPriority(int32_t const value);
  bool priorityIsSet() const;
  void unsetPriority();
  /// <summary>
  ///
  /// </summary>
  PdnEstablishmentOptions getPdnEstablishmentOption() const;
  void setPdnEstablishmentOption(PdnEstablishmentOptions const &value);
  bool pdnEstablishmentOptionIsSet() const;
  void unsetPdnEstablishmentOption();
  /// <summary>
  ///
  /// </summary>
  DeliveryStatus getDeliveryStatus() const;
  void setDeliveryStatus(DeliveryStatus const &value);
  bool deliveryStatusIsSet() const;
  void unsetDeliveryStatus();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getRequestedRetransmissionTime() const;
  void setRequestedRetransmissionTime(std::string const &value);
  bool requestedRetransmissionTimeIsSet() const;
  void unsetRequestedRetransmissionTime();

  friend void to_json(nlohmann::json &j, const NiddDownlinkDataTransfer &o);
  friend void from_json(const nlohmann::json &j, NiddDownlinkDataTransfer &o);

protected:
  std::string m_ExternalId;
  bool m_ExternalIdIsSet;
  std::string m_ExternalGroupId;
  bool m_ExternalGroupIdIsSet;
  std::string m_Msisdn;
  bool m_MsisdnIsSet;
  std::string m_Self;
  bool m_SelfIsSet;
  std::string m_Data;

  bool m_ReliableDataService;
  bool m_ReliableDataServiceIsSet;
  RdsPort m_RdsPort;
  bool m_RdsPortIsSet;
  int32_t m_MaximumLatency;
  bool m_MaximumLatencyIsSet;
  int32_t m_Priority;
  bool m_PriorityIsSet;
  PdnEstablishmentOptions m_PdnEstablishmentOption;
  bool m_PdnEstablishmentOptionIsSet;
  DeliveryStatus m_DeliveryStatus;
  bool m_DeliveryStatusIsSet;
  std::string m_RequestedRetransmissionTime;
  bool m_RequestedRetransmissionTimeIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NiddDownlinkDataTransfer_H_ */
