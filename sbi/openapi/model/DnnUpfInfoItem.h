/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DnnUpfInfoItem.h
 *
 * Set of parameters supported by UPF for a given DNN
 */

#ifndef DnnUpfInfoItem_H_
#define DnnUpfInfoItem_H_

#include "Ipv4AddressRange.h"
#include "Ipv6PrefixRange.h"
#include "PduSessionType.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Set of parameters supported by UPF for a given DNN
/// </summary>
class DnnUpfInfoItem {
public:
  DnnUpfInfoItem();
  virtual ~DnnUpfInfoItem();

  void validate();

  /////////////////////////////////////////////
  /// DnnUpfInfoItem members

  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getDnaiList();
  void setDnaiList(std::vector<std::string> const &value);
  bool dnaiListIsSet() const;
  void unsetDnaiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<PduSessionType> &getPduSessionTypes();
  void setPduSessionTypes(std::vector<PduSessionType> const &value);
  bool pduSessionTypesIsSet() const;
  void unsetPduSessionTypes();
  /// <summary>
  ///
  /// </summary>
  std::vector<Ipv4AddressRange> &getIpv4AddressRanges();
  void setIpv4AddressRanges(std::vector<Ipv4AddressRange> const &value);
  bool ipv4AddressRangesIsSet() const;
  void unsetIpv4AddressRanges();
  /// <summary>
  ///
  /// </summary>
  std::vector<Ipv6PrefixRange> &getIpv6PrefixRanges();
  void setIpv6PrefixRanges(std::vector<Ipv6PrefixRange> const &value);
  bool ipv6PrefixRangesIsSet() const;
  void unsetIpv6PrefixRanges();
  /// <summary>
  /// Map of network instance per DNAI for the DNN, where the key of the map is
  /// the DNAI. When present, the value of each entry of the map shall contain a
  /// N6 network instance that is configured for the DNAI indicated by the key.
  /// </summary>
  std::map<std::string, std::string> &getDnaiNwInstanceList();
  void setDnaiNwInstanceList(std::map<std::string, std::string> const &value);
  bool dnaiNwInstanceListIsSet() const;
  void unsetDnaiNwInstanceList();

  friend void to_json(nlohmann::json &j, const DnnUpfInfoItem &o);
  friend void from_json(const nlohmann::json &j, DnnUpfInfoItem &o);

protected:
  std::string m_Dnn;

  std::vector<std::string> m_DnaiList;
  bool m_DnaiListIsSet;
  std::vector<PduSessionType> m_PduSessionTypes;
  bool m_PduSessionTypesIsSet;
  std::vector<Ipv4AddressRange> m_Ipv4AddressRanges;
  bool m_Ipv4AddressRangesIsSet;
  std::vector<Ipv6PrefixRange> m_Ipv6PrefixRanges;
  bool m_Ipv6PrefixRangesIsSet;
  std::map<std::string, std::string> m_DnaiNwInstanceList;
  bool m_DnaiNwInstanceListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* DnnUpfInfoItem_H_ */
