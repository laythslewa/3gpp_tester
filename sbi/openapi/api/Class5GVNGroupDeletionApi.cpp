/**
 * Nudm_PP
 * Nudm Parameter Provision Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "Class5GVNGroupDeletionApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

Class5GVNGroupDeletionApi::Class5GVNGroupDeletionApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void Class5GVNGroupDeletionApi::init() { setupRoutes(); }

void Class5GVNGroupDeletionApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Delete(
      *router, base + "/5g-vn-groups/:extGroupId",
      Routes::bind(&Class5GVNGroupDeletionApi::delete_5_g_vn_group_handler,
                   this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &Class5GVNGroupDeletionApi::class5_gvn_group_deletion_api_default_handler,
      this));
}

void Class5GVNGroupDeletionApi::delete_5_g_vn_group_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto extGroupId = request.param(":extGroupId").as<std::string>();

  // Getting the query params
  auto mtcProviderInfoQuery = request.query().get("mtc-provider-info");
  Pistache::Optional<std::string> mtcProviderInfo;
  if (!mtcProviderInfoQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(mtcProviderInfoQuery.get(), valueQuery_instance)) {
      mtcProviderInfo = Pistache::Some(valueQuery_instance);
    }
  }
  auto afIdQuery = request.query().get("af-id");
  Pistache::Optional<std::string> afId;
  if (!afIdQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(afIdQuery.get(), valueQuery_instance)) {
      afId = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->delete_5_g_vn_group(extGroupId, mtcProviderInfo, afId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void Class5GVNGroupDeletionApi::class5_gvn_group_deletion_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
