/**
 * AUSF API
 * AUSF UE Authentication Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UEAuthenticationCtx.h
 *
 * Contains the information related to the resource generated to handle the UE
 * authentication. It contains at least the UE id, Serving Network, the
 * Authentication Method and related EAP information or related 5G-AKA
 * information.
 */

#ifndef UEAuthenticationCtx_H_
#define UEAuthenticationCtx_H_

#include "AuthType.h"
#include "LinksValueSchema.h"
#include "OneOfAv5gAkastring.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the information related to the resource generated to handle the UE
/// authentication. It contains at least the UE id, Serving Network, the
/// Authentication Method and related EAP information or related 5G-AKA
/// information.
/// </summary>
class UEAuthenticationCtx {
public:
  UEAuthenticationCtx();
  virtual ~UEAuthenticationCtx();

  void validate();

  /////////////////////////////////////////////
  /// UEAuthenticationCtx members

  /// <summary>
  ///
  /// </summary>
  AuthType getAuthType() const;
  void setAuthType(AuthType const &value);
  /// <summary>
  ///
  /// </summary>
  OneOfAv5gAkastring getR5gAuthData() const;
  void setR5gAuthData(OneOfAv5gAkastring const &value);
  /// <summary>
  /// A map(list of key-value pairs) where member serves as key
  /// </summary>
  std::map<std::string, LinksValueSchema> &getLinks();
  void setLinks(std::map<std::string, LinksValueSchema> const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getServingNetworkName() const;
  void setServingNetworkName(std::string const &value);
  bool servingNetworkNameIsSet() const;
  void unsetServingNetworkName();

  friend void to_json(nlohmann::json &j, const UEAuthenticationCtx &o);
  friend void from_json(const nlohmann::json &j, UEAuthenticationCtx &o);

protected:
  AuthType m_AuthType;

  OneOfAv5gAkastring m_r_5gAuthData;

  std::map<std::string, LinksValueSchema> m__links;

  std::string m_ServingNetworkName;
  bool m_ServingNetworkNameIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UEAuthenticationCtx_H_ */
