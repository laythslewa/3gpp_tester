/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "HsmfUpdateData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

HsmfUpdateData::HsmfUpdateData() {
  m_Pei = "";
  m_PeiIsSet = false;
  m_VcnTunnelInfoIsSet = false;
  m_IcnTunnelInfoIsSet = false;
  m_AdditionalCnTunnelInfoIsSet = false;
  m_ServingNetworkIsSet = false;
  m_AnTypeIsSet = false;
  m_AdditionalAnTypeIsSet = false;
  m_RatTypeIsSet = false;
  m_UeLocationIsSet = false;
  m_UeTimeZone = "";
  m_UeTimeZoneIsSet = false;
  m_AddUeLocationIsSet = false;
  m_PauseCharging = false;
  m_PauseChargingIsSet = false;
  m_Pti = 0;
  m_PtiIsSet = false;
  m_N1SmInfoFromUeIsSet = false;
  m_UnknownN1SmInfoIsSet = false;
  m_QosFlowsRelNotifyListIsSet = false;
  m_QosFlowsNotifyListIsSet = false;
  m_NotifyListIsSet = false;
  m_EpsBearerIdIsSet = false;
  m_HoPreparationIndication = false;
  m_HoPreparationIndicationIsSet = false;
  m_RevokeEbiListIsSet = false;
  m_CauseIsSet = false;
  m_NgApCauseIsSet = false;
  m_r_5gMmCauseValue = 0;
  m_r_5gMmCauseValueIsSet = false;
  m_AlwaysOnRequested = false;
  m_AlwaysOnRequestedIsSet = false;
  m_EpsInterworkingIndIsSet = false;
  m_SecondaryRatUsageReportIsSet = false;
  m_SecondaryRatUsageInfoIsSet = false;
  m_AnTypeCanBeChanged = false;
  m_AnTypeCanBeChangedIsSet = false;
  m_MaReleaseIndIsSet = false;
  m_MaNwUpgradeInd = false;
  m_MaNwUpgradeIndIsSet = false;
  m_MaRequestInd = false;
  m_MaRequestIndIsSet = false;
  m_UnavailableAccessIndIsSet = false;
  m_PsaInfoIsSet = false;
  m_UlclBpInfoIsSet = false;
  m_N4InfoIsSet = false;
  m_N4InfoExt1IsSet = false;
  m_N4InfoExt2IsSet = false;
  m_PresenceInLadnIsSet = false;
  m_VsmfPduSessionUri = "";
  m_VsmfPduSessionUriIsSet = false;
  m_VsmfId = "";
  m_VsmfIdIsSet = false;
  m_VSmfServiceInstanceId = "";
  m_VSmfServiceInstanceIdIsSet = false;
  m_IsmfPduSessionUri = "";
  m_IsmfPduSessionUriIsSet = false;
  m_IsmfId = "";
  m_IsmfIdIsSet = false;
  m_ISmfServiceInstanceId = "";
  m_ISmfServiceInstanceIdIsSet = false;
  m_DlServingPlmnRateCtl = 0;
  m_DlServingPlmnRateCtlIsSet = false;
  m_DnaiListIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_RoamingChargingProfileIsSet = false;
  m_MoExpDataCounterIsSet = false;
  m_VplmnQosIsSet = false;
  m_SecurityResultIsSet = false;
  m_UpSecurityInfoIsSet = false;
  m_AmfNfId = "";
  m_AmfNfIdIsSet = false;
  m_GuamiIsSet = false;
}

HsmfUpdateData::~HsmfUpdateData() {}

void HsmfUpdateData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const HsmfUpdateData &o) {
  j = nlohmann::json();
  j["requestIndication"] = o.m_RequestIndication;
  if (o.peiIsSet())
    j["pei"] = o.m_Pei;
  if (o.vcnTunnelInfoIsSet())
    j["vcnTunnelInfo"] = o.m_VcnTunnelInfo;
  if (o.icnTunnelInfoIsSet())
    j["icnTunnelInfo"] = o.m_IcnTunnelInfo;
  if (o.additionalCnTunnelInfoIsSet())
    j["additionalCnTunnelInfo"] = o.m_AdditionalCnTunnelInfo;
  if (o.servingNetworkIsSet())
    j["servingNetwork"] = o.m_ServingNetwork;
  if (o.anTypeIsSet())
    j["anType"] = o.m_AnType;
  if (o.additionalAnTypeIsSet())
    j["additionalAnType"] = o.m_AdditionalAnType;
  if (o.ratTypeIsSet())
    j["ratType"] = o.m_RatType;
  if (o.ueLocationIsSet())
    j["ueLocation"] = o.m_UeLocation;
  if (o.ueTimeZoneIsSet())
    j["ueTimeZone"] = o.m_UeTimeZone;
  if (o.addUeLocationIsSet())
    j["addUeLocation"] = o.m_AddUeLocation;
  if (o.pauseChargingIsSet())
    j["pauseCharging"] = o.m_PauseCharging;
  if (o.ptiIsSet())
    j["pti"] = o.m_Pti;
  if (o.n1SmInfoFromUeIsSet())
    j["n1SmInfoFromUe"] = o.m_N1SmInfoFromUe;
  if (o.unknownN1SmInfoIsSet())
    j["unknownN1SmInfo"] = o.m_UnknownN1SmInfo;
  if (o.qosFlowsRelNotifyListIsSet() || !o.m_QosFlowsRelNotifyList.empty())
    j["qosFlowsRelNotifyList"] = o.m_QosFlowsRelNotifyList;
  if (o.qosFlowsNotifyListIsSet() || !o.m_QosFlowsNotifyList.empty())
    j["qosFlowsNotifyList"] = o.m_QosFlowsNotifyList;
  if (o.notifyListIsSet() || !o.m_NotifyList.empty())
    j["NotifyList"] = o.m_NotifyList;
  if (o.epsBearerIdIsSet() || !o.m_EpsBearerId.empty())
    j["epsBearerId"] = o.m_EpsBearerId;
  if (o.hoPreparationIndicationIsSet())
    j["hoPreparationIndication"] = o.m_HoPreparationIndication;
  if (o.revokeEbiListIsSet() || !o.m_RevokeEbiList.empty())
    j["revokeEbiList"] = o.m_RevokeEbiList;
  if (o.causeIsSet())
    j["cause"] = o.m_Cause;
  if (o.ngApCauseIsSet())
    j["ngApCause"] = o.m_NgApCause;
  if (o.r5gMmCauseValueIsSet())
    j["5gMmCauseValue"] = o.m_r_5gMmCauseValue;
  if (o.alwaysOnRequestedIsSet())
    j["alwaysOnRequested"] = o.m_AlwaysOnRequested;
  if (o.epsInterworkingIndIsSet())
    j["epsInterworkingInd"] = o.m_EpsInterworkingInd;
  if (o.secondaryRatUsageReportIsSet() || !o.m_SecondaryRatUsageReport.empty())
    j["secondaryRatUsageReport"] = o.m_SecondaryRatUsageReport;
  if (o.secondaryRatUsageInfoIsSet() || !o.m_SecondaryRatUsageInfo.empty())
    j["secondaryRatUsageInfo"] = o.m_SecondaryRatUsageInfo;
  if (o.anTypeCanBeChangedIsSet())
    j["anTypeCanBeChanged"] = o.m_AnTypeCanBeChanged;
  if (o.maReleaseIndIsSet())
    j["maReleaseInd"] = o.m_MaReleaseInd;
  if (o.maNwUpgradeIndIsSet())
    j["maNwUpgradeInd"] = o.m_MaNwUpgradeInd;
  if (o.maRequestIndIsSet())
    j["maRequestInd"] = o.m_MaRequestInd;
  if (o.unavailableAccessIndIsSet())
    j["unavailableAccessInd"] = o.m_UnavailableAccessInd;
  if (o.psaInfoIsSet() || !o.m_PsaInfo.empty())
    j["psaInfo"] = o.m_PsaInfo;
  if (o.ulclBpInfoIsSet())
    j["ulclBpInfo"] = o.m_UlclBpInfo;
  if (o.n4InfoIsSet())
    j["n4Info"] = o.m_N4Info;
  if (o.n4InfoExt1IsSet())
    j["n4InfoExt1"] = o.m_N4InfoExt1;
  if (o.n4InfoExt2IsSet())
    j["n4InfoExt2"] = o.m_N4InfoExt2;
  if (o.presenceInLadnIsSet())
    j["presenceInLadn"] = o.m_PresenceInLadn;
  if (o.vsmfPduSessionUriIsSet())
    j["vsmfPduSessionUri"] = o.m_VsmfPduSessionUri;
  if (o.vsmfIdIsSet())
    j["vsmfId"] = o.m_VsmfId;
  if (o.vSmfServiceInstanceIdIsSet())
    j["vSmfServiceInstanceId"] = o.m_VSmfServiceInstanceId;
  if (o.ismfPduSessionUriIsSet())
    j["ismfPduSessionUri"] = o.m_IsmfPduSessionUri;
  if (o.ismfIdIsSet())
    j["ismfId"] = o.m_IsmfId;
  if (o.iSmfServiceInstanceIdIsSet())
    j["iSmfServiceInstanceId"] = o.m_ISmfServiceInstanceId;
  if (o.dlServingPlmnRateCtlIsSet())
    j["dlServingPlmnRateCtl"] = o.m_DlServingPlmnRateCtl;
  if (o.dnaiListIsSet() || !o.m_DnaiList.empty())
    j["dnaiList"] = o.m_DnaiList;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.roamingChargingProfileIsSet())
    j["roamingChargingProfile"] = o.m_RoamingChargingProfile;
  if (o.moExpDataCounterIsSet())
    j["moExpDataCounter"] = o.m_MoExpDataCounter;
  if (o.vplmnQosIsSet())
    j["vplmnQos"] = o.m_VplmnQos;
  if (o.securityResultIsSet())
    j["securityResult"] = o.m_SecurityResult;
  if (o.upSecurityInfoIsSet())
    j["upSecurityInfo"] = o.m_UpSecurityInfo;
  if (o.amfNfIdIsSet())
    j["amfNfId"] = o.m_AmfNfId;
  if (o.guamiIsSet())
    j["guami"] = o.m_Guami;
}

void from_json(const nlohmann::json &j, HsmfUpdateData &o) {
  j.at("requestIndication").get_to(o.m_RequestIndication);
  if (j.find("pei") != j.end()) {
    j.at("pei").get_to(o.m_Pei);
    o.m_PeiIsSet = true;
  }
  if (j.find("vcnTunnelInfo") != j.end()) {
    j.at("vcnTunnelInfo").get_to(o.m_VcnTunnelInfo);
    o.m_VcnTunnelInfoIsSet = true;
  }
  if (j.find("icnTunnelInfo") != j.end()) {
    j.at("icnTunnelInfo").get_to(o.m_IcnTunnelInfo);
    o.m_IcnTunnelInfoIsSet = true;
  }
  if (j.find("additionalCnTunnelInfo") != j.end()) {
    j.at("additionalCnTunnelInfo").get_to(o.m_AdditionalCnTunnelInfo);
    o.m_AdditionalCnTunnelInfoIsSet = true;
  }
  if (j.find("servingNetwork") != j.end()) {
    j.at("servingNetwork").get_to(o.m_ServingNetwork);
    o.m_ServingNetworkIsSet = true;
  }
  if (j.find("anType") != j.end()) {
    j.at("anType").get_to(o.m_AnType);
    o.m_AnTypeIsSet = true;
  }
  if (j.find("additionalAnType") != j.end()) {
    j.at("additionalAnType").get_to(o.m_AdditionalAnType);
    o.m_AdditionalAnTypeIsSet = true;
  }
  if (j.find("ratType") != j.end()) {
    j.at("ratType").get_to(o.m_RatType);
    o.m_RatTypeIsSet = true;
  }
  if (j.find("ueLocation") != j.end()) {
    j.at("ueLocation").get_to(o.m_UeLocation);
    o.m_UeLocationIsSet = true;
  }
  if (j.find("ueTimeZone") != j.end()) {
    j.at("ueTimeZone").get_to(o.m_UeTimeZone);
    o.m_UeTimeZoneIsSet = true;
  }
  if (j.find("addUeLocation") != j.end()) {
    j.at("addUeLocation").get_to(o.m_AddUeLocation);
    o.m_AddUeLocationIsSet = true;
  }
  if (j.find("pauseCharging") != j.end()) {
    j.at("pauseCharging").get_to(o.m_PauseCharging);
    o.m_PauseChargingIsSet = true;
  }
  if (j.find("pti") != j.end()) {
    j.at("pti").get_to(o.m_Pti);
    o.m_PtiIsSet = true;
  }
  if (j.find("n1SmInfoFromUe") != j.end()) {
    j.at("n1SmInfoFromUe").get_to(o.m_N1SmInfoFromUe);
    o.m_N1SmInfoFromUeIsSet = true;
  }
  if (j.find("unknownN1SmInfo") != j.end()) {
    j.at("unknownN1SmInfo").get_to(o.m_UnknownN1SmInfo);
    o.m_UnknownN1SmInfoIsSet = true;
  }
  if (j.find("qosFlowsRelNotifyList") != j.end()) {
    j.at("qosFlowsRelNotifyList").get_to(o.m_QosFlowsRelNotifyList);
    o.m_QosFlowsRelNotifyListIsSet = true;
  }
  if (j.find("qosFlowsNotifyList") != j.end()) {
    j.at("qosFlowsNotifyList").get_to(o.m_QosFlowsNotifyList);
    o.m_QosFlowsNotifyListIsSet = true;
  }
  if (j.find("NotifyList") != j.end()) {
    j.at("NotifyList").get_to(o.m_NotifyList);
    o.m_NotifyListIsSet = true;
  }
  if (j.find("epsBearerId") != j.end()) {
    j.at("epsBearerId").get_to(o.m_EpsBearerId);
    o.m_EpsBearerIdIsSet = true;
  }
  if (j.find("hoPreparationIndication") != j.end()) {
    j.at("hoPreparationIndication").get_to(o.m_HoPreparationIndication);
    o.m_HoPreparationIndicationIsSet = true;
  }
  if (j.find("revokeEbiList") != j.end()) {
    j.at("revokeEbiList").get_to(o.m_RevokeEbiList);
    o.m_RevokeEbiListIsSet = true;
  }
  if (j.find("cause") != j.end()) {
    j.at("cause").get_to(o.m_Cause);
    o.m_CauseIsSet = true;
  }
  if (j.find("ngApCause") != j.end()) {
    j.at("ngApCause").get_to(o.m_NgApCause);
    o.m_NgApCauseIsSet = true;
  }
  if (j.find("5gMmCauseValue") != j.end()) {
    j.at("5gMmCauseValue").get_to(o.m_r_5gMmCauseValue);
    o.m_r_5gMmCauseValueIsSet = true;
  }
  if (j.find("alwaysOnRequested") != j.end()) {
    j.at("alwaysOnRequested").get_to(o.m_AlwaysOnRequested);
    o.m_AlwaysOnRequestedIsSet = true;
  }
  if (j.find("epsInterworkingInd") != j.end()) {
    j.at("epsInterworkingInd").get_to(o.m_EpsInterworkingInd);
    o.m_EpsInterworkingIndIsSet = true;
  }
  if (j.find("secondaryRatUsageReport") != j.end()) {
    j.at("secondaryRatUsageReport").get_to(o.m_SecondaryRatUsageReport);
    o.m_SecondaryRatUsageReportIsSet = true;
  }
  if (j.find("secondaryRatUsageInfo") != j.end()) {
    j.at("secondaryRatUsageInfo").get_to(o.m_SecondaryRatUsageInfo);
    o.m_SecondaryRatUsageInfoIsSet = true;
  }
  if (j.find("anTypeCanBeChanged") != j.end()) {
    j.at("anTypeCanBeChanged").get_to(o.m_AnTypeCanBeChanged);
    o.m_AnTypeCanBeChangedIsSet = true;
  }
  if (j.find("maReleaseInd") != j.end()) {
    j.at("maReleaseInd").get_to(o.m_MaReleaseInd);
    o.m_MaReleaseIndIsSet = true;
  }
  if (j.find("maNwUpgradeInd") != j.end()) {
    j.at("maNwUpgradeInd").get_to(o.m_MaNwUpgradeInd);
    o.m_MaNwUpgradeIndIsSet = true;
  }
  if (j.find("maRequestInd") != j.end()) {
    j.at("maRequestInd").get_to(o.m_MaRequestInd);
    o.m_MaRequestIndIsSet = true;
  }
  if (j.find("unavailableAccessInd") != j.end()) {
    j.at("unavailableAccessInd").get_to(o.m_UnavailableAccessInd);
    o.m_UnavailableAccessIndIsSet = true;
  }
  if (j.find("psaInfo") != j.end()) {
    j.at("psaInfo").get_to(o.m_PsaInfo);
    o.m_PsaInfoIsSet = true;
  }
  if (j.find("ulclBpInfo") != j.end()) {
    j.at("ulclBpInfo").get_to(o.m_UlclBpInfo);
    o.m_UlclBpInfoIsSet = true;
  }
  if (j.find("n4Info") != j.end()) {
    j.at("n4Info").get_to(o.m_N4Info);
    o.m_N4InfoIsSet = true;
  }
  if (j.find("n4InfoExt1") != j.end()) {
    j.at("n4InfoExt1").get_to(o.m_N4InfoExt1);
    o.m_N4InfoExt1IsSet = true;
  }
  if (j.find("n4InfoExt2") != j.end()) {
    j.at("n4InfoExt2").get_to(o.m_N4InfoExt2);
    o.m_N4InfoExt2IsSet = true;
  }
  if (j.find("presenceInLadn") != j.end()) {
    j.at("presenceInLadn").get_to(o.m_PresenceInLadn);
    o.m_PresenceInLadnIsSet = true;
  }
  if (j.find("vsmfPduSessionUri") != j.end()) {
    j.at("vsmfPduSessionUri").get_to(o.m_VsmfPduSessionUri);
    o.m_VsmfPduSessionUriIsSet = true;
  }
  if (j.find("vsmfId") != j.end()) {
    j.at("vsmfId").get_to(o.m_VsmfId);
    o.m_VsmfIdIsSet = true;
  }
  if (j.find("vSmfServiceInstanceId") != j.end()) {
    j.at("vSmfServiceInstanceId").get_to(o.m_VSmfServiceInstanceId);
    o.m_VSmfServiceInstanceIdIsSet = true;
  }
  if (j.find("ismfPduSessionUri") != j.end()) {
    j.at("ismfPduSessionUri").get_to(o.m_IsmfPduSessionUri);
    o.m_IsmfPduSessionUriIsSet = true;
  }
  if (j.find("ismfId") != j.end()) {
    j.at("ismfId").get_to(o.m_IsmfId);
    o.m_IsmfIdIsSet = true;
  }
  if (j.find("iSmfServiceInstanceId") != j.end()) {
    j.at("iSmfServiceInstanceId").get_to(o.m_ISmfServiceInstanceId);
    o.m_ISmfServiceInstanceIdIsSet = true;
  }
  if (j.find("dlServingPlmnRateCtl") != j.end()) {
    j.at("dlServingPlmnRateCtl").get_to(o.m_DlServingPlmnRateCtl);
    o.m_DlServingPlmnRateCtlIsSet = true;
  }
  if (j.find("dnaiList") != j.end()) {
    j.at("dnaiList").get_to(o.m_DnaiList);
    o.m_DnaiListIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("roamingChargingProfile") != j.end()) {
    j.at("roamingChargingProfile").get_to(o.m_RoamingChargingProfile);
    o.m_RoamingChargingProfileIsSet = true;
  }
  if (j.find("moExpDataCounter") != j.end()) {
    j.at("moExpDataCounter").get_to(o.m_MoExpDataCounter);
    o.m_MoExpDataCounterIsSet = true;
  }
  if (j.find("vplmnQos") != j.end()) {
    j.at("vplmnQos").get_to(o.m_VplmnQos);
    o.m_VplmnQosIsSet = true;
  }
  if (j.find("securityResult") != j.end()) {
    j.at("securityResult").get_to(o.m_SecurityResult);
    o.m_SecurityResultIsSet = true;
  }
  if (j.find("upSecurityInfo") != j.end()) {
    j.at("upSecurityInfo").get_to(o.m_UpSecurityInfo);
    o.m_UpSecurityInfoIsSet = true;
  }
  if (j.find("amfNfId") != j.end()) {
    j.at("amfNfId").get_to(o.m_AmfNfId);
    o.m_AmfNfIdIsSet = true;
  }
  if (j.find("guami") != j.end()) {
    j.at("guami").get_to(o.m_Guami);
    o.m_GuamiIsSet = true;
  }
}

RequestIndication HsmfUpdateData::getRequestIndication() const {
  return m_RequestIndication;
}
void HsmfUpdateData::setRequestIndication(RequestIndication const &value) {
  m_RequestIndication = value;
}
std::string HsmfUpdateData::getPei() const { return m_Pei; }
void HsmfUpdateData::setPei(std::string const &value) {
  m_Pei = value;
  m_PeiIsSet = true;
}
bool HsmfUpdateData::peiIsSet() const { return m_PeiIsSet; }
void HsmfUpdateData::unsetPei() { m_PeiIsSet = false; }
TunnelInfo HsmfUpdateData::getVcnTunnelInfo() const { return m_VcnTunnelInfo; }
void HsmfUpdateData::setVcnTunnelInfo(TunnelInfo const &value) {
  m_VcnTunnelInfo = value;
  m_VcnTunnelInfoIsSet = true;
}
bool HsmfUpdateData::vcnTunnelInfoIsSet() const { return m_VcnTunnelInfoIsSet; }
void HsmfUpdateData::unsetVcnTunnelInfo() { m_VcnTunnelInfoIsSet = false; }
TunnelInfo HsmfUpdateData::getIcnTunnelInfo() const { return m_IcnTunnelInfo; }
void HsmfUpdateData::setIcnTunnelInfo(TunnelInfo const &value) {
  m_IcnTunnelInfo = value;
  m_IcnTunnelInfoIsSet = true;
}
bool HsmfUpdateData::icnTunnelInfoIsSet() const { return m_IcnTunnelInfoIsSet; }
void HsmfUpdateData::unsetIcnTunnelInfo() { m_IcnTunnelInfoIsSet = false; }
TunnelInfo HsmfUpdateData::getAdditionalCnTunnelInfo() const {
  return m_AdditionalCnTunnelInfo;
}
void HsmfUpdateData::setAdditionalCnTunnelInfo(TunnelInfo const &value) {
  m_AdditionalCnTunnelInfo = value;
  m_AdditionalCnTunnelInfoIsSet = true;
}
bool HsmfUpdateData::additionalCnTunnelInfoIsSet() const {
  return m_AdditionalCnTunnelInfoIsSet;
}
void HsmfUpdateData::unsetAdditionalCnTunnelInfo() {
  m_AdditionalCnTunnelInfoIsSet = false;
}
PlmnIdNid HsmfUpdateData::getServingNetwork() const { return m_ServingNetwork; }
void HsmfUpdateData::setServingNetwork(PlmnIdNid const &value) {
  m_ServingNetwork = value;
  m_ServingNetworkIsSet = true;
}
bool HsmfUpdateData::servingNetworkIsSet() const {
  return m_ServingNetworkIsSet;
}
void HsmfUpdateData::unsetServingNetwork() { m_ServingNetworkIsSet = false; }
AccessType HsmfUpdateData::getAnType() const { return m_AnType; }
void HsmfUpdateData::setAnType(AccessType const &value) {
  m_AnType = value;
  m_AnTypeIsSet = true;
}
bool HsmfUpdateData::anTypeIsSet() const { return m_AnTypeIsSet; }
void HsmfUpdateData::unsetAnType() { m_AnTypeIsSet = false; }
AccessType HsmfUpdateData::getAdditionalAnType() const {
  return m_AdditionalAnType;
}
void HsmfUpdateData::setAdditionalAnType(AccessType const &value) {
  m_AdditionalAnType = value;
  m_AdditionalAnTypeIsSet = true;
}
bool HsmfUpdateData::additionalAnTypeIsSet() const {
  return m_AdditionalAnTypeIsSet;
}
void HsmfUpdateData::unsetAdditionalAnType() {
  m_AdditionalAnTypeIsSet = false;
}
RatType HsmfUpdateData::getRatType() const { return m_RatType; }
void HsmfUpdateData::setRatType(RatType const &value) {
  m_RatType = value;
  m_RatTypeIsSet = true;
}
bool HsmfUpdateData::ratTypeIsSet() const { return m_RatTypeIsSet; }
void HsmfUpdateData::unsetRatType() { m_RatTypeIsSet = false; }
UserLocation HsmfUpdateData::getUeLocation() const { return m_UeLocation; }
void HsmfUpdateData::setUeLocation(UserLocation const &value) {
  m_UeLocation = value;
  m_UeLocationIsSet = true;
}
bool HsmfUpdateData::ueLocationIsSet() const { return m_UeLocationIsSet; }
void HsmfUpdateData::unsetUeLocation() { m_UeLocationIsSet = false; }
std::string HsmfUpdateData::getUeTimeZone() const { return m_UeTimeZone; }
void HsmfUpdateData::setUeTimeZone(std::string const &value) {
  m_UeTimeZone = value;
  m_UeTimeZoneIsSet = true;
}
bool HsmfUpdateData::ueTimeZoneIsSet() const { return m_UeTimeZoneIsSet; }
void HsmfUpdateData::unsetUeTimeZone() { m_UeTimeZoneIsSet = false; }
UserLocation HsmfUpdateData::getAddUeLocation() const {
  return m_AddUeLocation;
}
void HsmfUpdateData::setAddUeLocation(UserLocation const &value) {
  m_AddUeLocation = value;
  m_AddUeLocationIsSet = true;
}
bool HsmfUpdateData::addUeLocationIsSet() const { return m_AddUeLocationIsSet; }
void HsmfUpdateData::unsetAddUeLocation() { m_AddUeLocationIsSet = false; }
bool HsmfUpdateData::isPauseCharging() const { return m_PauseCharging; }
void HsmfUpdateData::setPauseCharging(bool const value) {
  m_PauseCharging = value;
  m_PauseChargingIsSet = true;
}
bool HsmfUpdateData::pauseChargingIsSet() const { return m_PauseChargingIsSet; }
void HsmfUpdateData::unsetPauseCharging() { m_PauseChargingIsSet = false; }
int32_t HsmfUpdateData::getPti() const { return m_Pti; }
void HsmfUpdateData::setPti(int32_t const value) {
  m_Pti = value;
  m_PtiIsSet = true;
}
bool HsmfUpdateData::ptiIsSet() const { return m_PtiIsSet; }
void HsmfUpdateData::unsetPti() { m_PtiIsSet = false; }
RefToBinaryData HsmfUpdateData::getN1SmInfoFromUe() const {
  return m_N1SmInfoFromUe;
}
void HsmfUpdateData::setN1SmInfoFromUe(RefToBinaryData const &value) {
  m_N1SmInfoFromUe = value;
  m_N1SmInfoFromUeIsSet = true;
}
bool HsmfUpdateData::n1SmInfoFromUeIsSet() const {
  return m_N1SmInfoFromUeIsSet;
}
void HsmfUpdateData::unsetN1SmInfoFromUe() { m_N1SmInfoFromUeIsSet = false; }
RefToBinaryData HsmfUpdateData::getUnknownN1SmInfo() const {
  return m_UnknownN1SmInfo;
}
void HsmfUpdateData::setUnknownN1SmInfo(RefToBinaryData const &value) {
  m_UnknownN1SmInfo = value;
  m_UnknownN1SmInfoIsSet = true;
}
bool HsmfUpdateData::unknownN1SmInfoIsSet() const {
  return m_UnknownN1SmInfoIsSet;
}
void HsmfUpdateData::unsetUnknownN1SmInfo() { m_UnknownN1SmInfoIsSet = false; }
std::vector<QosFlowItem> &HsmfUpdateData::getQosFlowsRelNotifyList() {
  return m_QosFlowsRelNotifyList;
}
void HsmfUpdateData::setQosFlowsRelNotifyList(
    std::vector<QosFlowItem> const &value) {
  m_QosFlowsRelNotifyList = value;
  m_QosFlowsRelNotifyListIsSet = true;
}
bool HsmfUpdateData::qosFlowsRelNotifyListIsSet() const {
  return m_QosFlowsRelNotifyListIsSet;
}
void HsmfUpdateData::unsetQosFlowsRelNotifyList() {
  m_QosFlowsRelNotifyListIsSet = false;
}
std::vector<QosFlowNotifyItem> &HsmfUpdateData::getQosFlowsNotifyList() {
  return m_QosFlowsNotifyList;
}
void HsmfUpdateData::setQosFlowsNotifyList(
    std::vector<QosFlowNotifyItem> const &value) {
  m_QosFlowsNotifyList = value;
  m_QosFlowsNotifyListIsSet = true;
}
bool HsmfUpdateData::qosFlowsNotifyListIsSet() const {
  return m_QosFlowsNotifyListIsSet;
}
void HsmfUpdateData::unsetQosFlowsNotifyList() {
  m_QosFlowsNotifyListIsSet = false;
}
std::vector<PduSessionNotifyItem> &HsmfUpdateData::getNotifyList() {
  return m_NotifyList;
}
void HsmfUpdateData::setNotifyList(
    std::vector<PduSessionNotifyItem> const &value) {
  m_NotifyList = value;
  m_NotifyListIsSet = true;
}
bool HsmfUpdateData::notifyListIsSet() const { return m_NotifyListIsSet; }
void HsmfUpdateData::unsetNotifyList() { m_NotifyListIsSet = false; }
std::vector<int32_t> &HsmfUpdateData::getEpsBearerId() { return m_EpsBearerId; }
void HsmfUpdateData::setEpsBearerId(std::vector<int32_t> const value) {
  m_EpsBearerId = value;
  m_EpsBearerIdIsSet = true;
}
bool HsmfUpdateData::epsBearerIdIsSet() const { return m_EpsBearerIdIsSet; }
void HsmfUpdateData::unsetEpsBearerId() { m_EpsBearerIdIsSet = false; }
bool HsmfUpdateData::isHoPreparationIndication() const {
  return m_HoPreparationIndication;
}
void HsmfUpdateData::setHoPreparationIndication(bool const value) {
  m_HoPreparationIndication = value;
  m_HoPreparationIndicationIsSet = true;
}
bool HsmfUpdateData::hoPreparationIndicationIsSet() const {
  return m_HoPreparationIndicationIsSet;
}
void HsmfUpdateData::unsetHoPreparationIndication() {
  m_HoPreparationIndicationIsSet = false;
}
std::vector<int32_t> &HsmfUpdateData::getRevokeEbiList() {
  return m_RevokeEbiList;
}
void HsmfUpdateData::setRevokeEbiList(std::vector<int32_t> const value) {
  m_RevokeEbiList = value;
  m_RevokeEbiListIsSet = true;
}
bool HsmfUpdateData::revokeEbiListIsSet() const { return m_RevokeEbiListIsSet; }
void HsmfUpdateData::unsetRevokeEbiList() { m_RevokeEbiListIsSet = false; }
Cause HsmfUpdateData::getCause() const { return m_Cause; }
void HsmfUpdateData::setCause(Cause const &value) {
  m_Cause = value;
  m_CauseIsSet = true;
}
bool HsmfUpdateData::causeIsSet() const { return m_CauseIsSet; }
void HsmfUpdateData::unsetCause() { m_CauseIsSet = false; }
NgApCause HsmfUpdateData::getNgApCause() const { return m_NgApCause; }
void HsmfUpdateData::setNgApCause(NgApCause const &value) {
  m_NgApCause = value;
  m_NgApCauseIsSet = true;
}
bool HsmfUpdateData::ngApCauseIsSet() const { return m_NgApCauseIsSet; }
void HsmfUpdateData::unsetNgApCause() { m_NgApCauseIsSet = false; }
int32_t HsmfUpdateData::getR5gMmCauseValue() const {
  return m_r_5gMmCauseValue;
}
void HsmfUpdateData::setR5gMmCauseValue(int32_t const value) {
  m_r_5gMmCauseValue = value;
  m_r_5gMmCauseValueIsSet = true;
}
bool HsmfUpdateData::r5gMmCauseValueIsSet() const {
  return m_r_5gMmCauseValueIsSet;
}
void HsmfUpdateData::unsetr_5gMmCauseValue() {
  m_r_5gMmCauseValueIsSet = false;
}
bool HsmfUpdateData::isAlwaysOnRequested() const { return m_AlwaysOnRequested; }
void HsmfUpdateData::setAlwaysOnRequested(bool const value) {
  m_AlwaysOnRequested = value;
  m_AlwaysOnRequestedIsSet = true;
}
bool HsmfUpdateData::alwaysOnRequestedIsSet() const {
  return m_AlwaysOnRequestedIsSet;
}
void HsmfUpdateData::unsetAlwaysOnRequested() {
  m_AlwaysOnRequestedIsSet = false;
}
EpsInterworkingIndication HsmfUpdateData::getEpsInterworkingInd() const {
  return m_EpsInterworkingInd;
}
void HsmfUpdateData::setEpsInterworkingInd(
    EpsInterworkingIndication const &value) {
  m_EpsInterworkingInd = value;
  m_EpsInterworkingIndIsSet = true;
}
bool HsmfUpdateData::epsInterworkingIndIsSet() const {
  return m_EpsInterworkingIndIsSet;
}
void HsmfUpdateData::unsetEpsInterworkingInd() {
  m_EpsInterworkingIndIsSet = false;
}
std::vector<SecondaryRatUsageReport> &
HsmfUpdateData::getSecondaryRatUsageReport() {
  return m_SecondaryRatUsageReport;
}
void HsmfUpdateData::setSecondaryRatUsageReport(
    std::vector<SecondaryRatUsageReport> const &value) {
  m_SecondaryRatUsageReport = value;
  m_SecondaryRatUsageReportIsSet = true;
}
bool HsmfUpdateData::secondaryRatUsageReportIsSet() const {
  return m_SecondaryRatUsageReportIsSet;
}
void HsmfUpdateData::unsetSecondaryRatUsageReport() {
  m_SecondaryRatUsageReportIsSet = false;
}
std::vector<SecondaryRatUsageInfo> &HsmfUpdateData::getSecondaryRatUsageInfo() {
  return m_SecondaryRatUsageInfo;
}
void HsmfUpdateData::setSecondaryRatUsageInfo(
    std::vector<SecondaryRatUsageInfo> const &value) {
  m_SecondaryRatUsageInfo = value;
  m_SecondaryRatUsageInfoIsSet = true;
}
bool HsmfUpdateData::secondaryRatUsageInfoIsSet() const {
  return m_SecondaryRatUsageInfoIsSet;
}
void HsmfUpdateData::unsetSecondaryRatUsageInfo() {
  m_SecondaryRatUsageInfoIsSet = false;
}
bool HsmfUpdateData::isAnTypeCanBeChanged() const {
  return m_AnTypeCanBeChanged;
}
void HsmfUpdateData::setAnTypeCanBeChanged(bool const value) {
  m_AnTypeCanBeChanged = value;
  m_AnTypeCanBeChangedIsSet = true;
}
bool HsmfUpdateData::anTypeCanBeChangedIsSet() const {
  return m_AnTypeCanBeChangedIsSet;
}
void HsmfUpdateData::unsetAnTypeCanBeChanged() {
  m_AnTypeCanBeChangedIsSet = false;
}
MaReleaseIndication HsmfUpdateData::getMaReleaseInd() const {
  return m_MaReleaseInd;
}
void HsmfUpdateData::setMaReleaseInd(MaReleaseIndication const &value) {
  m_MaReleaseInd = value;
  m_MaReleaseIndIsSet = true;
}
bool HsmfUpdateData::maReleaseIndIsSet() const { return m_MaReleaseIndIsSet; }
void HsmfUpdateData::unsetMaReleaseInd() { m_MaReleaseIndIsSet = false; }
bool HsmfUpdateData::isMaNwUpgradeInd() const { return m_MaNwUpgradeInd; }
void HsmfUpdateData::setMaNwUpgradeInd(bool const value) {
  m_MaNwUpgradeInd = value;
  m_MaNwUpgradeIndIsSet = true;
}
bool HsmfUpdateData::maNwUpgradeIndIsSet() const {
  return m_MaNwUpgradeIndIsSet;
}
void HsmfUpdateData::unsetMaNwUpgradeInd() { m_MaNwUpgradeIndIsSet = false; }
bool HsmfUpdateData::isMaRequestInd() const { return m_MaRequestInd; }
void HsmfUpdateData::setMaRequestInd(bool const value) {
  m_MaRequestInd = value;
  m_MaRequestIndIsSet = true;
}
bool HsmfUpdateData::maRequestIndIsSet() const { return m_MaRequestIndIsSet; }
void HsmfUpdateData::unsetMaRequestInd() { m_MaRequestIndIsSet = false; }
UnavailableAccessIndication HsmfUpdateData::getUnavailableAccessInd() const {
  return m_UnavailableAccessInd;
}
void HsmfUpdateData::setUnavailableAccessInd(
    UnavailableAccessIndication const &value) {
  m_UnavailableAccessInd = value;
  m_UnavailableAccessIndIsSet = true;
}
bool HsmfUpdateData::unavailableAccessIndIsSet() const {
  return m_UnavailableAccessIndIsSet;
}
void HsmfUpdateData::unsetUnavailableAccessInd() {
  m_UnavailableAccessIndIsSet = false;
}
std::vector<PsaInformation> &HsmfUpdateData::getPsaInfo() { return m_PsaInfo; }
void HsmfUpdateData::setPsaInfo(std::vector<PsaInformation> const &value) {
  m_PsaInfo = value;
  m_PsaInfoIsSet = true;
}
bool HsmfUpdateData::psaInfoIsSet() const { return m_PsaInfoIsSet; }
void HsmfUpdateData::unsetPsaInfo() { m_PsaInfoIsSet = false; }
UlclBpInformation HsmfUpdateData::getUlclBpInfo() const { return m_UlclBpInfo; }
void HsmfUpdateData::setUlclBpInfo(UlclBpInformation const &value) {
  m_UlclBpInfo = value;
  m_UlclBpInfoIsSet = true;
}
bool HsmfUpdateData::ulclBpInfoIsSet() const { return m_UlclBpInfoIsSet; }
void HsmfUpdateData::unsetUlclBpInfo() { m_UlclBpInfoIsSet = false; }
N4Information HsmfUpdateData::getN4Info() const { return m_N4Info; }
void HsmfUpdateData::setN4Info(N4Information const &value) {
  m_N4Info = value;
  m_N4InfoIsSet = true;
}
bool HsmfUpdateData::n4InfoIsSet() const { return m_N4InfoIsSet; }
void HsmfUpdateData::unsetN4Info() { m_N4InfoIsSet = false; }
N4Information HsmfUpdateData::getN4InfoExt1() const { return m_N4InfoExt1; }
void HsmfUpdateData::setN4InfoExt1(N4Information const &value) {
  m_N4InfoExt1 = value;
  m_N4InfoExt1IsSet = true;
}
bool HsmfUpdateData::n4InfoExt1IsSet() const { return m_N4InfoExt1IsSet; }
void HsmfUpdateData::unsetN4InfoExt1() { m_N4InfoExt1IsSet = false; }
N4Information HsmfUpdateData::getN4InfoExt2() const { return m_N4InfoExt2; }
void HsmfUpdateData::setN4InfoExt2(N4Information const &value) {
  m_N4InfoExt2 = value;
  m_N4InfoExt2IsSet = true;
}
bool HsmfUpdateData::n4InfoExt2IsSet() const { return m_N4InfoExt2IsSet; }
void HsmfUpdateData::unsetN4InfoExt2() { m_N4InfoExt2IsSet = false; }
PresenceState HsmfUpdateData::getPresenceInLadn() const {
  return m_PresenceInLadn;
}
void HsmfUpdateData::setPresenceInLadn(PresenceState const &value) {
  m_PresenceInLadn = value;
  m_PresenceInLadnIsSet = true;
}
bool HsmfUpdateData::presenceInLadnIsSet() const {
  return m_PresenceInLadnIsSet;
}
void HsmfUpdateData::unsetPresenceInLadn() { m_PresenceInLadnIsSet = false; }
std::string HsmfUpdateData::getVsmfPduSessionUri() const {
  return m_VsmfPduSessionUri;
}
void HsmfUpdateData::setVsmfPduSessionUri(std::string const &value) {
  m_VsmfPduSessionUri = value;
  m_VsmfPduSessionUriIsSet = true;
}
bool HsmfUpdateData::vsmfPduSessionUriIsSet() const {
  return m_VsmfPduSessionUriIsSet;
}
void HsmfUpdateData::unsetVsmfPduSessionUri() {
  m_VsmfPduSessionUriIsSet = false;
}
std::string HsmfUpdateData::getVsmfId() const { return m_VsmfId; }
void HsmfUpdateData::setVsmfId(std::string const &value) {
  m_VsmfId = value;
  m_VsmfIdIsSet = true;
}
bool HsmfUpdateData::vsmfIdIsSet() const { return m_VsmfIdIsSet; }
void HsmfUpdateData::unsetVsmfId() { m_VsmfIdIsSet = false; }
std::string HsmfUpdateData::getVSmfServiceInstanceId() const {
  return m_VSmfServiceInstanceId;
}
void HsmfUpdateData::setVSmfServiceInstanceId(std::string const &value) {
  m_VSmfServiceInstanceId = value;
  m_VSmfServiceInstanceIdIsSet = true;
}
bool HsmfUpdateData::vSmfServiceInstanceIdIsSet() const {
  return m_VSmfServiceInstanceIdIsSet;
}
void HsmfUpdateData::unsetVSmfServiceInstanceId() {
  m_VSmfServiceInstanceIdIsSet = false;
}
std::string HsmfUpdateData::getIsmfPduSessionUri() const {
  return m_IsmfPduSessionUri;
}
void HsmfUpdateData::setIsmfPduSessionUri(std::string const &value) {
  m_IsmfPduSessionUri = value;
  m_IsmfPduSessionUriIsSet = true;
}
bool HsmfUpdateData::ismfPduSessionUriIsSet() const {
  return m_IsmfPduSessionUriIsSet;
}
void HsmfUpdateData::unsetIsmfPduSessionUri() {
  m_IsmfPduSessionUriIsSet = false;
}
std::string HsmfUpdateData::getIsmfId() const { return m_IsmfId; }
void HsmfUpdateData::setIsmfId(std::string const &value) {
  m_IsmfId = value;
  m_IsmfIdIsSet = true;
}
bool HsmfUpdateData::ismfIdIsSet() const { return m_IsmfIdIsSet; }
void HsmfUpdateData::unsetIsmfId() { m_IsmfIdIsSet = false; }
std::string HsmfUpdateData::getISmfServiceInstanceId() const {
  return m_ISmfServiceInstanceId;
}
void HsmfUpdateData::setISmfServiceInstanceId(std::string const &value) {
  m_ISmfServiceInstanceId = value;
  m_ISmfServiceInstanceIdIsSet = true;
}
bool HsmfUpdateData::iSmfServiceInstanceIdIsSet() const {
  return m_ISmfServiceInstanceIdIsSet;
}
void HsmfUpdateData::unsetISmfServiceInstanceId() {
  m_ISmfServiceInstanceIdIsSet = false;
}
int32_t HsmfUpdateData::getDlServingPlmnRateCtl() const {
  return m_DlServingPlmnRateCtl;
}
void HsmfUpdateData::setDlServingPlmnRateCtl(int32_t const value) {
  m_DlServingPlmnRateCtl = value;
  m_DlServingPlmnRateCtlIsSet = true;
}
bool HsmfUpdateData::dlServingPlmnRateCtlIsSet() const {
  return m_DlServingPlmnRateCtlIsSet;
}
void HsmfUpdateData::unsetDlServingPlmnRateCtl() {
  m_DlServingPlmnRateCtlIsSet = false;
}
std::vector<std::string> &HsmfUpdateData::getDnaiList() { return m_DnaiList; }
void HsmfUpdateData::setDnaiList(std::vector<std::string> const &value) {
  m_DnaiList = value;
  m_DnaiListIsSet = true;
}
bool HsmfUpdateData::dnaiListIsSet() const { return m_DnaiListIsSet; }
void HsmfUpdateData::unsetDnaiList() { m_DnaiListIsSet = false; }
std::string HsmfUpdateData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void HsmfUpdateData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool HsmfUpdateData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void HsmfUpdateData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
RoamingChargingProfile HsmfUpdateData::getRoamingChargingProfile() const {
  return m_RoamingChargingProfile;
}
void HsmfUpdateData::setRoamingChargingProfile(
    RoamingChargingProfile const &value) {
  m_RoamingChargingProfile = value;
  m_RoamingChargingProfileIsSet = true;
}
bool HsmfUpdateData::roamingChargingProfileIsSet() const {
  return m_RoamingChargingProfileIsSet;
}
void HsmfUpdateData::unsetRoamingChargingProfile() {
  m_RoamingChargingProfileIsSet = false;
}
MoExpDataCounter HsmfUpdateData::getMoExpDataCounter() const {
  return m_MoExpDataCounter;
}
void HsmfUpdateData::setMoExpDataCounter(MoExpDataCounter const &value) {
  m_MoExpDataCounter = value;
  m_MoExpDataCounterIsSet = true;
}
bool HsmfUpdateData::moExpDataCounterIsSet() const {
  return m_MoExpDataCounterIsSet;
}
void HsmfUpdateData::unsetMoExpDataCounter() {
  m_MoExpDataCounterIsSet = false;
}
VplmnQos HsmfUpdateData::getVplmnQos() const { return m_VplmnQos; }
void HsmfUpdateData::setVplmnQos(VplmnQos const &value) {
  m_VplmnQos = value;
  m_VplmnQosIsSet = true;
}
bool HsmfUpdateData::vplmnQosIsSet() const { return m_VplmnQosIsSet; }
void HsmfUpdateData::unsetVplmnQos() { m_VplmnQosIsSet = false; }
SecurityResult HsmfUpdateData::getSecurityResult() const {
  return m_SecurityResult;
}
void HsmfUpdateData::setSecurityResult(SecurityResult const &value) {
  m_SecurityResult = value;
  m_SecurityResultIsSet = true;
}
bool HsmfUpdateData::securityResultIsSet() const {
  return m_SecurityResultIsSet;
}
void HsmfUpdateData::unsetSecurityResult() { m_SecurityResultIsSet = false; }
UpSecurityInfo HsmfUpdateData::getUpSecurityInfo() const {
  return m_UpSecurityInfo;
}
void HsmfUpdateData::setUpSecurityInfo(UpSecurityInfo const &value) {
  m_UpSecurityInfo = value;
  m_UpSecurityInfoIsSet = true;
}
bool HsmfUpdateData::upSecurityInfoIsSet() const {
  return m_UpSecurityInfoIsSet;
}
void HsmfUpdateData::unsetUpSecurityInfo() { m_UpSecurityInfoIsSet = false; }
std::string HsmfUpdateData::getAmfNfId() const { return m_AmfNfId; }
void HsmfUpdateData::setAmfNfId(std::string const &value) {
  m_AmfNfId = value;
  m_AmfNfIdIsSet = true;
}
bool HsmfUpdateData::amfNfIdIsSet() const { return m_AmfNfIdIsSet; }
void HsmfUpdateData::unsetAmfNfId() { m_AmfNfIdIsSet = false; }
Guami HsmfUpdateData::getGuami() const { return m_Guami; }
void HsmfUpdateData::setGuami(Guami const &value) {
  m_Guami = value;
  m_GuamiIsSet = true;
}
bool HsmfUpdateData::guamiIsSet() const { return m_GuamiIsSet; }
void HsmfUpdateData::unsetGuami() { m_GuamiIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
