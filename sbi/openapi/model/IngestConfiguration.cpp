/**
 * M1_ContentHostingProvisioning
 * 5GMS AF M1 Content Hosting Provisioning API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IngestConfiguration.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

IngestConfiguration::IngestConfiguration() {
  m_Path = "";
  m_PathIsSet = false;
  m_Pull = false;
  m_PullIsSet = false;
  m_Protocol = "";
  m_ProtocolIsSet = false;
  m_EntryPoint = "";
  m_EntryPointIsSet = false;
}

IngestConfiguration::~IngestConfiguration() {}

void IngestConfiguration::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const IngestConfiguration &o) {
  j = nlohmann::json();
  if (o.pathIsSet())
    j["path"] = o.m_Path;
  if (o.pullIsSet())
    j["pull"] = o.m_Pull;
  if (o.protocolIsSet())
    j["protocol"] = o.m_Protocol;
  if (o.entryPointIsSet())
    j["entryPoint"] = o.m_EntryPoint;
}

void from_json(const nlohmann::json &j, IngestConfiguration &o) {
  if (j.find("path") != j.end()) {
    j.at("path").get_to(o.m_Path);
    o.m_PathIsSet = true;
  }
  if (j.find("pull") != j.end()) {
    j.at("pull").get_to(o.m_Pull);
    o.m_PullIsSet = true;
  }
  if (j.find("protocol") != j.end()) {
    j.at("protocol").get_to(o.m_Protocol);
    o.m_ProtocolIsSet = true;
  }
  if (j.find("entryPoint") != j.end()) {
    j.at("entryPoint").get_to(o.m_EntryPoint);
    o.m_EntryPointIsSet = true;
  }
}

std::string IngestConfiguration::getPath() const { return m_Path; }
void IngestConfiguration::setPath(std::string const &value) {
  m_Path = value;
  m_PathIsSet = true;
}
bool IngestConfiguration::pathIsSet() const { return m_PathIsSet; }
void IngestConfiguration::unsetPath() { m_PathIsSet = false; }
bool IngestConfiguration::isPull() const { return m_Pull; }
void IngestConfiguration::setPull(bool const value) {
  m_Pull = value;
  m_PullIsSet = true;
}
bool IngestConfiguration::pullIsSet() const { return m_PullIsSet; }
void IngestConfiguration::unsetPull() { m_PullIsSet = false; }
std::string IngestConfiguration::getProtocol() const { return m_Protocol; }
void IngestConfiguration::setProtocol(std::string const &value) {
  m_Protocol = value;
  m_ProtocolIsSet = true;
}
bool IngestConfiguration::protocolIsSet() const { return m_ProtocolIsSet; }
void IngestConfiguration::unsetProtocol() { m_ProtocolIsSet = false; }
std::string IngestConfiguration::getEntryPoint() const { return m_EntryPoint; }
void IngestConfiguration::setEntryPoint(std::string const &value) {
  m_EntryPoint = value;
  m_EntryPointIsSet = true;
}
bool IngestConfiguration::entryPointIsSet() const { return m_EntryPointIsSet; }
void IngestConfiguration::unsetEntryPoint() { m_EntryPointIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
