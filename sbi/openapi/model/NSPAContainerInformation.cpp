/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NSPAContainerInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NSPAContainerInformation::NSPAContainerInformation() {
  m_Latency = 0;
  m_LatencyIsSet = false;
  m_ThroughputIsSet = false;
  m_MaximumPacketLossRate = "";
  m_MaximumPacketLossRateIsSet = false;
  m_ServiceExperienceStatisticsDataIsSet = false;
  m_TheNumberOfPDUSessions = 0;
  m_TheNumberOfPDUSessionsIsSet = false;
  m_TheNumberOfRegisteredSubscribers = 0;
  m_TheNumberOfRegisteredSubscribersIsSet = false;
  m_LoadLevelIsSet = false;
}

NSPAContainerInformation::~NSPAContainerInformation() {}

void NSPAContainerInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NSPAContainerInformation &o) {
  j = nlohmann::json();
  if (o.latencyIsSet())
    j["latency"] = o.m_Latency;
  if (o.throughputIsSet())
    j["throughput"] = o.m_Throughput;
  if (o.maximumPacketLossRateIsSet())
    j["maximumPacketLossRate"] = o.m_MaximumPacketLossRate;
  if (o.serviceExperienceStatisticsDataIsSet())
    j["serviceExperienceStatisticsData"] = o.m_ServiceExperienceStatisticsData;
  if (o.theNumberOfPDUSessionsIsSet())
    j["theNumberOfPDUSessions"] = o.m_TheNumberOfPDUSessions;
  if (o.theNumberOfRegisteredSubscribersIsSet())
    j["theNumberOfRegisteredSubscribers"] =
        o.m_TheNumberOfRegisteredSubscribers;
  if (o.loadLevelIsSet())
    j["loadLevel"] = o.m_LoadLevel;
}

void from_json(const nlohmann::json &j, NSPAContainerInformation &o) {
  if (j.find("latency") != j.end()) {
    j.at("latency").get_to(o.m_Latency);
    o.m_LatencyIsSet = true;
  }
  if (j.find("throughput") != j.end()) {
    j.at("throughput").get_to(o.m_Throughput);
    o.m_ThroughputIsSet = true;
  }
  if (j.find("maximumPacketLossRate") != j.end()) {
    j.at("maximumPacketLossRate").get_to(o.m_MaximumPacketLossRate);
    o.m_MaximumPacketLossRateIsSet = true;
  }
  if (j.find("serviceExperienceStatisticsData") != j.end()) {
    j.at("serviceExperienceStatisticsData")
        .get_to(o.m_ServiceExperienceStatisticsData);
    o.m_ServiceExperienceStatisticsDataIsSet = true;
  }
  if (j.find("theNumberOfPDUSessions") != j.end()) {
    j.at("theNumberOfPDUSessions").get_to(o.m_TheNumberOfPDUSessions);
    o.m_TheNumberOfPDUSessionsIsSet = true;
  }
  if (j.find("theNumberOfRegisteredSubscribers") != j.end()) {
    j.at("theNumberOfRegisteredSubscribers")
        .get_to(o.m_TheNumberOfRegisteredSubscribers);
    o.m_TheNumberOfRegisteredSubscribersIsSet = true;
  }
  if (j.find("loadLevel") != j.end()) {
    j.at("loadLevel").get_to(o.m_LoadLevel);
    o.m_LoadLevelIsSet = true;
  }
}

int32_t NSPAContainerInformation::getLatency() const { return m_Latency; }
void NSPAContainerInformation::setLatency(int32_t const value) {
  m_Latency = value;
  m_LatencyIsSet = true;
}
bool NSPAContainerInformation::latencyIsSet() const { return m_LatencyIsSet; }
void NSPAContainerInformation::unsetLatency() { m_LatencyIsSet = false; }
Throughput NSPAContainerInformation::getThroughput() const {
  return m_Throughput;
}
void NSPAContainerInformation::setThroughput(Throughput const &value) {
  m_Throughput = value;
  m_ThroughputIsSet = true;
}
bool NSPAContainerInformation::throughputIsSet() const {
  return m_ThroughputIsSet;
}
void NSPAContainerInformation::unsetThroughput() { m_ThroughputIsSet = false; }
std::string NSPAContainerInformation::getMaximumPacketLossRate() const {
  return m_MaximumPacketLossRate;
}
void NSPAContainerInformation::setMaximumPacketLossRate(
    std::string const &value) {
  m_MaximumPacketLossRate = value;
  m_MaximumPacketLossRateIsSet = true;
}
bool NSPAContainerInformation::maximumPacketLossRateIsSet() const {
  return m_MaximumPacketLossRateIsSet;
}
void NSPAContainerInformation::unsetMaximumPacketLossRate() {
  m_MaximumPacketLossRateIsSet = false;
}
ServiceExperienceInfo
NSPAContainerInformation::getServiceExperienceStatisticsData() const {
  return m_ServiceExperienceStatisticsData;
}
void NSPAContainerInformation::setServiceExperienceStatisticsData(
    ServiceExperienceInfo const &value) {
  m_ServiceExperienceStatisticsData = value;
  m_ServiceExperienceStatisticsDataIsSet = true;
}
bool NSPAContainerInformation::serviceExperienceStatisticsDataIsSet() const {
  return m_ServiceExperienceStatisticsDataIsSet;
}
void NSPAContainerInformation::unsetServiceExperienceStatisticsData() {
  m_ServiceExperienceStatisticsDataIsSet = false;
}
int32_t NSPAContainerInformation::getTheNumberOfPDUSessions() const {
  return m_TheNumberOfPDUSessions;
}
void NSPAContainerInformation::setTheNumberOfPDUSessions(int32_t const value) {
  m_TheNumberOfPDUSessions = value;
  m_TheNumberOfPDUSessionsIsSet = true;
}
bool NSPAContainerInformation::theNumberOfPDUSessionsIsSet() const {
  return m_TheNumberOfPDUSessionsIsSet;
}
void NSPAContainerInformation::unsetTheNumberOfPDUSessions() {
  m_TheNumberOfPDUSessionsIsSet = false;
}
int32_t NSPAContainerInformation::getTheNumberOfRegisteredSubscribers() const {
  return m_TheNumberOfRegisteredSubscribers;
}
void NSPAContainerInformation::setTheNumberOfRegisteredSubscribers(
    int32_t const value) {
  m_TheNumberOfRegisteredSubscribers = value;
  m_TheNumberOfRegisteredSubscribersIsSet = true;
}
bool NSPAContainerInformation::theNumberOfRegisteredSubscribersIsSet() const {
  return m_TheNumberOfRegisteredSubscribersIsSet;
}
void NSPAContainerInformation::unsetTheNumberOfRegisteredSubscribers() {
  m_TheNumberOfRegisteredSubscribersIsSet = false;
}
NsiLoadLevelInfo NSPAContainerInformation::getLoadLevel() const {
  return m_LoadLevel;
}
void NSPAContainerInformation::setLoadLevel(NsiLoadLevelInfo const &value) {
  m_LoadLevel = value;
  m_LoadLevelIsSet = true;
}
bool NSPAContainerInformation::loadLevelIsSet() const {
  return m_LoadLevelIsSet;
}
void NSPAContainerInformation::unsetLoadLevel() { m_LoadLevelIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
