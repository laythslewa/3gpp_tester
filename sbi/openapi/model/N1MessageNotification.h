/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * N1MessageNotification.h
 *
 * Data within a N1 message notification request
 */

#ifndef N1MessageNotification_H_
#define N1MessageNotification_H_

#include "Ecgi.h"
#include "Guami.h"
#include "N1MessageContainer.h"
#include "Ncgi.h"
#include "RegistrationContextContainer.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within a N1 message notification request
/// </summary>
class N1MessageNotification {
public:
  N1MessageNotification();
  virtual ~N1MessageNotification();

  void validate();

  /////////////////////////////////////////////
  /// N1MessageNotification members

  /// <summary>
  ///
  /// </summary>
  std::string getN1NotifySubscriptionId() const;
  void setN1NotifySubscriptionId(std::string const &value);
  bool n1NotifySubscriptionIdIsSet() const;
  void unsetN1NotifySubscriptionId();
  /// <summary>
  ///
  /// </summary>
  N1MessageContainer getN1MessageContainer() const;
  void setN1MessageContainer(N1MessageContainer const &value);
  /// <summary>
  /// LCS Correlation ID.
  /// </summary>
  std::string getLcsCorrelationId() const;
  void setLcsCorrelationId(std::string const &value);
  bool lcsCorrelationIdIsSet() const;
  void unsetLcsCorrelationId();
  /// <summary>
  ///
  /// </summary>
  RegistrationContextContainer getRegistrationCtxtContainer() const;
  void setRegistrationCtxtContainer(RegistrationContextContainer const &value);
  bool registrationCtxtContainerIsSet() const;
  void unsetRegistrationCtxtContainer();
  /// <summary>
  /// LMF identification.
  /// </summary>
  std::string getNewLmfIdentification() const;
  void setNewLmfIdentification(std::string const &value);
  bool newLmfIdentificationIsSet() const;
  void unsetNewLmfIdentification();
  /// <summary>
  ///
  /// </summary>
  Guami getGuami() const;
  void setGuami(Guami const &value);
  bool guamiIsSet() const;
  void unsetGuami();
  /// <summary>
  ///
  /// </summary>
  bool isCIoT5GSOptimisation() const;
  void setCIoT5GSOptimisation(bool const value);
  bool cIoT5GSOptimisationIsSet() const;
  void unsetCIoT5GSOptimisation();
  /// <summary>
  ///
  /// </summary>
  Ecgi getEcgi() const;
  void setEcgi(Ecgi const &value);
  bool ecgiIsSet() const;
  void unsetEcgi();
  /// <summary>
  ///
  /// </summary>
  Ncgi getNcgi() const;
  void setNcgi(Ncgi const &value);
  bool ncgiIsSet() const;
  void unsetNcgi();

  friend void to_json(nlohmann::json &j, const N1MessageNotification &o);
  friend void from_json(const nlohmann::json &j, N1MessageNotification &o);

protected:
  std::string m_N1NotifySubscriptionId;
  bool m_N1NotifySubscriptionIdIsSet;
  N1MessageContainer m_N1MessageContainer;

  std::string m_LcsCorrelationId;
  bool m_LcsCorrelationIdIsSet;
  RegistrationContextContainer m_RegistrationCtxtContainer;
  bool m_RegistrationCtxtContainerIsSet;
  std::string m_NewLmfIdentification;
  bool m_NewLmfIdentificationIsSet;
  Guami m_Guami;
  bool m_GuamiIsSet;
  bool m_CIoT5GSOptimisation;
  bool m_CIoT5GSOptimisationIsSet;
  Ecgi m_Ecgi;
  bool m_EcgiIsSet;
  Ncgi m_Ncgi;
  bool m_NcgiIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* N1MessageNotification_H_ */
