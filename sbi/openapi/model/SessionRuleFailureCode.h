/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SessionRuleFailureCode.h
 *
 * Possible values are   - NF_MAL: Indicates that the PCC rule could not be
 * successfully installed (for those provisioned from the PCF) or activated (for
 * those pre-defined in SMF) or enforced (for those already successfully
 * installed) due to SMF/UPF malfunction.   - RES_LIM: Indicates that the PCC
 * rule could not be successfully installed (for those provisioned from PCF) or
 * activated (for those pre-defined in SMF) or enforced (for those already
 * successfully installed) due to a limitation of resources at the SMF/UPF.   -
 * SESSION_RESOURCE_ALLOCATION_FAILURE: Indicates the session rule could not be
 * successfully enforced due to failure during the allocation of resources for
 * the PDU session in the UE, RAN or AMF.   - UNSUCC_QOS_VAL: indicates that the
 * QoS validation has failed.   - INCORRECT_UM: The usage monitoring data of the
 * enforced session rule is not the same for all the provisioned session
 * rule(s).   - UE_STA_SUSP: Indicates that the UE is in suspend state.   -
 * UNKNOWN_REF_ID: Indicates that the session rule could not be successfully
 * installed/modified because the referenced identifier to a Policy Decision
 * Data or to a Condition Data is unknown to the SMF.   - INCORRECT_COND_DATA:
 * Indicates that the session rule could not be successfully installed/modified
 * because the referenced Condition data are incorrect.   - REF_ID_COLLISION:
 * Indicates that the session rule could not be successfully installed/modified
 * because the same Policy Decision is referenced by a PCC rule (e.g. the
 * session rule and the PCC rule refer to the same Usage Monitoring decision
 * data).
 */

#ifndef SessionRuleFailureCode_H_
#define SessionRuleFailureCode_H_

#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Possible values are   - NF_MAL: Indicates that the PCC rule could not be
/// successfully installed (for those provisioned from the PCF) or activated
/// (for those pre-defined in SMF) or enforced (for those already successfully
/// installed) due to SMF/UPF malfunction.   - RES_LIM: Indicates that the PCC
/// rule could not be successfully installed (for those provisioned from PCF) or
/// activated (for those pre-defined in SMF) or enforced (for those already
/// successfully installed) due to a limitation of resources at the SMF/UPF.   -
/// SESSION_RESOURCE_ALLOCATION_FAILURE: Indicates the session rule could not be
/// successfully enforced due to failure during the allocation of resources for
/// the PDU session in the UE, RAN or AMF.   - UNSUCC_QOS_VAL: indicates that
/// the QoS validation has failed.   - INCORRECT_UM: The usage monitoring data
/// of the enforced session rule is not the same for all the provisioned session
/// rule(s).   - UE_STA_SUSP: Indicates that the UE is in suspend state.   -
/// UNKNOWN_REF_ID: Indicates that the session rule could not be successfully
/// installed/modified because the referenced identifier to a Policy Decision
/// Data or to a Condition Data is unknown to the SMF.   - INCORRECT_COND_DATA:
/// Indicates that the session rule could not be successfully installed/modified
/// because the referenced Condition data are incorrect.   - REF_ID_COLLISION:
/// Indicates that the session rule could not be successfully installed/modified
/// because the same Policy Decision is referenced by a PCC rule (e.g. the
/// session rule and the PCC rule refer to the same Usage Monitoring decision
/// data).
/// </summary>
class SessionRuleFailureCode {
public:
  SessionRuleFailureCode();
  virtual ~SessionRuleFailureCode();

  void validate();

  /////////////////////////////////////////////
  /// SessionRuleFailureCode members

  friend void to_json(nlohmann::json &j, const SessionRuleFailureCode &o);
  friend void from_json(const nlohmann::json &j, SessionRuleFailureCode &o);

protected:
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SessionRuleFailureCode_H_ */
