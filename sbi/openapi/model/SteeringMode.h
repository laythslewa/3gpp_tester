/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SteeringMode.h
 *
 * Contains the steering mode value and parameters determined by the PCF.
 */

#ifndef SteeringMode_H_
#define SteeringMode_H_

#include "AccessType.h"
#include "AccessTypeRm.h"
#include "SteerModeIndicator.h"
#include "SteerModeValue.h"
#include "ThresholdValue.h"
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the steering mode value and parameters determined by the PCF.
/// </summary>
class SteeringMode {
public:
  SteeringMode();
  virtual ~SteeringMode();

  void validate();

  /////////////////////////////////////////////
  /// SteeringMode members

  /// <summary>
  ///
  /// </summary>
  SteerModeValue getSteerModeValue() const;
  void setSteerModeValue(SteerModeValue const &value);
  /// <summary>
  ///
  /// </summary>
  AccessType getActive() const;
  void setActive(AccessType const &value);
  bool activeIsSet() const;
  void unsetActive();
  /// <summary>
  ///
  /// </summary>
  AccessTypeRm getStandby() const;
  void setStandby(AccessTypeRm const &value);
  bool standbyIsSet() const;
  void unsetStandby();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getR3gLoad() const;
  void setR3gLoad(int32_t const value);
  bool r3gLoadIsSet() const;
  void unsetr_3gLoad();
  /// <summary>
  ///
  /// </summary>
  AccessType getPrioAcc() const;
  void setPrioAcc(AccessType const &value);
  bool prioAccIsSet() const;
  void unsetPrioAcc();
  /// <summary>
  ///
  /// </summary>
  ThresholdValue getThresValue() const;
  void setThresValue(ThresholdValue const &value);
  bool thresValueIsSet() const;
  void unsetThresValue();
  /// <summary>
  ///
  /// </summary>
  SteerModeIndicator getSteerModeInd() const;
  void setSteerModeInd(SteerModeIndicator const &value);
  bool steerModeIndIsSet() const;
  void unsetSteerModeInd();

  friend void to_json(nlohmann::json &j, const SteeringMode &o);
  friend void from_json(const nlohmann::json &j, SteeringMode &o);

protected:
  SteerModeValue m_SteerModeValue;

  AccessType m_Active;
  bool m_ActiveIsSet;
  AccessTypeRm m_Standby;
  bool m_StandbyIsSet;
  int32_t m_r_3gLoad;
  bool m_r_3gLoadIsSet;
  AccessType m_PrioAcc;
  bool m_PrioAccIsSet;
  ThresholdValue m_ThresValue;
  bool m_ThresValueIsSet;
  SteerModeIndicator m_SteerModeInd;
  bool m_SteerModeIndIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SteeringMode_H_ */
