/**
 * N5g-ddnmf_Discovery API
 * N5g-ddnmf_Discovery Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UpdateTheAuthorizationForMonitoringForAUEApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

UpdateTheAuthorizationForMonitoringForAUEApi::
    UpdateTheAuthorizationForMonitoringForAUEApi(
        std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void UpdateTheAuthorizationForMonitoringForAUEApi::init() { setupRoutes(); }

void UpdateTheAuthorizationForMonitoringForAUEApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Patch(*router, base + "/:ueId/monitor-authorize/:discEntryId",
                Routes::bind(&UpdateTheAuthorizationForMonitoringForAUEApi::
                                 update_monitor_auth_handler,
                             this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &UpdateTheAuthorizationForMonitoringForAUEApi::
          update_the_authorization_for_monitoring_for_aue_api_default_handler,
      this));
}

void UpdateTheAuthorizationForMonitoringForAUEApi::update_monitor_auth_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto ueId = request.param(":ueId").as<std::string>();
  auto discEntryId = request.param(":discEntryId").as<std::string>();

  // Getting the body param

  MonitorUpdateData monitorUpdateData;

  try {
    nlohmann::json::parse(request.body()).get_to(monitorUpdateData);
    this->update_monitor_auth(ueId, discEntryId, monitorUpdateData, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void UpdateTheAuthorizationForMonitoringForAUEApi::
    update_the_authorization_for_monitoring_for_aue_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
