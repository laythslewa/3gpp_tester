/**
 * N32 Handshake API
 * N32-c Handshake Service.  Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC).  All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ProtectionPolicy.h
 *
 * The protection policy to be negotiated between the SEPPs
 */

#ifndef ProtectionPolicy_H_
#define ProtectionPolicy_H_

#include "ApiIeMapping.h"
#include "IeType.h"
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// The protection policy to be negotiated between the SEPPs
/// </summary>
class ProtectionPolicy {
public:
  ProtectionPolicy();
  virtual ~ProtectionPolicy();

  void validate();

  /////////////////////////////////////////////
  /// ProtectionPolicy members

  /// <summary>
  ///
  /// </summary>
  std::vector<ApiIeMapping> &getApiIeMappingList();
  void setApiIeMappingList(std::vector<ApiIeMapping> const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<IeType> &getDataTypeEncPolicy();
  void setDataTypeEncPolicy(std::vector<IeType> const &value);
  bool dataTypeEncPolicyIsSet() const;
  void unsetDataTypeEncPolicy();

  friend void to_json(nlohmann::json &j, const ProtectionPolicy &o);
  friend void from_json(const nlohmann::json &j, ProtectionPolicy &o);

protected:
  std::vector<ApiIeMapping> m_ApiIeMappingList;

  std::vector<IeType> m_DataTypeEncPolicy;
  bool m_DataTypeEncPolicyIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ProtectionPolicy_H_ */
