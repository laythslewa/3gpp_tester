/**
 * Naf_EventExposure
 * AF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AfEventNotification.h
 *
 * Represents information related to an event to be reported.
 */

#ifndef AfEventNotification_H_
#define AfEventNotification_H_

#include "AfEvent.h"
#include "ExceptionInfo.h"
#include "ServiceExperienceInfoPerApp.h"
#include "UeCommunicationCollection.h"
#include "UeMobilityCollection.h"
#include "UserDataCongestionCollection.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents information related to an event to be reported.
/// </summary>
class AfEventNotification {
public:
  AfEventNotification();
  virtual ~AfEventNotification();

  void validate();

  /////////////////////////////////////////////
  /// AfEventNotification members

  /// <summary>
  ///
  /// </summary>
  AfEvent getEvent() const;
  void setEvent(AfEvent const &value);
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getTimeStamp() const;
  void setTimeStamp(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<ServiceExperienceInfoPerApp> &getSvcExprcInfos();
  void setSvcExprcInfos(std::vector<ServiceExperienceInfoPerApp> const &value);
  bool svcExprcInfosIsSet() const;
  void unsetSvcExprcInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<UeMobilityCollection> &getUeMobilityInfos();
  void setUeMobilityInfos(std::vector<UeMobilityCollection> const &value);
  bool ueMobilityInfosIsSet() const;
  void unsetUeMobilityInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<UeCommunicationCollection> &getUeCommInfos();
  void setUeCommInfos(std::vector<UeCommunicationCollection> const &value);
  bool ueCommInfosIsSet() const;
  void unsetUeCommInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<ExceptionInfo> &getExcepInfos();
  void setExcepInfos(std::vector<ExceptionInfo> const &value);
  bool excepInfosIsSet() const;
  void unsetExcepInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<UserDataCongestionCollection> &getCongestionInfos();
  void
  setCongestionInfos(std::vector<UserDataCongestionCollection> const &value);
  bool congestionInfosIsSet() const;
  void unsetCongestionInfos();

  friend void to_json(nlohmann::json &j, const AfEventNotification &o);
  friend void from_json(const nlohmann::json &j, AfEventNotification &o);

protected:
  AfEvent m_Event;

  std::string m_TimeStamp;

  std::vector<ServiceExperienceInfoPerApp> m_SvcExprcInfos;
  bool m_SvcExprcInfosIsSet;
  std::vector<UeMobilityCollection> m_UeMobilityInfos;
  bool m_UeMobilityInfosIsSet;
  std::vector<UeCommunicationCollection> m_UeCommInfos;
  bool m_UeCommInfosIsSet;
  std::vector<ExceptionInfo> m_ExcepInfos;
  bool m_ExcepInfosIsSet;
  std::vector<UserDataCongestionCollection> m_CongestionInfos;
  bool m_CongestionInfosIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AfEventNotification_H_ */
