/**
 * M1_PolicyTemplatesProvisioning
 * 5GMS AF M1 Policy Templates Provisioning API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PolicyTemplate.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PolicyTemplate::PolicyTemplate() {
  m_PolicyTemplateId = "";
  m_ApiEndPoint = "";
  m_ExternalReference = "";
  m_QoSSpecificationIsSet = false;
  m_ChargingSpecificationIsSet = false;
}

PolicyTemplate::~PolicyTemplate() {}

void PolicyTemplate::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PolicyTemplate &o) {
  j = nlohmann::json();
  j["policyTemplateId"] = o.m_PolicyTemplateId;
  j["state"] = o.m_State;
  j["apiEndPoint"] = o.m_ApiEndPoint;
  j["apiType"] = o.m_ApiType;
  j["externalReference"] = o.m_ExternalReference;
  if (o.qoSSpecificationIsSet())
    j["qoSSpecification"] = o.m_QoSSpecification;
  j["ApplicationSessionContext"] = o.m_ApplicationSessionContext;
  if (o.chargingSpecificationIsSet())
    j["chargingSpecification"] = o.m_ChargingSpecification;
}

void from_json(const nlohmann::json &j, PolicyTemplate &o) {
  j.at("policyTemplateId").get_to(o.m_PolicyTemplateId);
  j.at("state").get_to(o.m_State);
  j.at("apiEndPoint").get_to(o.m_ApiEndPoint);
  j.at("apiType").get_to(o.m_ApiType);
  j.at("externalReference").get_to(o.m_ExternalReference);
  if (j.find("qoSSpecification") != j.end()) {
    j.at("qoSSpecification").get_to(o.m_QoSSpecification);
    o.m_QoSSpecificationIsSet = true;
  }
  j.at("ApplicationSessionContext").get_to(o.m_ApplicationSessionContext);
  if (j.find("chargingSpecification") != j.end()) {
    j.at("chargingSpecification").get_to(o.m_ChargingSpecification);
    o.m_ChargingSpecificationIsSet = true;
  }
}

std::string PolicyTemplate::getPolicyTemplateId() const {
  return m_PolicyTemplateId;
}
void PolicyTemplate::setPolicyTemplateId(std::string const &value) {
  m_PolicyTemplateId = value;
}
AnyOfstringstring PolicyTemplate::getState() const { return m_State; }
void PolicyTemplate::setState(AnyOfstringstring const &value) {
  m_State = value;
}
std::string PolicyTemplate::getApiEndPoint() const { return m_ApiEndPoint; }
void PolicyTemplate::setApiEndPoint(std::string const &value) {
  m_ApiEndPoint = value;
}
AnyOfstringstring PolicyTemplate::getApiType() const { return m_ApiType; }
void PolicyTemplate::setApiType(AnyOfstringstring const &value) {
  m_ApiType = value;
}
std::string PolicyTemplate::getExternalReference() const {
  return m_ExternalReference;
}
void PolicyTemplate::setExternalReference(std::string const &value) {
  m_ExternalReference = value;
}
M1QoSSpecification PolicyTemplate::getQoSSpecification() const {
  return m_QoSSpecification;
}
void PolicyTemplate::setQoSSpecification(M1QoSSpecification const &value) {
  m_QoSSpecification = value;
  m_QoSSpecificationIsSet = true;
}
bool PolicyTemplate::qoSSpecificationIsSet() const {
  return m_QoSSpecificationIsSet;
}
void PolicyTemplate::unsetQoSSpecification() {
  m_QoSSpecificationIsSet = false;
}
PolicyTemplate_ApplicationSessionContext
PolicyTemplate::getApplicationSessionContext() const {
  return m_ApplicationSessionContext;
}
void PolicyTemplate::setApplicationSessionContext(
    PolicyTemplate_ApplicationSessionContext const &value) {
  m_ApplicationSessionContext = value;
}
ChargingSpecification PolicyTemplate::getChargingSpecification() const {
  return m_ChargingSpecification;
}
void PolicyTemplate::setChargingSpecification(
    ChargingSpecification const &value) {
  m_ChargingSpecification = value;
  m_ChargingSpecificationIsSet = true;
}
bool PolicyTemplate::chargingSpecificationIsSet() const {
  return m_ChargingSpecificationIsSet;
}
void PolicyTemplate::unsetChargingSpecification() {
  m_ChargingSpecificationIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
