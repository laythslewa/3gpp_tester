/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NFIdentification.h
 *
 *
 */

#ifndef NFIdentification_H_
#define NFIdentification_H_

#include "Ipv6Addr.h"
#include "NodeFunctionality.h"
#include "PlmnId.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class NFIdentification {
public:
  NFIdentification();
  virtual ~NFIdentification();

  void validate();

  /////////////////////////////////////////////
  /// NFIdentification members

  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getNFName() const;
  void setNFName(std::string const &value);
  bool nFNameIsSet() const;
  void unsetNFName();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getNFIPv4Address() const;
  void setNFIPv4Address(std::string const &value);
  bool nFIPv4AddressIsSet() const;
  void unsetNFIPv4Address();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getNFIPv6Address() const;
  void setNFIPv6Address(Ipv6Addr const &value);
  bool nFIPv6AddressIsSet() const;
  void unsetNFIPv6Address();
  /// <summary>
  ///
  /// </summary>
  PlmnId getNFPLMNID() const;
  void setNFPLMNID(PlmnId const &value);
  bool nFPLMNIDIsSet() const;
  void unsetNFPLMNID();
  /// <summary>
  ///
  /// </summary>
  NodeFunctionality getNodeFunctionality() const;
  void setNodeFunctionality(NodeFunctionality const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getNFFqdn() const;
  void setNFFqdn(std::string const &value);
  bool nFFqdnIsSet() const;
  void unsetNFFqdn();

  friend void to_json(nlohmann::json &j, const NFIdentification &o);
  friend void from_json(const nlohmann::json &j, NFIdentification &o);

protected:
  std::string m_NFName;
  bool m_NFNameIsSet;
  std::string m_NFIPv4Address;
  bool m_NFIPv4AddressIsSet;
  Ipv6Addr m_NFIPv6Address;
  bool m_NFIPv6AddressIsSet;
  PlmnId m_NFPLMNID;
  bool m_NFPLMNIDIsSet;
  NodeFunctionality m_NodeFunctionality;

  std::string m_NFFqdn;
  bool m_NFFqdnIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NFIdentification_H_ */
