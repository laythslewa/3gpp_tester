/**
 * Nhss_imsSDM
 * Nhss Subscriber Data Management Service for IMS. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AmfLocationData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AmfLocationData::AmfLocationData() {
  m_AmfAddress = "";
  m_AmfLocationIsSet = false;
  m_SmsfAddress = "";
  m_SmsfAddressIsSet = false;
  m_TimeZone = "";
  m_TimeZoneIsSet = false;
  m_RatTypeIsSet = false;
}

AmfLocationData::~AmfLocationData() {}

void AmfLocationData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AmfLocationData &o) {
  j = nlohmann::json();
  j["amfAddress"] = o.m_AmfAddress;
  j["plmnId"] = o.m_PlmnId;
  if (o.amfLocationIsSet())
    j["amfLocation"] = o.m_AmfLocation;
  if (o.smsfAddressIsSet())
    j["SmsfAddress"] = o.m_SmsfAddress;
  if (o.timeZoneIsSet())
    j["timeZone"] = o.m_TimeZone;
  if (o.ratTypeIsSet())
    j["ratType"] = o.m_RatType;
}

void from_json(const nlohmann::json &j, AmfLocationData &o) {
  j.at("amfAddress").get_to(o.m_AmfAddress);
  j.at("plmnId").get_to(o.m_PlmnId);
  if (j.find("amfLocation") != j.end()) {
    j.at("amfLocation").get_to(o.m_AmfLocation);
    o.m_AmfLocationIsSet = true;
  }
  if (j.find("SmsfAddress") != j.end()) {
    j.at("SmsfAddress").get_to(o.m_SmsfAddress);
    o.m_SmsfAddressIsSet = true;
  }
  if (j.find("timeZone") != j.end()) {
    j.at("timeZone").get_to(o.m_TimeZone);
    o.m_TimeZoneIsSet = true;
  }
  if (j.find("ratType") != j.end()) {
    j.at("ratType").get_to(o.m_RatType);
    o.m_RatTypeIsSet = true;
  }
}

std::string AmfLocationData::getAmfAddress() const { return m_AmfAddress; }
void AmfLocationData::setAmfAddress(std::string const &value) {
  m_AmfAddress = value;
}
PlmnId AmfLocationData::getPlmnId() const { return m_PlmnId; }
void AmfLocationData::setPlmnId(PlmnId const &value) { m_PlmnId = value; }
NrLocation AmfLocationData::getAmfLocation() const { return m_AmfLocation; }
void AmfLocationData::setAmfLocation(NrLocation const &value) {
  m_AmfLocation = value;
  m_AmfLocationIsSet = true;
}
bool AmfLocationData::amfLocationIsSet() const { return m_AmfLocationIsSet; }
void AmfLocationData::unsetAmfLocation() { m_AmfLocationIsSet = false; }
std::string AmfLocationData::getSmsfAddress() const { return m_SmsfAddress; }
void AmfLocationData::setSmsfAddress(std::string const &value) {
  m_SmsfAddress = value;
  m_SmsfAddressIsSet = true;
}
bool AmfLocationData::smsfAddressIsSet() const { return m_SmsfAddressIsSet; }
void AmfLocationData::unsetSmsfAddress() { m_SmsfAddressIsSet = false; }
std::string AmfLocationData::getTimeZone() const { return m_TimeZone; }
void AmfLocationData::setTimeZone(std::string const &value) {
  m_TimeZone = value;
  m_TimeZoneIsSet = true;
}
bool AmfLocationData::timeZoneIsSet() const { return m_TimeZoneIsSet; }
void AmfLocationData::unsetTimeZone() { m_TimeZoneIsSet = false; }
RatType AmfLocationData::getRatType() const { return m_RatType; }
void AmfLocationData::setRatType(RatType const &value) {
  m_RatType = value;
  m_RatTypeIsSet = true;
}
bool AmfLocationData::ratTypeIsSet() const { return m_RatTypeIsSet; }
void AmfLocationData::unsetRatType() { m_RatTypeIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
