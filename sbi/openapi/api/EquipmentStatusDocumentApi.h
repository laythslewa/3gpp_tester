/**
 * 5G-EIR Equipment Identity Check
 * 5G-EIR Equipment Identity Check Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EquipmentStatusDocumentApi.h
 *
 *
 */

#ifndef EquipmentStatusDocumentApi_H_
#define EquipmentStatusDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "EirResponseData.h"
#include "ProblemDetails.h"
#include "RedirectResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class EquipmentStatusDocumentApi {
public:
  EquipmentStatusDocumentApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~EquipmentStatusDocumentApi() {}
  void init();

  const std::string base = "/n5g-eir-eic/v1";

private:
  void setupRoutes();

  void get_equipment_status_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);
  void equipment_status_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Retrieves the status of the UE
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="pei">PEI of the UE</param>
  /// <param name="supi">SUPI of the UE (optional, default to
  /// &quot;&quot;)</param> <param name="gpsi">GPSI of the UE (optional, default
  /// to &quot;&quot;)</param> <param name="supportedFeatures">supported
  /// features of the NF consumer (optional, default to &quot;&quot;)</param>
  virtual void
  get_equipment_status(const Pistache::Optional<std::string> &pei,
                       const Pistache::Optional<std::string> &supi,
                       const Pistache::Optional<std::string> &gpsi,
                       const Pistache::Optional<std::string> &supportedFeatures,
                       Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* EquipmentStatusDocumentApi_H_ */
