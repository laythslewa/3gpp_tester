/**
 * Nhss_EE
 * HSS Event Exposure © 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EeSubscription.h
 *
 * It represents the request body of the subscription request sent to HSS,
 * containing data related to the subscription to be created, such as the SCEF,
 * Monitoring Configurations and reporting options
 */

#ifndef EeSubscription_H_
#define EeSubscription_H_

#include "MonitoringConfiguration.h"
#include "ReportingOptions.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// It represents the request body of the subscription request sent to HSS,
/// containing data related to the subscription to be created, such as the SCEF,
/// Monitoring Configurations and reporting options
/// </summary>
class EeSubscription {
public:
  EeSubscription();
  virtual ~EeSubscription();

  void validate();

  /////////////////////////////////////////////
  /// EeSubscription members

  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getCallbackReference() const;
  void setCallbackReference(std::string const &value);
  /// <summary>
  /// string containing an FQDN or realm as defined in RFC 6733.
  /// </summary>
  std::string getScefId() const;
  void setScefId(std::string const &value);
  bool scefIdIsSet() const;
  void unsetScefId();
  /// <summary>
  /// string containing an FQDN or realm as defined in RFC 6733.
  /// </summary>
  std::string getScefDiamRealm() const;
  void setScefDiamRealm(std::string const &value);
  bool scefDiamRealmIsSet() const;
  void unsetScefDiamRealm();
  /// <summary>
  /// A map (list of key-value pairs where ReferenceId serves as key) of
  /// MonitoringConfigurations
  /// </summary>
  std::map<std::string, MonitoringConfiguration> &getMonitoringConfigurations();
  void setMonitoringConfigurations(
      std::map<std::string, MonitoringConfiguration> const &value);
  bool monitoringConfigurationsIsSet() const;
  void unsetMonitoringConfigurations();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  ReportingOptions getReportingOptions() const;
  void setReportingOptions(ReportingOptions const &value);
  bool reportingOptionsIsSet() const;
  void unsetReportingOptions();
  /// <summary>
  /// String uniquely identifying MTC provider information.
  /// </summary>
  std::string getMtcProviderInformation() const;
  void setMtcProviderInformation(std::string const &value);
  bool mtcProviderInformationIsSet() const;
  void unsetMtcProviderInformation();
  /// <summary>
  ///
  /// </summary>
  std::string getExternalIdentifier() const;
  void setExternalIdentifier(std::string const &value);
  bool externalIdentifierIsSet() const;
  void unsetExternalIdentifier();

  friend void to_json(nlohmann::json &j, const EeSubscription &o);
  friend void from_json(const nlohmann::json &j, EeSubscription &o);

protected:
  std::string m_CallbackReference;

  std::string m_ScefId;
  bool m_ScefIdIsSet;
  std::string m_ScefDiamRealm;
  bool m_ScefDiamRealmIsSet;
  std::map<std::string, MonitoringConfiguration> m_MonitoringConfigurations;
  bool m_MonitoringConfigurationsIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  ReportingOptions m_ReportingOptions;
  bool m_ReportingOptionsIsSet;
  std::string m_MtcProviderInformation;
  bool m_MtcProviderInformationIsSet;
  std::string m_ExternalIdentifier;
  bool m_ExternalIdentifierIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* EeSubscription_H_ */
