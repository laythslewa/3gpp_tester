/**
 * 3gpp-racs-parameter-provisioning
 * API for provisioning UE radio capability parameters. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RacsProvisioningData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RacsProvisioningData::RacsProvisioningData() {
  m_Self = "";
  m_SelfIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_RacsReportsIsSet = false;
}

RacsProvisioningData::~RacsProvisioningData() {}

void RacsProvisioningData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const RacsProvisioningData &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  j["racsConfigs"] = o.m_RacsConfigs;
  if (o.racsReportsIsSet() || !o.m_RacsReports.empty())
    j["racsReports"] = o.m_RacsReports;
}

void from_json(const nlohmann::json &j, RacsProvisioningData &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  j.at("racsConfigs").get_to(o.m_RacsConfigs);
  if (j.find("racsReports") != j.end()) {
    j.at("racsReports").get_to(o.m_RacsReports);
    o.m_RacsReportsIsSet = true;
  }
}

std::string RacsProvisioningData::getSelf() const { return m_Self; }
void RacsProvisioningData::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool RacsProvisioningData::selfIsSet() const { return m_SelfIsSet; }
void RacsProvisioningData::unsetSelf() { m_SelfIsSet = false; }
std::string RacsProvisioningData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void RacsProvisioningData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool RacsProvisioningData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void RacsProvisioningData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::map<std::string, RacsConfiguration> &
RacsProvisioningData::getRacsConfigs() {
  return m_RacsConfigs;
}
void RacsProvisioningData::setRacsConfigs(
    std::map<std::string, RacsConfiguration> const &value) {
  m_RacsConfigs = value;
}
std::map<std::string, RacsFailureReport> &
RacsProvisioningData::getRacsReports() {
  return m_RacsReports;
}
void RacsProvisioningData::setRacsReports(
    std::map<std::string, RacsFailureReport> const &value) {
  m_RacsReports = value;
  m_RacsReportsIsSet = true;
}
bool RacsProvisioningData::racsReportsIsSet() const {
  return m_RacsReportsIsSet;
}
void RacsProvisioningData::unsetRacsReports() { m_RacsReportsIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
