/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AdditionalMeasurement.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AdditionalMeasurement::AdditionalMeasurement() {
  m_UnexpLocIsSet = false;
  m_UnexpFlowTepsIsSet = false;
  m_UnexpWakesIsSet = false;
  m_DdosAttackIsSet = false;
  m_WrgDestIsSet = false;
  m_CircumsIsSet = false;
}

AdditionalMeasurement::~AdditionalMeasurement() {}

void AdditionalMeasurement::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AdditionalMeasurement &o) {
  j = nlohmann::json();
  if (o.unexpLocIsSet())
    j["unexpLoc"] = o.m_UnexpLoc;
  if (o.unexpFlowTepsIsSet() || !o.m_UnexpFlowTeps.empty())
    j["unexpFlowTeps"] = o.m_UnexpFlowTeps;
  if (o.unexpWakesIsSet() || !o.m_UnexpWakes.empty())
    j["unexpWakes"] = o.m_UnexpWakes;
  if (o.ddosAttackIsSet())
    j["ddosAttack"] = o.m_DdosAttack;
  if (o.wrgDestIsSet())
    j["wrgDest"] = o.m_WrgDest;
  if (o.circumsIsSet() || !o.m_Circums.empty())
    j["circums"] = o.m_Circums;
}

void from_json(const nlohmann::json &j, AdditionalMeasurement &o) {
  if (j.find("unexpLoc") != j.end()) {
    j.at("unexpLoc").get_to(o.m_UnexpLoc);
    o.m_UnexpLocIsSet = true;
  }
  if (j.find("unexpFlowTeps") != j.end()) {
    j.at("unexpFlowTeps").get_to(o.m_UnexpFlowTeps);
    o.m_UnexpFlowTepsIsSet = true;
  }
  if (j.find("unexpWakes") != j.end()) {
    j.at("unexpWakes").get_to(o.m_UnexpWakes);
    o.m_UnexpWakesIsSet = true;
  }
  if (j.find("ddosAttack") != j.end()) {
    j.at("ddosAttack").get_to(o.m_DdosAttack);
    o.m_DdosAttackIsSet = true;
  }
  if (j.find("wrgDest") != j.end()) {
    j.at("wrgDest").get_to(o.m_WrgDest);
    o.m_WrgDestIsSet = true;
  }
  if (j.find("circums") != j.end()) {
    j.at("circums").get_to(o.m_Circums);
    o.m_CircumsIsSet = true;
  }
}

NetworkAreaInfo AdditionalMeasurement::getUnexpLoc() const {
  return m_UnexpLoc;
}
void AdditionalMeasurement::setUnexpLoc(NetworkAreaInfo const &value) {
  m_UnexpLoc = value;
  m_UnexpLocIsSet = true;
}
bool AdditionalMeasurement::unexpLocIsSet() const { return m_UnexpLocIsSet; }
void AdditionalMeasurement::unsetUnexpLoc() { m_UnexpLocIsSet = false; }
std::vector<IpEthFlowDescription> &AdditionalMeasurement::getUnexpFlowTeps() {
  return m_UnexpFlowTeps;
}
void AdditionalMeasurement::setUnexpFlowTeps(
    std::vector<IpEthFlowDescription> const &value) {
  m_UnexpFlowTeps = value;
  m_UnexpFlowTepsIsSet = true;
}
bool AdditionalMeasurement::unexpFlowTepsIsSet() const {
  return m_UnexpFlowTepsIsSet;
}
void AdditionalMeasurement::unsetUnexpFlowTeps() {
  m_UnexpFlowTepsIsSet = false;
}
std::vector<std::string> &AdditionalMeasurement::getUnexpWakes() {
  return m_UnexpWakes;
}
void AdditionalMeasurement::setUnexpWakes(
    std::vector<std::string> const &value) {
  m_UnexpWakes = value;
  m_UnexpWakesIsSet = true;
}
bool AdditionalMeasurement::unexpWakesIsSet() const {
  return m_UnexpWakesIsSet;
}
void AdditionalMeasurement::unsetUnexpWakes() { m_UnexpWakesIsSet = false; }
AddressList AdditionalMeasurement::getDdosAttack() const {
  return m_DdosAttack;
}
void AdditionalMeasurement::setDdosAttack(AddressList const &value) {
  m_DdosAttack = value;
  m_DdosAttackIsSet = true;
}
bool AdditionalMeasurement::ddosAttackIsSet() const {
  return m_DdosAttackIsSet;
}
void AdditionalMeasurement::unsetDdosAttack() { m_DdosAttackIsSet = false; }
AddressList AdditionalMeasurement::getWrgDest() const { return m_WrgDest; }
void AdditionalMeasurement::setWrgDest(AddressList const &value) {
  m_WrgDest = value;
  m_WrgDestIsSet = true;
}
bool AdditionalMeasurement::wrgDestIsSet() const { return m_WrgDestIsSet; }
void AdditionalMeasurement::unsetWrgDest() { m_WrgDestIsSet = false; }
std::vector<CircumstanceDescription> &AdditionalMeasurement::getCircums() {
  return m_Circums;
}
void AdditionalMeasurement::setCircums(
    std::vector<CircumstanceDescription> const &value) {
  m_Circums = value;
  m_CircumsIsSet = true;
}
bool AdditionalMeasurement::circumsIsSet() const { return m_CircumsIsSet; }
void AdditionalMeasurement::unsetCircums() { m_CircumsIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
