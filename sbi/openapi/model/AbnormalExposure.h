/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AbnormalExposure.h
 *
 * Represents a user’s abnormal behavior information.
 */

#ifndef AbnormalExposure_H_
#define AbnormalExposure_H_

#include "AdditionalMeasurement.h"
#include "Exception.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a user’s abnormal behavior information.
/// </summary>
class AbnormalExposure {
public:
  AbnormalExposure();
  virtual ~AbnormalExposure();

  void validate();

  /////////////////////////////////////////////
  /// AbnormalExposure members

  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getGpsis();
  void setGpsis(std::vector<std::string> const &value);
  bool gpsisIsSet() const;
  void unsetGpsis();
  /// <summary>
  /// String providing an application identifier.
  /// </summary>
  std::string getAppId() const;
  void setAppId(std::string const &value);
  bool appIdIsSet() const;
  void unsetAppId();
  /// <summary>
  ///
  /// </summary>
  Exception getExcep() const;
  void setExcep(Exception const &value);
  /// <summary>
  /// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP
  /// TS 23.502), expressed in percent.
  /// </summary>
  int32_t getRatio() const;
  void setRatio(int32_t const value);
  bool ratioIsSet() const;
  void unsetRatio();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getConfidence() const;
  void setConfidence(int32_t const value);
  bool confidenceIsSet() const;
  void unsetConfidence();
  /// <summary>
  ///
  /// </summary>
  AdditionalMeasurement getAddtMeasInfo() const;
  void setAddtMeasInfo(AdditionalMeasurement const &value);
  bool addtMeasInfoIsSet() const;
  void unsetAddtMeasInfo();

  friend void to_json(nlohmann::json &j, const AbnormalExposure &o);
  friend void from_json(const nlohmann::json &j, AbnormalExposure &o);

protected:
  std::vector<std::string> m_Gpsis;
  bool m_GpsisIsSet;
  std::string m_AppId;
  bool m_AppIdIsSet;
  Exception m_Excep;

  int32_t m_Ratio;
  bool m_RatioIsSet;
  int32_t m_Confidence;
  bool m_ConfidenceIsSet;
  AdditionalMeasurement m_AddtMeasInfo;
  bool m_AddtMeasInfoIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AbnormalExposure_H_ */
