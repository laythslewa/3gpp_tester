/**
 * Unified Data Repository Service API file for Application Data
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualApplicationDataSubscriptionDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

IndividualApplicationDataSubscriptionDocumentApi::
    IndividualApplicationDataSubscriptionDocumentApi(
        std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void IndividualApplicationDataSubscriptionDocumentApi::init() { setupRoutes(); }

void IndividualApplicationDataSubscriptionDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Delete(
      *router, base + "/application-data/subs-to-notify/:subsId",
      Routes::bind(&IndividualApplicationDataSubscriptionDocumentApi::
                       delete_individual_application_data_subscription_handler,
                   this));
  Routes::Get(
      *router, base + "/application-data/subs-to-notify/:subsId",
      Routes::bind(&IndividualApplicationDataSubscriptionDocumentApi::
                       read_individual_application_data_subscription_handler,
                   this));
  Routes::Put(
      *router, base + "/application-data/subs-to-notify/:subsId",
      Routes::bind(&IndividualApplicationDataSubscriptionDocumentApi::
                       replace_individual_application_data_subscription_handler,
                   this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &IndividualApplicationDataSubscriptionDocumentApi::
          individual_application_data_subscription_document_api_default_handler,
      this));
}

void IndividualApplicationDataSubscriptionDocumentApi::
    delete_individual_application_data_subscription_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto subsId = request.param(":subsId").as<std::string>();

  try {
    this->delete_individual_application_data_subscription(subsId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualApplicationDataSubscriptionDocumentApi::
    read_individual_application_data_subscription_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto subsId = request.param(":subsId").as<std::string>();

  try {
    this->read_individual_application_data_subscription(subsId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualApplicationDataSubscriptionDocumentApi::
    replace_individual_application_data_subscription_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto subsId = request.param(":subsId").as<std::string>();

  // Getting the body param

  ApplicationDataSubs applicationDataSubs;

  try {
    nlohmann::json::parse(request.body()).get_to(applicationDataSubs);
    this->replace_individual_application_data_subscription(
        subsId, applicationDataSubs, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void IndividualApplicationDataSubscriptionDocumentApi::
    individual_application_data_subscription_document_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
