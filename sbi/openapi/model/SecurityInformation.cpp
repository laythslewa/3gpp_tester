/**
 * CAPIF_Security_API
 * API for CAPIF security management. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SecurityInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SecurityInformation::SecurityInformation() {
  m_InterfaceDetailsIsSet = false;
  m_AefId = "";
  m_AefIdIsSet = false;
  m_SelSecurityMethodIsSet = false;
  m_AuthenticationInfo = "";
  m_AuthenticationInfoIsSet = false;
  m_AuthorizationInfo = "";
  m_AuthorizationInfoIsSet = false;
}

SecurityInformation::~SecurityInformation() {}

void SecurityInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SecurityInformation &o) {
  j = nlohmann::json();
  if (o.interfaceDetailsIsSet())
    j["interfaceDetails"] = o.m_InterfaceDetails;
  if (o.aefIdIsSet())
    j["aefId"] = o.m_AefId;
  j["prefSecurityMethods"] = o.m_PrefSecurityMethods;
  if (o.selSecurityMethodIsSet())
    j["selSecurityMethod"] = o.m_SelSecurityMethod;
  if (o.authenticationInfoIsSet())
    j["authenticationInfo"] = o.m_AuthenticationInfo;
  if (o.authorizationInfoIsSet())
    j["authorizationInfo"] = o.m_AuthorizationInfo;
}

void from_json(const nlohmann::json &j, SecurityInformation &o) {
  if (j.find("interfaceDetails") != j.end()) {
    j.at("interfaceDetails").get_to(o.m_InterfaceDetails);
    o.m_InterfaceDetailsIsSet = true;
  }
  if (j.find("aefId") != j.end()) {
    j.at("aefId").get_to(o.m_AefId);
    o.m_AefIdIsSet = true;
  }
  j.at("prefSecurityMethods").get_to(o.m_PrefSecurityMethods);
  if (j.find("selSecurityMethod") != j.end()) {
    j.at("selSecurityMethod").get_to(o.m_SelSecurityMethod);
    o.m_SelSecurityMethodIsSet = true;
  }
  if (j.find("authenticationInfo") != j.end()) {
    j.at("authenticationInfo").get_to(o.m_AuthenticationInfo);
    o.m_AuthenticationInfoIsSet = true;
  }
  if (j.find("authorizationInfo") != j.end()) {
    j.at("authorizationInfo").get_to(o.m_AuthorizationInfo);
    o.m_AuthorizationInfoIsSet = true;
  }
}

InterfaceDescription SecurityInformation::getInterfaceDetails() const {
  return m_InterfaceDetails;
}
void SecurityInformation::setInterfaceDetails(
    InterfaceDescription const &value) {
  m_InterfaceDetails = value;
  m_InterfaceDetailsIsSet = true;
}
bool SecurityInformation::interfaceDetailsIsSet() const {
  return m_InterfaceDetailsIsSet;
}
void SecurityInformation::unsetInterfaceDetails() {
  m_InterfaceDetailsIsSet = false;
}
std::string SecurityInformation::getAefId() const { return m_AefId; }
void SecurityInformation::setAefId(std::string const &value) {
  m_AefId = value;
  m_AefIdIsSet = true;
}
bool SecurityInformation::aefIdIsSet() const { return m_AefIdIsSet; }
void SecurityInformation::unsetAefId() { m_AefIdIsSet = false; }
std::vector<SecurityMethod> &SecurityInformation::getPrefSecurityMethods() {
  return m_PrefSecurityMethods;
}
void SecurityInformation::setPrefSecurityMethods(
    std::vector<SecurityMethod> const &value) {
  m_PrefSecurityMethods = value;
}
SecurityMethod SecurityInformation::getSelSecurityMethod() const {
  return m_SelSecurityMethod;
}
void SecurityInformation::setSelSecurityMethod(SecurityMethod const &value) {
  m_SelSecurityMethod = value;
  m_SelSecurityMethodIsSet = true;
}
bool SecurityInformation::selSecurityMethodIsSet() const {
  return m_SelSecurityMethodIsSet;
}
void SecurityInformation::unsetSelSecurityMethod() {
  m_SelSecurityMethodIsSet = false;
}
std::string SecurityInformation::getAuthenticationInfo() const {
  return m_AuthenticationInfo;
}
void SecurityInformation::setAuthenticationInfo(std::string const &value) {
  m_AuthenticationInfo = value;
  m_AuthenticationInfoIsSet = true;
}
bool SecurityInformation::authenticationInfoIsSet() const {
  return m_AuthenticationInfoIsSet;
}
void SecurityInformation::unsetAuthenticationInfo() {
  m_AuthenticationInfoIsSet = false;
}
std::string SecurityInformation::getAuthorizationInfo() const {
  return m_AuthorizationInfo;
}
void SecurityInformation::setAuthorizationInfo(std::string const &value) {
  m_AuthorizationInfo = value;
  m_AuthorizationInfoIsSet = true;
}
bool SecurityInformation::authorizationInfoIsSet() const {
  return m_AuthorizationInfoIsSet;
}
void SecurityInformation::unsetAuthorizationInfo() {
  m_AuthorizationInfoIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
