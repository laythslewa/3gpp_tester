/**
 * SS_NetworkResourceAdaptation
 * SS Network Resource Adaptation Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MulticastSubscription.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

MulticastSubscription::MulticastSubscription() {
  m_ValGroupId = "";
  m_MultiQosReq = "";
  m_LocAreaIsSet = false;
  m_Duration = "";
  m_DurationIsSet = false;
  m_Tmgi = 0;
  m_TmgiIsSet = false;
  m_NotifUri = "";
  m_ReqTestNotif = false;
  m_ReqTestNotifIsSet = false;
  m_WsNotifCfgIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
  m_UpIpv4Addr = "";
  m_UpIpv4AddrIsSet = false;
  m_UpIpv6AddrIsSet = false;
  m_UpPortNum = 0;
  m_UpPortNumIsSet = false;
  m_RadioFreqsIsSet = false;
}

MulticastSubscription::~MulticastSubscription() {}

void MulticastSubscription::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const MulticastSubscription &o) {
  j = nlohmann::json();
  j["valGroupId"] = o.m_ValGroupId;
  j["anncMode"] = o.m_AnncMode;
  j["multiQosReq"] = o.m_MultiQosReq;
  if (o.locAreaIsSet())
    j["locArea"] = o.m_LocArea;
  if (o.durationIsSet())
    j["duration"] = o.m_Duration;
  if (o.tmgiIsSet())
    j["tmgi"] = o.m_Tmgi;
  j["notifUri"] = o.m_NotifUri;
  if (o.reqTestNotifIsSet())
    j["reqTestNotif"] = o.m_ReqTestNotif;
  if (o.wsNotifCfgIsSet())
    j["wsNotifCfg"] = o.m_WsNotifCfg;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
  if (o.upIpv4AddrIsSet())
    j["upIpv4Addr"] = o.m_UpIpv4Addr;
  if (o.upIpv6AddrIsSet())
    j["upIpv6Addr"] = o.m_UpIpv6Addr;
  if (o.upPortNumIsSet())
    j["upPortNum"] = o.m_UpPortNum;
  if (o.radioFreqsIsSet() || !o.m_RadioFreqs.empty())
    j["radioFreqs"] = o.m_RadioFreqs;
}

void from_json(const nlohmann::json &j, MulticastSubscription &o) {
  j.at("valGroupId").get_to(o.m_ValGroupId);
  j.at("anncMode").get_to(o.m_AnncMode);
  j.at("multiQosReq").get_to(o.m_MultiQosReq);
  if (j.find("locArea") != j.end()) {
    j.at("locArea").get_to(o.m_LocArea);
    o.m_LocAreaIsSet = true;
  }
  if (j.find("duration") != j.end()) {
    j.at("duration").get_to(o.m_Duration);
    o.m_DurationIsSet = true;
  }
  if (j.find("tmgi") != j.end()) {
    j.at("tmgi").get_to(o.m_Tmgi);
    o.m_TmgiIsSet = true;
  }
  j.at("notifUri").get_to(o.m_NotifUri);
  if (j.find("reqTestNotif") != j.end()) {
    j.at("reqTestNotif").get_to(o.m_ReqTestNotif);
    o.m_ReqTestNotifIsSet = true;
  }
  if (j.find("wsNotifCfg") != j.end()) {
    j.at("wsNotifCfg").get_to(o.m_WsNotifCfg);
    o.m_WsNotifCfgIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
  if (j.find("upIpv4Addr") != j.end()) {
    j.at("upIpv4Addr").get_to(o.m_UpIpv4Addr);
    o.m_UpIpv4AddrIsSet = true;
  }
  if (j.find("upIpv6Addr") != j.end()) {
    j.at("upIpv6Addr").get_to(o.m_UpIpv6Addr);
    o.m_UpIpv6AddrIsSet = true;
  }
  if (j.find("upPortNum") != j.end()) {
    j.at("upPortNum").get_to(o.m_UpPortNum);
    o.m_UpPortNumIsSet = true;
  }
  if (j.find("radioFreqs") != j.end()) {
    j.at("radioFreqs").get_to(o.m_RadioFreqs);
    o.m_RadioFreqsIsSet = true;
  }
}

std::string MulticastSubscription::getValGroupId() const {
  return m_ValGroupId;
}
void MulticastSubscription::setValGroupId(std::string const &value) {
  m_ValGroupId = value;
}
ServiceAnnoucementMode MulticastSubscription::getAnncMode() const {
  return m_AnncMode;
}
void MulticastSubscription::setAnncMode(ServiceAnnoucementMode const &value) {
  m_AnncMode = value;
}
std::string MulticastSubscription::getMultiQosReq() const {
  return m_MultiQosReq;
}
void MulticastSubscription::setMultiQosReq(std::string const &value) {
  m_MultiQosReq = value;
}
MbmsLocArea MulticastSubscription::getLocArea() const { return m_LocArea; }
void MulticastSubscription::setLocArea(MbmsLocArea const &value) {
  m_LocArea = value;
  m_LocAreaIsSet = true;
}
bool MulticastSubscription::locAreaIsSet() const { return m_LocAreaIsSet; }
void MulticastSubscription::unsetLocArea() { m_LocAreaIsSet = false; }
std::string MulticastSubscription::getDuration() const { return m_Duration; }
void MulticastSubscription::setDuration(std::string const &value) {
  m_Duration = value;
  m_DurationIsSet = true;
}
bool MulticastSubscription::durationIsSet() const { return m_DurationIsSet; }
void MulticastSubscription::unsetDuration() { m_DurationIsSet = false; }
int32_t MulticastSubscription::getTmgi() const { return m_Tmgi; }
void MulticastSubscription::setTmgi(int32_t const value) {
  m_Tmgi = value;
  m_TmgiIsSet = true;
}
bool MulticastSubscription::tmgiIsSet() const { return m_TmgiIsSet; }
void MulticastSubscription::unsetTmgi() { m_TmgiIsSet = false; }
std::string MulticastSubscription::getNotifUri() const { return m_NotifUri; }
void MulticastSubscription::setNotifUri(std::string const &value) {
  m_NotifUri = value;
}
bool MulticastSubscription::isReqTestNotif() const { return m_ReqTestNotif; }
void MulticastSubscription::setReqTestNotif(bool const value) {
  m_ReqTestNotif = value;
  m_ReqTestNotifIsSet = true;
}
bool MulticastSubscription::reqTestNotifIsSet() const {
  return m_ReqTestNotifIsSet;
}
void MulticastSubscription::unsetReqTestNotif() { m_ReqTestNotifIsSet = false; }
WebsockNotifConfig MulticastSubscription::getWsNotifCfg() const {
  return m_WsNotifCfg;
}
void MulticastSubscription::setWsNotifCfg(WebsockNotifConfig const &value) {
  m_WsNotifCfg = value;
  m_WsNotifCfgIsSet = true;
}
bool MulticastSubscription::wsNotifCfgIsSet() const {
  return m_WsNotifCfgIsSet;
}
void MulticastSubscription::unsetWsNotifCfg() { m_WsNotifCfgIsSet = false; }
std::string MulticastSubscription::getSuppFeat() const { return m_SuppFeat; }
void MulticastSubscription::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool MulticastSubscription::suppFeatIsSet() const { return m_SuppFeatIsSet; }
void MulticastSubscription::unsetSuppFeat() { m_SuppFeatIsSet = false; }
std::string MulticastSubscription::getUpIpv4Addr() const {
  return m_UpIpv4Addr;
}
void MulticastSubscription::setUpIpv4Addr(std::string const &value) {
  m_UpIpv4Addr = value;
  m_UpIpv4AddrIsSet = true;
}
bool MulticastSubscription::upIpv4AddrIsSet() const {
  return m_UpIpv4AddrIsSet;
}
void MulticastSubscription::unsetUpIpv4Addr() { m_UpIpv4AddrIsSet = false; }
Ipv6Addr MulticastSubscription::getUpIpv6Addr() const { return m_UpIpv6Addr; }
void MulticastSubscription::setUpIpv6Addr(Ipv6Addr const &value) {
  m_UpIpv6Addr = value;
  m_UpIpv6AddrIsSet = true;
}
bool MulticastSubscription::upIpv6AddrIsSet() const {
  return m_UpIpv6AddrIsSet;
}
void MulticastSubscription::unsetUpIpv6Addr() { m_UpIpv6AddrIsSet = false; }
int32_t MulticastSubscription::getUpPortNum() const { return m_UpPortNum; }
void MulticastSubscription::setUpPortNum(int32_t const value) {
  m_UpPortNum = value;
  m_UpPortNumIsSet = true;
}
bool MulticastSubscription::upPortNumIsSet() const { return m_UpPortNumIsSet; }
void MulticastSubscription::unsetUpPortNum() { m_UpPortNumIsSet = false; }
std::vector<int32_t> &MulticastSubscription::getRadioFreqs() {
  return m_RadioFreqs;
}
void MulticastSubscription::setRadioFreqs(std::vector<int32_t> const value) {
  m_RadioFreqs = value;
  m_RadioFreqsIsSet = true;
}
bool MulticastSubscription::radioFreqsIsSet() const {
  return m_RadioFreqsIsSet;
}
void MulticastSubscription::unsetRadioFreqs() { m_RadioFreqsIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
