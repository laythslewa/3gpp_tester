/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ContextDataSets.h
 *
 * Contains the context data sets.
 */

#ifndef ContextDataSets_H_
#define ContextDataSets_H_

#include "Amf3GppAccessRegistration.h"
#include "AmfNon3GppAccessRegistration.h"
#include "EeSubscription.h"
#include "IpSmGwRegistration.h"
#include "SdmSubscription.h"
#include "SmfRegistration.h"
#include "SmsfRegistration.h"
#include "SubscriptionDataSubscriptions.h"
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the context data sets.
/// </summary>
class ContextDataSets {
public:
  ContextDataSets();
  virtual ~ContextDataSets();

  void validate();

  /////////////////////////////////////////////
  /// ContextDataSets members

  /// <summary>
  ///
  /// </summary>
  Amf3GppAccessRegistration getAmf3Gpp() const;
  void setAmf3Gpp(Amf3GppAccessRegistration const &value);
  bool amf3GppIsSet() const;
  void unsetAmf3Gpp();
  /// <summary>
  ///
  /// </summary>
  AmfNon3GppAccessRegistration getAmfNon3Gpp() const;
  void setAmfNon3Gpp(AmfNon3GppAccessRegistration const &value);
  bool amfNon3GppIsSet() const;
  void unsetAmfNon3Gpp();
  /// <summary>
  ///
  /// </summary>
  std::vector<SdmSubscription> &getSdmSubscriptions();
  void setSdmSubscriptions(std::vector<SdmSubscription> const &value);
  bool sdmSubscriptionsIsSet() const;
  void unsetSdmSubscriptions();
  /// <summary>
  ///
  /// </summary>
  std::vector<EeSubscription> &getEeSubscriptions();
  void setEeSubscriptions(std::vector<EeSubscription> const &value);
  bool eeSubscriptionsIsSet() const;
  void unsetEeSubscriptions();
  /// <summary>
  ///
  /// </summary>
  SmsfRegistration getSmsf3GppAccess() const;
  void setSmsf3GppAccess(SmsfRegistration const &value);
  bool smsf3GppAccessIsSet() const;
  void unsetSmsf3GppAccess();
  /// <summary>
  ///
  /// </summary>
  SmsfRegistration getSmsfNon3GppAccess() const;
  void setSmsfNon3GppAccess(SmsfRegistration const &value);
  bool smsfNon3GppAccessIsSet() const;
  void unsetSmsfNon3GppAccess();
  /// <summary>
  ///
  /// </summary>
  std::vector<SubscriptionDataSubscriptions> &
  getSubscriptionDataSubscriptions();
  void setSubscriptionDataSubscriptions(
      std::vector<SubscriptionDataSubscriptions> const &value);
  bool subscriptionDataSubscriptionsIsSet() const;
  void unsetSubscriptionDataSubscriptions();
  /// <summary>
  /// The list of all the SMF registrations of a UE.
  /// </summary>
  std::vector<SmfRegistration> &getSmfRegistrations();
  void setSmfRegistrations(std::vector<SmfRegistration> const &value);
  bool smfRegistrationsIsSet() const;
  void unsetSmfRegistrations();
  /// <summary>
  ///
  /// </summary>
  IpSmGwRegistration getIpSmGw() const;
  void setIpSmGw(IpSmGwRegistration const &value);
  bool ipSmGwIsSet() const;
  void unsetIpSmGw();

  friend void to_json(nlohmann::json &j, const ContextDataSets &o);
  friend void from_json(const nlohmann::json &j, ContextDataSets &o);

protected:
  Amf3GppAccessRegistration m_Amf3Gpp;
  bool m_Amf3GppIsSet;
  AmfNon3GppAccessRegistration m_AmfNon3Gpp;
  bool m_AmfNon3GppIsSet;
  std::vector<SdmSubscription> m_SdmSubscriptions;
  bool m_SdmSubscriptionsIsSet;
  std::vector<EeSubscription> m_EeSubscriptions;
  bool m_EeSubscriptionsIsSet;
  SmsfRegistration m_Smsf3GppAccess;
  bool m_Smsf3GppAccessIsSet;
  SmsfRegistration m_SmsfNon3GppAccess;
  bool m_SmsfNon3GppAccessIsSet;
  std::vector<SubscriptionDataSubscriptions> m_SubscriptionDataSubscriptions;
  bool m_SubscriptionDataSubscriptionsIsSet;
  std::vector<SmfRegistration> m_SmfRegistrations;
  bool m_SmfRegistrationsIsSet;
  IpSmGwRegistration m_IpSmGw;
  bool m_IpSmGwIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ContextDataSets_H_ */
