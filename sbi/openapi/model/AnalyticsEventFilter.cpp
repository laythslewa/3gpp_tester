/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AnalyticsEventFilter.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AnalyticsEventFilter::AnalyticsEventFilter() {
  m_LocAreaIsSet = false;
  m_Dnn = "";
  m_DnnIsSet = false;
  m_NwPerfTypesIsSet = false;
  m_AppIdsIsSet = false;
  m_ExcepIdsIsSet = false;
  m_ExptAnaTypeIsSet = false;
  m_ExptUeBehavIsSet = false;
  m_SnssaiIsSet = false;
  m_QosReqIsSet = false;
}

AnalyticsEventFilter::~AnalyticsEventFilter() {}

void AnalyticsEventFilter::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AnalyticsEventFilter &o) {
  j = nlohmann::json();
  if (o.locAreaIsSet())
    j["locArea"] = o.m_LocArea;
  if (o.dnnIsSet())
    j["dnn"] = o.m_Dnn;
  if (o.nwPerfTypesIsSet() || !o.m_NwPerfTypes.empty())
    j["nwPerfTypes"] = o.m_NwPerfTypes;
  if (o.appIdsIsSet() || !o.m_AppIds.empty())
    j["appIds"] = o.m_AppIds;
  if (o.excepIdsIsSet() || !o.m_ExcepIds.empty())
    j["excepIds"] = o.m_ExcepIds;
  if (o.exptAnaTypeIsSet())
    j["exptAnaType"] = o.m_ExptAnaType;
  if (o.exptUeBehavIsSet())
    j["exptUeBehav"] = o.m_ExptUeBehav;
  if (o.snssaiIsSet())
    j["snssai"] = o.m_Snssai;
  if (o.qosReqIsSet())
    j["qosReq"] = o.m_QosReq;
}

void from_json(const nlohmann::json &j, AnalyticsEventFilter &o) {
  if (j.find("locArea") != j.end()) {
    j.at("locArea").get_to(o.m_LocArea);
    o.m_LocAreaIsSet = true;
  }
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
  if (j.find("nwPerfTypes") != j.end()) {
    j.at("nwPerfTypes").get_to(o.m_NwPerfTypes);
    o.m_NwPerfTypesIsSet = true;
  }
  if (j.find("appIds") != j.end()) {
    j.at("appIds").get_to(o.m_AppIds);
    o.m_AppIdsIsSet = true;
  }
  if (j.find("excepIds") != j.end()) {
    j.at("excepIds").get_to(o.m_ExcepIds);
    o.m_ExcepIdsIsSet = true;
  }
  if (j.find("exptAnaType") != j.end()) {
    j.at("exptAnaType").get_to(o.m_ExptAnaType);
    o.m_ExptAnaTypeIsSet = true;
  }
  if (j.find("exptUeBehav") != j.end()) {
    j.at("exptUeBehav").get_to(o.m_ExptUeBehav);
    o.m_ExptUeBehavIsSet = true;
  }
  if (j.find("snssai") != j.end()) {
    j.at("snssai").get_to(o.m_Snssai);
    o.m_SnssaiIsSet = true;
  }
  if (j.find("qosReq") != j.end()) {
    j.at("qosReq").get_to(o.m_QosReq);
    o.m_QosReqIsSet = true;
  }
}

LocationArea5G AnalyticsEventFilter::getLocArea() const { return m_LocArea; }
void AnalyticsEventFilter::setLocArea(LocationArea5G const &value) {
  m_LocArea = value;
  m_LocAreaIsSet = true;
}
bool AnalyticsEventFilter::locAreaIsSet() const { return m_LocAreaIsSet; }
void AnalyticsEventFilter::unsetLocArea() { m_LocAreaIsSet = false; }
std::string AnalyticsEventFilter::getDnn() const { return m_Dnn; }
void AnalyticsEventFilter::setDnn(std::string const &value) {
  m_Dnn = value;
  m_DnnIsSet = true;
}
bool AnalyticsEventFilter::dnnIsSet() const { return m_DnnIsSet; }
void AnalyticsEventFilter::unsetDnn() { m_DnnIsSet = false; }
std::vector<NetworkPerfType> &AnalyticsEventFilter::getNwPerfTypes() {
  return m_NwPerfTypes;
}
void AnalyticsEventFilter::setNwPerfTypes(
    std::vector<NetworkPerfType> const &value) {
  m_NwPerfTypes = value;
  m_NwPerfTypesIsSet = true;
}
bool AnalyticsEventFilter::nwPerfTypesIsSet() const {
  return m_NwPerfTypesIsSet;
}
void AnalyticsEventFilter::unsetNwPerfTypes() { m_NwPerfTypesIsSet = false; }
std::vector<std::string> &AnalyticsEventFilter::getAppIds() { return m_AppIds; }
void AnalyticsEventFilter::setAppIds(std::vector<std::string> const &value) {
  m_AppIds = value;
  m_AppIdsIsSet = true;
}
bool AnalyticsEventFilter::appIdsIsSet() const { return m_AppIdsIsSet; }
void AnalyticsEventFilter::unsetAppIds() { m_AppIdsIsSet = false; }
std::vector<ExceptionId> &AnalyticsEventFilter::getExcepIds() {
  return m_ExcepIds;
}
void AnalyticsEventFilter::setExcepIds(std::vector<ExceptionId> const &value) {
  m_ExcepIds = value;
  m_ExcepIdsIsSet = true;
}
bool AnalyticsEventFilter::excepIdsIsSet() const { return m_ExcepIdsIsSet; }
void AnalyticsEventFilter::unsetExcepIds() { m_ExcepIdsIsSet = false; }
ExpectedAnalyticsType AnalyticsEventFilter::getExptAnaType() const {
  return m_ExptAnaType;
}
void AnalyticsEventFilter::setExptAnaType(ExpectedAnalyticsType const &value) {
  m_ExptAnaType = value;
  m_ExptAnaTypeIsSet = true;
}
bool AnalyticsEventFilter::exptAnaTypeIsSet() const {
  return m_ExptAnaTypeIsSet;
}
void AnalyticsEventFilter::unsetExptAnaType() { m_ExptAnaTypeIsSet = false; }
ExpectedUeBehaviourData AnalyticsEventFilter::getExptUeBehav() const {
  return m_ExptUeBehav;
}
void AnalyticsEventFilter::setExptUeBehav(
    ExpectedUeBehaviourData const &value) {
  m_ExptUeBehav = value;
  m_ExptUeBehavIsSet = true;
}
bool AnalyticsEventFilter::exptUeBehavIsSet() const {
  return m_ExptUeBehavIsSet;
}
void AnalyticsEventFilter::unsetExptUeBehav() { m_ExptUeBehavIsSet = false; }
Snssai AnalyticsEventFilter::getSnssai() const { return m_Snssai; }
void AnalyticsEventFilter::setSnssai(Snssai const &value) {
  m_Snssai = value;
  m_SnssaiIsSet = true;
}
bool AnalyticsEventFilter::snssaiIsSet() const { return m_SnssaiIsSet; }
void AnalyticsEventFilter::unsetSnssai() { m_SnssaiIsSet = false; }
QosRequirement AnalyticsEventFilter::getQosReq() const { return m_QosReq; }
void AnalyticsEventFilter::setQosReq(QosRequirement const &value) {
  m_QosReq = value;
  m_QosReqIsSet = true;
}
bool AnalyticsEventFilter::qosReqIsSet() const { return m_QosReqIsSet; }
void AnalyticsEventFilter::unsetQosReq() { m_QosReqIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
