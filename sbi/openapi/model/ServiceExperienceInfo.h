/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ServiceExperienceInfo.h
 *
 * Represents service experience information.
 */

#ifndef ServiceExperienceInfo_H_
#define ServiceExperienceInfo_H_

#include "NetworkAreaInfo.h"
#include "Snssai.h"
#include "SvcExperience.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents service experience information.
/// </summary>
class ServiceExperienceInfo {
public:
  ServiceExperienceInfo();
  virtual ~ServiceExperienceInfo();

  void validate();

  /////////////////////////////////////////////
  /// ServiceExperienceInfo members

  /// <summary>
  ///
  /// </summary>
  SvcExperience getSvcExprc() const;
  void setSvcExprc(SvcExperience const &value);
  /// <summary>
  /// string with format \&quot;float\&quot; as defined in OpenAPI.
  /// </summary>
  float getSvcExprcVariance() const;
  void setSvcExprcVariance(float const value);
  bool svcExprcVarianceIsSet() const;
  void unsetSvcExprcVariance();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getSupis();
  void setSupis(std::vector<std::string> const &value);
  bool supisIsSet() const;
  void unsetSupis();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  /// String providing an application identifier.
  /// </summary>
  std::string getAppId() const;
  void setAppId(std::string const &value);
  bool appIdIsSet() const;
  void unsetAppId();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getConfidence() const;
  void setConfidence(int32_t const value);
  bool confidenceIsSet() const;
  void unsetConfidence();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  NetworkAreaInfo getNetworkArea() const;
  void setNetworkArea(NetworkAreaInfo const &value);
  bool networkAreaIsSet() const;
  void unsetNetworkArea();
  /// <summary>
  /// Contains the Identifier of the selected Network Slice instance
  /// </summary>
  std::string getNsiId() const;
  void setNsiId(std::string const &value);
  bool nsiIdIsSet() const;
  void unsetNsiId();
  /// <summary>
  /// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP
  /// TS 23.502), expressed in percent.
  /// </summary>
  int32_t getRatio() const;
  void setRatio(int32_t const value);
  bool ratioIsSet() const;
  void unsetRatio();

  friend void to_json(nlohmann::json &j, const ServiceExperienceInfo &o);
  friend void from_json(const nlohmann::json &j, ServiceExperienceInfo &o);

protected:
  SvcExperience m_SvcExprc;

  float m_SvcExprcVariance;
  bool m_SvcExprcVarianceIsSet;
  std::vector<std::string> m_Supis;
  bool m_SupisIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  std::string m_AppId;
  bool m_AppIdIsSet;
  int32_t m_Confidence;
  bool m_ConfidenceIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  NetworkAreaInfo m_NetworkArea;
  bool m_NetworkAreaIsSet;
  std::string m_NsiId;
  bool m_NsiIdIsSet;
  int32_t m_Ratio;
  bool m_RatioIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ServiceExperienceInfo_H_ */
