/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "TargetUeIdentification.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

TargetUeIdentification::TargetUeIdentification() {
  m_SupisIsSet = false;
  m_InterGroupIdsIsSet = false;
  m_AnyUeId = false;
  m_AnyUeIdIsSet = false;
}

TargetUeIdentification::~TargetUeIdentification() {}

void TargetUeIdentification::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const TargetUeIdentification &o) {
  j = nlohmann::json();
  if (o.supisIsSet() || !o.m_Supis.empty())
    j["supis"] = o.m_Supis;
  if (o.interGroupIdsIsSet() || !o.m_InterGroupIds.empty())
    j["interGroupIds"] = o.m_InterGroupIds;
  if (o.anyUeIdIsSet())
    j["anyUeId"] = o.m_AnyUeId;
}

void from_json(const nlohmann::json &j, TargetUeIdentification &o) {
  if (j.find("supis") != j.end()) {
    j.at("supis").get_to(o.m_Supis);
    o.m_SupisIsSet = true;
  }
  if (j.find("interGroupIds") != j.end()) {
    j.at("interGroupIds").get_to(o.m_InterGroupIds);
    o.m_InterGroupIdsIsSet = true;
  }
  if (j.find("anyUeId") != j.end()) {
    j.at("anyUeId").get_to(o.m_AnyUeId);
    o.m_AnyUeIdIsSet = true;
  }
}

std::vector<std::string> &TargetUeIdentification::getSupis() { return m_Supis; }
void TargetUeIdentification::setSupis(std::vector<std::string> const &value) {
  m_Supis = value;
  m_SupisIsSet = true;
}
bool TargetUeIdentification::supisIsSet() const { return m_SupisIsSet; }
void TargetUeIdentification::unsetSupis() { m_SupisIsSet = false; }
std::vector<std::string> &TargetUeIdentification::getInterGroupIds() {
  return m_InterGroupIds;
}
void TargetUeIdentification::setInterGroupIds(
    std::vector<std::string> const &value) {
  m_InterGroupIds = value;
  m_InterGroupIdsIsSet = true;
}
bool TargetUeIdentification::interGroupIdsIsSet() const {
  return m_InterGroupIdsIsSet;
}
void TargetUeIdentification::unsetInterGroupIds() {
  m_InterGroupIdsIsSet = false;
}
bool TargetUeIdentification::isAnyUeId() const { return m_AnyUeId; }
void TargetUeIdentification::setAnyUeId(bool const value) {
  m_AnyUeId = value;
  m_AnyUeIdIsSet = true;
}
bool TargetUeIdentification::anyUeIdIsSet() const { return m_AnyUeIdIsSet; }
void TargetUeIdentification::unsetAnyUeId() { m_AnyUeIdIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
