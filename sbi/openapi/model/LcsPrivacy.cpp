/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "LcsPrivacy.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

LcsPrivacy::LcsPrivacy() {
  m_AfInstanceId = "";
  m_AfInstanceIdIsSet = false;
  m_ReferenceId = 0;
  m_ReferenceIdIsSet = false;
  m_LpiIsSet = false;
  m_MtcProviderInformation = "";
  m_MtcProviderInformationIsSet = false;
}

LcsPrivacy::~LcsPrivacy() {}

void LcsPrivacy::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const LcsPrivacy &o) {
  j = nlohmann::json();
  if (o.afInstanceIdIsSet())
    j["afInstanceId"] = o.m_AfInstanceId;
  if (o.referenceIdIsSet())
    j["referenceId"] = o.m_ReferenceId;
  if (o.lpiIsSet())
    j["lpi"] = o.m_Lpi;
  if (o.mtcProviderInformationIsSet())
    j["mtcProviderInformation"] = o.m_MtcProviderInformation;
}

void from_json(const nlohmann::json &j, LcsPrivacy &o) {
  if (j.find("afInstanceId") != j.end()) {
    j.at("afInstanceId").get_to(o.m_AfInstanceId);
    o.m_AfInstanceIdIsSet = true;
  }
  if (j.find("referenceId") != j.end()) {
    j.at("referenceId").get_to(o.m_ReferenceId);
    o.m_ReferenceIdIsSet = true;
  }
  if (j.find("lpi") != j.end()) {
    j.at("lpi").get_to(o.m_Lpi);
    o.m_LpiIsSet = true;
  }
  if (j.find("mtcProviderInformation") != j.end()) {
    j.at("mtcProviderInformation").get_to(o.m_MtcProviderInformation);
    o.m_MtcProviderInformationIsSet = true;
  }
}

std::string LcsPrivacy::getAfInstanceId() const { return m_AfInstanceId; }
void LcsPrivacy::setAfInstanceId(std::string const &value) {
  m_AfInstanceId = value;
  m_AfInstanceIdIsSet = true;
}
bool LcsPrivacy::afInstanceIdIsSet() const { return m_AfInstanceIdIsSet; }
void LcsPrivacy::unsetAfInstanceId() { m_AfInstanceIdIsSet = false; }
int32_t LcsPrivacy::getReferenceId() const { return m_ReferenceId; }
void LcsPrivacy::setReferenceId(int32_t const value) {
  m_ReferenceId = value;
  m_ReferenceIdIsSet = true;
}
bool LcsPrivacy::referenceIdIsSet() const { return m_ReferenceIdIsSet; }
void LcsPrivacy::unsetReferenceId() { m_ReferenceIdIsSet = false; }
Lpi LcsPrivacy::getLpi() const { return m_Lpi; }
void LcsPrivacy::setLpi(Lpi const &value) {
  m_Lpi = value;
  m_LpiIsSet = true;
}
bool LcsPrivacy::lpiIsSet() const { return m_LpiIsSet; }
void LcsPrivacy::unsetLpi() { m_LpiIsSet = false; }
std::string LcsPrivacy::getMtcProviderInformation() const {
  return m_MtcProviderInformation;
}
void LcsPrivacy::setMtcProviderInformation(std::string const &value) {
  m_MtcProviderInformation = value;
  m_MtcProviderInformationIsSet = true;
}
bool LcsPrivacy::mtcProviderInformationIsSet() const {
  return m_MtcProviderInformationIsSet;
}
void LcsPrivacy::unsetMtcProviderInformation() {
  m_MtcProviderInformationIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
