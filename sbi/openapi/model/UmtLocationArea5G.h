/**
 * 3gpp-cp-parameter-provisioning
 * API for provisioning communication pattern parameters. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UmtLocationArea5G.h
 *
 * Represents the user location area describing the UE moving trajectory.
 */

#ifndef UmtLocationArea5G_H_
#define UmtLocationArea5G_H_

#include "CivicAddress.h"
#include "GeographicArea.h"
#include "LocationArea5G.h"
#include "NetworkAreaInfo.h"
#include "UmtLocationArea5G_allOf.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the user location area describing the UE moving trajectory.
/// </summary>
class UmtLocationArea5G {
public:
  UmtLocationArea5G();
  virtual ~UmtLocationArea5G();

  void validate();

  /////////////////////////////////////////////
  /// UmtLocationArea5G members

  /// <summary>
  /// Identifies a list of geographic area of the user where the UE is located.
  /// </summary>
  std::vector<GeographicArea> &getGeographicAreas();
  void setGeographicAreas(std::vector<GeographicArea> const &value);
  bool geographicAreasIsSet() const;
  void unsetGeographicAreas();
  /// <summary>
  /// Identifies a list of civic addresses of the user where the UE is located.
  /// </summary>
  std::vector<CivicAddress> &getCivicAddresses();
  void setCivicAddresses(std::vector<CivicAddress> const &value);
  bool civicAddressesIsSet() const;
  void unsetCivicAddresses();
  /// <summary>
  ///
  /// </summary>
  NetworkAreaInfo getNwAreaInfo() const;
  void setNwAreaInfo(NetworkAreaInfo const &value);
  bool nwAreaInfoIsSet() const;
  void unsetNwAreaInfo();
  /// <summary>
  /// String with format partial-time or full-time as defined in subclause 5.6
  /// of IETF RFC 3339. Examples, 20:15:00, 20:15:00-08:00 (for 8 hours behind
  /// UTC).
  /// </summary>
  std::string getUmtTime() const;
  void setUmtTime(std::string const &value);
  bool umtTimeIsSet() const;
  void unsetUmtTime();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getUmtDuration() const;
  void setUmtDuration(int32_t const value);
  bool umtDurationIsSet() const;
  void unsetUmtDuration();

  friend void to_json(nlohmann::json &j, const UmtLocationArea5G &o);
  friend void from_json(const nlohmann::json &j, UmtLocationArea5G &o);

protected:
  std::vector<GeographicArea> m_GeographicAreas;
  bool m_GeographicAreasIsSet;
  std::vector<CivicAddress> m_CivicAddresses;
  bool m_CivicAddressesIsSet;
  NetworkAreaInfo m_NwAreaInfo;
  bool m_NwAreaInfoIsSet;
  std::string m_UmtTime;
  bool m_UmtTimeIsSet;
  int32_t m_UmtDuration;
  bool m_UmtDurationIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UmtLocationArea5G_H_ */
