/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmPolicyDeleteData.h
 *
 * Contains the parameters to be sent to the PCF when an individual SM policy is
 * deleted.
 */

#ifndef SmPolicyDeleteData_H_
#define SmPolicyDeleteData_H_

#include "AccuUsageReport.h"
#include "PduSessionRelCause.h"
#include "PlmnIdNid.h"
#include "QosMonitoringReport.h"
#include "RanNasRelCause.h"
#include "UserLocation.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the parameters to be sent to the PCF when an individual SM policy
/// is deleted.
/// </summary>
class SmPolicyDeleteData {
public:
  SmPolicyDeleteData();
  virtual ~SmPolicyDeleteData();

  void validate();

  /////////////////////////////////////////////
  /// SmPolicyDeleteData members

  /// <summary>
  ///
  /// </summary>
  UserLocation getUserLocationInfo() const;
  void setUserLocationInfo(UserLocation const &value);
  bool userLocationInfoIsSet() const;
  void unsetUserLocationInfo();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getUeTimeZone() const;
  void setUeTimeZone(std::string const &value);
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();
  /// <summary>
  ///
  /// </summary>
  PlmnIdNid getServingNetwork() const;
  void setServingNetwork(PlmnIdNid const &value);
  bool servingNetworkIsSet() const;
  void unsetServingNetwork();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getUserLocationInfoTime() const;
  void setUserLocationInfoTime(std::string const &value);
  bool userLocationInfoTimeIsSet() const;
  void unsetUserLocationInfoTime();
  /// <summary>
  /// Contains the RAN and/or NAS release cause.
  /// </summary>
  std::vector<RanNasRelCause> &getRanNasRelCauses();
  void setRanNasRelCauses(std::vector<RanNasRelCause> const &value);
  bool ranNasRelCausesIsSet() const;
  void unsetRanNasRelCauses();
  /// <summary>
  /// Contains the usage report
  /// </summary>
  std::vector<AccuUsageReport> &getAccuUsageReports();
  void setAccuUsageReports(std::vector<AccuUsageReport> const &value);
  bool accuUsageReportsIsSet() const;
  void unsetAccuUsageReports();
  /// <summary>
  ///
  /// </summary>
  PduSessionRelCause getPduSessRelCause() const;
  void setPduSessRelCause(PduSessionRelCause const &value);
  bool pduSessRelCauseIsSet() const;
  void unsetPduSessRelCause();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosMonitoringReport> &getQosMonReports();
  void setQosMonReports(std::vector<QosMonitoringReport> const &value);
  bool qosMonReportsIsSet() const;
  void unsetQosMonReports();

  friend void to_json(nlohmann::json &j, const SmPolicyDeleteData &o);
  friend void from_json(const nlohmann::json &j, SmPolicyDeleteData &o);

protected:
  UserLocation m_UserLocationInfo;
  bool m_UserLocationInfoIsSet;
  std::string m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  PlmnIdNid m_ServingNetwork;
  bool m_ServingNetworkIsSet;
  std::string m_UserLocationInfoTime;
  bool m_UserLocationInfoTimeIsSet;
  std::vector<RanNasRelCause> m_RanNasRelCauses;
  bool m_RanNasRelCausesIsSet;
  std::vector<AccuUsageReport> m_AccuUsageReports;
  bool m_AccuUsageReportsIsSet;
  PduSessionRelCause m_PduSessRelCause;
  bool m_PduSessRelCauseIsSet;
  std::vector<QosMonitoringReport> m_QosMonReports;
  bool m_QosMonReportsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SmPolicyDeleteData_H_ */
