/**
 * LMF Location
 * LMF Location Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EventNotifyData.h
 *
 * Information within Event Notify Request.
 */

#ifndef EventNotifyData_H_
#define EventNotifyData_H_

#include "CivicAddress.h"
#include "GeographicArea.h"
#include "GnssPositioningMethodAndUsage.h"
#include "LocalArea.h"
#include "PositioningMethodAndUsage.h"
#include "ReportedEventType.h"
#include "TerminationCause.h"
#include "VelocityEstimate.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Information within Event Notify Request.
/// </summary>
class EventNotifyData {
public:
  EventNotifyData();
  virtual ~EventNotifyData();

  void validate();

  /////////////////////////////////////////////
  /// EventNotifyData members

  /// <summary>
  ///
  /// </summary>
  ReportedEventType getReportedEventType() const;
  void setReportedEventType(ReportedEventType const &value);
  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getHgmlcCallBackURI() const;
  void setHgmlcCallBackURI(std::string const &value);
  bool hgmlcCallBackURIIsSet() const;
  void unsetHgmlcCallBackURI();
  /// <summary>
  /// LDR Reference.
  /// </summary>
  std::string getLdrReference() const;
  void setLdrReference(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  GeographicArea getLocationEstimate() const;
  void setLocationEstimate(GeographicArea const &value);
  bool locationEstimateIsSet() const;
  void unsetLocationEstimate();
  /// <summary>
  /// Indicates value of the age of the location estimate.
  /// </summary>
  int32_t getAgeOfLocationEstimate() const;
  void setAgeOfLocationEstimate(int32_t const value);
  bool ageOfLocationEstimateIsSet() const;
  void unsetAgeOfLocationEstimate();
  /// <summary>
  ///
  /// </summary>
  CivicAddress getCivicAddress() const;
  void setCivicAddress(CivicAddress const &value);
  bool civicAddressIsSet() const;
  void unsetCivicAddress();
  /// <summary>
  ///
  /// </summary>
  LocalArea getLocalLocationEstimate() const;
  void setLocalLocationEstimate(LocalArea const &value);
  bool localLocationEstimateIsSet() const;
  void unsetLocalLocationEstimate();
  /// <summary>
  ///
  /// </summary>
  std::vector<PositioningMethodAndUsage> &getPositioningDataList();
  void
  setPositioningDataList(std::vector<PositioningMethodAndUsage> const &value);
  bool positioningDataListIsSet() const;
  void unsetPositioningDataList();
  /// <summary>
  ///
  /// </summary>
  std::vector<GnssPositioningMethodAndUsage> &getGnssPositioningDataList();
  void setGnssPositioningDataList(
      std::vector<GnssPositioningMethodAndUsage> const &value);
  bool gnssPositioningDataListIsSet() const;
  void unsetGnssPositioningDataList();
  /// <summary>
  /// LMF identification.
  /// </summary>
  std::string getServingLMFidentification() const;
  void setServingLMFidentification(std::string const &value);
  bool servingLMFidentificationIsSet() const;
  void unsetServingLMFidentification();
  /// <summary>
  ///
  /// </summary>
  TerminationCause getTerminationCause() const;
  void setTerminationCause(TerminationCause const &value);
  bool terminationCauseIsSet() const;
  void unsetTerminationCause();
  /// <summary>
  ///
  /// </summary>
  VelocityEstimate getVelocityEstimate() const;
  void setVelocityEstimate(VelocityEstimate const &value);
  bool velocityEstimateIsSet() const;
  void unsetVelocityEstimate();
  /// <summary>
  /// Indicates value of altitude.
  /// </summary>
  double getAltitude() const;
  void setAltitude(double const value);
  bool altitudeIsSet() const;
  void unsetAltitude();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  friend void to_json(nlohmann::json &j, const EventNotifyData &o);
  friend void from_json(const nlohmann::json &j, EventNotifyData &o);

protected:
  ReportedEventType m_ReportedEventType;

  std::string m_Supi;
  bool m_SupiIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_HgmlcCallBackURI;
  bool m_HgmlcCallBackURIIsSet;
  std::string m_LdrReference;

  GeographicArea m_LocationEstimate;
  bool m_LocationEstimateIsSet;
  int32_t m_AgeOfLocationEstimate;
  bool m_AgeOfLocationEstimateIsSet;
  CivicAddress m_CivicAddress;
  bool m_CivicAddressIsSet;
  LocalArea m_LocalLocationEstimate;
  bool m_LocalLocationEstimateIsSet;
  std::vector<PositioningMethodAndUsage> m_PositioningDataList;
  bool m_PositioningDataListIsSet;
  std::vector<GnssPositioningMethodAndUsage> m_GnssPositioningDataList;
  bool m_GnssPositioningDataListIsSet;
  std::string m_ServingLMFidentification;
  bool m_ServingLMFidentificationIsSet;
  TerminationCause m_TerminationCause;
  bool m_TerminationCauseIsSet;
  VelocityEstimate m_VelocityEstimate;
  bool m_VelocityEstimateIsSet;
  double m_Altitude;
  bool m_AltitudeIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* EventNotifyData_H_ */
