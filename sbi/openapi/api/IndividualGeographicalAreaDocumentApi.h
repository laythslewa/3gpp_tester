/**
 * VAE_Service Continuity
 * API for VAE Service Continuity Service Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualGeographicalAreaDocumentApi.h
 *
 *
 */

#ifndef IndividualGeographicalAreaDocumentApi_H_
#define IndividualGeographicalAreaDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "ProblemDetails.h"
#include "V2xServiceInfo.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class IndividualGeographicalAreaDocumentApi {
public:
  IndividualGeographicalAreaDocumentApi(
      std::shared_ptr<Pistache::Rest::Router>);
  virtual ~IndividualGeographicalAreaDocumentApi() {}
  void init();

  const std::string base = "/vae-service-continuity/v1";

private:
  void setupRoutes();

  void
  query_service_continuity_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response);
  void individual_geographical_area_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// VAE service continuity query service operation
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="geoId">Identifier of a geographical area</param>
  /// <param name="serviceId">Identifier of a V2X service</param>
  /// <param name="suppFeat">To filter irrelevant responses related to
  /// unsupported features (optional, default to &quot;&quot;)</param>
  virtual void
  query_service_continuity(const std::string &geoId,
                           const Pistache::Optional<std::string> &serviceId,
                           const Pistache::Optional<std::string> &suppFeat,
                           Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IndividualGeographicalAreaDocumentApi_H_ */
