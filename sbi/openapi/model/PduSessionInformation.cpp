/**
 * Npcf_EventExposure
 * PCF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PduSessionInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PduSessionInformation::PduSessionInformation() {
  m_Dnn = "";
  m_UeIpv4 = "";
  m_UeIpv4IsSet = false;
  m_UeIpv6IsSet = false;
  m_IpDomain = "";
  m_IpDomainIsSet = false;
  m_UeMac = "";
  m_UeMacIsSet = false;
}

PduSessionInformation::~PduSessionInformation() {}

void PduSessionInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PduSessionInformation &o) {
  j = nlohmann::json();
  j["snssai"] = o.m_Snssai;
  j["dnn"] = o.m_Dnn;
  if (o.ueIpv4IsSet())
    j["ueIpv4"] = o.m_UeIpv4;
  if (o.ueIpv6IsSet())
    j["ueIpv6"] = o.m_UeIpv6;
  if (o.ipDomainIsSet())
    j["ipDomain"] = o.m_IpDomain;
  if (o.ueMacIsSet())
    j["ueMac"] = o.m_UeMac;
}

void from_json(const nlohmann::json &j, PduSessionInformation &o) {
  j.at("snssai").get_to(o.m_Snssai);
  j.at("dnn").get_to(o.m_Dnn);
  if (j.find("ueIpv4") != j.end()) {
    j.at("ueIpv4").get_to(o.m_UeIpv4);
    o.m_UeIpv4IsSet = true;
  }
  if (j.find("ueIpv6") != j.end()) {
    j.at("ueIpv6").get_to(o.m_UeIpv6);
    o.m_UeIpv6IsSet = true;
  }
  if (j.find("ipDomain") != j.end()) {
    j.at("ipDomain").get_to(o.m_IpDomain);
    o.m_IpDomainIsSet = true;
  }
  if (j.find("ueMac") != j.end()) {
    j.at("ueMac").get_to(o.m_UeMac);
    o.m_UeMacIsSet = true;
  }
}

Snssai PduSessionInformation::getSnssai() const { return m_Snssai; }
void PduSessionInformation::setSnssai(Snssai const &value) { m_Snssai = value; }
std::string PduSessionInformation::getDnn() const { return m_Dnn; }
void PduSessionInformation::setDnn(std::string const &value) { m_Dnn = value; }
std::string PduSessionInformation::getUeIpv4() const { return m_UeIpv4; }
void PduSessionInformation::setUeIpv4(std::string const &value) {
  m_UeIpv4 = value;
  m_UeIpv4IsSet = true;
}
bool PduSessionInformation::ueIpv4IsSet() const { return m_UeIpv4IsSet; }
void PduSessionInformation::unsetUeIpv4() { m_UeIpv4IsSet = false; }
Ipv6Prefix PduSessionInformation::getUeIpv6() const { return m_UeIpv6; }
void PduSessionInformation::setUeIpv6(Ipv6Prefix const &value) {
  m_UeIpv6 = value;
  m_UeIpv6IsSet = true;
}
bool PduSessionInformation::ueIpv6IsSet() const { return m_UeIpv6IsSet; }
void PduSessionInformation::unsetUeIpv6() { m_UeIpv6IsSet = false; }
std::string PduSessionInformation::getIpDomain() const { return m_IpDomain; }
void PduSessionInformation::setIpDomain(std::string const &value) {
  m_IpDomain = value;
  m_IpDomainIsSet = true;
}
bool PduSessionInformation::ipDomainIsSet() const { return m_IpDomainIsSet; }
void PduSessionInformation::unsetIpDomain() { m_IpDomainIsSet = false; }
std::string PduSessionInformation::getUeMac() const { return m_UeMac; }
void PduSessionInformation::setUeMac(std::string const &value) {
  m_UeMac = value;
  m_UeMacIsSet = true;
}
bool PduSessionInformation::ueMacIsSet() const { return m_UeMacIsSet; }
void PduSessionInformation::unsetUeMac() { m_UeMacIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
