/**
 * Namf_Communication
 * AMF Communication Service © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * N1N2MessageTransferReqData.h
 *
 * Data within a N1/N2 message transfer request
 */

#ifndef N1N2MessageTransferReqData_H_
#define N1N2MessageTransferReqData_H_

#include "AccessType.h"
#include "AreaOfValidity.h"
#include "Arp.h"
#include "Guami.h"
#include "N1MessageContainer.h"
#include "N2InfoContainer.h"
#include "RefToBinaryData.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within a N1/N2 message transfer request
/// </summary>
class N1N2MessageTransferReqData {
public:
  N1N2MessageTransferReqData();
  virtual ~N1N2MessageTransferReqData();

  void validate();

  /////////////////////////////////////////////
  /// N1N2MessageTransferReqData members

  /// <summary>
  ///
  /// </summary>
  N1MessageContainer getN1MessageContainer() const;
  void setN1MessageContainer(N1MessageContainer const &value);
  bool n1MessageContainerIsSet() const;
  void unsetN1MessageContainer();
  /// <summary>
  ///
  /// </summary>
  N2InfoContainer getN2InfoContainer() const;
  void setN2InfoContainer(N2InfoContainer const &value);
  bool n2InfoContainerIsSet() const;
  void unsetN2InfoContainer();
  /// <summary>
  ///
  /// </summary>
  RefToBinaryData getMtData() const;
  void setMtData(RefToBinaryData const &value);
  bool mtDataIsSet() const;
  void unsetMtData();
  /// <summary>
  ///
  /// </summary>
  bool isSkipInd() const;
  void setSkipInd(bool const value);
  bool skipIndIsSet() const;
  void unsetSkipInd();
  /// <summary>
  ///
  /// </summary>
  bool isLastMsgIndication() const;
  void setLastMsgIndication(bool const value);
  bool lastMsgIndicationIsSet() const;
  void unsetLastMsgIndication();
  /// <summary>
  /// Unsigned integer identifying a PDU session, within the range 0 to 255, as
  /// specified in clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU
  /// Session ID is allocated by the Core Network for UEs not supporting N1
  /// mode, reserved range 64 to 95 is used. PDU Session ID within the reserved
  /// range is only visible in the Core Network.
  /// </summary>
  int32_t getPduSessionId() const;
  void setPduSessionId(int32_t const value);
  bool pduSessionIdIsSet() const;
  void unsetPduSessionId();
  /// <summary>
  /// LCS Correlation ID.
  /// </summary>
  std::string getLcsCorrelationId() const;
  void setLcsCorrelationId(std::string const &value);
  bool lcsCorrelationIdIsSet() const;
  void unsetLcsCorrelationId();
  /// <summary>
  /// Paging Policy Indicator
  /// </summary>
  int32_t getPpi() const;
  void setPpi(int32_t const value);
  bool ppiIsSet() const;
  void unsetPpi();
  /// <summary>
  ///
  /// </summary>
  Arp getArp() const;
  void setArp(Arp const &value);
  bool arpIsSet() const;
  void unsetArp();
  /// <summary>
  /// Unsigned integer representing a 5G QoS Identifier (see clause 5.7.2.1 of
  /// 3GPP TS 23.501, within the range 0 to 255
  /// </summary>
  int32_t getR5qi() const;
  void setR5qi(int32_t const value);
  bool r5qiIsSet() const;
  void unsetr_5qi();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getN1n2FailureTxfNotifURI() const;
  void setN1n2FailureTxfNotifURI(std::string const &value);
  bool n1n2FailureTxfNotifURIIsSet() const;
  void unsetN1n2FailureTxfNotifURI();
  /// <summary>
  ///
  /// </summary>
  bool isSmfReallocationInd() const;
  void setSmfReallocationInd(bool const value);
  bool smfReallocationIndIsSet() const;
  void unsetSmfReallocationInd();
  /// <summary>
  ///
  /// </summary>
  AreaOfValidity getAreaOfValidity() const;
  void setAreaOfValidity(AreaOfValidity const &value);
  bool areaOfValidityIsSet() const;
  void unsetAreaOfValidity();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  Guami getOldGuami() const;
  void setOldGuami(Guami const &value);
  bool oldGuamiIsSet() const;
  void unsetOldGuami();
  /// <summary>
  ///
  /// </summary>
  bool isMaAcceptedInd() const;
  void setMaAcceptedInd(bool const value);
  bool maAcceptedIndIsSet() const;
  void unsetMaAcceptedInd();
  /// <summary>
  ///
  /// </summary>
  bool isExtBufSupport() const;
  void setExtBufSupport(bool const value);
  bool extBufSupportIsSet() const;
  void unsetExtBufSupport();
  /// <summary>
  ///
  /// </summary>
  AccessType getTargetAccess() const;
  void setTargetAccess(AccessType const &value);
  bool targetAccessIsSet() const;
  void unsetTargetAccess();

  friend void to_json(nlohmann::json &j, const N1N2MessageTransferReqData &o);
  friend void from_json(const nlohmann::json &j, N1N2MessageTransferReqData &o);

protected:
  N1MessageContainer m_N1MessageContainer;
  bool m_N1MessageContainerIsSet;
  N2InfoContainer m_N2InfoContainer;
  bool m_N2InfoContainerIsSet;
  RefToBinaryData m_MtData;
  bool m_MtDataIsSet;
  bool m_SkipInd;
  bool m_SkipIndIsSet;
  bool m_LastMsgIndication;
  bool m_LastMsgIndicationIsSet;
  int32_t m_PduSessionId;
  bool m_PduSessionIdIsSet;
  std::string m_LcsCorrelationId;
  bool m_LcsCorrelationIdIsSet;
  int32_t m_Ppi;
  bool m_PpiIsSet;
  Arp m_Arp;
  bool m_ArpIsSet;
  int32_t m_r_5qi;
  bool m_r_5qiIsSet;
  std::string m_N1n2FailureTxfNotifURI;
  bool m_N1n2FailureTxfNotifURIIsSet;
  bool m_SmfReallocationInd;
  bool m_SmfReallocationIndIsSet;
  AreaOfValidity m_AreaOfValidity;
  bool m_AreaOfValidityIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  Guami m_OldGuami;
  bool m_OldGuamiIsSet;
  bool m_MaAcceptedInd;
  bool m_MaAcceptedIndIsSet;
  bool m_ExtBufSupport;
  bool m_ExtBufSupportIsSet;
  AccessType m_TargetAccess;
  bool m_TargetAccessIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* N1N2MessageTransferReqData_H_ */
