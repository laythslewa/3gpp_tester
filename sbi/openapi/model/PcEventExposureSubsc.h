/**
 * Npcf_EventExposure
 * PCF Event Exposure Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PcEventExposureSubsc.h
 *
 * Represents an Individual Policy Events Subscription resource.
 */

#ifndef PcEventExposureSubsc_H_
#define PcEventExposureSubsc_H_

#include "PcEvent.h"
#include "ReportingInformation.h"
#include "ServiceIdentification.h"
#include "Snssai.h"
#include "SnssaiDnnCombination.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an Individual Policy Events Subscription resource.
/// </summary>
class PcEventExposureSubsc {
public:
  PcEventExposureSubsc();
  virtual ~PcEventExposureSubsc();

  void validate();

  /////////////////////////////////////////////
  /// PcEventExposureSubsc members

  /// <summary>
  ///
  /// </summary>
  std::vector<PcEvent> &getEventSubs();
  void setEventSubs(std::vector<PcEvent> const &value);
  /// <summary>
  ///
  /// </summary>
  ReportingInformation getEventsRepInfo() const;
  void setEventsRepInfo(ReportingInformation const &value);
  bool eventsRepInfoIsSet() const;
  void unsetEventsRepInfo();
  /// <summary>
  /// String identifying a group of devices network internal globally unique ID
  /// which identifies a set of IMSIs, as specified in clause 19.9 of 3GPP
  /// TS 23.003.
  /// </summary>
  std::string getGroupId() const;
  void setGroupId(std::string const &value);
  bool groupIdIsSet() const;
  void unsetGroupId();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getFilterDnns();
  void setFilterDnns(std::vector<std::string> const &value);
  bool filterDnnsIsSet() const;
  void unsetFilterDnns();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getFilterSnssais();
  void setFilterSnssais(std::vector<Snssai> const &value);
  bool filterSnssaisIsSet() const;
  void unsetFilterSnssais();
  /// <summary>
  ///
  /// </summary>
  std::vector<SnssaiDnnCombination> &getSnssaiDnns();
  void setSnssaiDnns(std::vector<SnssaiDnnCombination> const &value);
  bool snssaiDnnsIsSet() const;
  void unsetSnssaiDnns();
  /// <summary>
  ///
  /// </summary>
  std::vector<ServiceIdentification> &getFilterServices();
  void setFilterServices(std::vector<ServiceIdentification> const &value);
  bool filterServicesIsSet() const;
  void unsetFilterServices();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNotifUri() const;
  void setNotifUri(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getNotifId() const;
  void setNotifId(std::string const &value);
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();

  friend void to_json(nlohmann::json &j, const PcEventExposureSubsc &o);
  friend void from_json(const nlohmann::json &j, PcEventExposureSubsc &o);

protected:
  std::vector<PcEvent> m_EventSubs;

  ReportingInformation m_EventsRepInfo;
  bool m_EventsRepInfoIsSet;
  std::string m_GroupId;
  bool m_GroupIdIsSet;
  std::vector<std::string> m_FilterDnns;
  bool m_FilterDnnsIsSet;
  std::vector<Snssai> m_FilterSnssais;
  bool m_FilterSnssaisIsSet;
  std::vector<SnssaiDnnCombination> m_SnssaiDnns;
  bool m_SnssaiDnnsIsSet;
  std::vector<ServiceIdentification> m_FilterServices;
  bool m_FilterServicesIsSet;
  std::string m_NotifUri;

  std::string m_NotifId;

  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PcEventExposureSubsc_H_ */
