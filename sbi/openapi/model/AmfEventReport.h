/**
 * Namf_EventExposure
 * AMF Event Exposure Service © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AmfEventReport.h
 *
 * Represents a report triggered by a subscribed event type
 */

#ifndef AmfEventReport_H_
#define AmfEventReport_H_

#include "5GsUserStateInfo.h"
#include "AccessType.h"
#include "AmfEventArea.h"
#include "AmfEventState.h"
#include "AmfEventType.h"
#include "CmInfo.h"
#include "CommunicationFailure.h"
#include "LossOfConnectivityReason.h"
#include "RmInfo.h"
#include "SnssaiTaiMapping.h"
#include "UEIdExt.h"
#include "UeReachability.h"
#include "UserLocation.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a report triggered by a subscribed event type
/// </summary>
class AmfEventReport {
public:
  AmfEventReport();
  virtual ~AmfEventReport();

  void validate();

  /////////////////////////////////////////////
  /// AmfEventReport members

  /// <summary>
  ///
  /// </summary>
  AmfEventType getType() const;
  void setType(AmfEventType const &value);
  /// <summary>
  ///
  /// </summary>
  AmfEventState getState() const;
  void setState(AmfEventState const &value);
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getTimeStamp() const;
  void setTimeStamp(std::string const &value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getSubscriptionId() const;
  void setSubscriptionId(std::string const &value);
  bool subscriptionIdIsSet() const;
  void unsetSubscriptionId();
  /// <summary>
  ///
  /// </summary>
  bool isAnyUe() const;
  void setAnyUe(bool const value);
  bool anyUeIsSet() const;
  void unsetAnyUe();
  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  ///
  /// </summary>
  std::vector<AmfEventArea> &getAreaList();
  void setAreaList(std::vector<AmfEventArea> const &value);
  bool areaListIsSet() const;
  void unsetAreaList();
  /// <summary>
  ///
  /// </summary>
  int32_t getRefId() const;
  void setRefId(int32_t const value);
  bool refIdIsSet() const;
  void unsetRefId();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  ///
  /// </summary>
  UserLocation getLocation() const;
  void setLocation(UserLocation const &value);
  bool locationIsSet() const;
  void unsetLocation();
  /// <summary>
  ///
  /// </summary>
  UserLocation getAdditionalLocation() const;
  void setAdditionalLocation(UserLocation const &value);
  bool additionalLocationIsSet() const;
  void unsetAdditionalLocation();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getTimezone() const;
  void setTimezone(std::string const &value);
  bool timezoneIsSet() const;
  void unsetTimezone();
  /// <summary>
  ///
  /// </summary>
  std::vector<AccessType> &getAccessTypeList();
  void setAccessTypeList(std::vector<AccessType> const &value);
  bool accessTypeListIsSet() const;
  void unsetAccessTypeList();
  /// <summary>
  ///
  /// </summary>
  std::vector<RmInfo> &getRmInfoList();
  void setRmInfoList(std::vector<RmInfo> const &value);
  bool rmInfoListIsSet() const;
  void unsetRmInfoList();
  /// <summary>
  ///
  /// </summary>
  std::vector<CmInfo> &getCmInfoList();
  void setCmInfoList(std::vector<CmInfo> const &value);
  bool cmInfoListIsSet() const;
  void unsetCmInfoList();
  /// <summary>
  ///
  /// </summary>
  UeReachability getReachability() const;
  void setReachability(UeReachability const &value);
  bool reachabilityIsSet() const;
  void unsetReachability();
  /// <summary>
  ///
  /// </summary>
  CommunicationFailure getCommFailure() const;
  void setCommFailure(CommunicationFailure const &value);
  bool commFailureIsSet() const;
  void unsetCommFailure();
  /// <summary>
  ///
  /// </summary>
  LossOfConnectivityReason getLossOfConnectReason() const;
  void setLossOfConnectReason(LossOfConnectivityReason const &value);
  bool lossOfConnectReasonIsSet() const;
  void unsetLossOfConnectReason();
  /// <summary>
  ///
  /// </summary>
  int32_t getNumberOfUes() const;
  void setNumberOfUes(int32_t const value);
  bool numberOfUesIsSet() const;
  void unsetNumberOfUes();
  /// <summary>
  ///
  /// </summary>
  std::vector<5GsUserStateInfo> &getR5gsUserStateList();
  void setR5gsUserStateList(std::vector<5GsUserStateInfo> const &value);
  bool r5gsUserStateListIsSet() const;
  void unsetr_5gsUserStateList();
  /// <summary>
  ///
  /// </summary>
  std::string getTypeCode() const;
  void setTypeCode(std::string const &value);
  bool typeCodeIsSet() const;
  void unsetTypeCode();
  /// <summary>
  ///
  /// </summary>
  int32_t getRegistrationNumber() const;
  void setRegistrationNumber(int32_t const value);
  bool registrationNumberIsSet() const;
  void unsetRegistrationNumber();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getMaxAvailabilityTime() const;
  void setMaxAvailabilityTime(std::string const &value);
  bool maxAvailabilityTimeIsSet() const;
  void unsetMaxAvailabilityTime();
  /// <summary>
  ///
  /// </summary>
  std::vector<UEIdExt> &getUeIdExt();
  void setUeIdExt(std::vector<UEIdExt> const &value);
  bool ueIdExtIsSet() const;
  void unsetUeIdExt();
  /// <summary>
  ///
  /// </summary>
  std::vector<SnssaiTaiMapping> &getSnssaiTaiList();
  void setSnssaiTaiList(std::vector<SnssaiTaiMapping> const &value);
  bool snssaiTaiListIsSet() const;
  void unsetSnssaiTaiList();

  friend void to_json(nlohmann::json &j, const AmfEventReport &o);
  friend void from_json(const nlohmann::json &j, AmfEventReport &o);

protected:
  AmfEventType m_Type;

  AmfEventState m_State;

  std::string m_TimeStamp;

  std::string m_SubscriptionId;
  bool m_SubscriptionIdIsSet;
  bool m_AnyUe;
  bool m_AnyUeIsSet;
  std::string m_Supi;
  bool m_SupiIsSet;
  std::vector<AmfEventArea> m_AreaList;
  bool m_AreaListIsSet;
  int32_t m_RefId;
  bool m_RefIdIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  UserLocation m_Location;
  bool m_LocationIsSet;
  UserLocation m_AdditionalLocation;
  bool m_AdditionalLocationIsSet;
  std::string m_Timezone;
  bool m_TimezoneIsSet;
  std::vector<AccessType> m_AccessTypeList;
  bool m_AccessTypeListIsSet;
  std::vector<RmInfo> m_RmInfoList;
  bool m_RmInfoListIsSet;
  std::vector<CmInfo> m_CmInfoList;
  bool m_CmInfoListIsSet;
  UeReachability m_Reachability;
  bool m_ReachabilityIsSet;
  CommunicationFailure m_CommFailure;
  bool m_CommFailureIsSet;
  LossOfConnectivityReason m_LossOfConnectReason;
  bool m_LossOfConnectReasonIsSet;
  int32_t m_NumberOfUes;
  bool m_NumberOfUesIsSet;
  std::vector<5GsUserStateInfo> m_r_5gsUserStateList;
  bool m_r_5gsUserStateListIsSet;
  std::string m_TypeCode;
  bool m_TypeCodeIsSet;
  int32_t m_RegistrationNumber;
  bool m_RegistrationNumberIsSet;
  std::string m_MaxAvailabilityTime;
  bool m_MaxAvailabilityTimeIsSet;
  std::vector<UEIdExt> m_UeIdExt;
  bool m_UeIdExtIsSet;
  std::vector<SnssaiTaiMapping> m_SnssaiTaiList;
  bool m_SnssaiTaiListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AmfEventReport_H_ */
