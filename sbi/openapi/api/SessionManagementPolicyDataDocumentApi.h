/**
 * Unified Data Repository Service API file for policy data
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SessionManagementPolicyDataDocumentApi.h
 *
 *
 */

#ifndef SessionManagementPolicyDataDocumentApi_H_
#define SessionManagementPolicyDataDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "ProblemDetails.h"
#include "SmPolicyData.h"
#include "SmPolicyDataPatch.h"
#include "Snssai.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class SessionManagementPolicyDataDocumentApi {
public:
  SessionManagementPolicyDataDocumentApi(
      std::shared_ptr<Pistache::Rest::Router>);
  virtual ~SessionManagementPolicyDataDocumentApi() {}
  void init();

  const std::string base = "";

private:
  void setupRoutes();

  void read_session_management_policy_data_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void update_session_management_policy_data_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void session_management_policy_data_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Retrieves the session management policy data for a subscriber
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId"></param>
  /// <param name="snssai"> (optional, default to Snssai())</param>
  /// <param name="dnn"> (optional, default to &quot;&quot;)</param>
  /// <param name="fields">attributes to be retrieved (optional, default to
  /// std::vector&lt;std::string&gt;())</param> <param name="suppFeat">Supported
  /// Features (optional, default to &quot;&quot;)</param>
  virtual void read_session_management_policy_data(
      const std::string &ueId, const Pistache::Optional<Snssai> &snssai,
      const Pistache::Optional<std::string> &dnn,
      const Pistache::Optional<std::vector<std::string>> &fields,
      const Pistache::Optional<std::string> &suppFeat,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Modify the session management policy data for a subscriber
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId"></param>
  /// <param name="smPolicyDataPatch"></param>
  virtual void update_session_management_policy_data(
      const std::string &ueId, const SmPolicyDataPatch &smPolicyDataPatch,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SessionManagementPolicyDataDocumentApi_H_ */
