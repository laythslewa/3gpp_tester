/**
 * Npcf_UEPolicyControl
 * UE Policy Control Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PolicyUpdate.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PolicyUpdate::PolicyUpdate() {
  m_ResourceUri = "";
  m_UePolicyIsSet = false;
  m_N2Pc5PolIsSet = false;
  m_N2Pc5ProSePolIsSet = false;
  m_TriggersIsSet = false;
  m_PrasIsSet = false;
}

PolicyUpdate::~PolicyUpdate() {}

void PolicyUpdate::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PolicyUpdate &o) {
  j = nlohmann::json();
  j["resourceUri"] = o.m_ResourceUri;
  if (o.uePolicyIsSet())
    j["uePolicy"] = o.m_UePolicy;
  if (o.n2Pc5PolIsSet())
    j["n2Pc5Pol"] = o.m_N2Pc5Pol;
  if (o.n2Pc5ProSePolIsSet())
    j["n2Pc5ProSePol"] = o.m_N2Pc5ProSePol;
  if (o.triggersIsSet() || !o.m_Triggers.empty())
    j["triggers"] = o.m_Triggers;
  if (o.prasIsSet() || !o.m_Pras.empty())
    j["pras"] = o.m_Pras;
}

void from_json(const nlohmann::json &j, PolicyUpdate &o) {
  j.at("resourceUri").get_to(o.m_ResourceUri);
  if (j.find("uePolicy") != j.end()) {
    j.at("uePolicy").get_to(o.m_UePolicy);
    o.m_UePolicyIsSet = true;
  }
  if (j.find("n2Pc5Pol") != j.end()) {
    j.at("n2Pc5Pol").get_to(o.m_N2Pc5Pol);
    o.m_N2Pc5PolIsSet = true;
  }
  if (j.find("n2Pc5ProSePol") != j.end()) {
    j.at("n2Pc5ProSePol").get_to(o.m_N2Pc5ProSePol);
    o.m_N2Pc5ProSePolIsSet = true;
  }
  if (j.find("triggers") != j.end()) {
    j.at("triggers").get_to(o.m_Triggers);
    o.m_TriggersIsSet = true;
  }
  if (j.find("pras") != j.end()) {
    j.at("pras").get_to(o.m_Pras);
    o.m_PrasIsSet = true;
  }
}

std::string PolicyUpdate::getResourceUri() const { return m_ResourceUri; }
void PolicyUpdate::setResourceUri(std::string const &value) {
  m_ResourceUri = value;
}
std::string PolicyUpdate::getUePolicy() const { return m_UePolicy; }
void PolicyUpdate::setUePolicy(std::string const &value) {
  m_UePolicy = value;
  m_UePolicyIsSet = true;
}
bool PolicyUpdate::uePolicyIsSet() const { return m_UePolicyIsSet; }
void PolicyUpdate::unsetUePolicy() { m_UePolicyIsSet = false; }
N2InfoContent PolicyUpdate::getN2Pc5Pol() const { return m_N2Pc5Pol; }
void PolicyUpdate::setN2Pc5Pol(N2InfoContent const &value) {
  m_N2Pc5Pol = value;
  m_N2Pc5PolIsSet = true;
}
bool PolicyUpdate::n2Pc5PolIsSet() const { return m_N2Pc5PolIsSet; }
void PolicyUpdate::unsetN2Pc5Pol() { m_N2Pc5PolIsSet = false; }
N2InfoContent PolicyUpdate::getN2Pc5ProSePol() const { return m_N2Pc5ProSePol; }
void PolicyUpdate::setN2Pc5ProSePol(N2InfoContent const &value) {
  m_N2Pc5ProSePol = value;
  m_N2Pc5ProSePolIsSet = true;
}
bool PolicyUpdate::n2Pc5ProSePolIsSet() const { return m_N2Pc5ProSePolIsSet; }
void PolicyUpdate::unsetN2Pc5ProSePol() { m_N2Pc5ProSePolIsSet = false; }
std::vector<RequestTrigger> &PolicyUpdate::getTriggers() { return m_Triggers; }
void PolicyUpdate::setTriggers(std::vector<RequestTrigger> const &value) {
  m_Triggers = value;
  m_TriggersIsSet = true;
}
bool PolicyUpdate::triggersIsSet() const { return m_TriggersIsSet; }
void PolicyUpdate::unsetTriggers() { m_TriggersIsSet = false; }
std::map<std::string, PresenceInfo> &PolicyUpdate::getPras() { return m_Pras; }
void PolicyUpdate::setPras(std::map<std::string, PresenceInfo> const &value) {
  m_Pras = value;
  m_PrasIsSet = true;
}
bool PolicyUpdate::prasIsSet() const { return m_PrasIsSet; }
void PolicyUpdate::unsetPras() { m_PrasIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
