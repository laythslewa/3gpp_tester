/**
 * Npcf_AMPolicyAuthorization Service API
 * PCF Access and Mobility Policy Authorization Service. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AmEventsSubscRespData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AmEventsSubscRespData::AmEventsSubscRespData() {
  m_EventNotifUri = "";
  m_EventsIsSet = false;
  m_EvSubsUri = "";
  m_EvSubsUriIsSet = false;
}

AmEventsSubscRespData::~AmEventsSubscRespData() {}

void AmEventsSubscRespData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AmEventsSubscRespData &o) {
  j = nlohmann::json();
  j["eventNotifUri"] = o.m_EventNotifUri;
  if (o.eventsIsSet() || !o.m_Events.empty())
    j["events"] = o.m_Events;
  if (o.evSubsUriIsSet())
    j["evSubsUri"] = o.m_EvSubsUri;
  j["evNotifs"] = o.m_EvNotifs;
}

void from_json(const nlohmann::json &j, AmEventsSubscRespData &o) {
  j.at("eventNotifUri").get_to(o.m_EventNotifUri);
  if (j.find("events") != j.end()) {
    j.at("events").get_to(o.m_Events);
    o.m_EventsIsSet = true;
  }
  if (j.find("evSubsUri") != j.end()) {
    j.at("evSubsUri").get_to(o.m_EvSubsUri);
    o.m_EvSubsUriIsSet = true;
  }
  j.at("evNotifs").get_to(o.m_EvNotifs);
}

std::string AmEventsSubscRespData::getEventNotifUri() const {
  return m_EventNotifUri;
}
void AmEventsSubscRespData::setEventNotifUri(std::string const &value) {
  m_EventNotifUri = value;
}
std::vector<std::string> &AmEventsSubscRespData::getEvents() {
  return m_Events;
}
void AmEventsSubscRespData::setEvents(std::vector<std::string> const &value) {
  m_Events = value;
  m_EventsIsSet = true;
}
bool AmEventsSubscRespData::eventsIsSet() const { return m_EventsIsSet; }
void AmEventsSubscRespData::unsetEvents() { m_EventsIsSet = false; }
std::string AmEventsSubscRespData::getEvSubsUri() const { return m_EvSubsUri; }
void AmEventsSubscRespData::setEvSubsUri(std::string const &value) {
  m_EvSubsUri = value;
  m_EvSubsUriIsSet = true;
}
bool AmEventsSubscRespData::evSubsUriIsSet() const { return m_EvSubsUriIsSet; }
void AmEventsSubscRespData::unsetEvSubsUri() { m_EvSubsUriIsSet = false; }
std::vector<std::string> &AmEventsSubscRespData::getEvNotifs() {
  return m_EvNotifs;
}
void AmEventsSubscRespData::setEvNotifs(std::vector<std::string> const &value) {
  m_EvNotifs = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
