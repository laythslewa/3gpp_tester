/**
 * 3gpp-bdt
 * API for BDT resouce management. © 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Bdt.h
 *
 * Represents a Background Data Transfer subscription.
 */

#ifndef Bdt_H_
#define Bdt_H_

#include "LocationArea.h"
#include "LocationArea5G.h"
#include "TimeWindow.h"
#include "TransferPolicy.h"
#include "UsageThreshold.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a Background Data Transfer subscription.
/// </summary>
class Bdt {
public:
  Bdt();
  virtual ~Bdt();

  void validate();

  /////////////////////////////////////////////
  /// Bdt members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const &value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  UsageThreshold getVolumePerUE() const;
  void setVolumePerUE(UsageThreshold const &value);
  /// <summary>
  /// Identifies the number of UEs.
  /// </summary>
  int32_t getNumberOfUEs() const;
  void setNumberOfUEs(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  TimeWindow getDesiredTimeWindow() const;
  void setDesiredTimeWindow(TimeWindow const &value);
  /// <summary>
  ///
  /// </summary>
  LocationArea getLocationArea() const;
  void setLocationArea(LocationArea const &value);
  bool locationAreaIsSet() const;
  void unsetLocationArea();
  /// <summary>
  ///
  /// </summary>
  LocationArea5G getLocationArea5G() const;
  void setLocationArea5G(LocationArea5G const &value);
  bool locationArea5GIsSet() const;
  void unsetLocationArea5G();
  /// <summary>
  /// string identifying a BDT Reference ID as defined in subclause 5.3.3 of
  /// 3GPP TS 29.154.
  /// </summary>
  std::string getReferenceId() const;
  void setReferenceId(std::string const &value);
  bool referenceIdIsSet() const;
  void unsetReferenceId();
  /// <summary>
  /// Identifies an offered transfer policy.
  /// </summary>
  std::vector<TransferPolicy> &getTransferPolicies();
  void setTransferPolicies(std::vector<TransferPolicy> const &value);
  bool transferPoliciesIsSet() const;
  void unsetTransferPolicies();
  /// <summary>
  /// Identity of the selected background data transfer policy. Shall not be
  /// present in initial message exchange, can be provided by NF service
  /// consumer in a subsequent message exchange.
  /// </summary>
  int32_t getSelectedPolicy() const;
  void setSelectedPolicy(int32_t const value);
  bool selectedPolicyIsSet() const;
  void unsetSelectedPolicy();
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more
  /// information.
  /// </summary>
  std::string getExternalGroupId() const;
  void setExternalGroupId(std::string const &value);
  bool externalGroupIdIsSet() const;
  void unsetExternalGroupId();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getNotificationDestination() const;
  void setNotificationDestination(std::string const &value);
  bool notificationDestinationIsSet() const;
  void unsetNotificationDestination();
  /// <summary>
  /// Indicates whether the BDT warning notification is enabled or not.
  /// </summary>
  bool isWarnNotifEnabled() const;
  void setWarnNotifEnabled(bool const value);
  bool warnNotifEnabledIsSet() const;
  void unsetWarnNotifEnabled();
  /// <summary>
  /// Identify a traffic descriptor as defined in Figure 5.2.2 of 3GPP
  /// TS 24.526, octets v+5 to w.
  /// </summary>
  std::string getTrafficDes() const;
  void setTrafficDes(std::string const &value);
  bool trafficDesIsSet() const;
  void unsetTrafficDes();

  friend void to_json(nlohmann::json &j, const Bdt &o);
  friend void from_json(const nlohmann::json &j, Bdt &o);

protected:
  std::string m_Self;
  bool m_SelfIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  UsageThreshold m_VolumePerUE;

  int32_t m_NumberOfUEs;

  TimeWindow m_DesiredTimeWindow;

  LocationArea m_LocationArea;
  bool m_LocationAreaIsSet;
  LocationArea5G m_LocationArea5G;
  bool m_LocationArea5GIsSet;
  std::string m_ReferenceId;
  bool m_ReferenceIdIsSet;
  std::vector<TransferPolicy> m_TransferPolicies;
  bool m_TransferPoliciesIsSet;
  int32_t m_SelectedPolicy;
  bool m_SelectedPolicyIsSet;
  std::string m_ExternalGroupId;
  bool m_ExternalGroupIdIsSet;
  std::string m_NotificationDestination;
  bool m_NotificationDestinationIsSet;
  bool m_WarnNotifEnabled;
  bool m_WarnNotifEnabledIsSet;
  std::string m_TrafficDes;
  bool m_TrafficDesIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* Bdt_H_ */
