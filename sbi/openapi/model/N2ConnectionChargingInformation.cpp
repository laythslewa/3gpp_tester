/**
 * Nchf_ConvergedCharging
 * ConvergedCharging Service    Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 3.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "N2ConnectionChargingInformation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

N2ConnectionChargingInformation::N2ConnectionChargingInformation() {
  m_N2ConnectionMessageType = 0;
  m_UserInformationIsSet = false;
  m_UserLocationinfoIsSet = false;
  m_PSCellInformationIsSet = false;
  m_UetimeZone = "";
  m_UetimeZoneIsSet = false;
  m_RATTypeIsSet = false;
  m_AmfUeNgapId = 0;
  m_AmfUeNgapIdIsSet = false;
  m_RanUeNgapId = 0;
  m_RanUeNgapIdIsSet = false;
  m_RanNodeIdIsSet = false;
  m_RestrictedRatListIsSet = false;
  m_ForbiddenAreaListIsSet = false;
  m_ServiceAreaRestrictionIsSet = false;
  m_RestrictedCnListIsSet = false;
  m_AllowedNSSAIIsSet = false;
  m_RrcEstCause = "";
  m_RrcEstCauseIsSet = false;
}

N2ConnectionChargingInformation::~N2ConnectionChargingInformation() {}

void N2ConnectionChargingInformation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const N2ConnectionChargingInformation &o) {
  j = nlohmann::json();
  j["n2ConnectionMessageType"] = o.m_N2ConnectionMessageType;
  if (o.userInformationIsSet())
    j["userInformation"] = o.m_UserInformation;
  if (o.userLocationinfoIsSet())
    j["userLocationinfo"] = o.m_UserLocationinfo;
  if (o.pSCellInformationIsSet())
    j["pSCellInformation"] = o.m_PSCellInformation;
  if (o.uetimeZoneIsSet())
    j["uetimeZone"] = o.m_UetimeZone;
  if (o.rATTypeIsSet())
    j["rATType"] = o.m_RATType;
  if (o.amfUeNgapIdIsSet())
    j["amfUeNgapId"] = o.m_AmfUeNgapId;
  if (o.ranUeNgapIdIsSet())
    j["ranUeNgapId"] = o.m_RanUeNgapId;
  if (o.ranNodeIdIsSet())
    j["ranNodeId"] = o.m_RanNodeId;
  if (o.restrictedRatListIsSet() || !o.m_RestrictedRatList.empty())
    j["restrictedRatList"] = o.m_RestrictedRatList;
  if (o.forbiddenAreaListIsSet() || !o.m_ForbiddenAreaList.empty())
    j["forbiddenAreaList"] = o.m_ForbiddenAreaList;
  if (o.serviceAreaRestrictionIsSet() || !o.m_ServiceAreaRestriction.empty())
    j["serviceAreaRestriction"] = o.m_ServiceAreaRestriction;
  if (o.restrictedCnListIsSet() || !o.m_RestrictedCnList.empty())
    j["restrictedCnList"] = o.m_RestrictedCnList;
  if (o.allowedNSSAIIsSet() || !o.m_AllowedNSSAI.empty())
    j["allowedNSSAI"] = o.m_AllowedNSSAI;
  if (o.rrcEstCauseIsSet())
    j["rrcEstCause"] = o.m_RrcEstCause;
}

void from_json(const nlohmann::json &j, N2ConnectionChargingInformation &o) {
  j.at("n2ConnectionMessageType").get_to(o.m_N2ConnectionMessageType);
  if (j.find("userInformation") != j.end()) {
    j.at("userInformation").get_to(o.m_UserInformation);
    o.m_UserInformationIsSet = true;
  }
  if (j.find("userLocationinfo") != j.end()) {
    j.at("userLocationinfo").get_to(o.m_UserLocationinfo);
    o.m_UserLocationinfoIsSet = true;
  }
  if (j.find("pSCellInformation") != j.end()) {
    j.at("pSCellInformation").get_to(o.m_PSCellInformation);
    o.m_PSCellInformationIsSet = true;
  }
  if (j.find("uetimeZone") != j.end()) {
    j.at("uetimeZone").get_to(o.m_UetimeZone);
    o.m_UetimeZoneIsSet = true;
  }
  if (j.find("rATType") != j.end()) {
    j.at("rATType").get_to(o.m_RATType);
    o.m_RATTypeIsSet = true;
  }
  if (j.find("amfUeNgapId") != j.end()) {
    j.at("amfUeNgapId").get_to(o.m_AmfUeNgapId);
    o.m_AmfUeNgapIdIsSet = true;
  }
  if (j.find("ranUeNgapId") != j.end()) {
    j.at("ranUeNgapId").get_to(o.m_RanUeNgapId);
    o.m_RanUeNgapIdIsSet = true;
  }
  if (j.find("ranNodeId") != j.end()) {
    j.at("ranNodeId").get_to(o.m_RanNodeId);
    o.m_RanNodeIdIsSet = true;
  }
  if (j.find("restrictedRatList") != j.end()) {
    j.at("restrictedRatList").get_to(o.m_RestrictedRatList);
    o.m_RestrictedRatListIsSet = true;
  }
  if (j.find("forbiddenAreaList") != j.end()) {
    j.at("forbiddenAreaList").get_to(o.m_ForbiddenAreaList);
    o.m_ForbiddenAreaListIsSet = true;
  }
  if (j.find("serviceAreaRestriction") != j.end()) {
    j.at("serviceAreaRestriction").get_to(o.m_ServiceAreaRestriction);
    o.m_ServiceAreaRestrictionIsSet = true;
  }
  if (j.find("restrictedCnList") != j.end()) {
    j.at("restrictedCnList").get_to(o.m_RestrictedCnList);
    o.m_RestrictedCnListIsSet = true;
  }
  if (j.find("allowedNSSAI") != j.end()) {
    j.at("allowedNSSAI").get_to(o.m_AllowedNSSAI);
    o.m_AllowedNSSAIIsSet = true;
  }
  if (j.find("rrcEstCause") != j.end()) {
    j.at("rrcEstCause").get_to(o.m_RrcEstCause);
    o.m_RrcEstCauseIsSet = true;
  }
}

int32_t N2ConnectionChargingInformation::getN2ConnectionMessageType() const {
  return m_N2ConnectionMessageType;
}
void N2ConnectionChargingInformation::setN2ConnectionMessageType(
    int32_t const value) {
  m_N2ConnectionMessageType = value;
}
UserInformation N2ConnectionChargingInformation::getUserInformation() const {
  return m_UserInformation;
}
void N2ConnectionChargingInformation::setUserInformation(
    UserInformation const &value) {
  m_UserInformation = value;
  m_UserInformationIsSet = true;
}
bool N2ConnectionChargingInformation::userInformationIsSet() const {
  return m_UserInformationIsSet;
}
void N2ConnectionChargingInformation::unsetUserInformation() {
  m_UserInformationIsSet = false;
}
UserLocation N2ConnectionChargingInformation::getUserLocationinfo() const {
  return m_UserLocationinfo;
}
void N2ConnectionChargingInformation::setUserLocationinfo(
    UserLocation const &value) {
  m_UserLocationinfo = value;
  m_UserLocationinfoIsSet = true;
}
bool N2ConnectionChargingInformation::userLocationinfoIsSet() const {
  return m_UserLocationinfoIsSet;
}
void N2ConnectionChargingInformation::unsetUserLocationinfo() {
  m_UserLocationinfoIsSet = false;
}
PSCellInformation
N2ConnectionChargingInformation::getPSCellInformation() const {
  return m_PSCellInformation;
}
void N2ConnectionChargingInformation::setPSCellInformation(
    PSCellInformation const &value) {
  m_PSCellInformation = value;
  m_PSCellInformationIsSet = true;
}
bool N2ConnectionChargingInformation::pSCellInformationIsSet() const {
  return m_PSCellInformationIsSet;
}
void N2ConnectionChargingInformation::unsetPSCellInformation() {
  m_PSCellInformationIsSet = false;
}
std::string N2ConnectionChargingInformation::getUetimeZone() const {
  return m_UetimeZone;
}
void N2ConnectionChargingInformation::setUetimeZone(std::string const &value) {
  m_UetimeZone = value;
  m_UetimeZoneIsSet = true;
}
bool N2ConnectionChargingInformation::uetimeZoneIsSet() const {
  return m_UetimeZoneIsSet;
}
void N2ConnectionChargingInformation::unsetUetimeZone() {
  m_UetimeZoneIsSet = false;
}
RatType N2ConnectionChargingInformation::getRATType() const {
  return m_RATType;
}
void N2ConnectionChargingInformation::setRATType(RatType const &value) {
  m_RATType = value;
  m_RATTypeIsSet = true;
}
bool N2ConnectionChargingInformation::rATTypeIsSet() const {
  return m_RATTypeIsSet;
}
void N2ConnectionChargingInformation::unsetRATType() { m_RATTypeIsSet = false; }
int32_t N2ConnectionChargingInformation::getAmfUeNgapId() const {
  return m_AmfUeNgapId;
}
void N2ConnectionChargingInformation::setAmfUeNgapId(int32_t const value) {
  m_AmfUeNgapId = value;
  m_AmfUeNgapIdIsSet = true;
}
bool N2ConnectionChargingInformation::amfUeNgapIdIsSet() const {
  return m_AmfUeNgapIdIsSet;
}
void N2ConnectionChargingInformation::unsetAmfUeNgapId() {
  m_AmfUeNgapIdIsSet = false;
}
int32_t N2ConnectionChargingInformation::getRanUeNgapId() const {
  return m_RanUeNgapId;
}
void N2ConnectionChargingInformation::setRanUeNgapId(int32_t const value) {
  m_RanUeNgapId = value;
  m_RanUeNgapIdIsSet = true;
}
bool N2ConnectionChargingInformation::ranUeNgapIdIsSet() const {
  return m_RanUeNgapIdIsSet;
}
void N2ConnectionChargingInformation::unsetRanUeNgapId() {
  m_RanUeNgapIdIsSet = false;
}
GlobalRanNodeId N2ConnectionChargingInformation::getRanNodeId() const {
  return m_RanNodeId;
}
void N2ConnectionChargingInformation::setRanNodeId(
    GlobalRanNodeId const &value) {
  m_RanNodeId = value;
  m_RanNodeIdIsSet = true;
}
bool N2ConnectionChargingInformation::ranNodeIdIsSet() const {
  return m_RanNodeIdIsSet;
}
void N2ConnectionChargingInformation::unsetRanNodeId() {
  m_RanNodeIdIsSet = false;
}
std::vector<RatType> &N2ConnectionChargingInformation::getRestrictedRatList() {
  return m_RestrictedRatList;
}
void N2ConnectionChargingInformation::setRestrictedRatList(
    std::vector<RatType> const &value) {
  m_RestrictedRatList = value;
  m_RestrictedRatListIsSet = true;
}
bool N2ConnectionChargingInformation::restrictedRatListIsSet() const {
  return m_RestrictedRatListIsSet;
}
void N2ConnectionChargingInformation::unsetRestrictedRatList() {
  m_RestrictedRatListIsSet = false;
}
std::vector<Area> &N2ConnectionChargingInformation::getForbiddenAreaList() {
  return m_ForbiddenAreaList;
}
void N2ConnectionChargingInformation::setForbiddenAreaList(
    std::vector<Area> const &value) {
  m_ForbiddenAreaList = value;
  m_ForbiddenAreaListIsSet = true;
}
bool N2ConnectionChargingInformation::forbiddenAreaListIsSet() const {
  return m_ForbiddenAreaListIsSet;
}
void N2ConnectionChargingInformation::unsetForbiddenAreaList() {
  m_ForbiddenAreaListIsSet = false;
}
std::vector<ServiceAreaRestriction> &
N2ConnectionChargingInformation::getServiceAreaRestriction() {
  return m_ServiceAreaRestriction;
}
void N2ConnectionChargingInformation::setServiceAreaRestriction(
    std::vector<ServiceAreaRestriction> const &value) {
  m_ServiceAreaRestriction = value;
  m_ServiceAreaRestrictionIsSet = true;
}
bool N2ConnectionChargingInformation::serviceAreaRestrictionIsSet() const {
  return m_ServiceAreaRestrictionIsSet;
}
void N2ConnectionChargingInformation::unsetServiceAreaRestriction() {
  m_ServiceAreaRestrictionIsSet = false;
}
std::vector<CoreNetworkType> &
N2ConnectionChargingInformation::getRestrictedCnList() {
  return m_RestrictedCnList;
}
void N2ConnectionChargingInformation::setRestrictedCnList(
    std::vector<CoreNetworkType> const &value) {
  m_RestrictedCnList = value;
  m_RestrictedCnListIsSet = true;
}
bool N2ConnectionChargingInformation::restrictedCnListIsSet() const {
  return m_RestrictedCnListIsSet;
}
void N2ConnectionChargingInformation::unsetRestrictedCnList() {
  m_RestrictedCnListIsSet = false;
}
std::vector<Snssai> &N2ConnectionChargingInformation::getAllowedNSSAI() {
  return m_AllowedNSSAI;
}
void N2ConnectionChargingInformation::setAllowedNSSAI(
    std::vector<Snssai> const &value) {
  m_AllowedNSSAI = value;
  m_AllowedNSSAIIsSet = true;
}
bool N2ConnectionChargingInformation::allowedNSSAIIsSet() const {
  return m_AllowedNSSAIIsSet;
}
void N2ConnectionChargingInformation::unsetAllowedNSSAI() {
  m_AllowedNSSAIIsSet = false;
}
std::string N2ConnectionChargingInformation::getRrcEstCause() const {
  return m_RrcEstCause;
}
void N2ConnectionChargingInformation::setRrcEstCause(std::string const &value) {
  m_RrcEstCause = value;
  m_RrcEstCauseIsSet = true;
}
bool N2ConnectionChargingInformation::rrcEstCauseIsSet() const {
  return m_RrcEstCauseIsSet;
}
void N2ConnectionChargingInformation::unsetRrcEstCause() {
  m_RrcEstCauseIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
