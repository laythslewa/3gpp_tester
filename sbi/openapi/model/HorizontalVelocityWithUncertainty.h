/**
 * LMF Location
 * LMF Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * HorizontalVelocityWithUncertainty.h
 *
 * Horizontal velocity with speed uncertainty.
 */

#ifndef HorizontalVelocityWithUncertainty_H_
#define HorizontalVelocityWithUncertainty_H_

#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Horizontal velocity with speed uncertainty.
/// </summary>
class HorizontalVelocityWithUncertainty {
public:
  HorizontalVelocityWithUncertainty();
  virtual ~HorizontalVelocityWithUncertainty();

  void validate();

  /////////////////////////////////////////////
  /// HorizontalVelocityWithUncertainty members

  /// <summary>
  /// Indicates value of horizontal speed.
  /// </summary>
  float getHSpeed() const;
  void setHSpeed(float const value);
  /// <summary>
  /// Indicates value of angle.
  /// </summary>
  int32_t getBearing() const;
  void setBearing(int32_t const value);
  /// <summary>
  /// Indicates value of speed uncertainty.
  /// </summary>
  float getHUncertainty() const;
  void setHUncertainty(float const value);

  friend void to_json(nlohmann::json &j,
                      const HorizontalVelocityWithUncertainty &o);
  friend void from_json(const nlohmann::json &j,
                        HorizontalVelocityWithUncertainty &o);

protected:
  float m_HSpeed;

  int32_t m_Bearing;

  float m_HUncertainty;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* HorizontalVelocityWithUncertainty_H_ */
