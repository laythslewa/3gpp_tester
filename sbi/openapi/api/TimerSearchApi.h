/**
 * Nudsf_Timer
 * Nudsf Timer Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TimerSearchApi.h
 *
 *
 */

#ifndef TimerSearchApi_H_
#define TimerSearchApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "NullValue.h"
#include "ProblemDetails.h"
#include "SearchExpression.h"
#include "TimerIdList.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class TimerSearchApi {
public:
  TimerSearchApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~TimerSearchApi() {}
  void init();

  const std::string base = "/nudsf-timer/v1";

private:
  void setupRoutes();

  void search_timer_handler(const Pistache::Rest::Request &request,
                            Pistache::Http::ResponseWriter response);
  void
  timer_search_api_default_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Timers search with get
  /// </summary>
  /// <remarks>
  /// Retrieve one or multiple TimerIDs based on filter
  /// </remarks>
  /// <param name="realmId">Identifier of the Realm</param>
  /// <param name="storageId">Identifier of the Storage</param>
  /// <param name="filter">Query filter using conditions on tags (optional,
  /// default to SearchExpression())</param> <param name="expiredFilter">Used to
  /// query for expired timers. (optional, default to NullValue())</param>
  /// <param name="supportedFeatures">Features required to be supported by the
  /// target NF (optional, default to &quot;&quot;)</param>
  virtual void
  search_timer(const std::string &realmId, const std::string &storageId,
               const Pistache::Optional<SearchExpression> &filter,
               const Pistache::Optional<NullValue> &expiredFilter,
               const Pistache::Optional<std::string> &supportedFeatures,
               Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* TimerSearchApi_H_ */
