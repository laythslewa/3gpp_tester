/**
 * GMDviaMBMSbyMB2
 * API for Group Message Delivery via MBMS by MB2 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TMGIAllocatinOperationApi.h
 *
 *
 */

#ifndef TMGIAllocatinOperationApi_H_
#define TMGIAllocatinOperationApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "ProblemDetails.h"
#include "TMGIAllocation.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class TMGIAllocatinOperationApi {
public:
  TMGIAllocatinOperationApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~TMGIAllocatinOperationApi() {}
  void init();

  const std::string base = "/3gpp-group-message-delivery-mb2/v1";

private:
  void setupRoutes();

  void scs_as_id_tmgi_allocation_get_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void scs_as_id_tmgi_allocation_post_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void tmgi_allocatin_operation_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// read all TMGI Allocation resource for a given SCS/AS
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="scsAsId">Identifier of SCS/AS</param>
  virtual void
  scs_as_id_tmgi_allocation_get(const std::string &scsAsId,
                                Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// creates a new TMGI Allocation resource for a given SCS/AS
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="scsAsId">Identifier of SCS/AS</param>
  /// <param name="tMGIAllocation">representation of the TMGI Allocation to be
  /// created in the SCEF</param>
  virtual void
  scs_as_id_tmgi_allocation_post(const std::string &scsAsId,
                                 const TMGIAllocation &tMGIAllocation,
                                 Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* TMGIAllocatinOperationApi_H_ */
