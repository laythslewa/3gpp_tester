/**
 * Unified Data Repository Service API file for Application Data
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DataFilter.h
 *
 * Identifies a data filter.
 */

#ifndef DataFilter_H_
#define DataFilter_H_

#include "DataInd.h"
#include "Ipv6Addr.h"
#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Identifies a data filter.
/// </summary>
class DataFilter {
public:
  DataFilter();
  virtual ~DataFilter();

  void validate();

  /////////////////////////////////////////////
  /// DataFilter members

  /// <summary>
  ///
  /// </summary>
  DataInd getDataInd() const;
  void setDataInd(DataInd const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getDnns();
  void setDnns(std::vector<std::string> const &value);
  bool dnnsIsSet() const;
  void unsetDnns();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getSnssais();
  void setSnssais(std::vector<Snssai> const &value);
  bool snssaisIsSet() const;
  void unsetSnssais();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getInternalGroupIds();
  void setInternalGroupIds(std::vector<std::string> const &value);
  bool internalGroupIdsIsSet() const;
  void unsetInternalGroupIds();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getSupis();
  void setSupis(std::vector<std::string> const &value);
  bool supisIsSet() const;
  void unsetSupis();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getAppIds();
  void setAppIds(std::vector<std::string> const &value);
  bool appIdsIsSet() const;
  void unsetAppIds();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getUeIpv4s();
  void setUeIpv4s(std::vector<std::string> const &value);
  bool ueIpv4sIsSet() const;
  void unsetUeIpv4s();
  /// <summary>
  ///
  /// </summary>
  std::vector<Ipv6Addr> &getUeIpv6s();
  void setUeIpv6s(std::vector<Ipv6Addr> const &value);
  bool ueIpv6sIsSet() const;
  void unsetUeIpv6s();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getUeMacs();
  void setUeMacs(std::vector<std::string> const &value);
  bool ueMacsIsSet() const;
  void unsetUeMacs();

  friend void to_json(nlohmann::json &j, const DataFilter &o);
  friend void from_json(const nlohmann::json &j, DataFilter &o);

protected:
  DataInd m_DataInd;

  std::vector<std::string> m_Dnns;
  bool m_DnnsIsSet;
  std::vector<Snssai> m_Snssais;
  bool m_SnssaisIsSet;
  std::vector<std::string> m_InternalGroupIds;
  bool m_InternalGroupIdsIsSet;
  std::vector<std::string> m_Supis;
  bool m_SupisIsSet;
  std::vector<std::string> m_AppIds;
  bool m_AppIdsIsSet;
  std::vector<std::string> m_UeIpv4s;
  bool m_UeIpv4sIsSet;
  std::vector<Ipv6Addr> m_UeIpv6s;
  bool m_UeIpv6sIsSet;
  std::vector<std::string> m_UeMacs;
  bool m_UeMacsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* DataFilter_H_ */
