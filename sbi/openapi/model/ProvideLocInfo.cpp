/**
 * Namf_Location
 * AMF Location Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ProvideLocInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ProvideLocInfo::ProvideLocInfo() {
  m_CurrentLoc = false;
  m_CurrentLocIsSet = false;
  m_LocationIsSet = false;
  m_AdditionalLocationIsSet = false;
  m_GeoInfoIsSet = false;
  m_LocationAge = 0;
  m_LocationAgeIsSet = false;
  m_RatTypeIsSet = false;
  m_Timezone = "";
  m_TimezoneIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_OldGuamiIsSet = false;
}

ProvideLocInfo::~ProvideLocInfo() {}

void ProvideLocInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ProvideLocInfo &o) {
  j = nlohmann::json();
  if (o.currentLocIsSet())
    j["currentLoc"] = o.m_CurrentLoc;
  if (o.locationIsSet())
    j["location"] = o.m_Location;
  if (o.additionalLocationIsSet())
    j["additionalLocation"] = o.m_AdditionalLocation;
  if (o.geoInfoIsSet())
    j["geoInfo"] = o.m_GeoInfo;
  if (o.locationAgeIsSet())
    j["locationAge"] = o.m_LocationAge;
  if (o.ratTypeIsSet())
    j["ratType"] = o.m_RatType;
  if (o.timezoneIsSet())
    j["timezone"] = o.m_Timezone;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.oldGuamiIsSet())
    j["oldGuami"] = o.m_OldGuami;
}

void from_json(const nlohmann::json &j, ProvideLocInfo &o) {
  if (j.find("currentLoc") != j.end()) {
    j.at("currentLoc").get_to(o.m_CurrentLoc);
    o.m_CurrentLocIsSet = true;
  }
  if (j.find("location") != j.end()) {
    j.at("location").get_to(o.m_Location);
    o.m_LocationIsSet = true;
  }
  if (j.find("additionalLocation") != j.end()) {
    j.at("additionalLocation").get_to(o.m_AdditionalLocation);
    o.m_AdditionalLocationIsSet = true;
  }
  if (j.find("geoInfo") != j.end()) {
    j.at("geoInfo").get_to(o.m_GeoInfo);
    o.m_GeoInfoIsSet = true;
  }
  if (j.find("locationAge") != j.end()) {
    j.at("locationAge").get_to(o.m_LocationAge);
    o.m_LocationAgeIsSet = true;
  }
  if (j.find("ratType") != j.end()) {
    j.at("ratType").get_to(o.m_RatType);
    o.m_RatTypeIsSet = true;
  }
  if (j.find("timezone") != j.end()) {
    j.at("timezone").get_to(o.m_Timezone);
    o.m_TimezoneIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("oldGuami") != j.end()) {
    j.at("oldGuami").get_to(o.m_OldGuami);
    o.m_OldGuamiIsSet = true;
  }
}

bool ProvideLocInfo::isCurrentLoc() const { return m_CurrentLoc; }
void ProvideLocInfo::setCurrentLoc(bool const value) {
  m_CurrentLoc = value;
  m_CurrentLocIsSet = true;
}
bool ProvideLocInfo::currentLocIsSet() const { return m_CurrentLocIsSet; }
void ProvideLocInfo::unsetCurrentLoc() { m_CurrentLocIsSet = false; }
UserLocation ProvideLocInfo::getLocation() const { return m_Location; }
void ProvideLocInfo::setLocation(UserLocation const &value) {
  m_Location = value;
  m_LocationIsSet = true;
}
bool ProvideLocInfo::locationIsSet() const { return m_LocationIsSet; }
void ProvideLocInfo::unsetLocation() { m_LocationIsSet = false; }
UserLocation ProvideLocInfo::getAdditionalLocation() const {
  return m_AdditionalLocation;
}
void ProvideLocInfo::setAdditionalLocation(UserLocation const &value) {
  m_AdditionalLocation = value;
  m_AdditionalLocationIsSet = true;
}
bool ProvideLocInfo::additionalLocationIsSet() const {
  return m_AdditionalLocationIsSet;
}
void ProvideLocInfo::unsetAdditionalLocation() {
  m_AdditionalLocationIsSet = false;
}
GeographicArea ProvideLocInfo::getGeoInfo() const { return m_GeoInfo; }
void ProvideLocInfo::setGeoInfo(GeographicArea const &value) {
  m_GeoInfo = value;
  m_GeoInfoIsSet = true;
}
bool ProvideLocInfo::geoInfoIsSet() const { return m_GeoInfoIsSet; }
void ProvideLocInfo::unsetGeoInfo() { m_GeoInfoIsSet = false; }
int32_t ProvideLocInfo::getLocationAge() const { return m_LocationAge; }
void ProvideLocInfo::setLocationAge(int32_t const value) {
  m_LocationAge = value;
  m_LocationAgeIsSet = true;
}
bool ProvideLocInfo::locationAgeIsSet() const { return m_LocationAgeIsSet; }
void ProvideLocInfo::unsetLocationAge() { m_LocationAgeIsSet = false; }
RatType ProvideLocInfo::getRatType() const { return m_RatType; }
void ProvideLocInfo::setRatType(RatType const &value) {
  m_RatType = value;
  m_RatTypeIsSet = true;
}
bool ProvideLocInfo::ratTypeIsSet() const { return m_RatTypeIsSet; }
void ProvideLocInfo::unsetRatType() { m_RatTypeIsSet = false; }
std::string ProvideLocInfo::getTimezone() const { return m_Timezone; }
void ProvideLocInfo::setTimezone(std::string const &value) {
  m_Timezone = value;
  m_TimezoneIsSet = true;
}
bool ProvideLocInfo::timezoneIsSet() const { return m_TimezoneIsSet; }
void ProvideLocInfo::unsetTimezone() { m_TimezoneIsSet = false; }
std::string ProvideLocInfo::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void ProvideLocInfo::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool ProvideLocInfo::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void ProvideLocInfo::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
Guami ProvideLocInfo::getOldGuami() const { return m_OldGuami; }
void ProvideLocInfo::setOldGuami(Guami const &value) {
  m_OldGuami = value;
  m_OldGuamiIsSet = true;
}
bool ProvideLocInfo::oldGuamiIsSet() const { return m_OldGuamiIsSet; }
void ProvideLocInfo::unsetOldGuami() { m_OldGuamiIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
