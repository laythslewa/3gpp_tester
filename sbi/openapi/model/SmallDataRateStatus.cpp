/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.3.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SmallDataRateStatus.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SmallDataRateStatus::SmallDataRateStatus() {
  m_RemainPacketsUl = 0;
  m_RemainPacketsUlIsSet = false;
  m_RemainPacketsDl = 0;
  m_RemainPacketsDlIsSet = false;
  m_ValidityTime = "";
  m_ValidityTimeIsSet = false;
  m_RemainExReportsUl = 0;
  m_RemainExReportsUlIsSet = false;
  m_RemainExReportsDl = 0;
  m_RemainExReportsDlIsSet = false;
}

SmallDataRateStatus::~SmallDataRateStatus() {}

void SmallDataRateStatus::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SmallDataRateStatus &o) {
  j = nlohmann::json();
  if (o.remainPacketsUlIsSet())
    j["remainPacketsUl"] = o.m_RemainPacketsUl;
  if (o.remainPacketsDlIsSet())
    j["remainPacketsDl"] = o.m_RemainPacketsDl;
  if (o.validityTimeIsSet())
    j["validityTime"] = o.m_ValidityTime;
  if (o.remainExReportsUlIsSet())
    j["remainExReportsUl"] = o.m_RemainExReportsUl;
  if (o.remainExReportsDlIsSet())
    j["remainExReportsDl"] = o.m_RemainExReportsDl;
}

void from_json(const nlohmann::json &j, SmallDataRateStatus &o) {
  if (j.find("remainPacketsUl") != j.end()) {
    j.at("remainPacketsUl").get_to(o.m_RemainPacketsUl);
    o.m_RemainPacketsUlIsSet = true;
  }
  if (j.find("remainPacketsDl") != j.end()) {
    j.at("remainPacketsDl").get_to(o.m_RemainPacketsDl);
    o.m_RemainPacketsDlIsSet = true;
  }
  if (j.find("validityTime") != j.end()) {
    j.at("validityTime").get_to(o.m_ValidityTime);
    o.m_ValidityTimeIsSet = true;
  }
  if (j.find("remainExReportsUl") != j.end()) {
    j.at("remainExReportsUl").get_to(o.m_RemainExReportsUl);
    o.m_RemainExReportsUlIsSet = true;
  }
  if (j.find("remainExReportsDl") != j.end()) {
    j.at("remainExReportsDl").get_to(o.m_RemainExReportsDl);
    o.m_RemainExReportsDlIsSet = true;
  }
}

int32_t SmallDataRateStatus::getRemainPacketsUl() const {
  return m_RemainPacketsUl;
}
void SmallDataRateStatus::setRemainPacketsUl(int32_t const value) {
  m_RemainPacketsUl = value;
  m_RemainPacketsUlIsSet = true;
}
bool SmallDataRateStatus::remainPacketsUlIsSet() const {
  return m_RemainPacketsUlIsSet;
}
void SmallDataRateStatus::unsetRemainPacketsUl() {
  m_RemainPacketsUlIsSet = false;
}
int32_t SmallDataRateStatus::getRemainPacketsDl() const {
  return m_RemainPacketsDl;
}
void SmallDataRateStatus::setRemainPacketsDl(int32_t const value) {
  m_RemainPacketsDl = value;
  m_RemainPacketsDlIsSet = true;
}
bool SmallDataRateStatus::remainPacketsDlIsSet() const {
  return m_RemainPacketsDlIsSet;
}
void SmallDataRateStatus::unsetRemainPacketsDl() {
  m_RemainPacketsDlIsSet = false;
}
std::string SmallDataRateStatus::getValidityTime() const {
  return m_ValidityTime;
}
void SmallDataRateStatus::setValidityTime(std::string const &value) {
  m_ValidityTime = value;
  m_ValidityTimeIsSet = true;
}
bool SmallDataRateStatus::validityTimeIsSet() const {
  return m_ValidityTimeIsSet;
}
void SmallDataRateStatus::unsetValidityTime() { m_ValidityTimeIsSet = false; }
int32_t SmallDataRateStatus::getRemainExReportsUl() const {
  return m_RemainExReportsUl;
}
void SmallDataRateStatus::setRemainExReportsUl(int32_t const value) {
  m_RemainExReportsUl = value;
  m_RemainExReportsUlIsSet = true;
}
bool SmallDataRateStatus::remainExReportsUlIsSet() const {
  return m_RemainExReportsUlIsSet;
}
void SmallDataRateStatus::unsetRemainExReportsUl() {
  m_RemainExReportsUlIsSet = false;
}
int32_t SmallDataRateStatus::getRemainExReportsDl() const {
  return m_RemainExReportsDl;
}
void SmallDataRateStatus::setRemainExReportsDl(int32_t const value) {
  m_RemainExReportsDl = value;
  m_RemainExReportsDlIsSet = true;
}
bool SmallDataRateStatus::remainExReportsDlIsSet() const {
  return m_RemainExReportsDlIsSet;
}
void SmallDataRateStatus::unsetRemainExReportsDl() {
  m_RemainExReportsDlIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
