/**
 * SS_LocationReporting
 * API for SEAL Location Reporting Configuration. © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * LocationReportConfiguration.h
 *
 * Represents Location reporting configuration information.
 */

#ifndef LocationReportConfiguration_H_
#define LocationReportConfiguration_H_

#include "Accuracy.h"
#include "ValTargetUe.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents Location reporting configuration information.
/// </summary>
class LocationReportConfiguration {
public:
  LocationReportConfiguration();
  virtual ~LocationReportConfiguration();

  void validate();

  /////////////////////////////////////////////
  /// LocationReportConfiguration members

  /// <summary>
  ///
  /// </summary>
  std::string getValServerId() const;
  void setValServerId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  ValTargetUe getValTgtUe() const;
  void setValTgtUe(ValTargetUe const &value);
  /// <summary>
  ///
  /// </summary>
  bool isImmRep() const;
  void setImmRep(bool const value);
  bool immRepIsSet() const;
  void unsetImmRep();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getMonDur() const;
  void setMonDur(std::string const &value);
  bool monDurIsSet() const;
  void unsetMonDur();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getRepPeriod() const;
  void setRepPeriod(int32_t const value);
  bool repPeriodIsSet() const;
  void unsetRepPeriod();
  /// <summary>
  ///
  /// </summary>
  Accuracy getAccuracy() const;
  void setAccuracy(Accuracy const &value);
  bool accuracyIsSet() const;
  void unsetAccuracy();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();

  friend void to_json(nlohmann::json &j, const LocationReportConfiguration &o);
  friend void from_json(const nlohmann::json &j,
                        LocationReportConfiguration &o);

protected:
  std::string m_ValServerId;

  ValTargetUe m_ValTgtUe;

  bool m_ImmRep;
  bool m_ImmRepIsSet;
  std::string m_MonDur;
  bool m_MonDurIsSet;
  int32_t m_RepPeriod;
  bool m_RepPeriodIsSet;
  Accuracy m_Accuracy;
  bool m_AccuracyIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* LocationReportConfiguration_H_ */
