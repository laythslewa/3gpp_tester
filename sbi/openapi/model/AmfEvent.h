/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AmfEvent.h
 *
 * Describes an event to be subscribed
 */

#ifndef AmfEvent_H_
#define AmfEvent_H_

#include "AmfEventArea.h"
#include "AmfEventType.h"
#include "ExtSnssai.h"
#include "LocationFilter.h"
#include "PresenceInfo.h"
#include "ReachabilityFilter.h"
#include "TargetArea.h"
#include "TrafficDescriptor.h"
#include <map>
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Describes an event to be subscribed
/// </summary>
class AmfEvent {
public:
  AmfEvent();
  virtual ~AmfEvent();

  void validate();

  /////////////////////////////////////////////
  /// AmfEvent members

  /// <summary>
  ///
  /// </summary>
  AmfEventType getType() const;
  void setType(AmfEventType const &value);
  /// <summary>
  ///
  /// </summary>
  bool isImmediateFlag() const;
  void setImmediateFlag(bool const value);
  bool immediateFlagIsSet() const;
  void unsetImmediateFlag();
  /// <summary>
  ///
  /// </summary>
  std::vector<AmfEventArea> &getAreaList();
  void setAreaList(std::vector<AmfEventArea> const &value);
  bool areaListIsSet() const;
  void unsetAreaList();
  /// <summary>
  ///
  /// </summary>
  std::vector<LocationFilter> &getLocationFilterList();
  void setLocationFilterList(std::vector<LocationFilter> const &value);
  bool locationFilterListIsSet() const;
  void unsetLocationFilterList();
  /// <summary>
  ///
  /// </summary>
  int32_t getRefId() const;
  void setRefId(int32_t const value);
  bool refIdIsSet() const;
  void unsetRefId();
  /// <summary>
  ///
  /// </summary>
  std::vector<TrafficDescriptor> &getTrafficDescriptorList();
  void setTrafficDescriptorList(std::vector<TrafficDescriptor> const &value);
  bool trafficDescriptorListIsSet() const;
  void unsetTrafficDescriptorList();
  /// <summary>
  ///
  /// </summary>
  bool isReportUeReachable() const;
  void setReportUeReachable(bool const value);
  bool reportUeReachableIsSet() const;
  void unsetReportUeReachable();
  /// <summary>
  ///
  /// </summary>
  ReachabilityFilter getReachabilityFilter() const;
  void setReachabilityFilter(ReachabilityFilter const &value);
  bool reachabilityFilterIsSet() const;
  void unsetReachabilityFilter();
  /// <summary>
  ///
  /// </summary>
  bool isUdmDetectInd() const;
  void setUdmDetectInd(bool const value);
  bool udmDetectIndIsSet() const;
  void unsetUdmDetectInd();
  /// <summary>
  ///
  /// </summary>
  int32_t getMaxReports() const;
  void setMaxReports(int32_t const value);
  bool maxReportsIsSet() const;
  void unsetMaxReports();
  /// <summary>
  /// A map(list of key-value pairs) where praId serves as key.
  /// </summary>
  std::map<std::string, PresenceInfo> &getPresenceInfoList();
  void setPresenceInfoList(std::map<std::string, PresenceInfo> const &value);
  bool presenceInfoListIsSet() const;
  void unsetPresenceInfoList();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getMaxResponseTime() const;
  void setMaxResponseTime(int32_t const value);
  bool maxResponseTimeIsSet() const;
  void unsetMaxResponseTime();
  /// <summary>
  ///
  /// </summary>
  TargetArea getTargetArea() const;
  void setTargetArea(TargetArea const &value);
  bool targetAreaIsSet() const;
  void unsetTargetArea();
  /// <summary>
  ///
  /// </summary>
  std::vector<ExtSnssai> &getSnssaiFilter();
  void setSnssaiFilter(std::vector<ExtSnssai> const &value);
  bool snssaiFilterIsSet() const;
  void unsetSnssaiFilter();

  friend void to_json(nlohmann::json &j, const AmfEvent &o);
  friend void from_json(const nlohmann::json &j, AmfEvent &o);

protected:
  AmfEventType m_Type;

  bool m_ImmediateFlag;
  bool m_ImmediateFlagIsSet;
  std::vector<AmfEventArea> m_AreaList;
  bool m_AreaListIsSet;
  std::vector<LocationFilter> m_LocationFilterList;
  bool m_LocationFilterListIsSet;
  int32_t m_RefId;
  bool m_RefIdIsSet;
  std::vector<TrafficDescriptor> m_TrafficDescriptorList;
  bool m_TrafficDescriptorListIsSet;
  bool m_ReportUeReachable;
  bool m_ReportUeReachableIsSet;
  ReachabilityFilter m_ReachabilityFilter;
  bool m_ReachabilityFilterIsSet;
  bool m_UdmDetectInd;
  bool m_UdmDetectIndIsSet;
  int32_t m_MaxReports;
  bool m_MaxReportsIsSet;
  std::map<std::string, PresenceInfo> m_PresenceInfoList;
  bool m_PresenceInfoListIsSet;
  int32_t m_MaxResponseTime;
  bool m_MaxResponseTimeIsSet;
  TargetArea m_TargetArea;
  bool m_TargetAreaIsSet;
  std::vector<ExtSnssai> m_SnssaiFilter;
  bool m_SnssaiFilterIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AmfEvent_H_ */
