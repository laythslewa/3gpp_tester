/**
 * NRF NFDiscovery Service
 * NRF NFDiscovery Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SearchResult.h
 *
 * Contains the list of NF Profiles returned in a Discovery response
 */

#ifndef SearchResult_H_
#define SearchResult_H_

#include "NFProfile.h"
#include "NfInstanceInfo.h"
#include "PreferredSearch.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the list of NF Profiles returned in a Discovery response
/// </summary>
class SearchResult {
public:
  SearchResult();
  virtual ~SearchResult();

  void validate();

  /////////////////////////////////////////////
  /// SearchResult members

  /// <summary>
  ///
  /// </summary>
  int32_t getValidityPeriod() const;
  void setValidityPeriod(int32_t const value);
  bool validityPeriodIsSet() const;
  void unsetValidityPeriod();
  /// <summary>
  ///
  /// </summary>
  std::vector<NFProfile> &getNfInstances();
  void setNfInstances(std::vector<NFProfile> const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getSearchId() const;
  void setSearchId(std::string const &value);
  bool searchIdIsSet() const;
  void unsetSearchId();
  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 32-bit integer.
  /// </summary>
  int32_t getNumNfInstComplete() const;
  void setNumNfInstComplete(int32_t const value);
  bool numNfInstCompleteIsSet() const;
  void unsetNumNfInstComplete();
  /// <summary>
  ///
  /// </summary>
  PreferredSearch getPreferredSearch() const;
  void setPreferredSearch(PreferredSearch const &value);
  bool preferredSearchIsSet() const;
  void unsetPreferredSearch();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getNrfSupportedFeatures() const;
  void setNrfSupportedFeatures(std::string const &value);
  bool nrfSupportedFeaturesIsSet() const;
  void unsetNrfSupportedFeatures();
  /// <summary>
  /// List of matching NF instances. The key of the map is the NF instance ID.
  /// </summary>
  std::map<std::string, NfInstanceInfo> &getNfInstanceList();
  void setNfInstanceList(std::map<std::string, NfInstanceInfo> const &value);
  bool nfInstanceListIsSet() const;
  void unsetNfInstanceList();

  friend void to_json(nlohmann::json &j, const SearchResult &o);
  friend void from_json(const nlohmann::json &j, SearchResult &o);

protected:
  int32_t m_ValidityPeriod;
  bool m_ValidityPeriodIsSet;
  std::vector<NFProfile> m_NfInstances;

  std::string m_SearchId;
  bool m_SearchIdIsSet;
  int32_t m_NumNfInstComplete;
  bool m_NumNfInstCompleteIsSet;
  PreferredSearch m_PreferredSearch;
  bool m_PreferredSearchIsSet;
  std::string m_NrfSupportedFeatures;
  bool m_NrfSupportedFeaturesIsSet;
  std::map<std::string, NfInstanceInfo> m_NfInstanceList;
  bool m_NfInstanceListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SearchResult_H_ */
