/**
 * Ngmlc_Location
 * Ngmlc_Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AreaEventInfoExt.h
 *
 * Extended Area Event Information
 */

#ifndef AreaEventInfoExt_H_
#define AreaEventInfoExt_H_

#include "AreaEventInfo.h"
#include "AreaEventInfoAddition.h"
#include "GeographicArea.h"
#include "OccurrenceInfo.h"
#include "ReportingArea.h"
#include <nlohmann/json.hpp>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Extended Area Event Information
/// </summary>
class AreaEventInfoExt {
public:
  AreaEventInfoExt();
  virtual ~AreaEventInfoExt();

  void validate();

  /////////////////////////////////////////////
  /// AreaEventInfoExt members

  /// <summary>
  ///
  /// </summary>
  std::vector<ReportingArea> &getAreaDefinition();
  void setAreaDefinition(std::vector<ReportingArea> const &value);
  /// <summary>
  ///
  /// </summary>
  OccurrenceInfo getOccurrenceInfo() const;
  void setOccurrenceInfo(OccurrenceInfo const &value);
  bool occurrenceInfoIsSet() const;
  void unsetOccurrenceInfo();
  /// <summary>
  /// Minimum interval between event reports.
  /// </summary>
  int32_t getMinimumInterval() const;
  void setMinimumInterval(int32_t const value);
  bool minimumIntervalIsSet() const;
  void unsetMinimumInterval();
  /// <summary>
  /// Maximum interval between event reports.
  /// </summary>
  int32_t getMaximumInterval() const;
  void setMaximumInterval(int32_t const value);
  bool maximumIntervalIsSet() const;
  void unsetMaximumInterval();
  /// <summary>
  /// Maximum time interval between consecutive evaluations by a UE of a trigger
  /// event.
  /// </summary>
  int32_t getSamplingInterval() const;
  void setSamplingInterval(int32_t const value);
  bool samplingIntervalIsSet() const;
  void unsetSamplingInterval();
  /// <summary>
  /// Maximum duration of event reporting.
  /// </summary>
  int32_t getReportingDuration() const;
  void setReportingDuration(int32_t const value);
  bool reportingDurationIsSet() const;
  void unsetReportingDuration();
  /// <summary>
  ///
  /// </summary>
  bool isReportingLocationReq() const;
  void setReportingLocationReq(bool const value);
  bool reportingLocationReqIsSet() const;
  void unsetReportingLocationReq();
  /// <summary>
  ///
  /// </summary>
  std::vector<GeographicArea> &getGeoAreaList();
  void setGeoAreaList(std::vector<GeographicArea> const &value);
  bool geoAreaListIsSet() const;
  void unsetGeoAreaList();
  /// <summary>
  ///
  /// </summary>
  bool isIgnoreAreaDefInd() const;
  void setIgnoreAreaDefInd(bool const value);
  bool ignoreAreaDefIndIsSet() const;
  void unsetIgnoreAreaDefInd();

  friend void to_json(nlohmann::json &j, const AreaEventInfoExt &o);
  friend void from_json(const nlohmann::json &j, AreaEventInfoExt &o);

protected:
  std::vector<ReportingArea> m_AreaDefinition;

  OccurrenceInfo m_OccurrenceInfo;
  bool m_OccurrenceInfoIsSet;
  int32_t m_MinimumInterval;
  bool m_MinimumIntervalIsSet;
  int32_t m_MaximumInterval;
  bool m_MaximumIntervalIsSet;
  int32_t m_SamplingInterval;
  bool m_SamplingIntervalIsSet;
  int32_t m_ReportingDuration;
  bool m_ReportingDurationIsSet;
  bool m_ReportingLocationReq;
  bool m_ReportingLocationReqIsSet;
  std::vector<GeographicArea> m_GeoAreaList;
  bool m_GeoAreaListIsSet;
  bool m_IgnoreAreaDefInd;
  bool m_IgnoreAreaDefIndIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AreaEventInfoExt_H_ */
