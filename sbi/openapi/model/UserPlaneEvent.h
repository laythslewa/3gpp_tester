/**
 * 3gpp-as-session-with-qos
 * API for setting us an AS session with required QoS. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UserPlaneEvent.h
 *
 * Possible values are - SESSION_TERMINATION: Indicates that Rx session is
 * terminated. - LOSS_OF_BEARER : Indicates a loss of a bearer. -
 * RECOVERY_OF_BEARER: Indicates a recovery of a bearer. - RELEASE_OF_BEARER:
 * Indicates a release of a bearer. - USAGE_REPORT: Indicates the usage report
 * event. - FAILED_RESOURCES_ALLOCATION: Indicates the resource allocation is
 * failed. - QOS_GUARANTEED: The QoS targets of one or more SDFs are guaranteed
 * again. - QOS_NOT_GUARANTEED: The QoS targets of one or more SDFs are not
 * being guaranteed. - QOS_MONITORING: Indicates a QoS monitoring event. -
 * SUCCESSFUL_RESOURCES_ALLOCATION: Indicates the resource allocation is
 * successful.
 */

#ifndef UserPlaneEvent_H_
#define UserPlaneEvent_H_

#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Possible values are - SESSION_TERMINATION: Indicates that Rx session is
/// terminated. - LOSS_OF_BEARER : Indicates a loss of a bearer. -
/// RECOVERY_OF_BEARER: Indicates a recovery of a bearer. - RELEASE_OF_BEARER:
/// Indicates a release of a bearer. - USAGE_REPORT: Indicates the usage report
/// event. - FAILED_RESOURCES_ALLOCATION: Indicates the resource allocation is
/// failed. - QOS_GUARANTEED: The QoS targets of one or more SDFs are guaranteed
/// again. - QOS_NOT_GUARANTEED: The QoS targets of one or more SDFs are not
/// being guaranteed. - QOS_MONITORING: Indicates a QoS monitoring event. -
/// SUCCESSFUL_RESOURCES_ALLOCATION: Indicates the resource allocation is
/// successful.
/// </summary>
class UserPlaneEvent {
public:
  UserPlaneEvent();
  virtual ~UserPlaneEvent();

  void validate();

  /////////////////////////////////////////////
  /// UserPlaneEvent members

  friend void to_json(nlohmann::json &j, const UserPlaneEvent &o);
  friend void from_json(const nlohmann::json &j, UserPlaneEvent &o);

protected:
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UserPlaneEvent_H_ */
