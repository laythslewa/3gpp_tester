/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SubsToNotifyCollectionApi.h
 *
 *
 */

#ifndef SubsToNotifyCollectionApi_H_
#define SubsToNotifyCollectionApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "SubscriptionDataSubscriptions.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class SubsToNotifyCollectionApi {
public:
  SubsToNotifyCollectionApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~SubsToNotifyCollectionApi() {}
  void init();

  const std::string base = "";

private:
  void setupRoutes();

  void query_subs_to_notify_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);
  void remove_multiple_subscription_data_subscriptions_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void subscription_data_subscriptions_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void subs_to_notify_collection_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Retrieves the list of subscriptions
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId">UE id</param>
  /// <param name="supportedFeatures">Supported Features (optional, default to
  /// &quot;&quot;)</param>
  virtual void
  query_subs_to_notify(const Pistache::Optional<std::string> &ueId,
                       const Pistache::Optional<std::string> &supportedFeatures,
                       Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Deletes subscriptions identified by a given ue-id parameter
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueId">UE ID</param>
  /// <param name="nfInstanceId">NF Instance ID (optional, default to
  /// &quot;&quot;)</param> <param name="deleteAllNfs">Flag to delete
  /// subscriptions from all NFs (optional, default to false)</param> <param
  /// name="implicitUnsubscribeIndication">Implicit Unsubscribe Indication
  /// (optional, default to false)</param>
  virtual void remove_multiple_subscription_data_subscriptions(
      const Pistache::Optional<std::string> &ueId,
      const Pistache::Optional<std::string> &nfInstanceId,
      const Pistache::Optional<bool> &deleteAllNfs,
      const Pistache::Optional<bool> &implicitUnsubscribeIndication,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Subscription data subscriptions
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="subscriptionDataSubscriptions"></param>
  virtual void subscription_data_subscriptions(
      const SubscriptionDataSubscriptions &subscriptionDataSubscriptions,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SubsToNotifyCollectionApi_H_ */
