/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PcscfRestorationRequestData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PcscfRestorationRequestData::PcscfRestorationRequestData() {
  m_Dnn = "";
  m_DnnIsSet = false;
  m_IpDomain = "";
  m_IpDomainIsSet = false;
  m_SliceInfoIsSet = false;
  m_Supi = "";
  m_SupiIsSet = false;
  m_UeIpv4 = "";
  m_UeIpv4IsSet = false;
  m_UeIpv6IsSet = false;
}

PcscfRestorationRequestData::~PcscfRestorationRequestData() {}

void PcscfRestorationRequestData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PcscfRestorationRequestData &o) {
  j = nlohmann::json();
  if (o.dnnIsSet())
    j["dnn"] = o.m_Dnn;
  if (o.ipDomainIsSet())
    j["ipDomain"] = o.m_IpDomain;
  if (o.sliceInfoIsSet())
    j["sliceInfo"] = o.m_SliceInfo;
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  if (o.ueIpv4IsSet())
    j["ueIpv4"] = o.m_UeIpv4;
  if (o.ueIpv6IsSet())
    j["ueIpv6"] = o.m_UeIpv6;
}

void from_json(const nlohmann::json &j, PcscfRestorationRequestData &o) {
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
  if (j.find("ipDomain") != j.end()) {
    j.at("ipDomain").get_to(o.m_IpDomain);
    o.m_IpDomainIsSet = true;
  }
  if (j.find("sliceInfo") != j.end()) {
    j.at("sliceInfo").get_to(o.m_SliceInfo);
    o.m_SliceInfoIsSet = true;
  }
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("ueIpv4") != j.end()) {
    j.at("ueIpv4").get_to(o.m_UeIpv4);
    o.m_UeIpv4IsSet = true;
  }
  if (j.find("ueIpv6") != j.end()) {
    j.at("ueIpv6").get_to(o.m_UeIpv6);
    o.m_UeIpv6IsSet = true;
  }
}

std::string PcscfRestorationRequestData::getDnn() const { return m_Dnn; }
void PcscfRestorationRequestData::setDnn(std::string const &value) {
  m_Dnn = value;
  m_DnnIsSet = true;
}
bool PcscfRestorationRequestData::dnnIsSet() const { return m_DnnIsSet; }
void PcscfRestorationRequestData::unsetDnn() { m_DnnIsSet = false; }
std::string PcscfRestorationRequestData::getIpDomain() const {
  return m_IpDomain;
}
void PcscfRestorationRequestData::setIpDomain(std::string const &value) {
  m_IpDomain = value;
  m_IpDomainIsSet = true;
}
bool PcscfRestorationRequestData::ipDomainIsSet() const {
  return m_IpDomainIsSet;
}
void PcscfRestorationRequestData::unsetIpDomain() { m_IpDomainIsSet = false; }
Snssai PcscfRestorationRequestData::getSliceInfo() const { return m_SliceInfo; }
void PcscfRestorationRequestData::setSliceInfo(Snssai const &value) {
  m_SliceInfo = value;
  m_SliceInfoIsSet = true;
}
bool PcscfRestorationRequestData::sliceInfoIsSet() const {
  return m_SliceInfoIsSet;
}
void PcscfRestorationRequestData::unsetSliceInfo() { m_SliceInfoIsSet = false; }
std::string PcscfRestorationRequestData::getSupi() const { return m_Supi; }
void PcscfRestorationRequestData::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool PcscfRestorationRequestData::supiIsSet() const { return m_SupiIsSet; }
void PcscfRestorationRequestData::unsetSupi() { m_SupiIsSet = false; }
std::string PcscfRestorationRequestData::getUeIpv4() const { return m_UeIpv4; }
void PcscfRestorationRequestData::setUeIpv4(std::string const &value) {
  m_UeIpv4 = value;
  m_UeIpv4IsSet = true;
}
bool PcscfRestorationRequestData::ueIpv4IsSet() const { return m_UeIpv4IsSet; }
void PcscfRestorationRequestData::unsetUeIpv4() { m_UeIpv4IsSet = false; }
Ipv6Addr PcscfRestorationRequestData::getUeIpv6() const { return m_UeIpv6; }
void PcscfRestorationRequestData::setUeIpv6(Ipv6Addr const &value) {
  m_UeIpv6 = value;
  m_UeIpv6IsSet = true;
}
bool PcscfRestorationRequestData::ueIpv6IsSet() const { return m_UeIpv6IsSet; }
void PcscfRestorationRequestData::unsetUeIpv6() { m_UeIpv6IsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
