/**
 * N32 Handshake API
 * N32-c Handshake Service.  Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC).  All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IeInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

IeInfo::IeInfo() {
  m_ReqIe = "";
  m_ReqIeIsSet = false;
  m_RspIe = "";
  m_RspIeIsSet = false;
  m_IsModifiable = false;
  m_IsModifiableIsSet = false;
  m_IsModifiableByIpxIsSet = false;
}

IeInfo::~IeInfo() {}

void IeInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const IeInfo &o) {
  j = nlohmann::json();
  j["ieLoc"] = o.m_IeLoc;
  j["ieType"] = o.m_IeType;
  if (o.reqIeIsSet())
    j["reqIe"] = o.m_ReqIe;
  if (o.rspIeIsSet())
    j["rspIe"] = o.m_RspIe;
  if (o.isModifiableIsSet())
    j["isModifiable"] = o.m_IsModifiable;
  if (o.isModifiableByIpxIsSet() || !o.m_IsModifiableByIpx.empty())
    j["isModifiableByIpx"] = o.m_IsModifiableByIpx;
}

void from_json(const nlohmann::json &j, IeInfo &o) {
  j.at("ieLoc").get_to(o.m_IeLoc);
  j.at("ieType").get_to(o.m_IeType);
  if (j.find("reqIe") != j.end()) {
    j.at("reqIe").get_to(o.m_ReqIe);
    o.m_ReqIeIsSet = true;
  }
  if (j.find("rspIe") != j.end()) {
    j.at("rspIe").get_to(o.m_RspIe);
    o.m_RspIeIsSet = true;
  }
  if (j.find("isModifiable") != j.end()) {
    j.at("isModifiable").get_to(o.m_IsModifiable);
    o.m_IsModifiableIsSet = true;
  }
  if (j.find("isModifiableByIpx") != j.end()) {
    j.at("isModifiableByIpx").get_to(o.m_IsModifiableByIpx);
    o.m_IsModifiableByIpxIsSet = true;
  }
}

IeLocation IeInfo::getIeLoc() const { return m_IeLoc; }
void IeInfo::setIeLoc(IeLocation const &value) { m_IeLoc = value; }
IeType IeInfo::getIeType() const { return m_IeType; }
void IeInfo::setIeType(IeType const &value) { m_IeType = value; }
std::string IeInfo::getReqIe() const { return m_ReqIe; }
void IeInfo::setReqIe(std::string const &value) {
  m_ReqIe = value;
  m_ReqIeIsSet = true;
}
bool IeInfo::reqIeIsSet() const { return m_ReqIeIsSet; }
void IeInfo::unsetReqIe() { m_ReqIeIsSet = false; }
std::string IeInfo::getRspIe() const { return m_RspIe; }
void IeInfo::setRspIe(std::string const &value) {
  m_RspIe = value;
  m_RspIeIsSet = true;
}
bool IeInfo::rspIeIsSet() const { return m_RspIeIsSet; }
void IeInfo::unsetRspIe() { m_RspIeIsSet = false; }
bool IeInfo::isIsModifiable() const { return m_IsModifiable; }
void IeInfo::setIsModifiable(bool const value) {
  m_IsModifiable = value;
  m_IsModifiableIsSet = true;
}
bool IeInfo::isModifiableIsSet() const { return m_IsModifiableIsSet; }
void IeInfo::unsetIsModifiable() { m_IsModifiableIsSet = false; }
std::map<std::string, bool> &IeInfo::getIsModifiableByIpx() {
  return m_IsModifiableByIpx;
}
void IeInfo::setIsModifiableByIpx(std::map<std::string, bool> const value) {
  m_IsModifiableByIpx = value;
  m_IsModifiableByIpxIsSet = true;
}
bool IeInfo::isModifiableByIpxIsSet() const { return m_IsModifiableByIpxIsSet; }
void IeInfo::unsetIsModifiableByIpx() { m_IsModifiableByIpxIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
