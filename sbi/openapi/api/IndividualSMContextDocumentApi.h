/**
 * Nnef_SMContext
 * Nnef SMContext Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualSMContextDocumentApi.h
 *
 *
 */

#ifndef IndividualSMContextDocumentApi_H_
#define IndividualSMContextDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "DeliverReqData.h"
#include "ProblemDetails.h"
#include "RedirectResponse.h"
#include "SmContextReleaseData.h"
#include "SmContextReleasedData.h"
#include "SmContextUpdateData.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class IndividualSMContextDocumentApi {
public:
  IndividualSMContextDocumentApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~IndividualSMContextDocumentApi() {}
  void init();

  const std::string base = "/nnef-smcontext/v1";

private:
  void setupRoutes();

  void deliver_handler(const Pistache::Rest::Request &request,
                       Pistache::Http::ResponseWriter response);
  void r_delete_handler(const Pistache::Rest::Request &request,
                        Pistache::Http::ResponseWriter response);
  void update_handler(const Pistache::Rest::Request &request,
                      Pistache::Http::ResponseWriter response);
  void individual_sm_context_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Deliver Uplink MO Data
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  virtual void deliver(const Pistache::Rest::Request &request,
                       Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Delete SM Context
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="smContextId">SM Context Resource ID</param>
  /// <param name="smContextReleaseData"></param>
  virtual void r_delete(const std::string &smContextId,
                        const SmContextReleaseData &smContextReleaseData,
                        Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Update SM Context
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="smContextId">SM Context Resource ID</param>
  /// <param name="smContextUpdateData"></param>
  virtual void update(const std::string &smContextId,
                      const SmContextUpdateData &smContextUpdateData,
                      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IndividualSMContextDocumentApi_H_ */
