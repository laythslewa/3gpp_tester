/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * DefaultApiImpl.h
 *
 *
 */

#ifndef DEFAULT_API_IMPL_H_
#define DEFAULT_API_IMPL_H_

#include <memory>
#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>

#include <DefaultApi.h>

#include <pistache/optional.h>

#include "ChargingDataRequest.h"
#include "ChargingDataResponse.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class DefaultApiImpl : public org::openapitools::server::api::DefaultApi {
public:
  DefaultApiImpl(std::shared_ptr<Pistache::Rest::Router>);
  ~DefaultApiImpl() {}

  void offlinechargingdata_offline_charging_data_ref_release_post(
      const std::string &offlineChargingDataRef,
      const ChargingDataRequest &chargingDataRequest,
      Pistache::Http::ResponseWriter &response);
  void offlinechargingdata_offline_charging_data_ref_update_post(
      const std::string &offlineChargingDataRef,
      const ChargingDataRequest &chargingDataRequest,
      Pistache::Http::ResponseWriter &response);
  void offlinechargingdata_post(const ChargingDataRequest &chargingDataRequest,
                                Pistache::Http::ResponseWriter &response);
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif