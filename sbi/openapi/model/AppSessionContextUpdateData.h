/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AppSessionContextUpdateData.h
 *
 * Identifies the modifications to the \&quot;ascReqData\&quot; property of an
 * Individual Application Session Context which may include the modifications to
 * the sub-resource Events Subscription.
 */

#ifndef AppSessionContextUpdateData_H_
#define AppSessionContextUpdateData_H_

#include "AfRoutingRequirementRm.h"
#include "BridgeManagementContainer.h"
#include "EventsSubscReqDataRm.h"
#include "MediaComponentRm.h"
#include "MpsAction.h"
#include "PortManagementContainer.h"
#include "PreemptionControlInformationRm.h"
#include "ReservPriority.h"
#include "ServiceInfoStatus.h"
#include "SipForkingIndication.h"
#include "SponsoringStatus.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Identifies the modifications to the \&quot;ascReqData\&quot; property of an
/// Individual Application Session Context which may include the modifications
/// to the sub-resource Events Subscription.
/// </summary>
class AppSessionContextUpdateData {
public:
  AppSessionContextUpdateData();
  virtual ~AppSessionContextUpdateData();

  void validate();

  /////////////////////////////////////////////
  /// AppSessionContextUpdateData members

  /// <summary>
  /// Contains an AF application identifier.
  /// </summary>
  std::string getAfAppId() const;
  void setAfAppId(std::string const &value);
  bool afAppIdIsSet() const;
  void unsetAfAppId();
  /// <summary>
  ///
  /// </summary>
  AfRoutingRequirementRm getAfRoutReq() const;
  void setAfRoutReq(AfRoutingRequirementRm const &value);
  bool afRoutReqIsSet() const;
  void unsetAfRoutReq();
  /// <summary>
  /// Contains an identity of an application service provider.
  /// </summary>
  std::string getAspId() const;
  void setAspId(std::string const &value);
  bool aspIdIsSet() const;
  void unsetAspId();
  /// <summary>
  /// string identifying a BDT Reference ID as defined in subclause 5.3.3 of
  /// 3GPP TS 29.154.
  /// </summary>
  std::string getBdtRefId() const;
  void setBdtRefId(std::string const &value);
  bool bdtRefIdIsSet() const;
  void unsetBdtRefId();
  /// <summary>
  ///
  /// </summary>
  EventsSubscReqDataRm getEvSubsc() const;
  void setEvSubsc(EventsSubscReqDataRm const &value);
  bool evSubscIsSet() const;
  void unsetEvSubsc();
  /// <summary>
  /// indication of MCPTT service request
  /// </summary>
  std::string getMcpttId() const;
  void setMcpttId(std::string const &value);
  bool mcpttIdIsSet() const;
  void unsetMcpttId();
  /// <summary>
  /// indication of modification of MCVideo service
  /// </summary>
  std::string getMcVideoId() const;
  void setMcVideoId(std::string const &value);
  bool mcVideoIdIsSet() const;
  void unsetMcVideoId();
  /// <summary>
  /// Contains media component information. The key of the map is the medCompN
  /// attribute.
  /// </summary>
  std::map<std::string, MediaComponentRm> &getMedComponents();
  void setMedComponents(std::map<std::string, MediaComponentRm> const &value);
  bool medComponentsIsSet() const;
  void unsetMedComponents();
  /// <summary>
  ///
  /// </summary>
  MpsAction getMpsAction() const;
  void setMpsAction(MpsAction const &value);
  bool mpsActionIsSet() const;
  void unsetMpsAction();
  /// <summary>
  /// indication of MPS service request
  /// </summary>
  std::string getMpsId() const;
  void setMpsId(std::string const &value);
  bool mpsIdIsSet() const;
  void unsetMpsId();
  /// <summary>
  /// indication of MCS service request
  /// </summary>
  std::string getMcsId() const;
  void setMcsId(std::string const &value);
  bool mcsIdIsSet() const;
  void unsetMcsId();
  /// <summary>
  ///
  /// </summary>
  PreemptionControlInformationRm getPreemptControlInfo() const;
  void setPreemptControlInfo(PreemptionControlInformationRm const &value);
  bool preemptControlInfoIsSet() const;
  void unsetPreemptControlInfo();
  /// <summary>
  ///
  /// </summary>
  ReservPriority getResPrio() const;
  void setResPrio(ReservPriority const &value);
  bool resPrioIsSet() const;
  void unsetResPrio();
  /// <summary>
  ///
  /// </summary>
  ServiceInfoStatus getServInfStatus() const;
  void setServInfStatus(ServiceInfoStatus const &value);
  bool servInfStatusIsSet() const;
  void unsetServInfStatus();
  /// <summary>
  ///
  /// </summary>
  SipForkingIndication getSipForkInd() const;
  void setSipForkInd(SipForkingIndication const &value);
  bool sipForkIndIsSet() const;
  void unsetSipForkInd();
  /// <summary>
  /// Contains an identity of a sponsor.
  /// </summary>
  std::string getSponId() const;
  void setSponId(std::string const &value);
  bool sponIdIsSet() const;
  void unsetSponId();
  /// <summary>
  ///
  /// </summary>
  SponsoringStatus getSponStatus() const;
  void setSponStatus(SponsoringStatus const &value);
  bool sponStatusIsSet() const;
  void unsetSponStatus();
  /// <summary>
  ///
  /// </summary>
  BridgeManagementContainer getTsnBridgeManCont() const;
  void setTsnBridgeManCont(BridgeManagementContainer const &value);
  bool tsnBridgeManContIsSet() const;
  void unsetTsnBridgeManCont();
  /// <summary>
  ///
  /// </summary>
  PortManagementContainer getTsnPortManContDstt() const;
  void setTsnPortManContDstt(PortManagementContainer const &value);
  bool tsnPortManContDsttIsSet() const;
  void unsetTsnPortManContDstt();
  /// <summary>
  ///
  /// </summary>
  std::vector<PortManagementContainer> &getTsnPortManContNwtts();
  void
  setTsnPortManContNwtts(std::vector<PortManagementContainer> const &value);
  bool tsnPortManContNwttsIsSet() const;
  void unsetTsnPortManContNwtts();

  friend void to_json(nlohmann::json &j, const AppSessionContextUpdateData &o);
  friend void from_json(const nlohmann::json &j,
                        AppSessionContextUpdateData &o);

protected:
  std::string m_AfAppId;
  bool m_AfAppIdIsSet;
  AfRoutingRequirementRm m_AfRoutReq;
  bool m_AfRoutReqIsSet;
  std::string m_AspId;
  bool m_AspIdIsSet;
  std::string m_BdtRefId;
  bool m_BdtRefIdIsSet;
  EventsSubscReqDataRm m_EvSubsc;
  bool m_EvSubscIsSet;
  std::string m_McpttId;
  bool m_McpttIdIsSet;
  std::string m_McVideoId;
  bool m_McVideoIdIsSet;
  std::map<std::string, MediaComponentRm> m_MedComponents;
  bool m_MedComponentsIsSet;
  MpsAction m_MpsAction;
  bool m_MpsActionIsSet;
  std::string m_MpsId;
  bool m_MpsIdIsSet;
  std::string m_McsId;
  bool m_McsIdIsSet;
  PreemptionControlInformationRm m_PreemptControlInfo;
  bool m_PreemptControlInfoIsSet;
  ReservPriority m_ResPrio;
  bool m_ResPrioIsSet;
  ServiceInfoStatus m_ServInfStatus;
  bool m_ServInfStatusIsSet;
  SipForkingIndication m_SipForkInd;
  bool m_SipForkIndIsSet;
  std::string m_SponId;
  bool m_SponIdIsSet;
  SponsoringStatus m_SponStatus;
  bool m_SponStatusIsSet;
  BridgeManagementContainer m_TsnBridgeManCont;
  bool m_TsnBridgeManContIsSet;
  PortManagementContainer m_TsnPortManContDstt;
  bool m_TsnPortManContDsttIsSet;
  std::vector<PortManagementContainer> m_TsnPortManContNwtts;
  bool m_TsnPortManContNwttsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AppSessionContextUpdateData_H_ */
