/**
 * LMF Location
 * LMF Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EllipsoidArc_allOf.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

EllipsoidArc_allOf::EllipsoidArc_allOf() {
  m_InnerRadius = 0;
  m_UncertaintyRadius = 0.0f;
  m_OffsetAngle = 0;
  m_IncludedAngle = 0;
  m_Confidence = 0;
}

EllipsoidArc_allOf::~EllipsoidArc_allOf() {}

void EllipsoidArc_allOf::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EllipsoidArc_allOf &o) {
  j = nlohmann::json();
  j["point"] = o.m_Point;
  j["innerRadius"] = o.m_InnerRadius;
  j["uncertaintyRadius"] = o.m_UncertaintyRadius;
  j["offsetAngle"] = o.m_OffsetAngle;
  j["includedAngle"] = o.m_IncludedAngle;
  j["confidence"] = o.m_Confidence;
}

void from_json(const nlohmann::json &j, EllipsoidArc_allOf &o) {
  j.at("point").get_to(o.m_Point);
  j.at("innerRadius").get_to(o.m_InnerRadius);
  j.at("uncertaintyRadius").get_to(o.m_UncertaintyRadius);
  j.at("offsetAngle").get_to(o.m_OffsetAngle);
  j.at("includedAngle").get_to(o.m_IncludedAngle);
  j.at("confidence").get_to(o.m_Confidence);
}

GeographicalCoordinates EllipsoidArc_allOf::getPoint() const { return m_Point; }
void EllipsoidArc_allOf::setPoint(GeographicalCoordinates const &value) {
  m_Point = value;
}
int32_t EllipsoidArc_allOf::getInnerRadius() const { return m_InnerRadius; }
void EllipsoidArc_allOf::setInnerRadius(int32_t const value) {
  m_InnerRadius = value;
}
float EllipsoidArc_allOf::getUncertaintyRadius() const {
  return m_UncertaintyRadius;
}
void EllipsoidArc_allOf::setUncertaintyRadius(float const value) {
  m_UncertaintyRadius = value;
}
int32_t EllipsoidArc_allOf::getOffsetAngle() const { return m_OffsetAngle; }
void EllipsoidArc_allOf::setOffsetAngle(int32_t const value) {
  m_OffsetAngle = value;
}
int32_t EllipsoidArc_allOf::getIncludedAngle() const { return m_IncludedAngle; }
void EllipsoidArc_allOf::setIncludedAngle(int32_t const value) {
  m_IncludedAngle = value;
}
int32_t EllipsoidArc_allOf::getConfidence() const { return m_Confidence; }
void EllipsoidArc_allOf::setConfidence(int32_t const value) {
  m_Confidence = value;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
