/**
 * Npcf_UEPolicyControl
 * UE Policy Control Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PolicyAssociationUpdateRequest.h
 *
 * Represents Information that the NF service consumer provides when requesting
 * the update of a policy association.
 */

#ifndef PolicyAssociationUpdateRequest_H_
#define PolicyAssociationUpdateRequest_H_

#include "CmState.h"
#include "Guami.h"
#include "Ipv6Addr.h"
#include "PlmnId.h"
#include "PresenceInfo.h"
#include "RequestTrigger.h"
#include "UePolicyTransferFailureNotification.h"
#include "UserLocation.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents Information that the NF service consumer provides when requesting
/// the update of a policy association.
/// </summary>
class PolicyAssociationUpdateRequest {
public:
  PolicyAssociationUpdateRequest();
  virtual ~PolicyAssociationUpdateRequest();

  void validate();

  /////////////////////////////////////////////
  /// PolicyAssociationUpdateRequest members

  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNotificationUri() const;
  void setNotificationUri(std::string const &value);
  bool notificationUriIsSet() const;
  void unsetNotificationUri();
  /// <summary>
  /// Alternate or backup IPv4 Address(es) where to send Notifications.
  /// </summary>
  std::vector<std::string> &getAltNotifIpv4Addrs();
  void setAltNotifIpv4Addrs(std::vector<std::string> const &value);
  bool altNotifIpv4AddrsIsSet() const;
  void unsetAltNotifIpv4Addrs();
  /// <summary>
  /// Alternate or backup IPv6 Address(es) where to send Notifications.
  /// </summary>
  std::vector<Ipv6Addr> &getAltNotifIpv6Addrs();
  void setAltNotifIpv6Addrs(std::vector<Ipv6Addr> const &value);
  bool altNotifIpv6AddrsIsSet() const;
  void unsetAltNotifIpv6Addrs();
  /// <summary>
  /// Alternate or backup FQDN(s) where to send Notifications.
  /// </summary>
  std::vector<std::string> &getAltNotifFqdns();
  void setAltNotifFqdns(std::vector<std::string> const &value);
  bool altNotifFqdnsIsSet() const;
  void unsetAltNotifFqdns();
  /// <summary>
  /// Request Triggers that the NF service consumer observes.
  /// </summary>
  std::vector<RequestTrigger> &getTriggers();
  void setTriggers(std::vector<RequestTrigger> const &value);
  bool triggersIsSet() const;
  void unsetTriggers();
  /// <summary>
  /// Contains the UE presence status for tracking area for which changes of the
  /// UE presence occurred. The praId attribute within the PresenceInfo data
  /// type is the key of the map.
  /// </summary>
  std::map<std::string, PresenceInfo> &getPraStatuses();
  void setPraStatuses(std::map<std::string, PresenceInfo> const &value);
  bool praStatusesIsSet() const;
  void unsetPraStatuses();
  /// <summary>
  ///
  /// </summary>
  UserLocation getUserLoc() const;
  void setUserLoc(UserLocation const &value);
  bool userLocIsSet() const;
  void unsetUserLoc();
  /// <summary>
  /// string with format \&quot;bytes\&quot; as defined in OpenAPI
  /// </summary>
  std::string getUePolDelResult() const;
  void setUePolDelResult(std::string const &value);
  bool uePolDelResultIsSet() const;
  void unsetUePolDelResult();
  /// <summary>
  ///
  /// </summary>
  UePolicyTransferFailureNotification getUePolTransFailNotif() const;
  void setUePolTransFailNotif(UePolicyTransferFailureNotification const &value);
  bool uePolTransFailNotifIsSet() const;
  void unsetUePolTransFailNotif();
  /// <summary>
  /// string with format \&quot;bytes\&quot; as defined in OpenAPI
  /// </summary>
  std::string getUePolReq() const;
  void setUePolReq(std::string const &value);
  bool uePolReqIsSet() const;
  void unsetUePolReq();
  /// <summary>
  ///
  /// </summary>
  Guami getGuami() const;
  void setGuami(Guami const &value);
  bool guamiIsSet() const;
  void unsetGuami();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getServingNfId() const;
  void setServingNfId(std::string const &value);
  bool servingNfIdIsSet() const;
  void unsetServingNfId();
  /// <summary>
  ///
  /// </summary>
  PlmnId getPlmnId() const;
  void setPlmnId(PlmnId const &value);
  bool plmnIdIsSet() const;
  void unsetPlmnId();
  /// <summary>
  ///
  /// </summary>
  CmState getConnectState() const;
  void setConnectState(CmState const &value);
  bool connectStateIsSet() const;
  void unsetConnectState();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getGroupIds();
  void setGroupIds(std::vector<std::string> const &value);
  bool groupIdsIsSet() const;
  void unsetGroupIds();

  friend void to_json(nlohmann::json &j,
                      const PolicyAssociationUpdateRequest &o);
  friend void from_json(const nlohmann::json &j,
                        PolicyAssociationUpdateRequest &o);

protected:
  std::string m_NotificationUri;
  bool m_NotificationUriIsSet;
  std::vector<std::string> m_AltNotifIpv4Addrs;
  bool m_AltNotifIpv4AddrsIsSet;
  std::vector<Ipv6Addr> m_AltNotifIpv6Addrs;
  bool m_AltNotifIpv6AddrsIsSet;
  std::vector<std::string> m_AltNotifFqdns;
  bool m_AltNotifFqdnsIsSet;
  std::vector<RequestTrigger> m_Triggers;
  bool m_TriggersIsSet;
  std::map<std::string, PresenceInfo> m_PraStatuses;
  bool m_PraStatusesIsSet;
  UserLocation m_UserLoc;
  bool m_UserLocIsSet;
  std::string m_UePolDelResult;
  bool m_UePolDelResultIsSet;
  UePolicyTransferFailureNotification m_UePolTransFailNotif;
  bool m_UePolTransFailNotifIsSet;
  std::string m_UePolReq;
  bool m_UePolReqIsSet;
  Guami m_Guami;
  bool m_GuamiIsSet;
  std::string m_ServingNfId;
  bool m_ServingNfIdIsSet;
  PlmnId m_PlmnId;
  bool m_PlmnIdIsSet;
  CmState m_ConnectState;
  bool m_ConnectStateIsSet;
  std::vector<std::string> m_GroupIds;
  bool m_GroupIdsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PolicyAssociationUpdateRequest_H_ */
