/**
 * Naf_EventExposure
 * AF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AfEventNotification.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AfEventNotification::AfEventNotification() {
  m_TimeStamp = "";
  m_SvcExprcInfosIsSet = false;
  m_UeMobilityInfosIsSet = false;
  m_UeCommInfosIsSet = false;
  m_ExcepInfosIsSet = false;
  m_CongestionInfosIsSet = false;
}

AfEventNotification::~AfEventNotification() {}

void AfEventNotification::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AfEventNotification &o) {
  j = nlohmann::json();
  j["event"] = o.m_Event;
  j["timeStamp"] = o.m_TimeStamp;
  if (o.svcExprcInfosIsSet() || !o.m_SvcExprcInfos.empty())
    j["svcExprcInfos"] = o.m_SvcExprcInfos;
  if (o.ueMobilityInfosIsSet() || !o.m_UeMobilityInfos.empty())
    j["ueMobilityInfos"] = o.m_UeMobilityInfos;
  if (o.ueCommInfosIsSet() || !o.m_UeCommInfos.empty())
    j["ueCommInfos"] = o.m_UeCommInfos;
  if (o.excepInfosIsSet() || !o.m_ExcepInfos.empty())
    j["excepInfos"] = o.m_ExcepInfos;
  if (o.congestionInfosIsSet() || !o.m_CongestionInfos.empty())
    j["congestionInfos"] = o.m_CongestionInfos;
}

void from_json(const nlohmann::json &j, AfEventNotification &o) {
  j.at("event").get_to(o.m_Event);
  j.at("timeStamp").get_to(o.m_TimeStamp);
  if (j.find("svcExprcInfos") != j.end()) {
    j.at("svcExprcInfos").get_to(o.m_SvcExprcInfos);
    o.m_SvcExprcInfosIsSet = true;
  }
  if (j.find("ueMobilityInfos") != j.end()) {
    j.at("ueMobilityInfos").get_to(o.m_UeMobilityInfos);
    o.m_UeMobilityInfosIsSet = true;
  }
  if (j.find("ueCommInfos") != j.end()) {
    j.at("ueCommInfos").get_to(o.m_UeCommInfos);
    o.m_UeCommInfosIsSet = true;
  }
  if (j.find("excepInfos") != j.end()) {
    j.at("excepInfos").get_to(o.m_ExcepInfos);
    o.m_ExcepInfosIsSet = true;
  }
  if (j.find("congestionInfos") != j.end()) {
    j.at("congestionInfos").get_to(o.m_CongestionInfos);
    o.m_CongestionInfosIsSet = true;
  }
}

AfEvent AfEventNotification::getEvent() const { return m_Event; }
void AfEventNotification::setEvent(AfEvent const &value) { m_Event = value; }
std::string AfEventNotification::getTimeStamp() const { return m_TimeStamp; }
void AfEventNotification::setTimeStamp(std::string const &value) {
  m_TimeStamp = value;
}
std::vector<ServiceExperienceInfoPerApp> &
AfEventNotification::getSvcExprcInfos() {
  return m_SvcExprcInfos;
}
void AfEventNotification::setSvcExprcInfos(
    std::vector<ServiceExperienceInfoPerApp> const &value) {
  m_SvcExprcInfos = value;
  m_SvcExprcInfosIsSet = true;
}
bool AfEventNotification::svcExprcInfosIsSet() const {
  return m_SvcExprcInfosIsSet;
}
void AfEventNotification::unsetSvcExprcInfos() { m_SvcExprcInfosIsSet = false; }
std::vector<UeMobilityCollection> &AfEventNotification::getUeMobilityInfos() {
  return m_UeMobilityInfos;
}
void AfEventNotification::setUeMobilityInfos(
    std::vector<UeMobilityCollection> const &value) {
  m_UeMobilityInfos = value;
  m_UeMobilityInfosIsSet = true;
}
bool AfEventNotification::ueMobilityInfosIsSet() const {
  return m_UeMobilityInfosIsSet;
}
void AfEventNotification::unsetUeMobilityInfos() {
  m_UeMobilityInfosIsSet = false;
}
std::vector<UeCommunicationCollection> &AfEventNotification::getUeCommInfos() {
  return m_UeCommInfos;
}
void AfEventNotification::setUeCommInfos(
    std::vector<UeCommunicationCollection> const &value) {
  m_UeCommInfos = value;
  m_UeCommInfosIsSet = true;
}
bool AfEventNotification::ueCommInfosIsSet() const {
  return m_UeCommInfosIsSet;
}
void AfEventNotification::unsetUeCommInfos() { m_UeCommInfosIsSet = false; }
std::vector<ExceptionInfo> &AfEventNotification::getExcepInfos() {
  return m_ExcepInfos;
}
void AfEventNotification::setExcepInfos(
    std::vector<ExceptionInfo> const &value) {
  m_ExcepInfos = value;
  m_ExcepInfosIsSet = true;
}
bool AfEventNotification::excepInfosIsSet() const { return m_ExcepInfosIsSet; }
void AfEventNotification::unsetExcepInfos() { m_ExcepInfosIsSet = false; }
std::vector<UserDataCongestionCollection> &
AfEventNotification::getCongestionInfos() {
  return m_CongestionInfos;
}
void AfEventNotification::setCongestionInfos(
    std::vector<UserDataCongestionCollection> const &value) {
  m_CongestionInfos = value;
  m_CongestionInfosIsSet = true;
}
bool AfEventNotification::congestionInfosIsSet() const {
  return m_CongestionInfosIsSet;
}
void AfEventNotification::unsetCongestionInfos() {
  m_CongestionInfosIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
