/**
 * 3gpp-nidd
 * API for non IP data delivery. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NiddDownlinkDataTransfer.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NiddDownlinkDataTransfer::NiddDownlinkDataTransfer() {
  m_ExternalId = "";
  m_ExternalIdIsSet = false;
  m_ExternalGroupId = "";
  m_ExternalGroupIdIsSet = false;
  m_Msisdn = "";
  m_MsisdnIsSet = false;
  m_Self = "";
  m_SelfIsSet = false;
  m_Data = "";
  m_ReliableDataService = false;
  m_ReliableDataServiceIsSet = false;
  m_RdsPortIsSet = false;
  m_MaximumLatency = 0;
  m_MaximumLatencyIsSet = false;
  m_Priority = 0;
  m_PriorityIsSet = false;
  m_PdnEstablishmentOptionIsSet = false;
  m_DeliveryStatusIsSet = false;
  m_RequestedRetransmissionTime = "";
  m_RequestedRetransmissionTimeIsSet = false;
}

NiddDownlinkDataTransfer::~NiddDownlinkDataTransfer() {}

void NiddDownlinkDataTransfer::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NiddDownlinkDataTransfer &o) {
  j = nlohmann::json();
  if (o.externalIdIsSet())
    j["externalId"] = o.m_ExternalId;
  if (o.externalGroupIdIsSet())
    j["externalGroupId"] = o.m_ExternalGroupId;
  if (o.msisdnIsSet())
    j["msisdn"] = o.m_Msisdn;
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  j["data"] = o.m_Data;
  if (o.reliableDataServiceIsSet())
    j["reliableDataService"] = o.m_ReliableDataService;
  if (o.rdsPortIsSet())
    j["rdsPort"] = o.m_RdsPort;
  if (o.maximumLatencyIsSet())
    j["maximumLatency"] = o.m_MaximumLatency;
  if (o.priorityIsSet())
    j["priority"] = o.m_Priority;
  if (o.pdnEstablishmentOptionIsSet())
    j["pdnEstablishmentOption"] = o.m_PdnEstablishmentOption;
  if (o.deliveryStatusIsSet())
    j["deliveryStatus"] = o.m_DeliveryStatus;
  if (o.requestedRetransmissionTimeIsSet())
    j["requestedRetransmissionTime"] = o.m_RequestedRetransmissionTime;
}

void from_json(const nlohmann::json &j, NiddDownlinkDataTransfer &o) {
  if (j.find("externalId") != j.end()) {
    j.at("externalId").get_to(o.m_ExternalId);
    o.m_ExternalIdIsSet = true;
  }
  if (j.find("externalGroupId") != j.end()) {
    j.at("externalGroupId").get_to(o.m_ExternalGroupId);
    o.m_ExternalGroupIdIsSet = true;
  }
  if (j.find("msisdn") != j.end()) {
    j.at("msisdn").get_to(o.m_Msisdn);
    o.m_MsisdnIsSet = true;
  }
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  j.at("data").get_to(o.m_Data);
  if (j.find("reliableDataService") != j.end()) {
    j.at("reliableDataService").get_to(o.m_ReliableDataService);
    o.m_ReliableDataServiceIsSet = true;
  }
  if (j.find("rdsPort") != j.end()) {
    j.at("rdsPort").get_to(o.m_RdsPort);
    o.m_RdsPortIsSet = true;
  }
  if (j.find("maximumLatency") != j.end()) {
    j.at("maximumLatency").get_to(o.m_MaximumLatency);
    o.m_MaximumLatencyIsSet = true;
  }
  if (j.find("priority") != j.end()) {
    j.at("priority").get_to(o.m_Priority);
    o.m_PriorityIsSet = true;
  }
  if (j.find("pdnEstablishmentOption") != j.end()) {
    j.at("pdnEstablishmentOption").get_to(o.m_PdnEstablishmentOption);
    o.m_PdnEstablishmentOptionIsSet = true;
  }
  if (j.find("deliveryStatus") != j.end()) {
    j.at("deliveryStatus").get_to(o.m_DeliveryStatus);
    o.m_DeliveryStatusIsSet = true;
  }
  if (j.find("requestedRetransmissionTime") != j.end()) {
    j.at("requestedRetransmissionTime").get_to(o.m_RequestedRetransmissionTime);
    o.m_RequestedRetransmissionTimeIsSet = true;
  }
}

std::string NiddDownlinkDataTransfer::getExternalId() const {
  return m_ExternalId;
}
void NiddDownlinkDataTransfer::setExternalId(std::string const &value) {
  m_ExternalId = value;
  m_ExternalIdIsSet = true;
}
bool NiddDownlinkDataTransfer::externalIdIsSet() const {
  return m_ExternalIdIsSet;
}
void NiddDownlinkDataTransfer::unsetExternalId() { m_ExternalIdIsSet = false; }
std::string NiddDownlinkDataTransfer::getExternalGroupId() const {
  return m_ExternalGroupId;
}
void NiddDownlinkDataTransfer::setExternalGroupId(std::string const &value) {
  m_ExternalGroupId = value;
  m_ExternalGroupIdIsSet = true;
}
bool NiddDownlinkDataTransfer::externalGroupIdIsSet() const {
  return m_ExternalGroupIdIsSet;
}
void NiddDownlinkDataTransfer::unsetExternalGroupId() {
  m_ExternalGroupIdIsSet = false;
}
std::string NiddDownlinkDataTransfer::getMsisdn() const { return m_Msisdn; }
void NiddDownlinkDataTransfer::setMsisdn(std::string const &value) {
  m_Msisdn = value;
  m_MsisdnIsSet = true;
}
bool NiddDownlinkDataTransfer::msisdnIsSet() const { return m_MsisdnIsSet; }
void NiddDownlinkDataTransfer::unsetMsisdn() { m_MsisdnIsSet = false; }
std::string NiddDownlinkDataTransfer::getSelf() const { return m_Self; }
void NiddDownlinkDataTransfer::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool NiddDownlinkDataTransfer::selfIsSet() const { return m_SelfIsSet; }
void NiddDownlinkDataTransfer::unsetSelf() { m_SelfIsSet = false; }
std::string NiddDownlinkDataTransfer::getData() const { return m_Data; }
void NiddDownlinkDataTransfer::setData(std::string const &value) {
  m_Data = value;
}
bool NiddDownlinkDataTransfer::isReliableDataService() const {
  return m_ReliableDataService;
}
void NiddDownlinkDataTransfer::setReliableDataService(bool const value) {
  m_ReliableDataService = value;
  m_ReliableDataServiceIsSet = true;
}
bool NiddDownlinkDataTransfer::reliableDataServiceIsSet() const {
  return m_ReliableDataServiceIsSet;
}
void NiddDownlinkDataTransfer::unsetReliableDataService() {
  m_ReliableDataServiceIsSet = false;
}
RdsPort NiddDownlinkDataTransfer::getRdsPort() const { return m_RdsPort; }
void NiddDownlinkDataTransfer::setRdsPort(RdsPort const &value) {
  m_RdsPort = value;
  m_RdsPortIsSet = true;
}
bool NiddDownlinkDataTransfer::rdsPortIsSet() const { return m_RdsPortIsSet; }
void NiddDownlinkDataTransfer::unsetRdsPort() { m_RdsPortIsSet = false; }
int32_t NiddDownlinkDataTransfer::getMaximumLatency() const {
  return m_MaximumLatency;
}
void NiddDownlinkDataTransfer::setMaximumLatency(int32_t const value) {
  m_MaximumLatency = value;
  m_MaximumLatencyIsSet = true;
}
bool NiddDownlinkDataTransfer::maximumLatencyIsSet() const {
  return m_MaximumLatencyIsSet;
}
void NiddDownlinkDataTransfer::unsetMaximumLatency() {
  m_MaximumLatencyIsSet = false;
}
int32_t NiddDownlinkDataTransfer::getPriority() const { return m_Priority; }
void NiddDownlinkDataTransfer::setPriority(int32_t const value) {
  m_Priority = value;
  m_PriorityIsSet = true;
}
bool NiddDownlinkDataTransfer::priorityIsSet() const { return m_PriorityIsSet; }
void NiddDownlinkDataTransfer::unsetPriority() { m_PriorityIsSet = false; }
PdnEstablishmentOptions
NiddDownlinkDataTransfer::getPdnEstablishmentOption() const {
  return m_PdnEstablishmentOption;
}
void NiddDownlinkDataTransfer::setPdnEstablishmentOption(
    PdnEstablishmentOptions const &value) {
  m_PdnEstablishmentOption = value;
  m_PdnEstablishmentOptionIsSet = true;
}
bool NiddDownlinkDataTransfer::pdnEstablishmentOptionIsSet() const {
  return m_PdnEstablishmentOptionIsSet;
}
void NiddDownlinkDataTransfer::unsetPdnEstablishmentOption() {
  m_PdnEstablishmentOptionIsSet = false;
}
DeliveryStatus NiddDownlinkDataTransfer::getDeliveryStatus() const {
  return m_DeliveryStatus;
}
void NiddDownlinkDataTransfer::setDeliveryStatus(DeliveryStatus const &value) {
  m_DeliveryStatus = value;
  m_DeliveryStatusIsSet = true;
}
bool NiddDownlinkDataTransfer::deliveryStatusIsSet() const {
  return m_DeliveryStatusIsSet;
}
void NiddDownlinkDataTransfer::unsetDeliveryStatus() {
  m_DeliveryStatusIsSet = false;
}
std::string NiddDownlinkDataTransfer::getRequestedRetransmissionTime() const {
  return m_RequestedRetransmissionTime;
}
void NiddDownlinkDataTransfer::setRequestedRetransmissionTime(
    std::string const &value) {
  m_RequestedRetransmissionTime = value;
  m_RequestedRetransmissionTimeIsSet = true;
}
bool NiddDownlinkDataTransfer::requestedRetransmissionTimeIsSet() const {
  return m_RequestedRetransmissionTimeIsSet;
}
void NiddDownlinkDataTransfer::unsetRequestedRetransmissionTime() {
  m_RequestedRetransmissionTimeIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
