/**
 * N32 Handshake API
 * N32-c Handshake Service.  Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC).  All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ProtectionPolicy.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ProtectionPolicy::ProtectionPolicy() { m_DataTypeEncPolicyIsSet = false; }

ProtectionPolicy::~ProtectionPolicy() {}

void ProtectionPolicy::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ProtectionPolicy &o) {
  j = nlohmann::json();
  j["apiIeMappingList"] = o.m_ApiIeMappingList;
  if (o.dataTypeEncPolicyIsSet() || !o.m_DataTypeEncPolicy.empty())
    j["dataTypeEncPolicy"] = o.m_DataTypeEncPolicy;
}

void from_json(const nlohmann::json &j, ProtectionPolicy &o) {
  j.at("apiIeMappingList").get_to(o.m_ApiIeMappingList);
  if (j.find("dataTypeEncPolicy") != j.end()) {
    j.at("dataTypeEncPolicy").get_to(o.m_DataTypeEncPolicy);
    o.m_DataTypeEncPolicyIsSet = true;
  }
}

std::vector<ApiIeMapping> &ProtectionPolicy::getApiIeMappingList() {
  return m_ApiIeMappingList;
}
void ProtectionPolicy::setApiIeMappingList(
    std::vector<ApiIeMapping> const &value) {
  m_ApiIeMappingList = value;
}
std::vector<IeType> &ProtectionPolicy::getDataTypeEncPolicy() {
  return m_DataTypeEncPolicy;
}
void ProtectionPolicy::setDataTypeEncPolicy(std::vector<IeType> const &value) {
  m_DataTypeEncPolicy = value;
  m_DataTypeEncPolicyIsSet = true;
}
bool ProtectionPolicy::dataTypeEncPolicyIsSet() const {
  return m_DataTypeEncPolicyIsSet;
}
void ProtectionPolicy::unsetDataTypeEncPolicy() {
  m_DataTypeEncPolicyIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
