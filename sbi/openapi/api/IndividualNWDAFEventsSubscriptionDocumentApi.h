/**
 * Nnwdaf_EventsSubscription
 * Nnwdaf_EventsSubscription Service API. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualNWDAFEventsSubscriptionDocumentApi.h
 *
 *
 */

#ifndef IndividualNWDAFEventsSubscriptionDocumentApi_H_
#define IndividualNWDAFEventsSubscriptionDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "NnwdafEventsSubscription.h"
#include "ProblemDetails.h"
#include "RedirectResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class IndividualNWDAFEventsSubscriptionDocumentApi {
public:
  IndividualNWDAFEventsSubscriptionDocumentApi(
      std::shared_ptr<Pistache::Rest::Router>);
  virtual ~IndividualNWDAFEventsSubscriptionDocumentApi() {}
  void init();

  const std::string base = "/nnwdaf-eventssubscription/v1";

private:
  void setupRoutes();

  void delete_nwdaf_events_subscription_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void update_nwdaf_events_subscription_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void individual_nwdaf_events_subscription_document_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Delete an existing Individual NWDAF Events Subscription
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="subscriptionId">String identifying a subscription to the
  /// Nnwdaf_EventsSubscription Service</param>
  virtual void delete_nwdaf_events_subscription(
      const std::string &subscriptionId,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Update an existing Individual NWDAF Events Subscription
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="subscriptionId">String identifying a subscription to the
  /// Nnwdaf_EventsSubscription Service</param> <param
  /// name="nnwdafEventsSubscription"></param>
  virtual void update_nwdaf_events_subscription(
      const std::string &subscriptionId,
      const NnwdafEventsSubscription &nnwdafEventsSubscription,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IndividualNWDAFEventsSubscriptionDocumentApi_H_ */
