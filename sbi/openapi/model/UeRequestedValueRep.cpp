/**
 * Npcf_UEPolicyControl
 * UE Policy Control Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeRequestedValueRep.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeRequestedValueRep::UeRequestedValueRep() {
  m_UserLocIsSet = false;
  m_PraStatusesIsSet = false;
  m_PlmnIdIsSet = false;
  m_ConnectStateIsSet = false;
}

UeRequestedValueRep::~UeRequestedValueRep() {}

void UeRequestedValueRep::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UeRequestedValueRep &o) {
  j = nlohmann::json();
  if (o.userLocIsSet())
    j["userLoc"] = o.m_UserLoc;
  if (o.praStatusesIsSet() || !o.m_PraStatuses.empty())
    j["praStatuses"] = o.m_PraStatuses;
  if (o.plmnIdIsSet())
    j["plmnId"] = o.m_PlmnId;
  if (o.connectStateIsSet())
    j["connectState"] = o.m_ConnectState;
}

void from_json(const nlohmann::json &j, UeRequestedValueRep &o) {
  if (j.find("userLoc") != j.end()) {
    j.at("userLoc").get_to(o.m_UserLoc);
    o.m_UserLocIsSet = true;
  }
  if (j.find("praStatuses") != j.end()) {
    j.at("praStatuses").get_to(o.m_PraStatuses);
    o.m_PraStatusesIsSet = true;
  }
  if (j.find("plmnId") != j.end()) {
    j.at("plmnId").get_to(o.m_PlmnId);
    o.m_PlmnIdIsSet = true;
  }
  if (j.find("connectState") != j.end()) {
    j.at("connectState").get_to(o.m_ConnectState);
    o.m_ConnectStateIsSet = true;
  }
}

UserLocation UeRequestedValueRep::getUserLoc() const { return m_UserLoc; }
void UeRequestedValueRep::setUserLoc(UserLocation const &value) {
  m_UserLoc = value;
  m_UserLocIsSet = true;
}
bool UeRequestedValueRep::userLocIsSet() const { return m_UserLocIsSet; }
void UeRequestedValueRep::unsetUserLoc() { m_UserLocIsSet = false; }
std::map<std::string, PresenceInfo> &UeRequestedValueRep::getPraStatuses() {
  return m_PraStatuses;
}
void UeRequestedValueRep::setPraStatuses(
    std::map<std::string, PresenceInfo> const &value) {
  m_PraStatuses = value;
  m_PraStatusesIsSet = true;
}
bool UeRequestedValueRep::praStatusesIsSet() const {
  return m_PraStatusesIsSet;
}
void UeRequestedValueRep::unsetPraStatuses() { m_PraStatusesIsSet = false; }
PlmnId UeRequestedValueRep::getPlmnId() const { return m_PlmnId; }
void UeRequestedValueRep::setPlmnId(PlmnId const &value) {
  m_PlmnId = value;
  m_PlmnIdIsSet = true;
}
bool UeRequestedValueRep::plmnIdIsSet() const { return m_PlmnIdIsSet; }
void UeRequestedValueRep::unsetPlmnId() { m_PlmnIdIsSet = false; }
CmState UeRequestedValueRep::getConnectState() const { return m_ConnectState; }
void UeRequestedValueRep::setConnectState(CmState const &value) {
  m_ConnectState = value;
  m_ConnectStateIsSet = true;
}
bool UeRequestedValueRep::connectStateIsSet() const {
  return m_ConnectStateIsSet;
}
void UeRequestedValueRep::unsetConnectState() { m_ConnectStateIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
