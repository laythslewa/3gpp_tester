/**
 * Npcf_BDTPolicyControl Service API
 * PCF BDT Policy Control Service. © 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * BdtReqData.h
 *
 * Contains service requirements for creation a new Individual BDT policy
 * resource.
 */

#ifndef BdtReqData_H_
#define BdtReqData_H_

#include "NetworkAreaInfo.h"
#include "Snssai.h"
#include "TimeWindow.h"
#include "UsageThreshold.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains service requirements for creation a new Individual BDT policy
/// resource.
/// </summary>
class BdtReqData {
public:
  BdtReqData();
  virtual ~BdtReqData();

  void validate();

  /////////////////////////////////////////////
  /// BdtReqData members

  /// <summary>
  /// Contains an identity of an application service provider.
  /// </summary>
  std::string getAspId() const;
  void setAspId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  TimeWindow getDesTimeInt() const;
  void setDesTimeInt(TimeWindow const &value);
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  /// String identifying a group of devices network internal globally unique ID
  /// which identifies a set of IMSIs, as specified in clause 19.9 of 3GPP
  /// TS 23.003.
  /// </summary>
  std::string getInterGroupId() const;
  void setInterGroupId(std::string const &value);
  bool interGroupIdIsSet() const;
  void unsetInterGroupId();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNotifUri() const;
  void setNotifUri(std::string const &value);
  bool notifUriIsSet() const;
  void unsetNotifUri();
  /// <summary>
  ///
  /// </summary>
  NetworkAreaInfo getNwAreaInfo() const;
  void setNwAreaInfo(NetworkAreaInfo const &value);
  bool nwAreaInfoIsSet() const;
  void unsetNwAreaInfo();
  /// <summary>
  /// Indicates a number of UEs.
  /// </summary>
  int32_t getNumOfUes() const;
  void setNumOfUes(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  UsageThreshold getVolPerUe() const;
  void setVolPerUe(UsageThreshold const &value);
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();
  /// <summary>
  /// Identify a traffic descriptor as defined in Figure 5.2.2 of 3GPP
  /// TS 24.526, octets v+5 to w.
  /// </summary>
  std::string getTrafficDes() const;
  void setTrafficDes(std::string const &value);
  bool trafficDesIsSet() const;
  void unsetTrafficDes();
  /// <summary>
  /// Indicates whether the BDT warning notification is enabled or disabled.
  /// </summary>
  bool isWarnNotifReq() const;
  void setWarnNotifReq(bool const value);
  bool warnNotifReqIsSet() const;
  void unsetWarnNotifReq();

  friend void to_json(nlohmann::json &j, const BdtReqData &o);
  friend void from_json(const nlohmann::json &j, BdtReqData &o);

protected:
  std::string m_AspId;

  TimeWindow m_DesTimeInt;

  std::string m_Dnn;
  bool m_DnnIsSet;
  std::string m_InterGroupId;
  bool m_InterGroupIdIsSet;
  std::string m_NotifUri;
  bool m_NotifUriIsSet;
  NetworkAreaInfo m_NwAreaInfo;
  bool m_NwAreaInfoIsSet;
  int32_t m_NumOfUes;

  UsageThreshold m_VolPerUe;

  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
  std::string m_TrafficDes;
  bool m_TrafficDesIsSet;
  bool m_WarnNotifReq;
  bool m_WarnNotifReqIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* BdtReqData_H_ */
