/**
 * LMF Broadcast
 * LMF Broadcast Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "CipheringDataSet.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

CipheringDataSet::CipheringDataSet() {
  m_CipheringSetID = 0;
  m_LtePosSibTypesIsSet = false;
  m_NrPosSibTypesIsSet = false;
  m_ValidityStartTime = "";
  m_ValidityDuration = 0;
  m_TaiListIsSet = false;
}

CipheringDataSet::~CipheringDataSet() {}

void CipheringDataSet::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const CipheringDataSet &o) {
  j = nlohmann::json();
  j["cipheringSetID"] = o.m_CipheringSetID;
  j["cipheringKey"] = o.m_CipheringKey;
  j["c0"] = o.m_C0;
  if (o.ltePosSibTypesIsSet())
    j["ltePosSibTypes"] = o.m_LtePosSibTypes;
  if (o.nrPosSibTypesIsSet())
    j["nrPosSibTypes"] = o.m_NrPosSibTypes;
  j["validityStartTime"] = o.m_ValidityStartTime;
  j["validityDuration"] = o.m_ValidityDuration;
  if (o.taiListIsSet())
    j["taiList"] = o.m_TaiList;
}

void from_json(const nlohmann::json &j, CipheringDataSet &o) {
  j.at("cipheringSetID").get_to(o.m_CipheringSetID);
  j.at("cipheringKey").get_to(o.m_CipheringKey);
  j.at("c0").get_to(o.m_C0);
  if (j.find("ltePosSibTypes") != j.end()) {
    j.at("ltePosSibTypes").get_to(o.m_LtePosSibTypes);
    o.m_LtePosSibTypesIsSet = true;
  }
  if (j.find("nrPosSibTypes") != j.end()) {
    j.at("nrPosSibTypes").get_to(o.m_NrPosSibTypes);
    o.m_NrPosSibTypesIsSet = true;
  }
  j.at("validityStartTime").get_to(o.m_ValidityStartTime);
  j.at("validityDuration").get_to(o.m_ValidityDuration);
  if (j.find("taiList") != j.end()) {
    j.at("taiList").get_to(o.m_TaiList);
    o.m_TaiListIsSet = true;
  }
}

int32_t CipheringDataSet::getCipheringSetID() const { return m_CipheringSetID; }
void CipheringDataSet::setCipheringSetID(int32_t const value) {
  m_CipheringSetID = value;
}
std::string CipheringDataSet::getCipheringKey() const { return m_CipheringKey; }
void CipheringDataSet::setCipheringKey(std::string const &value) {
  m_CipheringKey = value;
}
std::string CipheringDataSet::getC0() const { return m_C0; }
void CipheringDataSet::setC0(std::string const &value) { m_C0 = value; }
std::string CipheringDataSet::getLtePosSibTypes() const {
  return m_LtePosSibTypes;
}
void CipheringDataSet::setLtePosSibTypes(std::string const &value) {
  m_LtePosSibTypes = value;
  m_LtePosSibTypesIsSet = true;
}
bool CipheringDataSet::ltePosSibTypesIsSet() const {
  return m_LtePosSibTypesIsSet;
}
void CipheringDataSet::unsetLtePosSibTypes() { m_LtePosSibTypesIsSet = false; }
std::string CipheringDataSet::getNrPosSibTypes() const {
  return m_NrPosSibTypes;
}
void CipheringDataSet::setNrPosSibTypes(std::string const &value) {
  m_NrPosSibTypes = value;
  m_NrPosSibTypesIsSet = true;
}
bool CipheringDataSet::nrPosSibTypesIsSet() const {
  return m_NrPosSibTypesIsSet;
}
void CipheringDataSet::unsetNrPosSibTypes() { m_NrPosSibTypesIsSet = false; }
std::string CipheringDataSet::getValidityStartTime() const {
  return m_ValidityStartTime;
}
void CipheringDataSet::setValidityStartTime(std::string const &value) {
  m_ValidityStartTime = value;
}
int32_t CipheringDataSet::getValidityDuration() const {
  return m_ValidityDuration;
}
void CipheringDataSet::setValidityDuration(int32_t const value) {
  m_ValidityDuration = value;
}
std::string CipheringDataSet::getTaiList() const { return m_TaiList; }
void CipheringDataSet::setTaiList(std::string const &value) {
  m_TaiList = value;
  m_TaiListIsSet = true;
}
bool CipheringDataSet::taiListIsSet() const { return m_TaiListIsSet; }
void CipheringDataSet::unsetTaiList() { m_TaiListIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
