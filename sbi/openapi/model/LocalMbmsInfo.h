/**
 * VAE_FileDistribution
 * API for VAE File Distribution Service Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * LocalMbmsInfo.h
 *
 * Contains the local MBMS information.
 */

#ifndef LocalMbmsInfo_H_
#define LocalMbmsInfo_H_

#include "Ipv6Addr.h"
#include "Ipv6Prefix.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the local MBMS information.
/// </summary>
class LocalMbmsInfo {
public:
  LocalMbmsInfo();
  virtual ~LocalMbmsInfo();

  void validate();

  /////////////////////////////////////////////
  /// LocalMbmsInfo members

  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getMbmsEnbIpv4MulAddr() const;
  void setMbmsEnbIpv4MulAddr(std::string const &value);
  bool mbmsEnbIpv4MulAddrIsSet() const;
  void unsetMbmsEnbIpv4MulAddr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Prefix getMbmsEnbIpv6MulAddr() const;
  void setMbmsEnbIpv6MulAddr(Ipv6Prefix const &value);
  bool mbmsEnbIpv6MulAddrIsSet() const;
  void unsetMbmsEnbIpv6MulAddr();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getMbmsGwIpv4SsmAddr() const;
  void setMbmsGwIpv4SsmAddr(std::string const &value);
  bool mbmsGwIpv4SsmAddrIsSet() const;
  void unsetMbmsGwIpv4SsmAddr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getMbmsGwIpv6SsmAddr() const;
  void setMbmsGwIpv6SsmAddr(Ipv6Addr const &value);
  bool mbmsGwIpv6SsmAddrIsSet() const;
  void unsetMbmsGwIpv6SsmAddr();
  /// <summary>
  ///
  /// </summary>
  std::string getCteid() const;
  void setCteid(std::string const &value);
  bool cteidIsSet() const;
  void unsetCteid();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getBmscIpv4Addr() const;
  void setBmscIpv4Addr(std::string const &value);
  bool bmscIpv4AddrIsSet() const;
  void unsetBmscIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getBmscIpv6Addr() const;
  void setBmscIpv6Addr(Ipv6Addr const &value);
  bool bmscIpv6AddrIsSet() const;
  void unsetBmscIpv6Addr();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getBmscPort() const;
  void setBmscPort(int32_t const value);
  bool bmscPortIsSet() const;
  void unsetBmscPort();

  friend void to_json(nlohmann::json &j, const LocalMbmsInfo &o);
  friend void from_json(const nlohmann::json &j, LocalMbmsInfo &o);

protected:
  std::string m_MbmsEnbIpv4MulAddr;
  bool m_MbmsEnbIpv4MulAddrIsSet;
  Ipv6Prefix m_MbmsEnbIpv6MulAddr;
  bool m_MbmsEnbIpv6MulAddrIsSet;
  std::string m_MbmsGwIpv4SsmAddr;
  bool m_MbmsGwIpv4SsmAddrIsSet;
  Ipv6Addr m_MbmsGwIpv6SsmAddr;
  bool m_MbmsGwIpv6SsmAddrIsSet;
  std::string m_Cteid;
  bool m_CteidIsSet;
  std::string m_BmscIpv4Addr;
  bool m_BmscIpv4AddrIsSet;
  Ipv6Addr m_BmscIpv6Addr;
  bool m_BmscIpv6AddrIsSet;
  int32_t m_BmscPort;
  bool m_BmscPortIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* LocalMbmsInfo_H_ */
