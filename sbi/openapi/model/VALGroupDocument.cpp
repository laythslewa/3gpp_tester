/**
 * SS_GroupManagement
 * API for SEAL Group management. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "VALGroupDocument.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

VALGroupDocument::VALGroupDocument() {
  m_ValGroupId = "";
  m_GrpDesc = "";
  m_GrpDescIsSet = false;
  m_MembersIsSet = false;
  m_ValGrpConf = "";
  m_ValGrpConfIsSet = false;
  m_ValServiceIdsIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
  m_ResUri = "";
  m_ResUriIsSet = false;
  m_LocInfoIsSet = false;
  m_AddLocInfoIsSet = false;
}

VALGroupDocument::~VALGroupDocument() {}

void VALGroupDocument::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const VALGroupDocument &o) {
  j = nlohmann::json();
  j["valGroupId"] = o.m_ValGroupId;
  if (o.grpDescIsSet())
    j["grpDesc"] = o.m_GrpDesc;
  if (o.membersIsSet() || !o.m_Members.empty())
    j["members"] = o.m_Members;
  if (o.valGrpConfIsSet())
    j["valGrpConf"] = o.m_ValGrpConf;
  if (o.valServiceIdsIsSet() || !o.m_ValServiceIds.empty())
    j["valServiceIds"] = o.m_ValServiceIds;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
  if (o.resUriIsSet())
    j["resUri"] = o.m_ResUri;
  if (o.locInfoIsSet())
    j["locInfo"] = o.m_LocInfo;
  if (o.addLocInfoIsSet())
    j["addLocInfo"] = o.m_AddLocInfo;
}

void from_json(const nlohmann::json &j, VALGroupDocument &o) {
  j.at("valGroupId").get_to(o.m_ValGroupId);
  if (j.find("grpDesc") != j.end()) {
    j.at("grpDesc").get_to(o.m_GrpDesc);
    o.m_GrpDescIsSet = true;
  }
  if (j.find("members") != j.end()) {
    j.at("members").get_to(o.m_Members);
    o.m_MembersIsSet = true;
  }
  if (j.find("valGrpConf") != j.end()) {
    j.at("valGrpConf").get_to(o.m_ValGrpConf);
    o.m_ValGrpConfIsSet = true;
  }
  if (j.find("valServiceIds") != j.end()) {
    j.at("valServiceIds").get_to(o.m_ValServiceIds);
    o.m_ValServiceIdsIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
  if (j.find("resUri") != j.end()) {
    j.at("resUri").get_to(o.m_ResUri);
    o.m_ResUriIsSet = true;
  }
  if (j.find("locInfo") != j.end()) {
    j.at("locInfo").get_to(o.m_LocInfo);
    o.m_LocInfoIsSet = true;
  }
  if (j.find("addLocInfo") != j.end()) {
    j.at("addLocInfo").get_to(o.m_AddLocInfo);
    o.m_AddLocInfoIsSet = true;
  }
}

std::string VALGroupDocument::getValGroupId() const { return m_ValGroupId; }
void VALGroupDocument::setValGroupId(std::string const &value) {
  m_ValGroupId = value;
}
std::string VALGroupDocument::getGrpDesc() const { return m_GrpDesc; }
void VALGroupDocument::setGrpDesc(std::string const &value) {
  m_GrpDesc = value;
  m_GrpDescIsSet = true;
}
bool VALGroupDocument::grpDescIsSet() const { return m_GrpDescIsSet; }
void VALGroupDocument::unsetGrpDesc() { m_GrpDescIsSet = false; }
std::vector<ValTargetUe> &VALGroupDocument::getMembers() { return m_Members; }
void VALGroupDocument::setMembers(std::vector<ValTargetUe> const &value) {
  m_Members = value;
  m_MembersIsSet = true;
}
bool VALGroupDocument::membersIsSet() const { return m_MembersIsSet; }
void VALGroupDocument::unsetMembers() { m_MembersIsSet = false; }
std::string VALGroupDocument::getValGrpConf() const { return m_ValGrpConf; }
void VALGroupDocument::setValGrpConf(std::string const &value) {
  m_ValGrpConf = value;
  m_ValGrpConfIsSet = true;
}
bool VALGroupDocument::valGrpConfIsSet() const { return m_ValGrpConfIsSet; }
void VALGroupDocument::unsetValGrpConf() { m_ValGrpConfIsSet = false; }
std::vector<std::string> &VALGroupDocument::getValServiceIds() {
  return m_ValServiceIds;
}
void VALGroupDocument::setValServiceIds(std::vector<std::string> const &value) {
  m_ValServiceIds = value;
  m_ValServiceIdsIsSet = true;
}
bool VALGroupDocument::valServiceIdsIsSet() const {
  return m_ValServiceIdsIsSet;
}
void VALGroupDocument::unsetValServiceIds() { m_ValServiceIdsIsSet = false; }
std::string VALGroupDocument::getSuppFeat() const { return m_SuppFeat; }
void VALGroupDocument::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool VALGroupDocument::suppFeatIsSet() const { return m_SuppFeatIsSet; }
void VALGroupDocument::unsetSuppFeat() { m_SuppFeatIsSet = false; }
std::string VALGroupDocument::getResUri() const { return m_ResUri; }
void VALGroupDocument::setResUri(std::string const &value) {
  m_ResUri = value;
  m_ResUriIsSet = true;
}
bool VALGroupDocument::resUriIsSet() const { return m_ResUriIsSet; }
void VALGroupDocument::unsetResUri() { m_ResUriIsSet = false; }
LocationInfo VALGroupDocument::getLocInfo() const { return m_LocInfo; }
void VALGroupDocument::setLocInfo(LocationInfo const &value) {
  m_LocInfo = value;
  m_LocInfoIsSet = true;
}
bool VALGroupDocument::locInfoIsSet() const { return m_LocInfoIsSet; }
void VALGroupDocument::unsetLocInfo() { m_LocInfoIsSet = false; }
LocationArea5G VALGroupDocument::getAddLocInfo() const { return m_AddLocInfo; }
void VALGroupDocument::setAddLocInfo(LocationArea5G const &value) {
  m_AddLocInfo = value;
  m_AddLocInfoIsSet = true;
}
bool VALGroupDocument::addLocInfoIsSet() const { return m_AddLocInfoIsSet; }
void VALGroupDocument::unsetAddLocInfo() { m_AddLocInfoIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
