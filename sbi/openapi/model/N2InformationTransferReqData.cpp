/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "N2InformationTransferReqData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

N2InformationTransferReqData::N2InformationTransferReqData() {
  m_TaiListIsSet = false;
  m_RatSelectorIsSet = false;
  m_GlobalRanNodeListIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

N2InformationTransferReqData::~N2InformationTransferReqData() {}

void N2InformationTransferReqData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const N2InformationTransferReqData &o) {
  j = nlohmann::json();
  if (o.taiListIsSet() || !o.m_TaiList.empty())
    j["taiList"] = o.m_TaiList;
  if (o.ratSelectorIsSet())
    j["ratSelector"] = o.m_RatSelector;
  if (o.globalRanNodeListIsSet() || !o.m_GlobalRanNodeList.empty())
    j["globalRanNodeList"] = o.m_GlobalRanNodeList;
  j["n2Information"] = o.m_N2Information;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, N2InformationTransferReqData &o) {
  if (j.find("taiList") != j.end()) {
    j.at("taiList").get_to(o.m_TaiList);
    o.m_TaiListIsSet = true;
  }
  if (j.find("ratSelector") != j.end()) {
    j.at("ratSelector").get_to(o.m_RatSelector);
    o.m_RatSelectorIsSet = true;
  }
  if (j.find("globalRanNodeList") != j.end()) {
    j.at("globalRanNodeList").get_to(o.m_GlobalRanNodeList);
    o.m_GlobalRanNodeListIsSet = true;
  }
  j.at("n2Information").get_to(o.m_N2Information);
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

std::vector<Tai> &N2InformationTransferReqData::getTaiList() {
  return m_TaiList;
}
void N2InformationTransferReqData::setTaiList(std::vector<Tai> const &value) {
  m_TaiList = value;
  m_TaiListIsSet = true;
}
bool N2InformationTransferReqData::taiListIsSet() const {
  return m_TaiListIsSet;
}
void N2InformationTransferReqData::unsetTaiList() { m_TaiListIsSet = false; }
RatSelector N2InformationTransferReqData::getRatSelector() const {
  return m_RatSelector;
}
void N2InformationTransferReqData::setRatSelector(RatSelector const &value) {
  m_RatSelector = value;
  m_RatSelectorIsSet = true;
}
bool N2InformationTransferReqData::ratSelectorIsSet() const {
  return m_RatSelectorIsSet;
}
void N2InformationTransferReqData::unsetRatSelector() {
  m_RatSelectorIsSet = false;
}
std::vector<GlobalRanNodeId> &
N2InformationTransferReqData::getGlobalRanNodeList() {
  return m_GlobalRanNodeList;
}
void N2InformationTransferReqData::setGlobalRanNodeList(
    std::vector<GlobalRanNodeId> const &value) {
  m_GlobalRanNodeList = value;
  m_GlobalRanNodeListIsSet = true;
}
bool N2InformationTransferReqData::globalRanNodeListIsSet() const {
  return m_GlobalRanNodeListIsSet;
}
void N2InformationTransferReqData::unsetGlobalRanNodeList() {
  m_GlobalRanNodeListIsSet = false;
}
N2InfoContainer N2InformationTransferReqData::getN2Information() const {
  return m_N2Information;
}
void N2InformationTransferReqData::setN2Information(
    N2InfoContainer const &value) {
  m_N2Information = value;
}
std::string N2InformationTransferReqData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void N2InformationTransferReqData::setSupportedFeatures(
    std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool N2InformationTransferReqData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void N2InformationTransferReqData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
