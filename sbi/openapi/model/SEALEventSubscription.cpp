/**
 * SS_Events
 * API for SEAL Events management. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SEALEventSubscription.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SEALEventSubscription::SEALEventSubscription() {
  m_SubscriberId = "";
  m_NotificationDestination = "";
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
  m_EventDetailsIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
}

SEALEventSubscription::~SEALEventSubscription() {}

void SEALEventSubscription::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SEALEventSubscription &o) {
  j = nlohmann::json();
  j["subscriberId"] = o.m_SubscriberId;
  j["eventSubs"] = o.m_EventSubs;
  j["eventReq"] = o.m_EventReq;
  j["notificationDestination"] = o.m_NotificationDestination;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  if (o.eventDetailsIsSet() || !o.m_EventDetails.empty())
    j["eventDetails"] = o.m_EventDetails;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, SEALEventSubscription &o) {
  j.at("subscriberId").get_to(o.m_SubscriberId);
  j.at("eventSubs").get_to(o.m_EventSubs);
  j.at("eventReq").get_to(o.m_EventReq);
  j.at("notificationDestination").get_to(o.m_NotificationDestination);
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  if (j.find("eventDetails") != j.end()) {
    j.at("eventDetails").get_to(o.m_EventDetails);
    o.m_EventDetailsIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::string SEALEventSubscription::getSubscriberId() const {
  return m_SubscriberId;
}
void SEALEventSubscription::setSubscriberId(std::string const &value) {
  m_SubscriberId = value;
}
std::vector<EventSubscription> &SEALEventSubscription::getEventSubs() {
  return m_EventSubs;
}
void SEALEventSubscription::setEventSubs(
    std::vector<EventSubscription> const &value) {
  m_EventSubs = value;
}
ReportingInformation SEALEventSubscription::getEventReq() const {
  return m_EventReq;
}
void SEALEventSubscription::setEventReq(ReportingInformation const &value) {
  m_EventReq = value;
}
std::string SEALEventSubscription::getNotificationDestination() const {
  return m_NotificationDestination;
}
void SEALEventSubscription::setNotificationDestination(
    std::string const &value) {
  m_NotificationDestination = value;
}
bool SEALEventSubscription::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void SEALEventSubscription::setRequestTestNotification(bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool SEALEventSubscription::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void SEALEventSubscription::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig SEALEventSubscription::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void SEALEventSubscription::setWebsockNotifConfig(
    WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool SEALEventSubscription::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void SEALEventSubscription::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
std::vector<SEALEventDetail> &SEALEventSubscription::getEventDetails() {
  return m_EventDetails;
}
void SEALEventSubscription::setEventDetails(
    std::vector<SEALEventDetail> const &value) {
  m_EventDetails = value;
  m_EventDetailsIsSet = true;
}
bool SEALEventSubscription::eventDetailsIsSet() const {
  return m_EventDetailsIsSet;
}
void SEALEventSubscription::unsetEventDetails() { m_EventDetailsIsSet = false; }
std::string SEALEventSubscription::getSuppFeat() const { return m_SuppFeat; }
void SEALEventSubscription::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool SEALEventSubscription::suppFeatIsSet() const { return m_SuppFeatIsSet; }
void SEALEventSubscription::unsetSuppFeat() { m_SuppFeatIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
