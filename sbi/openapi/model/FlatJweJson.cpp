/**
 * JOSE Protected Message Forwarding API
 * N32-f Message Forwarding Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "FlatJweJson.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

FlatJweJson::FlatJweJson() {
  m_r_protected = "";
  m_r_protectedIsSet = false;
  m_UnprotectedIsSet = false;
  m_HeaderIsSet = false;
  m_Encrypted_key = "";
  m_Encrypted_keyIsSet = false;
  m_Aad = "";
  m_AadIsSet = false;
  m_Iv = "";
  m_IvIsSet = false;
  m_Ciphertext = "";
  m_Tag = "";
  m_TagIsSet = false;
}

FlatJweJson::~FlatJweJson() {}

void FlatJweJson::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const FlatJweJson &o) {
  j = nlohmann::json();
  if (o.rProtectedIsSet())
    j["protected"] = o.m_r_protected;
  if (o.unprotectedIsSet())
    j["unprotected"] = o.m_Unprotected;
  if (o.headerIsSet())
    j["header"] = o.m_Header;
  if (o.encryptedKeyIsSet())
    j["encrypted_key"] = o.m_Encrypted_key;
  if (o.aadIsSet())
    j["aad"] = o.m_Aad;
  if (o.ivIsSet())
    j["iv"] = o.m_Iv;
  j["ciphertext"] = o.m_Ciphertext;
  if (o.tagIsSet())
    j["tag"] = o.m_Tag;
}

void from_json(const nlohmann::json &j, FlatJweJson &o) {
  if (j.find("protected") != j.end()) {
    j.at("protected").get_to(o.m_r_protected);
    o.m_r_protectedIsSet = true;
  }
  if (j.find("unprotected") != j.end()) {
    j.at("unprotected").get_to(o.m_Unprotected);
    o.m_UnprotectedIsSet = true;
  }
  if (j.find("header") != j.end()) {
    j.at("header").get_to(o.m_Header);
    o.m_HeaderIsSet = true;
  }
  if (j.find("encrypted_key") != j.end()) {
    j.at("encrypted_key").get_to(o.m_Encrypted_key);
    o.m_Encrypted_keyIsSet = true;
  }
  if (j.find("aad") != j.end()) {
    j.at("aad").get_to(o.m_Aad);
    o.m_AadIsSet = true;
  }
  if (j.find("iv") != j.end()) {
    j.at("iv").get_to(o.m_Iv);
    o.m_IvIsSet = true;
  }
  j.at("ciphertext").get_to(o.m_Ciphertext);
  if (j.find("tag") != j.end()) {
    j.at("tag").get_to(o.m_Tag);
    o.m_TagIsSet = true;
  }
}

std::string FlatJweJson::getRProtected() const { return m_r_protected; }
void FlatJweJson::setRProtected(std::string const &value) {
  m_r_protected = value;
  m_r_protectedIsSet = true;
}
bool FlatJweJson::rProtectedIsSet() const { return m_r_protectedIsSet; }
void FlatJweJson::unsetr_protected() { m_r_protectedIsSet = false; }
Object FlatJweJson::getUnprotected() const { return m_Unprotected; }
void FlatJweJson::setUnprotected(Object const &value) {
  m_Unprotected = value;
  m_UnprotectedIsSet = true;
}
bool FlatJweJson::unprotectedIsSet() const { return m_UnprotectedIsSet; }
void FlatJweJson::unsetUnprotected() { m_UnprotectedIsSet = false; }
Object FlatJweJson::getHeader() const { return m_Header; }
void FlatJweJson::setHeader(Object const &value) {
  m_Header = value;
  m_HeaderIsSet = true;
}
bool FlatJweJson::headerIsSet() const { return m_HeaderIsSet; }
void FlatJweJson::unsetHeader() { m_HeaderIsSet = false; }
std::string FlatJweJson::getEncryptedKey() const { return m_Encrypted_key; }
void FlatJweJson::setEncryptedKey(std::string const &value) {
  m_Encrypted_key = value;
  m_Encrypted_keyIsSet = true;
}
bool FlatJweJson::encryptedKeyIsSet() const { return m_Encrypted_keyIsSet; }
void FlatJweJson::unsetEncrypted_key() { m_Encrypted_keyIsSet = false; }
std::string FlatJweJson::getAad() const { return m_Aad; }
void FlatJweJson::setAad(std::string const &value) {
  m_Aad = value;
  m_AadIsSet = true;
}
bool FlatJweJson::aadIsSet() const { return m_AadIsSet; }
void FlatJweJson::unsetAad() { m_AadIsSet = false; }
std::string FlatJweJson::getIv() const { return m_Iv; }
void FlatJweJson::setIv(std::string const &value) {
  m_Iv = value;
  m_IvIsSet = true;
}
bool FlatJweJson::ivIsSet() const { return m_IvIsSet; }
void FlatJweJson::unsetIv() { m_IvIsSet = false; }
std::string FlatJweJson::getCiphertext() const { return m_Ciphertext; }
void FlatJweJson::setCiphertext(std::string const &value) {
  m_Ciphertext = value;
}
std::string FlatJweJson::getTag() const { return m_Tag; }
void FlatJweJson::setTag(std::string const &value) {
  m_Tag = value;
  m_TagIsSet = true;
}
bool FlatJweJson::tagIsSet() const { return m_TagIsSet; }
void FlatJweJson::unsetTag() { m_TagIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
