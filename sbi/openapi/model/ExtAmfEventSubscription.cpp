/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ExtAmfEventSubscription.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ExtAmfEventSubscription::ExtAmfEventSubscription() {
  m_EventNotifyUri = "";
  m_NotifyCorrelationId = "";
  m_NfId = "";
  m_SubsChangeNotifyUri = "";
  m_SubsChangeNotifyUriIsSet = false;
  m_SubsChangeNotifyCorrelationId = "";
  m_SubsChangeNotifyCorrelationIdIsSet = false;
  m_Supi = "";
  m_SupiIsSet = false;
  m_GroupId = "";
  m_GroupIdIsSet = false;
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_Pei = "";
  m_PeiIsSet = false;
  m_AnyUE = false;
  m_AnyUEIsSet = false;
  m_OptionsIsSet = false;
  m_SourceNfTypeIsSet = false;
  m_BindingInfoIsSet = false;
  m_SubscribingNfTypeIsSet = false;
}

ExtAmfEventSubscription::~ExtAmfEventSubscription() {}

void ExtAmfEventSubscription::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ExtAmfEventSubscription &o) {
  j = nlohmann::json();
  j["eventList"] = o.m_EventList;
  j["eventNotifyUri"] = o.m_EventNotifyUri;
  j["notifyCorrelationId"] = o.m_NotifyCorrelationId;
  j["nfId"] = o.m_NfId;
  if (o.subsChangeNotifyUriIsSet())
    j["subsChangeNotifyUri"] = o.m_SubsChangeNotifyUri;
  if (o.subsChangeNotifyCorrelationIdIsSet())
    j["subsChangeNotifyCorrelationId"] = o.m_SubsChangeNotifyCorrelationId;
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  if (o.groupIdIsSet())
    j["groupId"] = o.m_GroupId;
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  if (o.peiIsSet())
    j["pei"] = o.m_Pei;
  if (o.anyUEIsSet())
    j["anyUE"] = o.m_AnyUE;
  if (o.optionsIsSet())
    j["options"] = o.m_Options;
  if (o.sourceNfTypeIsSet())
    j["sourceNfType"] = o.m_SourceNfType;
  if (o.bindingInfoIsSet() || !o.m_BindingInfo.empty())
    j["bindingInfo"] = o.m_BindingInfo;
  if (o.subscribingNfTypeIsSet())
    j["subscribingNfType"] = o.m_SubscribingNfType;
}

void from_json(const nlohmann::json &j, ExtAmfEventSubscription &o) {
  j.at("eventList").get_to(o.m_EventList);
  j.at("eventNotifyUri").get_to(o.m_EventNotifyUri);
  j.at("notifyCorrelationId").get_to(o.m_NotifyCorrelationId);
  j.at("nfId").get_to(o.m_NfId);
  if (j.find("subsChangeNotifyUri") != j.end()) {
    j.at("subsChangeNotifyUri").get_to(o.m_SubsChangeNotifyUri);
    o.m_SubsChangeNotifyUriIsSet = true;
  }
  if (j.find("subsChangeNotifyCorrelationId") != j.end()) {
    j.at("subsChangeNotifyCorrelationId")
        .get_to(o.m_SubsChangeNotifyCorrelationId);
    o.m_SubsChangeNotifyCorrelationIdIsSet = true;
  }
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("groupId") != j.end()) {
    j.at("groupId").get_to(o.m_GroupId);
    o.m_GroupIdIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("pei") != j.end()) {
    j.at("pei").get_to(o.m_Pei);
    o.m_PeiIsSet = true;
  }
  if (j.find("anyUE") != j.end()) {
    j.at("anyUE").get_to(o.m_AnyUE);
    o.m_AnyUEIsSet = true;
  }
  if (j.find("options") != j.end()) {
    j.at("options").get_to(o.m_Options);
    o.m_OptionsIsSet = true;
  }
  if (j.find("sourceNfType") != j.end()) {
    j.at("sourceNfType").get_to(o.m_SourceNfType);
    o.m_SourceNfTypeIsSet = true;
  }
  if (j.find("bindingInfo") != j.end()) {
    j.at("bindingInfo").get_to(o.m_BindingInfo);
    o.m_BindingInfoIsSet = true;
  }
  if (j.find("subscribingNfType") != j.end()) {
    j.at("subscribingNfType").get_to(o.m_SubscribingNfType);
    o.m_SubscribingNfTypeIsSet = true;
  }
}

std::vector<AmfEvent> &ExtAmfEventSubscription::getEventList() {
  return m_EventList;
}
void ExtAmfEventSubscription::setEventList(std::vector<AmfEvent> const &value) {
  m_EventList = value;
}
std::string ExtAmfEventSubscription::getEventNotifyUri() const {
  return m_EventNotifyUri;
}
void ExtAmfEventSubscription::setEventNotifyUri(std::string const &value) {
  m_EventNotifyUri = value;
}
std::string ExtAmfEventSubscription::getNotifyCorrelationId() const {
  return m_NotifyCorrelationId;
}
void ExtAmfEventSubscription::setNotifyCorrelationId(std::string const &value) {
  m_NotifyCorrelationId = value;
}
std::string ExtAmfEventSubscription::getNfId() const { return m_NfId; }
void ExtAmfEventSubscription::setNfId(std::string const &value) {
  m_NfId = value;
}
std::string ExtAmfEventSubscription::getSubsChangeNotifyUri() const {
  return m_SubsChangeNotifyUri;
}
void ExtAmfEventSubscription::setSubsChangeNotifyUri(std::string const &value) {
  m_SubsChangeNotifyUri = value;
  m_SubsChangeNotifyUriIsSet = true;
}
bool ExtAmfEventSubscription::subsChangeNotifyUriIsSet() const {
  return m_SubsChangeNotifyUriIsSet;
}
void ExtAmfEventSubscription::unsetSubsChangeNotifyUri() {
  m_SubsChangeNotifyUriIsSet = false;
}
std::string ExtAmfEventSubscription::getSubsChangeNotifyCorrelationId() const {
  return m_SubsChangeNotifyCorrelationId;
}
void ExtAmfEventSubscription::setSubsChangeNotifyCorrelationId(
    std::string const &value) {
  m_SubsChangeNotifyCorrelationId = value;
  m_SubsChangeNotifyCorrelationIdIsSet = true;
}
bool ExtAmfEventSubscription::subsChangeNotifyCorrelationIdIsSet() const {
  return m_SubsChangeNotifyCorrelationIdIsSet;
}
void ExtAmfEventSubscription::unsetSubsChangeNotifyCorrelationId() {
  m_SubsChangeNotifyCorrelationIdIsSet = false;
}
std::string ExtAmfEventSubscription::getSupi() const { return m_Supi; }
void ExtAmfEventSubscription::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool ExtAmfEventSubscription::supiIsSet() const { return m_SupiIsSet; }
void ExtAmfEventSubscription::unsetSupi() { m_SupiIsSet = false; }
std::string ExtAmfEventSubscription::getGroupId() const { return m_GroupId; }
void ExtAmfEventSubscription::setGroupId(std::string const &value) {
  m_GroupId = value;
  m_GroupIdIsSet = true;
}
bool ExtAmfEventSubscription::groupIdIsSet() const { return m_GroupIdIsSet; }
void ExtAmfEventSubscription::unsetGroupId() { m_GroupIdIsSet = false; }
std::string ExtAmfEventSubscription::getGpsi() const { return m_Gpsi; }
void ExtAmfEventSubscription::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool ExtAmfEventSubscription::gpsiIsSet() const { return m_GpsiIsSet; }
void ExtAmfEventSubscription::unsetGpsi() { m_GpsiIsSet = false; }
std::string ExtAmfEventSubscription::getPei() const { return m_Pei; }
void ExtAmfEventSubscription::setPei(std::string const &value) {
  m_Pei = value;
  m_PeiIsSet = true;
}
bool ExtAmfEventSubscription::peiIsSet() const { return m_PeiIsSet; }
void ExtAmfEventSubscription::unsetPei() { m_PeiIsSet = false; }
bool ExtAmfEventSubscription::isAnyUE() const { return m_AnyUE; }
void ExtAmfEventSubscription::setAnyUE(bool const value) {
  m_AnyUE = value;
  m_AnyUEIsSet = true;
}
bool ExtAmfEventSubscription::anyUEIsSet() const { return m_AnyUEIsSet; }
void ExtAmfEventSubscription::unsetAnyUE() { m_AnyUEIsSet = false; }
AmfEventMode ExtAmfEventSubscription::getOptions() const { return m_Options; }
void ExtAmfEventSubscription::setOptions(AmfEventMode const &value) {
  m_Options = value;
  m_OptionsIsSet = true;
}
bool ExtAmfEventSubscription::optionsIsSet() const { return m_OptionsIsSet; }
void ExtAmfEventSubscription::unsetOptions() { m_OptionsIsSet = false; }
NFType ExtAmfEventSubscription::getSourceNfType() const {
  return m_SourceNfType;
}
void ExtAmfEventSubscription::setSourceNfType(NFType const &value) {
  m_SourceNfType = value;
  m_SourceNfTypeIsSet = true;
}
bool ExtAmfEventSubscription::sourceNfTypeIsSet() const {
  return m_SourceNfTypeIsSet;
}
void ExtAmfEventSubscription::unsetSourceNfType() {
  m_SourceNfTypeIsSet = false;
}
std::vector<std::string> &ExtAmfEventSubscription::getBindingInfo() {
  return m_BindingInfo;
}
void ExtAmfEventSubscription::setBindingInfo(
    std::vector<std::string> const &value) {
  m_BindingInfo = value;
  m_BindingInfoIsSet = true;
}
bool ExtAmfEventSubscription::bindingInfoIsSet() const {
  return m_BindingInfoIsSet;
}
void ExtAmfEventSubscription::unsetBindingInfo() { m_BindingInfoIsSet = false; }
NFType ExtAmfEventSubscription::getSubscribingNfType() const {
  return m_SubscribingNfType;
}
void ExtAmfEventSubscription::setSubscribingNfType(NFType const &value) {
  m_SubscribingNfType = value;
  m_SubscribingNfTypeIsSet = true;
}
bool ExtAmfEventSubscription::subscribingNfTypeIsSet() const {
  return m_SubscribingNfTypeIsSet;
}
void ExtAmfEventSubscription::unsetSubscribingNfType() {
  m_SubscribingNfTypeIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
