/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NFProfile.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NFProfile::NFProfile() {
  m_NfInstanceId = "";
  m_NfInstanceName = "";
  m_NfInstanceNameIsSet = false;
  m_HeartBeatTimer = 0;
  m_HeartBeatTimerIsSet = false;
  m_PlmnListIsSet = false;
  m_SnpnListIsSet = false;
  m_SNssaisIsSet = false;
  m_PerPlmnSnssaiListIsSet = false;
  m_NsiListIsSet = false;
  m_Fqdn = "";
  m_FqdnIsSet = false;
  m_InterPlmnFqdn = "";
  m_InterPlmnFqdnIsSet = false;
  m_Ipv4AddressesIsSet = false;
  m_Ipv6AddressesIsSet = false;
  m_AllowedPlmnsIsSet = false;
  m_AllowedSnpnsIsSet = false;
  m_AllowedNfTypesIsSet = false;
  m_AllowedNfDomainsIsSet = false;
  m_AllowedNssaisIsSet = false;
  m_Priority = 0;
  m_PriorityIsSet = false;
  m_Capacity = 0;
  m_CapacityIsSet = false;
  m_Load = 0;
  m_LoadIsSet = false;
  m_LoadTimeStamp = "";
  m_LoadTimeStampIsSet = false;
  m_Locality = "";
  m_LocalityIsSet = false;
  m_UdrInfoIsSet = false;
  m_UdrInfoListIsSet = false;
  m_UdmInfoIsSet = false;
  m_UdmInfoListIsSet = false;
  m_AusfInfoIsSet = false;
  m_AusfInfoListIsSet = false;
  m_AmfInfoIsSet = false;
  m_AmfInfoListIsSet = false;
  m_SmfInfoIsSet = false;
  m_SmfInfoListIsSet = false;
  m_UpfInfoIsSet = false;
  m_UpfInfoListIsSet = false;
  m_PcfInfoIsSet = false;
  m_PcfInfoListIsSet = false;
  m_BsfInfoIsSet = false;
  m_BsfInfoListIsSet = false;
  m_ChfInfoIsSet = false;
  m_ChfInfoListIsSet = false;
  m_NefInfoIsSet = false;
  m_NrfInfoIsSet = false;
  m_UdsfInfoIsSet = false;
  m_UdsfInfoListIsSet = false;
  m_NwdafInfoIsSet = false;
  m_NwdafInfoListIsSet = false;
  m_PcscfInfoListIsSet = false;
  m_HssInfoListIsSet = false;
  m_CustomInfoIsSet = false;
  m_RecoveryTime = "";
  m_RecoveryTimeIsSet = false;
  m_NfServicePersistence = false;
  m_NfServicePersistenceIsSet = false;
  m_NfServicesIsSet = false;
  m_NfServiceListIsSet = false;
  m_NfProfileChangesSupportInd = false;
  m_NfProfileChangesSupportIndIsSet = false;
  m_NfProfileChangesInd = false;
  m_NfProfileChangesIndIsSet = false;
  m_DefaultNotificationSubscriptionsIsSet = false;
  m_LmfInfoIsSet = false;
  m_GmlcInfoIsSet = false;
  m_NfSetIdListIsSet = false;
  m_ServingScopeIsSet = false;
  m_LcHSupportInd = false;
  m_LcHSupportIndIsSet = false;
  m_OlcHSupportInd = false;
  m_OlcHSupportIndIsSet = false;
  m_NfSetRecoveryTimeListIsSet = false;
  m_ServiceSetRecoveryTimeListIsSet = false;
  m_ScpDomainsIsSet = false;
  m_ScpInfoIsSet = false;
  m_SeppInfoIsSet = false;
  m_VendorId = "";
  m_VendorIdIsSet = false;
  m_SupportedVendorSpecificFeaturesIsSet = false;
  m_AanfInfoListIsSet = false;
  m_r_5gDdnmfInfoIsSet = false;
  m_MfafInfoIsSet = false;
  m_EasdfInfoListIsSet = false;
  m_DccfInfoIsSet = false;
}

NFProfile::~NFProfile() {}

void NFProfile::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NFProfile &o) {
  j = nlohmann::json();
  j["nfInstanceId"] = o.m_NfInstanceId;
  if (o.nfInstanceNameIsSet())
    j["nfInstanceName"] = o.m_NfInstanceName;
  j["nfType"] = o.m_NfType;
  j["nfStatus"] = o.m_NfStatus;
  if (o.heartBeatTimerIsSet())
    j["heartBeatTimer"] = o.m_HeartBeatTimer;
  if (o.plmnListIsSet() || !o.m_PlmnList.empty())
    j["plmnList"] = o.m_PlmnList;
  if (o.snpnListIsSet() || !o.m_SnpnList.empty())
    j["snpnList"] = o.m_SnpnList;
  if (o.sNssaisIsSet() || !o.m_SNssais.empty())
    j["sNssais"] = o.m_SNssais;
  if (o.perPlmnSnssaiListIsSet() || !o.m_PerPlmnSnssaiList.empty())
    j["perPlmnSnssaiList"] = o.m_PerPlmnSnssaiList;
  if (o.nsiListIsSet() || !o.m_NsiList.empty())
    j["nsiList"] = o.m_NsiList;
  if (o.fqdnIsSet())
    j["fqdn"] = o.m_Fqdn;
  if (o.interPlmnFqdnIsSet())
    j["interPlmnFqdn"] = o.m_InterPlmnFqdn;
  if (o.ipv4AddressesIsSet() || !o.m_Ipv4Addresses.empty())
    j["ipv4Addresses"] = o.m_Ipv4Addresses;
  if (o.ipv6AddressesIsSet() || !o.m_Ipv6Addresses.empty())
    j["ipv6Addresses"] = o.m_Ipv6Addresses;
  if (o.allowedPlmnsIsSet() || !o.m_AllowedPlmns.empty())
    j["allowedPlmns"] = o.m_AllowedPlmns;
  if (o.allowedSnpnsIsSet() || !o.m_AllowedSnpns.empty())
    j["allowedSnpns"] = o.m_AllowedSnpns;
  if (o.allowedNfTypesIsSet() || !o.m_AllowedNfTypes.empty())
    j["allowedNfTypes"] = o.m_AllowedNfTypes;
  if (o.allowedNfDomainsIsSet() || !o.m_AllowedNfDomains.empty())
    j["allowedNfDomains"] = o.m_AllowedNfDomains;
  if (o.allowedNssaisIsSet() || !o.m_AllowedNssais.empty())
    j["allowedNssais"] = o.m_AllowedNssais;
  if (o.priorityIsSet())
    j["priority"] = o.m_Priority;
  if (o.capacityIsSet())
    j["capacity"] = o.m_Capacity;
  if (o.loadIsSet())
    j["load"] = o.m_Load;
  if (o.loadTimeStampIsSet())
    j["loadTimeStamp"] = o.m_LoadTimeStamp;
  if (o.localityIsSet())
    j["locality"] = o.m_Locality;
  if (o.udrInfoIsSet())
    j["udrInfo"] = o.m_UdrInfo;
  if (o.udrInfoListIsSet() || !o.m_UdrInfoList.empty())
    j["udrInfoList"] = o.m_UdrInfoList;
  if (o.udmInfoIsSet())
    j["udmInfo"] = o.m_UdmInfo;
  if (o.udmInfoListIsSet() || !o.m_UdmInfoList.empty())
    j["udmInfoList"] = o.m_UdmInfoList;
  if (o.ausfInfoIsSet())
    j["ausfInfo"] = o.m_AusfInfo;
  if (o.ausfInfoListIsSet() || !o.m_AusfInfoList.empty())
    j["ausfInfoList"] = o.m_AusfInfoList;
  if (o.amfInfoIsSet())
    j["amfInfo"] = o.m_AmfInfo;
  if (o.amfInfoListIsSet() || !o.m_AmfInfoList.empty())
    j["amfInfoList"] = o.m_AmfInfoList;
  if (o.smfInfoIsSet())
    j["smfInfo"] = o.m_SmfInfo;
  if (o.smfInfoListIsSet() || !o.m_SmfInfoList.empty())
    j["smfInfoList"] = o.m_SmfInfoList;
  if (o.upfInfoIsSet())
    j["upfInfo"] = o.m_UpfInfo;
  if (o.upfInfoListIsSet() || !o.m_UpfInfoList.empty())
    j["upfInfoList"] = o.m_UpfInfoList;
  if (o.pcfInfoIsSet())
    j["pcfInfo"] = o.m_PcfInfo;
  if (o.pcfInfoListIsSet() || !o.m_PcfInfoList.empty())
    j["pcfInfoList"] = o.m_PcfInfoList;
  if (o.bsfInfoIsSet())
    j["bsfInfo"] = o.m_BsfInfo;
  if (o.bsfInfoListIsSet() || !o.m_BsfInfoList.empty())
    j["bsfInfoList"] = o.m_BsfInfoList;
  if (o.chfInfoIsSet())
    j["chfInfo"] = o.m_ChfInfo;
  if (o.chfInfoListIsSet() || !o.m_ChfInfoList.empty())
    j["chfInfoList"] = o.m_ChfInfoList;
  if (o.nefInfoIsSet())
    j["nefInfo"] = o.m_NefInfo;
  if (o.nrfInfoIsSet())
    j["nrfInfo"] = o.m_NrfInfo;
  if (o.udsfInfoIsSet())
    j["udsfInfo"] = o.m_UdsfInfo;
  if (o.udsfInfoListIsSet() || !o.m_UdsfInfoList.empty())
    j["udsfInfoList"] = o.m_UdsfInfoList;
  if (o.nwdafInfoIsSet())
    j["nwdafInfo"] = o.m_NwdafInfo;
  if (o.nwdafInfoListIsSet() || !o.m_NwdafInfoList.empty())
    j["nwdafInfoList"] = o.m_NwdafInfoList;
  if (o.pcscfInfoListIsSet() || !o.m_PcscfInfoList.empty())
    j["pcscfInfoList"] = o.m_PcscfInfoList;
  if (o.hssInfoListIsSet() || !o.m_HssInfoList.empty())
    j["hssInfoList"] = o.m_HssInfoList;
  if (o.customInfoIsSet())
    j["customInfo"] = o.m_CustomInfo;
  if (o.recoveryTimeIsSet())
    j["recoveryTime"] = o.m_RecoveryTime;
  if (o.nfServicePersistenceIsSet())
    j["nfServicePersistence"] = o.m_NfServicePersistence;
  if (o.nfServicesIsSet() || !o.m_NfServices.empty())
    j["nfServices"] = o.m_NfServices;
  if (o.nfServiceListIsSet() || !o.m_NfServiceList.empty())
    j["nfServiceList"] = o.m_NfServiceList;
  if (o.nfProfileChangesSupportIndIsSet())
    j["nfProfileChangesSupportInd"] = o.m_NfProfileChangesSupportInd;
  if (o.nfProfileChangesIndIsSet())
    j["nfProfileChangesInd"] = o.m_NfProfileChangesInd;
  if (o.defaultNotificationSubscriptionsIsSet() ||
      !o.m_DefaultNotificationSubscriptions.empty())
    j["defaultNotificationSubscriptions"] =
        o.m_DefaultNotificationSubscriptions;
  if (o.lmfInfoIsSet())
    j["lmfInfo"] = o.m_LmfInfo;
  if (o.gmlcInfoIsSet())
    j["gmlcInfo"] = o.m_GmlcInfo;
  if (o.nfSetIdListIsSet() || !o.m_NfSetIdList.empty())
    j["nfSetIdList"] = o.m_NfSetIdList;
  if (o.servingScopeIsSet() || !o.m_ServingScope.empty())
    j["servingScope"] = o.m_ServingScope;
  if (o.lcHSupportIndIsSet())
    j["lcHSupportInd"] = o.m_LcHSupportInd;
  if (o.olcHSupportIndIsSet())
    j["olcHSupportInd"] = o.m_OlcHSupportInd;
  if (o.nfSetRecoveryTimeListIsSet() || !o.m_NfSetRecoveryTimeList.empty())
    j["nfSetRecoveryTimeList"] = o.m_NfSetRecoveryTimeList;
  if (o.serviceSetRecoveryTimeListIsSet() ||
      !o.m_ServiceSetRecoveryTimeList.empty())
    j["serviceSetRecoveryTimeList"] = o.m_ServiceSetRecoveryTimeList;
  if (o.scpDomainsIsSet() || !o.m_ScpDomains.empty())
    j["scpDomains"] = o.m_ScpDomains;
  if (o.scpInfoIsSet())
    j["scpInfo"] = o.m_ScpInfo;
  if (o.seppInfoIsSet())
    j["seppInfo"] = o.m_SeppInfo;
  if (o.vendorIdIsSet())
    j["vendorId"] = o.m_VendorId;
  if (o.supportedVendorSpecificFeaturesIsSet() ||
      !o.m_SupportedVendorSpecificFeatures.empty())
    j["supportedVendorSpecificFeatures"] = o.m_SupportedVendorSpecificFeatures;
  if (o.aanfInfoListIsSet() || !o.m_AanfInfoList.empty())
    j["aanfInfoList"] = o.m_AanfInfoList;
  if (o.r5gDdnmfInfoIsSet())
    j["5gDdnmfInfo"] = o.m_r_5gDdnmfInfo;
  if (o.mfafInfoIsSet())
    j["mfafInfo"] = o.m_MfafInfo;
  if (o.easdfInfoListIsSet() || !o.m_EasdfInfoList.empty())
    j["easdfInfoList"] = o.m_EasdfInfoList;
  if (o.dccfInfoIsSet())
    j["dccfInfo"] = o.m_DccfInfo;
}

void from_json(const nlohmann::json &j, NFProfile &o) {
  j.at("nfInstanceId").get_to(o.m_NfInstanceId);
  if (j.find("nfInstanceName") != j.end()) {
    j.at("nfInstanceName").get_to(o.m_NfInstanceName);
    o.m_NfInstanceNameIsSet = true;
  }
  j.at("nfType").get_to(o.m_NfType);
  j.at("nfStatus").get_to(o.m_NfStatus);
  if (j.find("heartBeatTimer") != j.end()) {
    j.at("heartBeatTimer").get_to(o.m_HeartBeatTimer);
    o.m_HeartBeatTimerIsSet = true;
  }
  if (j.find("plmnList") != j.end()) {
    j.at("plmnList").get_to(o.m_PlmnList);
    o.m_PlmnListIsSet = true;
  }
  if (j.find("snpnList") != j.end()) {
    j.at("snpnList").get_to(o.m_SnpnList);
    o.m_SnpnListIsSet = true;
  }
  if (j.find("sNssais") != j.end()) {
    j.at("sNssais").get_to(o.m_SNssais);
    o.m_SNssaisIsSet = true;
  }
  if (j.find("perPlmnSnssaiList") != j.end()) {
    j.at("perPlmnSnssaiList").get_to(o.m_PerPlmnSnssaiList);
    o.m_PerPlmnSnssaiListIsSet = true;
  }
  if (j.find("nsiList") != j.end()) {
    j.at("nsiList").get_to(o.m_NsiList);
    o.m_NsiListIsSet = true;
  }
  if (j.find("fqdn") != j.end()) {
    j.at("fqdn").get_to(o.m_Fqdn);
    o.m_FqdnIsSet = true;
  }
  if (j.find("interPlmnFqdn") != j.end()) {
    j.at("interPlmnFqdn").get_to(o.m_InterPlmnFqdn);
    o.m_InterPlmnFqdnIsSet = true;
  }
  if (j.find("ipv4Addresses") != j.end()) {
    j.at("ipv4Addresses").get_to(o.m_Ipv4Addresses);
    o.m_Ipv4AddressesIsSet = true;
  }
  if (j.find("ipv6Addresses") != j.end()) {
    j.at("ipv6Addresses").get_to(o.m_Ipv6Addresses);
    o.m_Ipv6AddressesIsSet = true;
  }
  if (j.find("allowedPlmns") != j.end()) {
    j.at("allowedPlmns").get_to(o.m_AllowedPlmns);
    o.m_AllowedPlmnsIsSet = true;
  }
  if (j.find("allowedSnpns") != j.end()) {
    j.at("allowedSnpns").get_to(o.m_AllowedSnpns);
    o.m_AllowedSnpnsIsSet = true;
  }
  if (j.find("allowedNfTypes") != j.end()) {
    j.at("allowedNfTypes").get_to(o.m_AllowedNfTypes);
    o.m_AllowedNfTypesIsSet = true;
  }
  if (j.find("allowedNfDomains") != j.end()) {
    j.at("allowedNfDomains").get_to(o.m_AllowedNfDomains);
    o.m_AllowedNfDomainsIsSet = true;
  }
  if (j.find("allowedNssais") != j.end()) {
    j.at("allowedNssais").get_to(o.m_AllowedNssais);
    o.m_AllowedNssaisIsSet = true;
  }
  if (j.find("priority") != j.end()) {
    j.at("priority").get_to(o.m_Priority);
    o.m_PriorityIsSet = true;
  }
  if (j.find("capacity") != j.end()) {
    j.at("capacity").get_to(o.m_Capacity);
    o.m_CapacityIsSet = true;
  }
  if (j.find("load") != j.end()) {
    j.at("load").get_to(o.m_Load);
    o.m_LoadIsSet = true;
  }
  if (j.find("loadTimeStamp") != j.end()) {
    j.at("loadTimeStamp").get_to(o.m_LoadTimeStamp);
    o.m_LoadTimeStampIsSet = true;
  }
  if (j.find("locality") != j.end()) {
    j.at("locality").get_to(o.m_Locality);
    o.m_LocalityIsSet = true;
  }
  if (j.find("udrInfo") != j.end()) {
    j.at("udrInfo").get_to(o.m_UdrInfo);
    o.m_UdrInfoIsSet = true;
  }
  if (j.find("udrInfoList") != j.end()) {
    j.at("udrInfoList").get_to(o.m_UdrInfoList);
    o.m_UdrInfoListIsSet = true;
  }
  if (j.find("udmInfo") != j.end()) {
    j.at("udmInfo").get_to(o.m_UdmInfo);
    o.m_UdmInfoIsSet = true;
  }
  if (j.find("udmInfoList") != j.end()) {
    j.at("udmInfoList").get_to(o.m_UdmInfoList);
    o.m_UdmInfoListIsSet = true;
  }
  if (j.find("ausfInfo") != j.end()) {
    j.at("ausfInfo").get_to(o.m_AusfInfo);
    o.m_AusfInfoIsSet = true;
  }
  if (j.find("ausfInfoList") != j.end()) {
    j.at("ausfInfoList").get_to(o.m_AusfInfoList);
    o.m_AusfInfoListIsSet = true;
  }
  if (j.find("amfInfo") != j.end()) {
    j.at("amfInfo").get_to(o.m_AmfInfo);
    o.m_AmfInfoIsSet = true;
  }
  if (j.find("amfInfoList") != j.end()) {
    j.at("amfInfoList").get_to(o.m_AmfInfoList);
    o.m_AmfInfoListIsSet = true;
  }
  if (j.find("smfInfo") != j.end()) {
    j.at("smfInfo").get_to(o.m_SmfInfo);
    o.m_SmfInfoIsSet = true;
  }
  if (j.find("smfInfoList") != j.end()) {
    j.at("smfInfoList").get_to(o.m_SmfInfoList);
    o.m_SmfInfoListIsSet = true;
  }
  if (j.find("upfInfo") != j.end()) {
    j.at("upfInfo").get_to(o.m_UpfInfo);
    o.m_UpfInfoIsSet = true;
  }
  if (j.find("upfInfoList") != j.end()) {
    j.at("upfInfoList").get_to(o.m_UpfInfoList);
    o.m_UpfInfoListIsSet = true;
  }
  if (j.find("pcfInfo") != j.end()) {
    j.at("pcfInfo").get_to(o.m_PcfInfo);
    o.m_PcfInfoIsSet = true;
  }
  if (j.find("pcfInfoList") != j.end()) {
    j.at("pcfInfoList").get_to(o.m_PcfInfoList);
    o.m_PcfInfoListIsSet = true;
  }
  if (j.find("bsfInfo") != j.end()) {
    j.at("bsfInfo").get_to(o.m_BsfInfo);
    o.m_BsfInfoIsSet = true;
  }
  if (j.find("bsfInfoList") != j.end()) {
    j.at("bsfInfoList").get_to(o.m_BsfInfoList);
    o.m_BsfInfoListIsSet = true;
  }
  if (j.find("chfInfo") != j.end()) {
    j.at("chfInfo").get_to(o.m_ChfInfo);
    o.m_ChfInfoIsSet = true;
  }
  if (j.find("chfInfoList") != j.end()) {
    j.at("chfInfoList").get_to(o.m_ChfInfoList);
    o.m_ChfInfoListIsSet = true;
  }
  if (j.find("nefInfo") != j.end()) {
    j.at("nefInfo").get_to(o.m_NefInfo);
    o.m_NefInfoIsSet = true;
  }
  if (j.find("nrfInfo") != j.end()) {
    j.at("nrfInfo").get_to(o.m_NrfInfo);
    o.m_NrfInfoIsSet = true;
  }
  if (j.find("udsfInfo") != j.end()) {
    j.at("udsfInfo").get_to(o.m_UdsfInfo);
    o.m_UdsfInfoIsSet = true;
  }
  if (j.find("udsfInfoList") != j.end()) {
    j.at("udsfInfoList").get_to(o.m_UdsfInfoList);
    o.m_UdsfInfoListIsSet = true;
  }
  if (j.find("nwdafInfo") != j.end()) {
    j.at("nwdafInfo").get_to(o.m_NwdafInfo);
    o.m_NwdafInfoIsSet = true;
  }
  if (j.find("nwdafInfoList") != j.end()) {
    j.at("nwdafInfoList").get_to(o.m_NwdafInfoList);
    o.m_NwdafInfoListIsSet = true;
  }
  if (j.find("pcscfInfoList") != j.end()) {
    j.at("pcscfInfoList").get_to(o.m_PcscfInfoList);
    o.m_PcscfInfoListIsSet = true;
  }
  if (j.find("hssInfoList") != j.end()) {
    j.at("hssInfoList").get_to(o.m_HssInfoList);
    o.m_HssInfoListIsSet = true;
  }
  if (j.find("customInfo") != j.end()) {
    j.at("customInfo").get_to(o.m_CustomInfo);
    o.m_CustomInfoIsSet = true;
  }
  if (j.find("recoveryTime") != j.end()) {
    j.at("recoveryTime").get_to(o.m_RecoveryTime);
    o.m_RecoveryTimeIsSet = true;
  }
  if (j.find("nfServicePersistence") != j.end()) {
    j.at("nfServicePersistence").get_to(o.m_NfServicePersistence);
    o.m_NfServicePersistenceIsSet = true;
  }
  if (j.find("nfServices") != j.end()) {
    j.at("nfServices").get_to(o.m_NfServices);
    o.m_NfServicesIsSet = true;
  }
  if (j.find("nfServiceList") != j.end()) {
    j.at("nfServiceList").get_to(o.m_NfServiceList);
    o.m_NfServiceListIsSet = true;
  }
  if (j.find("nfProfileChangesSupportInd") != j.end()) {
    j.at("nfProfileChangesSupportInd").get_to(o.m_NfProfileChangesSupportInd);
    o.m_NfProfileChangesSupportIndIsSet = true;
  }
  if (j.find("nfProfileChangesInd") != j.end()) {
    j.at("nfProfileChangesInd").get_to(o.m_NfProfileChangesInd);
    o.m_NfProfileChangesIndIsSet = true;
  }
  if (j.find("defaultNotificationSubscriptions") != j.end()) {
    j.at("defaultNotificationSubscriptions")
        .get_to(o.m_DefaultNotificationSubscriptions);
    o.m_DefaultNotificationSubscriptionsIsSet = true;
  }
  if (j.find("lmfInfo") != j.end()) {
    j.at("lmfInfo").get_to(o.m_LmfInfo);
    o.m_LmfInfoIsSet = true;
  }
  if (j.find("gmlcInfo") != j.end()) {
    j.at("gmlcInfo").get_to(o.m_GmlcInfo);
    o.m_GmlcInfoIsSet = true;
  }
  if (j.find("nfSetIdList") != j.end()) {
    j.at("nfSetIdList").get_to(o.m_NfSetIdList);
    o.m_NfSetIdListIsSet = true;
  }
  if (j.find("servingScope") != j.end()) {
    j.at("servingScope").get_to(o.m_ServingScope);
    o.m_ServingScopeIsSet = true;
  }
  if (j.find("lcHSupportInd") != j.end()) {
    j.at("lcHSupportInd").get_to(o.m_LcHSupportInd);
    o.m_LcHSupportIndIsSet = true;
  }
  if (j.find("olcHSupportInd") != j.end()) {
    j.at("olcHSupportInd").get_to(o.m_OlcHSupportInd);
    o.m_OlcHSupportIndIsSet = true;
  }
  if (j.find("nfSetRecoveryTimeList") != j.end()) {
    j.at("nfSetRecoveryTimeList").get_to(o.m_NfSetRecoveryTimeList);
    o.m_NfSetRecoveryTimeListIsSet = true;
  }
  if (j.find("serviceSetRecoveryTimeList") != j.end()) {
    j.at("serviceSetRecoveryTimeList").get_to(o.m_ServiceSetRecoveryTimeList);
    o.m_ServiceSetRecoveryTimeListIsSet = true;
  }
  if (j.find("scpDomains") != j.end()) {
    j.at("scpDomains").get_to(o.m_ScpDomains);
    o.m_ScpDomainsIsSet = true;
  }
  if (j.find("scpInfo") != j.end()) {
    j.at("scpInfo").get_to(o.m_ScpInfo);
    o.m_ScpInfoIsSet = true;
  }
  if (j.find("seppInfo") != j.end()) {
    j.at("seppInfo").get_to(o.m_SeppInfo);
    o.m_SeppInfoIsSet = true;
  }
  if (j.find("vendorId") != j.end()) {
    j.at("vendorId").get_to(o.m_VendorId);
    o.m_VendorIdIsSet = true;
  }
  if (j.find("supportedVendorSpecificFeatures") != j.end()) {
    j.at("supportedVendorSpecificFeatures")
        .get_to(o.m_SupportedVendorSpecificFeatures);
    o.m_SupportedVendorSpecificFeaturesIsSet = true;
  }
  if (j.find("aanfInfoList") != j.end()) {
    j.at("aanfInfoList").get_to(o.m_AanfInfoList);
    o.m_AanfInfoListIsSet = true;
  }
  if (j.find("5gDdnmfInfo") != j.end()) {
    j.at("5gDdnmfInfo").get_to(o.m_r_5gDdnmfInfo);
    o.m_r_5gDdnmfInfoIsSet = true;
  }
  if (j.find("mfafInfo") != j.end()) {
    j.at("mfafInfo").get_to(o.m_MfafInfo);
    o.m_MfafInfoIsSet = true;
  }
  if (j.find("easdfInfoList") != j.end()) {
    j.at("easdfInfoList").get_to(o.m_EasdfInfoList);
    o.m_EasdfInfoListIsSet = true;
  }
  if (j.find("dccfInfo") != j.end()) {
    j.at("dccfInfo").get_to(o.m_DccfInfo);
    o.m_DccfInfoIsSet = true;
  }
}

std::string NFProfile::getNfInstanceId() const { return m_NfInstanceId; }
void NFProfile::setNfInstanceId(std::string const &value) {
  m_NfInstanceId = value;
}
std::string NFProfile::getNfInstanceName() const { return m_NfInstanceName; }
void NFProfile::setNfInstanceName(std::string const &value) {
  m_NfInstanceName = value;
  m_NfInstanceNameIsSet = true;
}
bool NFProfile::nfInstanceNameIsSet() const { return m_NfInstanceNameIsSet; }
void NFProfile::unsetNfInstanceName() { m_NfInstanceNameIsSet = false; }
NFType NFProfile::getNfType() const { return m_NfType; }
void NFProfile::setNfType(NFType const &value) { m_NfType = value; }
NFStatus NFProfile::getNfStatus() const { return m_NfStatus; }
void NFProfile::setNfStatus(NFStatus const &value) { m_NfStatus = value; }
int32_t NFProfile::getHeartBeatTimer() const { return m_HeartBeatTimer; }
void NFProfile::setHeartBeatTimer(int32_t const value) {
  m_HeartBeatTimer = value;
  m_HeartBeatTimerIsSet = true;
}
bool NFProfile::heartBeatTimerIsSet() const { return m_HeartBeatTimerIsSet; }
void NFProfile::unsetHeartBeatTimer() { m_HeartBeatTimerIsSet = false; }
std::vector<PlmnId> &NFProfile::getPlmnList() { return m_PlmnList; }
void NFProfile::setPlmnList(std::vector<PlmnId> const &value) {
  m_PlmnList = value;
  m_PlmnListIsSet = true;
}
bool NFProfile::plmnListIsSet() const { return m_PlmnListIsSet; }
void NFProfile::unsetPlmnList() { m_PlmnListIsSet = false; }
std::vector<PlmnIdNid> &NFProfile::getSnpnList() { return m_SnpnList; }
void NFProfile::setSnpnList(std::vector<PlmnIdNid> const &value) {
  m_SnpnList = value;
  m_SnpnListIsSet = true;
}
bool NFProfile::snpnListIsSet() const { return m_SnpnListIsSet; }
void NFProfile::unsetSnpnList() { m_SnpnListIsSet = false; }
std::vector<ExtSnssai> &NFProfile::getSNssais() { return m_SNssais; }
void NFProfile::setSNssais(std::vector<ExtSnssai> const &value) {
  m_SNssais = value;
  m_SNssaisIsSet = true;
}
bool NFProfile::sNssaisIsSet() const { return m_SNssaisIsSet; }
void NFProfile::unsetSNssais() { m_SNssaisIsSet = false; }
std::vector<PlmnSnssai> &NFProfile::getPerPlmnSnssaiList() {
  return m_PerPlmnSnssaiList;
}
void NFProfile::setPerPlmnSnssaiList(std::vector<PlmnSnssai> const &value) {
  m_PerPlmnSnssaiList = value;
  m_PerPlmnSnssaiListIsSet = true;
}
bool NFProfile::perPlmnSnssaiListIsSet() const {
  return m_PerPlmnSnssaiListIsSet;
}
void NFProfile::unsetPerPlmnSnssaiList() { m_PerPlmnSnssaiListIsSet = false; }
std::vector<std::string> &NFProfile::getNsiList() { return m_NsiList; }
void NFProfile::setNsiList(std::vector<std::string> const &value) {
  m_NsiList = value;
  m_NsiListIsSet = true;
}
bool NFProfile::nsiListIsSet() const { return m_NsiListIsSet; }
void NFProfile::unsetNsiList() { m_NsiListIsSet = false; }
std::string NFProfile::getFqdn() const { return m_Fqdn; }
void NFProfile::setFqdn(std::string const &value) {
  m_Fqdn = value;
  m_FqdnIsSet = true;
}
bool NFProfile::fqdnIsSet() const { return m_FqdnIsSet; }
void NFProfile::unsetFqdn() { m_FqdnIsSet = false; }
std::string NFProfile::getInterPlmnFqdn() const { return m_InterPlmnFqdn; }
void NFProfile::setInterPlmnFqdn(std::string const &value) {
  m_InterPlmnFqdn = value;
  m_InterPlmnFqdnIsSet = true;
}
bool NFProfile::interPlmnFqdnIsSet() const { return m_InterPlmnFqdnIsSet; }
void NFProfile::unsetInterPlmnFqdn() { m_InterPlmnFqdnIsSet = false; }
std::vector<std::string> &NFProfile::getIpv4Addresses() {
  return m_Ipv4Addresses;
}
void NFProfile::setIpv4Addresses(std::vector<std::string> const &value) {
  m_Ipv4Addresses = value;
  m_Ipv4AddressesIsSet = true;
}
bool NFProfile::ipv4AddressesIsSet() const { return m_Ipv4AddressesIsSet; }
void NFProfile::unsetIpv4Addresses() { m_Ipv4AddressesIsSet = false; }
std::vector<Ipv6Addr> &NFProfile::getIpv6Addresses() { return m_Ipv6Addresses; }
void NFProfile::setIpv6Addresses(std::vector<Ipv6Addr> const &value) {
  m_Ipv6Addresses = value;
  m_Ipv6AddressesIsSet = true;
}
bool NFProfile::ipv6AddressesIsSet() const { return m_Ipv6AddressesIsSet; }
void NFProfile::unsetIpv6Addresses() { m_Ipv6AddressesIsSet = false; }
std::vector<PlmnId> &NFProfile::getAllowedPlmns() { return m_AllowedPlmns; }
void NFProfile::setAllowedPlmns(std::vector<PlmnId> const &value) {
  m_AllowedPlmns = value;
  m_AllowedPlmnsIsSet = true;
}
bool NFProfile::allowedPlmnsIsSet() const { return m_AllowedPlmnsIsSet; }
void NFProfile::unsetAllowedPlmns() { m_AllowedPlmnsIsSet = false; }
std::vector<PlmnIdNid> &NFProfile::getAllowedSnpns() { return m_AllowedSnpns; }
void NFProfile::setAllowedSnpns(std::vector<PlmnIdNid> const &value) {
  m_AllowedSnpns = value;
  m_AllowedSnpnsIsSet = true;
}
bool NFProfile::allowedSnpnsIsSet() const { return m_AllowedSnpnsIsSet; }
void NFProfile::unsetAllowedSnpns() { m_AllowedSnpnsIsSet = false; }
std::vector<NFType> &NFProfile::getAllowedNfTypes() { return m_AllowedNfTypes; }
void NFProfile::setAllowedNfTypes(std::vector<NFType> const &value) {
  m_AllowedNfTypes = value;
  m_AllowedNfTypesIsSet = true;
}
bool NFProfile::allowedNfTypesIsSet() const { return m_AllowedNfTypesIsSet; }
void NFProfile::unsetAllowedNfTypes() { m_AllowedNfTypesIsSet = false; }
std::vector<std::string> &NFProfile::getAllowedNfDomains() {
  return m_AllowedNfDomains;
}
void NFProfile::setAllowedNfDomains(std::vector<std::string> const &value) {
  m_AllowedNfDomains = value;
  m_AllowedNfDomainsIsSet = true;
}
bool NFProfile::allowedNfDomainsIsSet() const {
  return m_AllowedNfDomainsIsSet;
}
void NFProfile::unsetAllowedNfDomains() { m_AllowedNfDomainsIsSet = false; }
std::vector<ExtSnssai> &NFProfile::getAllowedNssais() {
  return m_AllowedNssais;
}
void NFProfile::setAllowedNssais(std::vector<ExtSnssai> const &value) {
  m_AllowedNssais = value;
  m_AllowedNssaisIsSet = true;
}
bool NFProfile::allowedNssaisIsSet() const { return m_AllowedNssaisIsSet; }
void NFProfile::unsetAllowedNssais() { m_AllowedNssaisIsSet = false; }
int32_t NFProfile::getPriority() const { return m_Priority; }
void NFProfile::setPriority(int32_t const value) {
  m_Priority = value;
  m_PriorityIsSet = true;
}
bool NFProfile::priorityIsSet() const { return m_PriorityIsSet; }
void NFProfile::unsetPriority() { m_PriorityIsSet = false; }
int32_t NFProfile::getCapacity() const { return m_Capacity; }
void NFProfile::setCapacity(int32_t const value) {
  m_Capacity = value;
  m_CapacityIsSet = true;
}
bool NFProfile::capacityIsSet() const { return m_CapacityIsSet; }
void NFProfile::unsetCapacity() { m_CapacityIsSet = false; }
int32_t NFProfile::getLoad() const { return m_Load; }
void NFProfile::setLoad(int32_t const value) {
  m_Load = value;
  m_LoadIsSet = true;
}
bool NFProfile::loadIsSet() const { return m_LoadIsSet; }
void NFProfile::unsetLoad() { m_LoadIsSet = false; }
std::string NFProfile::getLoadTimeStamp() const { return m_LoadTimeStamp; }
void NFProfile::setLoadTimeStamp(std::string const &value) {
  m_LoadTimeStamp = value;
  m_LoadTimeStampIsSet = true;
}
bool NFProfile::loadTimeStampIsSet() const { return m_LoadTimeStampIsSet; }
void NFProfile::unsetLoadTimeStamp() { m_LoadTimeStampIsSet = false; }
std::string NFProfile::getLocality() const { return m_Locality; }
void NFProfile::setLocality(std::string const &value) {
  m_Locality = value;
  m_LocalityIsSet = true;
}
bool NFProfile::localityIsSet() const { return m_LocalityIsSet; }
void NFProfile::unsetLocality() { m_LocalityIsSet = false; }
UdrInfo NFProfile::getUdrInfo() const { return m_UdrInfo; }
void NFProfile::setUdrInfo(UdrInfo const &value) {
  m_UdrInfo = value;
  m_UdrInfoIsSet = true;
}
bool NFProfile::udrInfoIsSet() const { return m_UdrInfoIsSet; }
void NFProfile::unsetUdrInfo() { m_UdrInfoIsSet = false; }
std::map<std::string, UdrInfo> &NFProfile::getUdrInfoList() {
  return m_UdrInfoList;
}
void NFProfile::setUdrInfoList(std::map<std::string, UdrInfo> const &value) {
  m_UdrInfoList = value;
  m_UdrInfoListIsSet = true;
}
bool NFProfile::udrInfoListIsSet() const { return m_UdrInfoListIsSet; }
void NFProfile::unsetUdrInfoList() { m_UdrInfoListIsSet = false; }
UdmInfo NFProfile::getUdmInfo() const { return m_UdmInfo; }
void NFProfile::setUdmInfo(UdmInfo const &value) {
  m_UdmInfo = value;
  m_UdmInfoIsSet = true;
}
bool NFProfile::udmInfoIsSet() const { return m_UdmInfoIsSet; }
void NFProfile::unsetUdmInfo() { m_UdmInfoIsSet = false; }
std::map<std::string, UdmInfo> &NFProfile::getUdmInfoList() {
  return m_UdmInfoList;
}
void NFProfile::setUdmInfoList(std::map<std::string, UdmInfo> const &value) {
  m_UdmInfoList = value;
  m_UdmInfoListIsSet = true;
}
bool NFProfile::udmInfoListIsSet() const { return m_UdmInfoListIsSet; }
void NFProfile::unsetUdmInfoList() { m_UdmInfoListIsSet = false; }
AusfInfo NFProfile::getAusfInfo() const { return m_AusfInfo; }
void NFProfile::setAusfInfo(AusfInfo const &value) {
  m_AusfInfo = value;
  m_AusfInfoIsSet = true;
}
bool NFProfile::ausfInfoIsSet() const { return m_AusfInfoIsSet; }
void NFProfile::unsetAusfInfo() { m_AusfInfoIsSet = false; }
std::map<std::string, AusfInfo> &NFProfile::getAusfInfoList() {
  return m_AusfInfoList;
}
void NFProfile::setAusfInfoList(std::map<std::string, AusfInfo> const &value) {
  m_AusfInfoList = value;
  m_AusfInfoListIsSet = true;
}
bool NFProfile::ausfInfoListIsSet() const { return m_AusfInfoListIsSet; }
void NFProfile::unsetAusfInfoList() { m_AusfInfoListIsSet = false; }
AmfInfo NFProfile::getAmfInfo() const { return m_AmfInfo; }
void NFProfile::setAmfInfo(AmfInfo const &value) {
  m_AmfInfo = value;
  m_AmfInfoIsSet = true;
}
bool NFProfile::amfInfoIsSet() const { return m_AmfInfoIsSet; }
void NFProfile::unsetAmfInfo() { m_AmfInfoIsSet = false; }
std::map<std::string, AmfInfo> &NFProfile::getAmfInfoList() {
  return m_AmfInfoList;
}
void NFProfile::setAmfInfoList(std::map<std::string, AmfInfo> const &value) {
  m_AmfInfoList = value;
  m_AmfInfoListIsSet = true;
}
bool NFProfile::amfInfoListIsSet() const { return m_AmfInfoListIsSet; }
void NFProfile::unsetAmfInfoList() { m_AmfInfoListIsSet = false; }
SmfInfo NFProfile::getSmfInfo() const { return m_SmfInfo; }
void NFProfile::setSmfInfo(SmfInfo const &value) {
  m_SmfInfo = value;
  m_SmfInfoIsSet = true;
}
bool NFProfile::smfInfoIsSet() const { return m_SmfInfoIsSet; }
void NFProfile::unsetSmfInfo() { m_SmfInfoIsSet = false; }
std::map<std::string, SmfInfo> &NFProfile::getSmfInfoList() {
  return m_SmfInfoList;
}
void NFProfile::setSmfInfoList(std::map<std::string, SmfInfo> const &value) {
  m_SmfInfoList = value;
  m_SmfInfoListIsSet = true;
}
bool NFProfile::smfInfoListIsSet() const { return m_SmfInfoListIsSet; }
void NFProfile::unsetSmfInfoList() { m_SmfInfoListIsSet = false; }
UpfInfo NFProfile::getUpfInfo() const { return m_UpfInfo; }
void NFProfile::setUpfInfo(UpfInfo const &value) {
  m_UpfInfo = value;
  m_UpfInfoIsSet = true;
}
bool NFProfile::upfInfoIsSet() const { return m_UpfInfoIsSet; }
void NFProfile::unsetUpfInfo() { m_UpfInfoIsSet = false; }
std::map<std::string, UpfInfo> &NFProfile::getUpfInfoList() {
  return m_UpfInfoList;
}
void NFProfile::setUpfInfoList(std::map<std::string, UpfInfo> const &value) {
  m_UpfInfoList = value;
  m_UpfInfoListIsSet = true;
}
bool NFProfile::upfInfoListIsSet() const { return m_UpfInfoListIsSet; }
void NFProfile::unsetUpfInfoList() { m_UpfInfoListIsSet = false; }
PcfInfo NFProfile::getPcfInfo() const { return m_PcfInfo; }
void NFProfile::setPcfInfo(PcfInfo const &value) {
  m_PcfInfo = value;
  m_PcfInfoIsSet = true;
}
bool NFProfile::pcfInfoIsSet() const { return m_PcfInfoIsSet; }
void NFProfile::unsetPcfInfo() { m_PcfInfoIsSet = false; }
std::map<std::string, PcfInfo> &NFProfile::getPcfInfoList() {
  return m_PcfInfoList;
}
void NFProfile::setPcfInfoList(std::map<std::string, PcfInfo> const &value) {
  m_PcfInfoList = value;
  m_PcfInfoListIsSet = true;
}
bool NFProfile::pcfInfoListIsSet() const { return m_PcfInfoListIsSet; }
void NFProfile::unsetPcfInfoList() { m_PcfInfoListIsSet = false; }
BsfInfo NFProfile::getBsfInfo() const { return m_BsfInfo; }
void NFProfile::setBsfInfo(BsfInfo const &value) {
  m_BsfInfo = value;
  m_BsfInfoIsSet = true;
}
bool NFProfile::bsfInfoIsSet() const { return m_BsfInfoIsSet; }
void NFProfile::unsetBsfInfo() { m_BsfInfoIsSet = false; }
std::map<std::string, BsfInfo> &NFProfile::getBsfInfoList() {
  return m_BsfInfoList;
}
void NFProfile::setBsfInfoList(std::map<std::string, BsfInfo> const &value) {
  m_BsfInfoList = value;
  m_BsfInfoListIsSet = true;
}
bool NFProfile::bsfInfoListIsSet() const { return m_BsfInfoListIsSet; }
void NFProfile::unsetBsfInfoList() { m_BsfInfoListIsSet = false; }
ChfInfo NFProfile::getChfInfo() const { return m_ChfInfo; }
void NFProfile::setChfInfo(ChfInfo const &value) {
  m_ChfInfo = value;
  m_ChfInfoIsSet = true;
}
bool NFProfile::chfInfoIsSet() const { return m_ChfInfoIsSet; }
void NFProfile::unsetChfInfo() { m_ChfInfoIsSet = false; }
std::map<std::string, ChfInfo> &NFProfile::getChfInfoList() {
  return m_ChfInfoList;
}
void NFProfile::setChfInfoList(std::map<std::string, ChfInfo> const &value) {
  m_ChfInfoList = value;
  m_ChfInfoListIsSet = true;
}
bool NFProfile::chfInfoListIsSet() const { return m_ChfInfoListIsSet; }
void NFProfile::unsetChfInfoList() { m_ChfInfoListIsSet = false; }
NefInfo NFProfile::getNefInfo() const { return m_NefInfo; }
void NFProfile::setNefInfo(NefInfo const &value) {
  m_NefInfo = value;
  m_NefInfoIsSet = true;
}
bool NFProfile::nefInfoIsSet() const { return m_NefInfoIsSet; }
void NFProfile::unsetNefInfo() { m_NefInfoIsSet = false; }
NrfInfo NFProfile::getNrfInfo() const { return m_NrfInfo; }
void NFProfile::setNrfInfo(NrfInfo const &value) {
  m_NrfInfo = value;
  m_NrfInfoIsSet = true;
}
bool NFProfile::nrfInfoIsSet() const { return m_NrfInfoIsSet; }
void NFProfile::unsetNrfInfo() { m_NrfInfoIsSet = false; }
UdsfInfo NFProfile::getUdsfInfo() const { return m_UdsfInfo; }
void NFProfile::setUdsfInfo(UdsfInfo const &value) {
  m_UdsfInfo = value;
  m_UdsfInfoIsSet = true;
}
bool NFProfile::udsfInfoIsSet() const { return m_UdsfInfoIsSet; }
void NFProfile::unsetUdsfInfo() { m_UdsfInfoIsSet = false; }
std::map<std::string, UdsfInfo> &NFProfile::getUdsfInfoList() {
  return m_UdsfInfoList;
}
void NFProfile::setUdsfInfoList(std::map<std::string, UdsfInfo> const &value) {
  m_UdsfInfoList = value;
  m_UdsfInfoListIsSet = true;
}
bool NFProfile::udsfInfoListIsSet() const { return m_UdsfInfoListIsSet; }
void NFProfile::unsetUdsfInfoList() { m_UdsfInfoListIsSet = false; }
NwdafInfo NFProfile::getNwdafInfo() const { return m_NwdafInfo; }
void NFProfile::setNwdafInfo(NwdafInfo const &value) {
  m_NwdafInfo = value;
  m_NwdafInfoIsSet = true;
}
bool NFProfile::nwdafInfoIsSet() const { return m_NwdafInfoIsSet; }
void NFProfile::unsetNwdafInfo() { m_NwdafInfoIsSet = false; }
std::map<std::string, NwdafInfo> &NFProfile::getNwdafInfoList() {
  return m_NwdafInfoList;
}
void NFProfile::setNwdafInfoList(
    std::map<std::string, NwdafInfo> const &value) {
  m_NwdafInfoList = value;
  m_NwdafInfoListIsSet = true;
}
bool NFProfile::nwdafInfoListIsSet() const { return m_NwdafInfoListIsSet; }
void NFProfile::unsetNwdafInfoList() { m_NwdafInfoListIsSet = false; }
std::map<std::string, PcscfInfo> &NFProfile::getPcscfInfoList() {
  return m_PcscfInfoList;
}
void NFProfile::setPcscfInfoList(
    std::map<std::string, PcscfInfo> const &value) {
  m_PcscfInfoList = value;
  m_PcscfInfoListIsSet = true;
}
bool NFProfile::pcscfInfoListIsSet() const { return m_PcscfInfoListIsSet; }
void NFProfile::unsetPcscfInfoList() { m_PcscfInfoListIsSet = false; }
std::map<std::string, HssInfo> &NFProfile::getHssInfoList() {
  return m_HssInfoList;
}
void NFProfile::setHssInfoList(std::map<std::string, HssInfo> const &value) {
  m_HssInfoList = value;
  m_HssInfoListIsSet = true;
}
bool NFProfile::hssInfoListIsSet() const { return m_HssInfoListIsSet; }
void NFProfile::unsetHssInfoList() { m_HssInfoListIsSet = false; }
Object NFProfile::getCustomInfo() const { return m_CustomInfo; }
void NFProfile::setCustomInfo(Object const &value) {
  m_CustomInfo = value;
  m_CustomInfoIsSet = true;
}
bool NFProfile::customInfoIsSet() const { return m_CustomInfoIsSet; }
void NFProfile::unsetCustomInfo() { m_CustomInfoIsSet = false; }
std::string NFProfile::getRecoveryTime() const { return m_RecoveryTime; }
void NFProfile::setRecoveryTime(std::string const &value) {
  m_RecoveryTime = value;
  m_RecoveryTimeIsSet = true;
}
bool NFProfile::recoveryTimeIsSet() const { return m_RecoveryTimeIsSet; }
void NFProfile::unsetRecoveryTime() { m_RecoveryTimeIsSet = false; }
bool NFProfile::isNfServicePersistence() const {
  return m_NfServicePersistence;
}
void NFProfile::setNfServicePersistence(bool const value) {
  m_NfServicePersistence = value;
  m_NfServicePersistenceIsSet = true;
}
bool NFProfile::nfServicePersistenceIsSet() const {
  return m_NfServicePersistenceIsSet;
}
void NFProfile::unsetNfServicePersistence() {
  m_NfServicePersistenceIsSet = false;
}
std::vector<NFService> &NFProfile::getNfServices() { return m_NfServices; }
void NFProfile::setNfServices(std::vector<NFService> const &value) {
  m_NfServices = value;
  m_NfServicesIsSet = true;
}
bool NFProfile::nfServicesIsSet() const { return m_NfServicesIsSet; }
void NFProfile::unsetNfServices() { m_NfServicesIsSet = false; }
std::map<std::string, NFService> &NFProfile::getNfServiceList() {
  return m_NfServiceList;
}
void NFProfile::setNfServiceList(
    std::map<std::string, NFService> const &value) {
  m_NfServiceList = value;
  m_NfServiceListIsSet = true;
}
bool NFProfile::nfServiceListIsSet() const { return m_NfServiceListIsSet; }
void NFProfile::unsetNfServiceList() { m_NfServiceListIsSet = false; }
bool NFProfile::isNfProfileChangesSupportInd() const {
  return m_NfProfileChangesSupportInd;
}
void NFProfile::setNfProfileChangesSupportInd(bool const value) {
  m_NfProfileChangesSupportInd = value;
  m_NfProfileChangesSupportIndIsSet = true;
}
bool NFProfile::nfProfileChangesSupportIndIsSet() const {
  return m_NfProfileChangesSupportIndIsSet;
}
void NFProfile::unsetNfProfileChangesSupportInd() {
  m_NfProfileChangesSupportIndIsSet = false;
}
bool NFProfile::isNfProfileChangesInd() const { return m_NfProfileChangesInd; }
void NFProfile::setNfProfileChangesInd(bool const value) {
  m_NfProfileChangesInd = value;
  m_NfProfileChangesIndIsSet = true;
}
bool NFProfile::nfProfileChangesIndIsSet() const {
  return m_NfProfileChangesIndIsSet;
}
void NFProfile::unsetNfProfileChangesInd() {
  m_NfProfileChangesIndIsSet = false;
}
std::vector<DefaultNotificationSubscription> &
NFProfile::getDefaultNotificationSubscriptions() {
  return m_DefaultNotificationSubscriptions;
}
void NFProfile::setDefaultNotificationSubscriptions(
    std::vector<DefaultNotificationSubscription> const &value) {
  m_DefaultNotificationSubscriptions = value;
  m_DefaultNotificationSubscriptionsIsSet = true;
}
bool NFProfile::defaultNotificationSubscriptionsIsSet() const {
  return m_DefaultNotificationSubscriptionsIsSet;
}
void NFProfile::unsetDefaultNotificationSubscriptions() {
  m_DefaultNotificationSubscriptionsIsSet = false;
}
LmfInfo NFProfile::getLmfInfo() const { return m_LmfInfo; }
void NFProfile::setLmfInfo(LmfInfo const &value) {
  m_LmfInfo = value;
  m_LmfInfoIsSet = true;
}
bool NFProfile::lmfInfoIsSet() const { return m_LmfInfoIsSet; }
void NFProfile::unsetLmfInfo() { m_LmfInfoIsSet = false; }
GmlcInfo NFProfile::getGmlcInfo() const { return m_GmlcInfo; }
void NFProfile::setGmlcInfo(GmlcInfo const &value) {
  m_GmlcInfo = value;
  m_GmlcInfoIsSet = true;
}
bool NFProfile::gmlcInfoIsSet() const { return m_GmlcInfoIsSet; }
void NFProfile::unsetGmlcInfo() { m_GmlcInfoIsSet = false; }
std::vector<std::string> &NFProfile::getNfSetIdList() { return m_NfSetIdList; }
void NFProfile::setNfSetIdList(std::vector<std::string> const &value) {
  m_NfSetIdList = value;
  m_NfSetIdListIsSet = true;
}
bool NFProfile::nfSetIdListIsSet() const { return m_NfSetIdListIsSet; }
void NFProfile::unsetNfSetIdList() { m_NfSetIdListIsSet = false; }
std::vector<std::string> &NFProfile::getServingScope() {
  return m_ServingScope;
}
void NFProfile::setServingScope(std::vector<std::string> const &value) {
  m_ServingScope = value;
  m_ServingScopeIsSet = true;
}
bool NFProfile::servingScopeIsSet() const { return m_ServingScopeIsSet; }
void NFProfile::unsetServingScope() { m_ServingScopeIsSet = false; }
bool NFProfile::isLcHSupportInd() const { return m_LcHSupportInd; }
void NFProfile::setLcHSupportInd(bool const value) {
  m_LcHSupportInd = value;
  m_LcHSupportIndIsSet = true;
}
bool NFProfile::lcHSupportIndIsSet() const { return m_LcHSupportIndIsSet; }
void NFProfile::unsetLcHSupportInd() { m_LcHSupportIndIsSet = false; }
bool NFProfile::isOlcHSupportInd() const { return m_OlcHSupportInd; }
void NFProfile::setOlcHSupportInd(bool const value) {
  m_OlcHSupportInd = value;
  m_OlcHSupportIndIsSet = true;
}
bool NFProfile::olcHSupportIndIsSet() const { return m_OlcHSupportIndIsSet; }
void NFProfile::unsetOlcHSupportInd() { m_OlcHSupportIndIsSet = false; }
std::map<std::string, std::string> &NFProfile::getNfSetRecoveryTimeList() {
  return m_NfSetRecoveryTimeList;
}
void NFProfile::setNfSetRecoveryTimeList(
    std::map<std::string, std::string> const &value) {
  m_NfSetRecoveryTimeList = value;
  m_NfSetRecoveryTimeListIsSet = true;
}
bool NFProfile::nfSetRecoveryTimeListIsSet() const {
  return m_NfSetRecoveryTimeListIsSet;
}
void NFProfile::unsetNfSetRecoveryTimeList() {
  m_NfSetRecoveryTimeListIsSet = false;
}
std::map<std::string, std::string> &NFProfile::getServiceSetRecoveryTimeList() {
  return m_ServiceSetRecoveryTimeList;
}
void NFProfile::setServiceSetRecoveryTimeList(
    std::map<std::string, std::string> const &value) {
  m_ServiceSetRecoveryTimeList = value;
  m_ServiceSetRecoveryTimeListIsSet = true;
}
bool NFProfile::serviceSetRecoveryTimeListIsSet() const {
  return m_ServiceSetRecoveryTimeListIsSet;
}
void NFProfile::unsetServiceSetRecoveryTimeList() {
  m_ServiceSetRecoveryTimeListIsSet = false;
}
std::vector<std::string> &NFProfile::getScpDomains() { return m_ScpDomains; }
void NFProfile::setScpDomains(std::vector<std::string> const &value) {
  m_ScpDomains = value;
  m_ScpDomainsIsSet = true;
}
bool NFProfile::scpDomainsIsSet() const { return m_ScpDomainsIsSet; }
void NFProfile::unsetScpDomains() { m_ScpDomainsIsSet = false; }
ScpInfo NFProfile::getScpInfo() const { return m_ScpInfo; }
void NFProfile::setScpInfo(ScpInfo const &value) {
  m_ScpInfo = value;
  m_ScpInfoIsSet = true;
}
bool NFProfile::scpInfoIsSet() const { return m_ScpInfoIsSet; }
void NFProfile::unsetScpInfo() { m_ScpInfoIsSet = false; }
SeppInfo NFProfile::getSeppInfo() const { return m_SeppInfo; }
void NFProfile::setSeppInfo(SeppInfo const &value) {
  m_SeppInfo = value;
  m_SeppInfoIsSet = true;
}
bool NFProfile::seppInfoIsSet() const { return m_SeppInfoIsSet; }
void NFProfile::unsetSeppInfo() { m_SeppInfoIsSet = false; }
std::string NFProfile::getVendorId() const { return m_VendorId; }
void NFProfile::setVendorId(std::string const &value) {
  m_VendorId = value;
  m_VendorIdIsSet = true;
}
bool NFProfile::vendorIdIsSet() const { return m_VendorIdIsSet; }
void NFProfile::unsetVendorId() { m_VendorIdIsSet = false; }
std::map<std::string, std::vector<VendorSpecificFeature>> &
NFProfile::getSupportedVendorSpecificFeatures() {
  return m_SupportedVendorSpecificFeatures;
}
void NFProfile::setSupportedVendorSpecificFeatures(
    std::map<std::string, std::vector<VendorSpecificFeature>> const &value) {
  m_SupportedVendorSpecificFeatures = value;
  m_SupportedVendorSpecificFeaturesIsSet = true;
}
bool NFProfile::supportedVendorSpecificFeaturesIsSet() const {
  return m_SupportedVendorSpecificFeaturesIsSet;
}
void NFProfile::unsetSupportedVendorSpecificFeatures() {
  m_SupportedVendorSpecificFeaturesIsSet = false;
}
std::map<std::string, AanfInfo> &NFProfile::getAanfInfoList() {
  return m_AanfInfoList;
}
void NFProfile::setAanfInfoList(std::map<std::string, AanfInfo> const &value) {
  m_AanfInfoList = value;
  m_AanfInfoListIsSet = true;
}
bool NFProfile::aanfInfoListIsSet() const { return m_AanfInfoListIsSet; }
void NFProfile::unsetAanfInfoList() { m_AanfInfoListIsSet = false; }
5GDdnmfInfo NFProfile::getR5gDdnmfInfo() const { return m_r_5gDdnmfInfo; }
void NFProfile::setR5gDdnmfInfo(5GDdnmfInfo const &value) {
  m_r_5gDdnmfInfo = value;
  m_r_5gDdnmfInfoIsSet = true;
}
bool NFProfile::r5gDdnmfInfoIsSet() const { return m_r_5gDdnmfInfoIsSet; }
void NFProfile::unsetr_5gDdnmfInfo() { m_r_5gDdnmfInfoIsSet = false; }
MfafInfo NFProfile::getMfafInfo() const { return m_MfafInfo; }
void NFProfile::setMfafInfo(MfafInfo const &value) {
  m_MfafInfo = value;
  m_MfafInfoIsSet = true;
}
bool NFProfile::mfafInfoIsSet() const { return m_MfafInfoIsSet; }
void NFProfile::unsetMfafInfo() { m_MfafInfoIsSet = false; }
std::map<std::string, EasdfInfo> &NFProfile::getEasdfInfoList() {
  return m_EasdfInfoList;
}
void NFProfile::setEasdfInfoList(
    std::map<std::string, EasdfInfo> const &value) {
  m_EasdfInfoList = value;
  m_EasdfInfoListIsSet = true;
}
bool NFProfile::easdfInfoListIsSet() const { return m_EasdfInfoListIsSet; }
void NFProfile::unsetEasdfInfoList() { m_EasdfInfoListIsSet = false; }
DccfInfo NFProfile::getDccfInfo() const { return m_DccfInfo; }
void NFProfile::setDccfInfo(DccfInfo const &value) {
  m_DccfInfo = value;
  m_DccfInfoIsSet = true;
}
bool NFProfile::dccfInfoIsSet() const { return m_DccfInfoIsSet; }
void NFProfile::unsetDccfInfo() { m_DccfInfoIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
