/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AccuUsageReport.h
 *
 * Contains the accumulated usage report information.
 */

#ifndef AccuUsageReport_H_
#define AccuUsageReport_H_

#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the accumulated usage report information.
/// </summary>
class AccuUsageReport {
public:
  AccuUsageReport();
  virtual ~AccuUsageReport();

  void validate();

  /////////////////////////////////////////////
  /// AccuUsageReport members

  /// <summary>
  /// An id referencing UsageMonitoringData objects associated with this usage
  /// report.
  /// </summary>
  std::string getRefUmIds() const;
  void setRefUmIds(std::string const &value);
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes.
  /// </summary>
  int64_t getVolUsage() const;
  void setVolUsage(int64_t const value);
  bool volUsageIsSet() const;
  void unsetVolUsage();
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes.
  /// </summary>
  int64_t getVolUsageUplink() const;
  void setVolUsageUplink(int64_t const value);
  bool volUsageUplinkIsSet() const;
  void unsetVolUsageUplink();
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes.
  /// </summary>
  int64_t getVolUsageDownlink() const;
  void setVolUsageDownlink(int64_t const value);
  bool volUsageDownlinkIsSet() const;
  void unsetVolUsageDownlink();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getTimeUsage() const;
  void setTimeUsage(int32_t const value);
  bool timeUsageIsSet() const;
  void unsetTimeUsage();
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes.
  /// </summary>
  int64_t getNextVolUsage() const;
  void setNextVolUsage(int64_t const value);
  bool nextVolUsageIsSet() const;
  void unsetNextVolUsage();
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes.
  /// </summary>
  int64_t getNextVolUsageUplink() const;
  void setNextVolUsageUplink(int64_t const value);
  bool nextVolUsageUplinkIsSet() const;
  void unsetNextVolUsageUplink();
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes.
  /// </summary>
  int64_t getNextVolUsageDownlink() const;
  void setNextVolUsageDownlink(int64_t const value);
  bool nextVolUsageDownlinkIsSet() const;
  void unsetNextVolUsageDownlink();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getNextTimeUsage() const;
  void setNextTimeUsage(int32_t const value);
  bool nextTimeUsageIsSet() const;
  void unsetNextTimeUsage();

  friend void to_json(nlohmann::json &j, const AccuUsageReport &o);
  friend void from_json(const nlohmann::json &j, AccuUsageReport &o);

protected:
  std::string m_RefUmIds;

  int64_t m_VolUsage;
  bool m_VolUsageIsSet;
  int64_t m_VolUsageUplink;
  bool m_VolUsageUplinkIsSet;
  int64_t m_VolUsageDownlink;
  bool m_VolUsageDownlinkIsSet;
  int32_t m_TimeUsage;
  bool m_TimeUsageIsSet;
  int64_t m_NextVolUsage;
  bool m_NextVolUsageIsSet;
  int64_t m_NextVolUsageUplink;
  bool m_NextVolUsageUplinkIsSet;
  int64_t m_NextVolUsageDownlink;
  bool m_NextVolUsageDownlinkIsSet;
  int32_t m_NextTimeUsage;
  bool m_NextTimeUsageIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AccuUsageReport_H_ */
