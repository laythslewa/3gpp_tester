/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "QosFlowsUsageReport.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

QosFlowsUsageReport::QosFlowsUsageReport() {
  m_QFI = 0;
  m_QFIIsSet = false;
  m_StartTimestamp = "";
  m_StartTimestampIsSet = false;
  m_EndTimestamp = "";
  m_EndTimestampIsSet = false;
  m_UplinkVolume = 0;
  m_UplinkVolumeIsSet = false;
  m_DownlinkVolume = 0;
  m_DownlinkVolumeIsSet = false;
}

QosFlowsUsageReport::~QosFlowsUsageReport() {}

void QosFlowsUsageReport::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const QosFlowsUsageReport &o) {
  j = nlohmann::json();
  if (o.qFIIsSet())
    j["qFI"] = o.m_QFI;
  if (o.startTimestampIsSet())
    j["startTimestamp"] = o.m_StartTimestamp;
  if (o.endTimestampIsSet())
    j["endTimestamp"] = o.m_EndTimestamp;
  if (o.uplinkVolumeIsSet())
    j["uplinkVolume"] = o.m_UplinkVolume;
  if (o.downlinkVolumeIsSet())
    j["downlinkVolume"] = o.m_DownlinkVolume;
}

void from_json(const nlohmann::json &j, QosFlowsUsageReport &o) {
  if (j.find("qFI") != j.end()) {
    j.at("qFI").get_to(o.m_QFI);
    o.m_QFIIsSet = true;
  }
  if (j.find("startTimestamp") != j.end()) {
    j.at("startTimestamp").get_to(o.m_StartTimestamp);
    o.m_StartTimestampIsSet = true;
  }
  if (j.find("endTimestamp") != j.end()) {
    j.at("endTimestamp").get_to(o.m_EndTimestamp);
    o.m_EndTimestampIsSet = true;
  }
  if (j.find("uplinkVolume") != j.end()) {
    j.at("uplinkVolume").get_to(o.m_UplinkVolume);
    o.m_UplinkVolumeIsSet = true;
  }
  if (j.find("downlinkVolume") != j.end()) {
    j.at("downlinkVolume").get_to(o.m_DownlinkVolume);
    o.m_DownlinkVolumeIsSet = true;
  }
}

int32_t QosFlowsUsageReport::getQFI() const { return m_QFI; }
void QosFlowsUsageReport::setQFI(int32_t const value) {
  m_QFI = value;
  m_QFIIsSet = true;
}
bool QosFlowsUsageReport::qFIIsSet() const { return m_QFIIsSet; }
void QosFlowsUsageReport::unsetQFI() { m_QFIIsSet = false; }
std::string QosFlowsUsageReport::getStartTimestamp() const {
  return m_StartTimestamp;
}
void QosFlowsUsageReport::setStartTimestamp(std::string const &value) {
  m_StartTimestamp = value;
  m_StartTimestampIsSet = true;
}
bool QosFlowsUsageReport::startTimestampIsSet() const {
  return m_StartTimestampIsSet;
}
void QosFlowsUsageReport::unsetStartTimestamp() {
  m_StartTimestampIsSet = false;
}
std::string QosFlowsUsageReport::getEndTimestamp() const {
  return m_EndTimestamp;
}
void QosFlowsUsageReport::setEndTimestamp(std::string const &value) {
  m_EndTimestamp = value;
  m_EndTimestampIsSet = true;
}
bool QosFlowsUsageReport::endTimestampIsSet() const {
  return m_EndTimestampIsSet;
}
void QosFlowsUsageReport::unsetEndTimestamp() { m_EndTimestampIsSet = false; }
int32_t QosFlowsUsageReport::getUplinkVolume() const { return m_UplinkVolume; }
void QosFlowsUsageReport::setUplinkVolume(int32_t const value) {
  m_UplinkVolume = value;
  m_UplinkVolumeIsSet = true;
}
bool QosFlowsUsageReport::uplinkVolumeIsSet() const {
  return m_UplinkVolumeIsSet;
}
void QosFlowsUsageReport::unsetUplinkVolume() { m_UplinkVolumeIsSet = false; }
int32_t QosFlowsUsageReport::getDownlinkVolume() const {
  return m_DownlinkVolume;
}
void QosFlowsUsageReport::setDownlinkVolume(int32_t const value) {
  m_DownlinkVolume = value;
  m_DownlinkVolumeIsSet = true;
}
bool QosFlowsUsageReport::downlinkVolumeIsSet() const {
  return m_DownlinkVolumeIsSet;
}
void QosFlowsUsageReport::unsetDownlinkVolume() {
  m_DownlinkVolumeIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
