/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ExpectedUeBehaviourData.h
 *
 *
 */

#ifndef ExpectedUeBehaviourData_H_
#define ExpectedUeBehaviourData_H_

#include "BatteryIndication.h"
#include "LocationArea.h"
#include "ScheduledCommunicationTime_2.h"
#include "ScheduledCommunicationType.h"
#include "StationaryIndication.h"
#include "TrafficProfile.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class ExpectedUeBehaviourData {
public:
  ExpectedUeBehaviourData();
  virtual ~ExpectedUeBehaviourData();

  void validate();

  /////////////////////////////////////////////
  /// ExpectedUeBehaviourData members

  /// <summary>
  ///
  /// </summary>
  StationaryIndication getStationaryIndication() const;
  void setStationaryIndication(StationaryIndication const &value);
  bool stationaryIndicationIsSet() const;
  void unsetStationaryIndication();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getCommunicationDurationTime() const;
  void setCommunicationDurationTime(int32_t const value);
  bool communicationDurationTimeIsSet() const;
  void unsetCommunicationDurationTime();
  /// <summary>
  /// indicating a time in seconds.
  /// </summary>
  int32_t getPeriodicTime() const;
  void setPeriodicTime(int32_t const value);
  bool periodicTimeIsSet() const;
  void unsetPeriodicTime();
  /// <summary>
  ///
  /// </summary>
  ScheduledCommunicationTime_2 getScheduledCommunicationTime() const;
  void setScheduledCommunicationTime(ScheduledCommunicationTime_2 const &value);
  bool scheduledCommunicationTimeIsSet() const;
  void unsetScheduledCommunicationTime();
  /// <summary>
  ///
  /// </summary>
  ScheduledCommunicationType getScheduledCommunicationType() const;
  void setScheduledCommunicationType(ScheduledCommunicationType const &value);
  bool scheduledCommunicationTypeIsSet() const;
  void unsetScheduledCommunicationType();
  /// <summary>
  /// Identifies the UE&#39;s expected geographical movement. The attribute is
  /// only applicable in 5G.
  /// </summary>
  std::vector<LocationArea> &getExpectedUmts();
  void setExpectedUmts(std::vector<LocationArea> const &value);
  bool expectedUmtsIsSet() const;
  void unsetExpectedUmts();
  /// <summary>
  ///
  /// </summary>
  TrafficProfile getTrafficProfile() const;
  void setTrafficProfile(TrafficProfile const &value);
  bool trafficProfileIsSet() const;
  void unsetTrafficProfile();
  /// <summary>
  ///
  /// </summary>
  BatteryIndication getBatteryIndication() const;
  void setBatteryIndication(BatteryIndication const &value);
  bool batteryIndicationIsSet() const;
  void unsetBatteryIndication();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getValidityTime() const;
  void setValidityTime(std::string const &value);
  bool validityTimeIsSet() const;
  void unsetValidityTime();

  friend void to_json(nlohmann::json &j, const ExpectedUeBehaviourData &o);
  friend void from_json(const nlohmann::json &j, ExpectedUeBehaviourData &o);

protected:
  StationaryIndication m_StationaryIndication;
  bool m_StationaryIndicationIsSet;
  int32_t m_CommunicationDurationTime;
  bool m_CommunicationDurationTimeIsSet;
  int32_t m_PeriodicTime;
  bool m_PeriodicTimeIsSet;
  ScheduledCommunicationTime_2 m_ScheduledCommunicationTime;
  bool m_ScheduledCommunicationTimeIsSet;
  ScheduledCommunicationType m_ScheduledCommunicationType;
  bool m_ScheduledCommunicationTypeIsSet;
  std::vector<LocationArea> m_ExpectedUmts;
  bool m_ExpectedUmtsIsSet;
  TrafficProfile m_TrafficProfile;
  bool m_TrafficProfileIsSet;
  BatteryIndication m_BatteryIndication;
  bool m_BatteryIndicationIsSet;
  std::string m_ValidityTime;
  bool m_ValidityTimeIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ExpectedUeBehaviourData_H_ */
