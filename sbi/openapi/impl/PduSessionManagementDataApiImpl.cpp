/**
 * Unified Data Repository Service API file for structured data for exposure
 * The API version is defined in 3GPP TS 29.504 Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PduSessionManagementDataApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

PduSessionManagementDataApiImpl::PduSessionManagementDataApiImpl(
    std::shared_ptr<Pistache::Rest::Router> rtr)
    : PduSessionManagementDataApi(rtr) {}

void PduSessionManagementDataApiImpl::create_or_replace_session_management_data(
    const std::string &ueId, const int32_t &pduSessionId,
    const PduSessionManagementData &pduSessionManagementData,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void PduSessionManagementDataApiImpl::delete_session_management_data(
    const std::string &ueId, const int32_t &pduSessionId,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void PduSessionManagementDataApiImpl::query_session_management_data(
    const std::string &ueId, const int32_t &pduSessionId,
    const Pistache::Optional<std::string> &ipv4Addr,
    const Pistache::Optional<Ipv6Prefix> &ipv6Prefix,
    const Pistache::Optional<std::string> &dnn,
    const Pistache::Optional<std::vector<std::string>> &fields,
    const Pistache::Optional<std::string> &suppFeat,
    Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
