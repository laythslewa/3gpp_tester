/**
 * NSSF NS Selection
 * NSSF Network Slice Selection Service. © 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AuthorizedNetworkSliceInfo.h
 *
 * Contains the authorized network slice information
 */

#ifndef AuthorizedNetworkSliceInfo_H_
#define AuthorizedNetworkSliceInfo_H_

#include "AllowedNssai.h"
#include "ConfiguredSnssai.h"
#include "NsiInformation.h"
#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the authorized network slice information
/// </summary>
class AuthorizedNetworkSliceInfo {
public:
  AuthorizedNetworkSliceInfo();
  virtual ~AuthorizedNetworkSliceInfo();

  void validate();

  /////////////////////////////////////////////
  /// AuthorizedNetworkSliceInfo members

  /// <summary>
  ///
  /// </summary>
  std::vector<AllowedNssai> &getAllowedNssaiList();
  void setAllowedNssaiList(std::vector<AllowedNssai> const &value);
  bool allowedNssaiListIsSet() const;
  void unsetAllowedNssaiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<ConfiguredSnssai> &getConfiguredNssai();
  void setConfiguredNssai(std::vector<ConfiguredSnssai> const &value);
  bool configuredNssaiIsSet() const;
  void unsetConfiguredNssai();
  /// <summary>
  ///
  /// </summary>
  std::string getTargetAmfSet() const;
  void setTargetAmfSet(std::string const &value);
  bool targetAmfSetIsSet() const;
  void unsetTargetAmfSet();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getCandidateAmfList();
  void setCandidateAmfList(std::vector<std::string> const &value);
  bool candidateAmfListIsSet() const;
  void unsetCandidateAmfList();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getRejectedNssaiInPlmn();
  void setRejectedNssaiInPlmn(std::vector<Snssai> const &value);
  bool rejectedNssaiInPlmnIsSet() const;
  void unsetRejectedNssaiInPlmn();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getRejectedNssaiInTa();
  void setRejectedNssaiInTa(std::vector<Snssai> const &value);
  bool rejectedNssaiInTaIsSet() const;
  void unsetRejectedNssaiInTa();
  /// <summary>
  ///
  /// </summary>
  NsiInformation getNsiInformation() const;
  void setNsiInformation(NsiInformation const &value);
  bool nsiInformationIsSet() const;
  void unsetNsiInformation();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNrfAmfSet() const;
  void setNrfAmfSet(std::string const &value);
  bool nrfAmfSetIsSet() const;
  void unsetNrfAmfSet();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNrfAmfSetNfMgtUri() const;
  void setNrfAmfSetNfMgtUri(std::string const &value);
  bool nrfAmfSetNfMgtUriIsSet() const;
  void unsetNrfAmfSetNfMgtUri();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getNrfAmfSetAccessTokenUri() const;
  void setNrfAmfSetAccessTokenUri(std::string const &value);
  bool nrfAmfSetAccessTokenUriIsSet() const;
  void unsetNrfAmfSetAccessTokenUri();
  /// <summary>
  /// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted
  /// as the following string  \&quot; set&lt;Set ID&gt;.sn&lt;Service
  /// Name&gt;.nfi&lt;NF Instance
  /// ID&gt;.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.sn&lt;ServiceName&gt;.nfi&lt;NFInstanceID&gt;.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition)  &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition)  &lt;NID&gt; encoded as defined
  /// in clause 5.4.2 (\&quot;Nid\&quot; data type definition)
  /// &lt;NFInstanceId&gt; encoded as defined in clause 5.3.2
  /// &lt;ServiceName&gt; encoded as defined in 3GPP TS 29.510 &lt;Set ID&gt;
  /// encoded as a string of characters consisting of alphabetic characters (A-Z
  /// and a-z), digits (0-9) and/or the hyphen (-) and that shall end with
  /// either an alphabetic character or a digit.
  /// </summary>
  std::string getTargetAmfServiceSet() const;
  void setTargetAmfServiceSet(std::string const &value);
  bool targetAmfServiceSetIsSet() const;
  void unsetTargetAmfServiceSet();

  friend void to_json(nlohmann::json &j, const AuthorizedNetworkSliceInfo &o);
  friend void from_json(const nlohmann::json &j, AuthorizedNetworkSliceInfo &o);

protected:
  std::vector<AllowedNssai> m_AllowedNssaiList;
  bool m_AllowedNssaiListIsSet;
  std::vector<ConfiguredSnssai> m_ConfiguredNssai;
  bool m_ConfiguredNssaiIsSet;
  std::string m_TargetAmfSet;
  bool m_TargetAmfSetIsSet;
  std::vector<std::string> m_CandidateAmfList;
  bool m_CandidateAmfListIsSet;
  std::vector<Snssai> m_RejectedNssaiInPlmn;
  bool m_RejectedNssaiInPlmnIsSet;
  std::vector<Snssai> m_RejectedNssaiInTa;
  bool m_RejectedNssaiInTaIsSet;
  NsiInformation m_NsiInformation;
  bool m_NsiInformationIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::string m_NrfAmfSet;
  bool m_NrfAmfSetIsSet;
  std::string m_NrfAmfSetNfMgtUri;
  bool m_NrfAmfSetNfMgtUriIsSet;
  std::string m_NrfAmfSetAccessTokenUri;
  bool m_NrfAmfSetAccessTokenUriIsSet;
  std::string m_TargetAmfServiceSet;
  bool m_TargetAmfServiceSetIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AuthorizedNetworkSliceInfo_H_ */
