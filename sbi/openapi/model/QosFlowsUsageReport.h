/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * QosFlowsUsageReport.h
 *
 *
 */

#ifndef QosFlowsUsageReport_H_
#define QosFlowsUsageReport_H_

#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class QosFlowsUsageReport {
public:
  QosFlowsUsageReport();
  virtual ~QosFlowsUsageReport();

  void validate();

  /////////////////////////////////////////////
  /// QosFlowsUsageReport members

  /// <summary>
  /// Unsigned integer identifying a QoS flow, within the range 0 to 63.
  /// </summary>
  int32_t getQFI() const;
  void setQFI(int32_t const value);
  bool qFIIsSet() const;
  void unsetQFI();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getStartTimestamp() const;
  void setStartTimestamp(std::string const &value);
  bool startTimestampIsSet() const;
  void unsetStartTimestamp();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getEndTimestamp() const;
  void setEndTimestamp(std::string const &value);
  bool endTimestampIsSet() const;
  void unsetEndTimestamp();
  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 64-bit integer.
  /// </summary>
  int32_t getUplinkVolume() const;
  void setUplinkVolume(int32_t const value);
  bool uplinkVolumeIsSet() const;
  void unsetUplinkVolume();
  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 64-bit integer.
  /// </summary>
  int32_t getDownlinkVolume() const;
  void setDownlinkVolume(int32_t const value);
  bool downlinkVolumeIsSet() const;
  void unsetDownlinkVolume();

  friend void to_json(nlohmann::json &j, const QosFlowsUsageReport &o);
  friend void from_json(const nlohmann::json &j, QosFlowsUsageReport &o);

protected:
  int32_t m_QFI;
  bool m_QFIIsSet;
  std::string m_StartTimestamp;
  bool m_StartTimestampIsSet;
  std::string m_EndTimestamp;
  bool m_EndTimestampIsSet;
  int32_t m_UplinkVolume;
  bool m_UplinkVolumeIsSet;
  int32_t m_DownlinkVolume;
  bool m_DownlinkVolumeIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* QosFlowsUsageReport_H_ */
