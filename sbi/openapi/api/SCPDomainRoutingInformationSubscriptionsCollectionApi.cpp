/**
 * NRF NFDiscovery Service
 * NRF NFDiscovery Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SCPDomainRoutingInformationSubscriptionsCollectionApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

SCPDomainRoutingInformationSubscriptionsCollectionApi::
    SCPDomainRoutingInformationSubscriptionsCollectionApi(
        std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void SCPDomainRoutingInformationSubscriptionsCollectionApi::init() {
  setupRoutes();
}

void SCPDomainRoutingInformationSubscriptionsCollectionApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Post(
      *router, base + "/scp-domain-routing-info-subs",
      Routes::bind(&SCPDomainRoutingInformationSubscriptionsCollectionApi::
                       scp_domain_routing_info_subscribe_handler,
                   this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &SCPDomainRoutingInformationSubscriptionsCollectionApi::
          scp_domain_routing_information_subscriptions_collection_api_default_handler,
      this));
}

void SCPDomainRoutingInformationSubscriptionsCollectionApi::
    scp_domain_routing_info_subscribe_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {

  // Getting the body param

  ScpDomainRoutingInfoSubscription scpDomainRoutingInfoSubscription;

  // Getting the header params
  auto contentEncoding = request.headers().tryGetRaw("Content-Encoding");
  auto acceptEncoding = request.headers().tryGetRaw("Accept-Encoding");

  try {
    nlohmann::json::parse(request.body())
        .get_to(scpDomainRoutingInfoSubscription);
    this->scp_domain_routing_info_subscribe(scpDomainRoutingInfoSubscription,
                                            contentEncoding, acceptEncoding,
                                            response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void SCPDomainRoutingInformationSubscriptionsCollectionApi::
    scp_domain_routing_information_subscriptions_collection_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
