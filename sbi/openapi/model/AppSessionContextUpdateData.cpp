/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AppSessionContextUpdateData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AppSessionContextUpdateData::AppSessionContextUpdateData() {
  m_AfAppId = "";
  m_AfAppIdIsSet = false;
  m_AfRoutReqIsSet = false;
  m_AspId = "";
  m_AspIdIsSet = false;
  m_BdtRefId = "";
  m_BdtRefIdIsSet = false;
  m_EvSubscIsSet = false;
  m_McpttId = "";
  m_McpttIdIsSet = false;
  m_McVideoId = "";
  m_McVideoIdIsSet = false;
  m_MedComponentsIsSet = false;
  m_MpsActionIsSet = false;
  m_MpsId = "";
  m_MpsIdIsSet = false;
  m_McsId = "";
  m_McsIdIsSet = false;
  m_PreemptControlInfoIsSet = false;
  m_ResPrioIsSet = false;
  m_ServInfStatusIsSet = false;
  m_SipForkIndIsSet = false;
  m_SponId = "";
  m_SponIdIsSet = false;
  m_SponStatusIsSet = false;
  m_TsnBridgeManContIsSet = false;
  m_TsnPortManContDsttIsSet = false;
  m_TsnPortManContNwttsIsSet = false;
}

AppSessionContextUpdateData::~AppSessionContextUpdateData() {}

void AppSessionContextUpdateData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AppSessionContextUpdateData &o) {
  j = nlohmann::json();
  if (o.afAppIdIsSet())
    j["afAppId"] = o.m_AfAppId;
  if (o.afRoutReqIsSet())
    j["afRoutReq"] = o.m_AfRoutReq;
  if (o.aspIdIsSet())
    j["aspId"] = o.m_AspId;
  if (o.bdtRefIdIsSet())
    j["bdtRefId"] = o.m_BdtRefId;
  if (o.evSubscIsSet())
    j["evSubsc"] = o.m_EvSubsc;
  if (o.mcpttIdIsSet())
    j["mcpttId"] = o.m_McpttId;
  if (o.mcVideoIdIsSet())
    j["mcVideoId"] = o.m_McVideoId;
  if (o.medComponentsIsSet() || !o.m_MedComponents.empty())
    j["medComponents"] = o.m_MedComponents;
  if (o.mpsActionIsSet())
    j["mpsAction"] = o.m_MpsAction;
  if (o.mpsIdIsSet())
    j["mpsId"] = o.m_MpsId;
  if (o.mcsIdIsSet())
    j["mcsId"] = o.m_McsId;
  if (o.preemptControlInfoIsSet())
    j["preemptControlInfo"] = o.m_PreemptControlInfo;
  if (o.resPrioIsSet())
    j["resPrio"] = o.m_ResPrio;
  if (o.servInfStatusIsSet())
    j["servInfStatus"] = o.m_ServInfStatus;
  if (o.sipForkIndIsSet())
    j["sipForkInd"] = o.m_SipForkInd;
  if (o.sponIdIsSet())
    j["sponId"] = o.m_SponId;
  if (o.sponStatusIsSet())
    j["sponStatus"] = o.m_SponStatus;
  if (o.tsnBridgeManContIsSet())
    j["tsnBridgeManCont"] = o.m_TsnBridgeManCont;
  if (o.tsnPortManContDsttIsSet())
    j["tsnPortManContDstt"] = o.m_TsnPortManContDstt;
  if (o.tsnPortManContNwttsIsSet() || !o.m_TsnPortManContNwtts.empty())
    j["tsnPortManContNwtts"] = o.m_TsnPortManContNwtts;
}

void from_json(const nlohmann::json &j, AppSessionContextUpdateData &o) {
  if (j.find("afAppId") != j.end()) {
    j.at("afAppId").get_to(o.m_AfAppId);
    o.m_AfAppIdIsSet = true;
  }
  if (j.find("afRoutReq") != j.end()) {
    j.at("afRoutReq").get_to(o.m_AfRoutReq);
    o.m_AfRoutReqIsSet = true;
  }
  if (j.find("aspId") != j.end()) {
    j.at("aspId").get_to(o.m_AspId);
    o.m_AspIdIsSet = true;
  }
  if (j.find("bdtRefId") != j.end()) {
    j.at("bdtRefId").get_to(o.m_BdtRefId);
    o.m_BdtRefIdIsSet = true;
  }
  if (j.find("evSubsc") != j.end()) {
    j.at("evSubsc").get_to(o.m_EvSubsc);
    o.m_EvSubscIsSet = true;
  }
  if (j.find("mcpttId") != j.end()) {
    j.at("mcpttId").get_to(o.m_McpttId);
    o.m_McpttIdIsSet = true;
  }
  if (j.find("mcVideoId") != j.end()) {
    j.at("mcVideoId").get_to(o.m_McVideoId);
    o.m_McVideoIdIsSet = true;
  }
  if (j.find("medComponents") != j.end()) {
    j.at("medComponents").get_to(o.m_MedComponents);
    o.m_MedComponentsIsSet = true;
  }
  if (j.find("mpsAction") != j.end()) {
    j.at("mpsAction").get_to(o.m_MpsAction);
    o.m_MpsActionIsSet = true;
  }
  if (j.find("mpsId") != j.end()) {
    j.at("mpsId").get_to(o.m_MpsId);
    o.m_MpsIdIsSet = true;
  }
  if (j.find("mcsId") != j.end()) {
    j.at("mcsId").get_to(o.m_McsId);
    o.m_McsIdIsSet = true;
  }
  if (j.find("preemptControlInfo") != j.end()) {
    j.at("preemptControlInfo").get_to(o.m_PreemptControlInfo);
    o.m_PreemptControlInfoIsSet = true;
  }
  if (j.find("resPrio") != j.end()) {
    j.at("resPrio").get_to(o.m_ResPrio);
    o.m_ResPrioIsSet = true;
  }
  if (j.find("servInfStatus") != j.end()) {
    j.at("servInfStatus").get_to(o.m_ServInfStatus);
    o.m_ServInfStatusIsSet = true;
  }
  if (j.find("sipForkInd") != j.end()) {
    j.at("sipForkInd").get_to(o.m_SipForkInd);
    o.m_SipForkIndIsSet = true;
  }
  if (j.find("sponId") != j.end()) {
    j.at("sponId").get_to(o.m_SponId);
    o.m_SponIdIsSet = true;
  }
  if (j.find("sponStatus") != j.end()) {
    j.at("sponStatus").get_to(o.m_SponStatus);
    o.m_SponStatusIsSet = true;
  }
  if (j.find("tsnBridgeManCont") != j.end()) {
    j.at("tsnBridgeManCont").get_to(o.m_TsnBridgeManCont);
    o.m_TsnBridgeManContIsSet = true;
  }
  if (j.find("tsnPortManContDstt") != j.end()) {
    j.at("tsnPortManContDstt").get_to(o.m_TsnPortManContDstt);
    o.m_TsnPortManContDsttIsSet = true;
  }
  if (j.find("tsnPortManContNwtts") != j.end()) {
    j.at("tsnPortManContNwtts").get_to(o.m_TsnPortManContNwtts);
    o.m_TsnPortManContNwttsIsSet = true;
  }
}

std::string AppSessionContextUpdateData::getAfAppId() const {
  return m_AfAppId;
}
void AppSessionContextUpdateData::setAfAppId(std::string const &value) {
  m_AfAppId = value;
  m_AfAppIdIsSet = true;
}
bool AppSessionContextUpdateData::afAppIdIsSet() const {
  return m_AfAppIdIsSet;
}
void AppSessionContextUpdateData::unsetAfAppId() { m_AfAppIdIsSet = false; }
AfRoutingRequirementRm AppSessionContextUpdateData::getAfRoutReq() const {
  return m_AfRoutReq;
}
void AppSessionContextUpdateData::setAfRoutReq(
    AfRoutingRequirementRm const &value) {
  m_AfRoutReq = value;
  m_AfRoutReqIsSet = true;
}
bool AppSessionContextUpdateData::afRoutReqIsSet() const {
  return m_AfRoutReqIsSet;
}
void AppSessionContextUpdateData::unsetAfRoutReq() { m_AfRoutReqIsSet = false; }
std::string AppSessionContextUpdateData::getAspId() const { return m_AspId; }
void AppSessionContextUpdateData::setAspId(std::string const &value) {
  m_AspId = value;
  m_AspIdIsSet = true;
}
bool AppSessionContextUpdateData::aspIdIsSet() const { return m_AspIdIsSet; }
void AppSessionContextUpdateData::unsetAspId() { m_AspIdIsSet = false; }
std::string AppSessionContextUpdateData::getBdtRefId() const {
  return m_BdtRefId;
}
void AppSessionContextUpdateData::setBdtRefId(std::string const &value) {
  m_BdtRefId = value;
  m_BdtRefIdIsSet = true;
}
bool AppSessionContextUpdateData::bdtRefIdIsSet() const {
  return m_BdtRefIdIsSet;
}
void AppSessionContextUpdateData::unsetBdtRefId() { m_BdtRefIdIsSet = false; }
EventsSubscReqDataRm AppSessionContextUpdateData::getEvSubsc() const {
  return m_EvSubsc;
}
void AppSessionContextUpdateData::setEvSubsc(
    EventsSubscReqDataRm const &value) {
  m_EvSubsc = value;
  m_EvSubscIsSet = true;
}
bool AppSessionContextUpdateData::evSubscIsSet() const {
  return m_EvSubscIsSet;
}
void AppSessionContextUpdateData::unsetEvSubsc() { m_EvSubscIsSet = false; }
std::string AppSessionContextUpdateData::getMcpttId() const {
  return m_McpttId;
}
void AppSessionContextUpdateData::setMcpttId(std::string const &value) {
  m_McpttId = value;
  m_McpttIdIsSet = true;
}
bool AppSessionContextUpdateData::mcpttIdIsSet() const {
  return m_McpttIdIsSet;
}
void AppSessionContextUpdateData::unsetMcpttId() { m_McpttIdIsSet = false; }
std::string AppSessionContextUpdateData::getMcVideoId() const {
  return m_McVideoId;
}
void AppSessionContextUpdateData::setMcVideoId(std::string const &value) {
  m_McVideoId = value;
  m_McVideoIdIsSet = true;
}
bool AppSessionContextUpdateData::mcVideoIdIsSet() const {
  return m_McVideoIdIsSet;
}
void AppSessionContextUpdateData::unsetMcVideoId() { m_McVideoIdIsSet = false; }
std::map<std::string, MediaComponentRm> &
AppSessionContextUpdateData::getMedComponents() {
  return m_MedComponents;
}
void AppSessionContextUpdateData::setMedComponents(
    std::map<std::string, MediaComponentRm> const &value) {
  m_MedComponents = value;
  m_MedComponentsIsSet = true;
}
bool AppSessionContextUpdateData::medComponentsIsSet() const {
  return m_MedComponentsIsSet;
}
void AppSessionContextUpdateData::unsetMedComponents() {
  m_MedComponentsIsSet = false;
}
MpsAction AppSessionContextUpdateData::getMpsAction() const {
  return m_MpsAction;
}
void AppSessionContextUpdateData::setMpsAction(MpsAction const &value) {
  m_MpsAction = value;
  m_MpsActionIsSet = true;
}
bool AppSessionContextUpdateData::mpsActionIsSet() const {
  return m_MpsActionIsSet;
}
void AppSessionContextUpdateData::unsetMpsAction() { m_MpsActionIsSet = false; }
std::string AppSessionContextUpdateData::getMpsId() const { return m_MpsId; }
void AppSessionContextUpdateData::setMpsId(std::string const &value) {
  m_MpsId = value;
  m_MpsIdIsSet = true;
}
bool AppSessionContextUpdateData::mpsIdIsSet() const { return m_MpsIdIsSet; }
void AppSessionContextUpdateData::unsetMpsId() { m_MpsIdIsSet = false; }
std::string AppSessionContextUpdateData::getMcsId() const { return m_McsId; }
void AppSessionContextUpdateData::setMcsId(std::string const &value) {
  m_McsId = value;
  m_McsIdIsSet = true;
}
bool AppSessionContextUpdateData::mcsIdIsSet() const { return m_McsIdIsSet; }
void AppSessionContextUpdateData::unsetMcsId() { m_McsIdIsSet = false; }
PreemptionControlInformationRm
AppSessionContextUpdateData::getPreemptControlInfo() const {
  return m_PreemptControlInfo;
}
void AppSessionContextUpdateData::setPreemptControlInfo(
    PreemptionControlInformationRm const &value) {
  m_PreemptControlInfo = value;
  m_PreemptControlInfoIsSet = true;
}
bool AppSessionContextUpdateData::preemptControlInfoIsSet() const {
  return m_PreemptControlInfoIsSet;
}
void AppSessionContextUpdateData::unsetPreemptControlInfo() {
  m_PreemptControlInfoIsSet = false;
}
ReservPriority AppSessionContextUpdateData::getResPrio() const {
  return m_ResPrio;
}
void AppSessionContextUpdateData::setResPrio(ReservPriority const &value) {
  m_ResPrio = value;
  m_ResPrioIsSet = true;
}
bool AppSessionContextUpdateData::resPrioIsSet() const {
  return m_ResPrioIsSet;
}
void AppSessionContextUpdateData::unsetResPrio() { m_ResPrioIsSet = false; }
ServiceInfoStatus AppSessionContextUpdateData::getServInfStatus() const {
  return m_ServInfStatus;
}
void AppSessionContextUpdateData::setServInfStatus(
    ServiceInfoStatus const &value) {
  m_ServInfStatus = value;
  m_ServInfStatusIsSet = true;
}
bool AppSessionContextUpdateData::servInfStatusIsSet() const {
  return m_ServInfStatusIsSet;
}
void AppSessionContextUpdateData::unsetServInfStatus() {
  m_ServInfStatusIsSet = false;
}
SipForkingIndication AppSessionContextUpdateData::getSipForkInd() const {
  return m_SipForkInd;
}
void AppSessionContextUpdateData::setSipForkInd(
    SipForkingIndication const &value) {
  m_SipForkInd = value;
  m_SipForkIndIsSet = true;
}
bool AppSessionContextUpdateData::sipForkIndIsSet() const {
  return m_SipForkIndIsSet;
}
void AppSessionContextUpdateData::unsetSipForkInd() {
  m_SipForkIndIsSet = false;
}
std::string AppSessionContextUpdateData::getSponId() const { return m_SponId; }
void AppSessionContextUpdateData::setSponId(std::string const &value) {
  m_SponId = value;
  m_SponIdIsSet = true;
}
bool AppSessionContextUpdateData::sponIdIsSet() const { return m_SponIdIsSet; }
void AppSessionContextUpdateData::unsetSponId() { m_SponIdIsSet = false; }
SponsoringStatus AppSessionContextUpdateData::getSponStatus() const {
  return m_SponStatus;
}
void AppSessionContextUpdateData::setSponStatus(SponsoringStatus const &value) {
  m_SponStatus = value;
  m_SponStatusIsSet = true;
}
bool AppSessionContextUpdateData::sponStatusIsSet() const {
  return m_SponStatusIsSet;
}
void AppSessionContextUpdateData::unsetSponStatus() {
  m_SponStatusIsSet = false;
}
BridgeManagementContainer
AppSessionContextUpdateData::getTsnBridgeManCont() const {
  return m_TsnBridgeManCont;
}
void AppSessionContextUpdateData::setTsnBridgeManCont(
    BridgeManagementContainer const &value) {
  m_TsnBridgeManCont = value;
  m_TsnBridgeManContIsSet = true;
}
bool AppSessionContextUpdateData::tsnBridgeManContIsSet() const {
  return m_TsnBridgeManContIsSet;
}
void AppSessionContextUpdateData::unsetTsnBridgeManCont() {
  m_TsnBridgeManContIsSet = false;
}
PortManagementContainer
AppSessionContextUpdateData::getTsnPortManContDstt() const {
  return m_TsnPortManContDstt;
}
void AppSessionContextUpdateData::setTsnPortManContDstt(
    PortManagementContainer const &value) {
  m_TsnPortManContDstt = value;
  m_TsnPortManContDsttIsSet = true;
}
bool AppSessionContextUpdateData::tsnPortManContDsttIsSet() const {
  return m_TsnPortManContDsttIsSet;
}
void AppSessionContextUpdateData::unsetTsnPortManContDstt() {
  m_TsnPortManContDsttIsSet = false;
}
std::vector<PortManagementContainer> &
AppSessionContextUpdateData::getTsnPortManContNwtts() {
  return m_TsnPortManContNwtts;
}
void AppSessionContextUpdateData::setTsnPortManContNwtts(
    std::vector<PortManagementContainer> const &value) {
  m_TsnPortManContNwtts = value;
  m_TsnPortManContNwttsIsSet = true;
}
bool AppSessionContextUpdateData::tsnPortManContNwttsIsSet() const {
  return m_TsnPortManContNwttsIsSet;
}
void AppSessionContextUpdateData::unsetTsnPortManContNwtts() {
  m_TsnPortManContNwttsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
