/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ChargingDataResponse.h
 *
 *
 */

#ifndef ChargingDataResponse_H_
#define ChargingDataResponse_H_

#include "InvocationResult.h"
#include "PDUSessionChargingInformation.h"
#include "RoamingQBCInformation.h"
#include "SessionFailover.h"
#include "Trigger.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class ChargingDataResponse {
public:
  ChargingDataResponse();
  virtual ~ChargingDataResponse();

  void validate();

  /////////////////////////////////////////////
  /// ChargingDataResponse members

  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getInvocationTimeStamp() const;
  void setInvocationTimeStamp(std::string const &value);
  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 32-bit integer.
  /// </summary>
  int32_t getInvocationSequenceNumber() const;
  void setInvocationSequenceNumber(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  InvocationResult getInvocationResult() const;
  void setInvocationResult(InvocationResult const &value);
  bool invocationResultIsSet() const;
  void unsetInvocationResult();
  /// <summary>
  ///
  /// </summary>
  SessionFailover getSessionFailover() const;
  void setSessionFailover(SessionFailover const &value);
  bool sessionFailoverIsSet() const;
  void unsetSessionFailover();
  /// <summary>
  ///
  /// </summary>
  std::vector<Trigger> &getTriggers();
  void setTriggers(std::vector<Trigger> const &value);
  bool triggersIsSet() const;
  void unsetTriggers();
  /// <summary>
  ///
  /// </summary>
  PDUSessionChargingInformation getPDUSessionChargingInformation() const;
  void
  setPDUSessionChargingInformation(PDUSessionChargingInformation const &value);
  bool pDUSessionChargingInformationIsSet() const;
  void unsetPDUSessionChargingInformation();
  /// <summary>
  ///
  /// </summary>
  RoamingQBCInformation getRoamingQBCInformation() const;
  void setRoamingQBCInformation(RoamingQBCInformation const &value);
  bool roamingQBCInformationIsSet() const;
  void unsetRoamingQBCInformation();

  friend void to_json(nlohmann::json &j, const ChargingDataResponse &o);
  friend void from_json(const nlohmann::json &j, ChargingDataResponse &o);

protected:
  std::string m_InvocationTimeStamp;

  int32_t m_InvocationSequenceNumber;

  InvocationResult m_InvocationResult;
  bool m_InvocationResultIsSet;
  SessionFailover m_SessionFailover;
  bool m_SessionFailoverIsSet;
  std::vector<Trigger> m_Triggers;
  bool m_TriggersIsSet;
  PDUSessionChargingInformation m_PDUSessionChargingInformation;
  bool m_PDUSessionChargingInformationIsSet;
  RoamingQBCInformation m_RoamingQBCInformation;
  bool m_RoamingQBCInformationIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ChargingDataResponse_H_ */
