/**
 * 3gpp-am-policyauthorization
 * API for AM policy authorization. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualApplicationAMContextApi.h
 *
 *
 */

#ifndef IndividualApplicationAMContextApi_H_
#define IndividualApplicationAMContextApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "AppAmContextExpData.h"
#include "AppAmContextExpRespData.h"
#include "AppAmContextExpUpdateData.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class IndividualApplicationAMContextApi {
public:
  IndividualApplicationAMContextApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~IndividualApplicationAMContextApi() {}
  void init();

  const std::string base = "/3gpp-am-policyauthorization/v1";

private:
  void setupRoutes();

  void delete_app_am_context_handler(const Pistache::Rest::Request &request,
                                     Pistache::Http::ResponseWriter response);
  void get_app_am_context_handler(const Pistache::Rest::Request &request,
                                  Pistache::Http::ResponseWriter response);
  void mod_app_am_context_handler(const Pistache::Rest::Request &request,
                                  Pistache::Http::ResponseWriter response);
  void individual_application_am_context_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Deletes an existing Individual Application AM Context
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="afId">Identifier of the AF</param>
  /// <param name="appAmContextId">string identifying the Individual aaplication
  /// AM context resource</param>
  virtual void
  delete_app_am_context(const std::string &afId,
                        const std::string &appAmContextId,
                        Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// read an existing Individual application AM context
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="afId">Identifier of the AF</param>
  /// <param name="appAmContextId">Identifier of the Individual application AM
  /// context</param>
  virtual void get_app_am_context(const std::string &afId,
                                  const std::string &appAmContextId,
                                  Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// partial modifies an existing Individual application AM context
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="afId">Identifier of the AF</param>
  /// <param name="appAmContextId">Identifier of the application AM context
  /// resource</param> <param name="appAmContextExpUpdateData"></param>
  virtual void
  mod_app_am_context(const std::string &afId, const std::string &appAmContextId,
                     const AppAmContextExpUpdateData &appAmContextExpUpdateData,
                     Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IndividualApplicationAMContextApi_H_ */
