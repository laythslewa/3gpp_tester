/**
 * NSSF NS Selection
 * NSSF Network Slice Selection Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NetworkSliceInformationDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

NetworkSliceInformationDocumentApi::NetworkSliceInformationDocumentApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void NetworkSliceInformationDocumentApi::init() { setupRoutes(); }

void NetworkSliceInformationDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Get(
      *router, base + "/network-slice-information",
      Routes::bind(
          &NetworkSliceInformationDocumentApi::n_s_selection_get_handler,
          this));

  // Default handler, called when a route is not found
  router->addCustomHandler(
      Routes::bind(&NetworkSliceInformationDocumentApi::
                       network_slice_information_document_api_default_handler,
                   this));
}

void NetworkSliceInformationDocumentApi::n_s_selection_get_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {

  // Getting the query params
  auto nfTypeQuery = request.query().get("nf-type");
  Pistache::Optional<NFType> nfType;
  if (!nfTypeQuery.isEmpty()) {
    NFType valueQuery_instance;
    if (fromStringValue(nfTypeQuery.get(), valueQuery_instance)) {
      nfType = Pistache::Some(valueQuery_instance);
    }
  }
  auto nfIdQuery = request.query().get("nf-id");
  Pistache::Optional<std::string> nfId;
  if (!nfIdQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(nfIdQuery.get(), valueQuery_instance)) {
      nfId = Pistache::Some(valueQuery_instance);
    }
  }
  auto sliceInfoRequestForRegistrationQuery =
      request.query().get("slice-info-request-for-registration");
  Pistache::Optional<SliceInfoForRegistration> sliceInfoRequestForRegistration;
  if (!sliceInfoRequestForRegistrationQuery.isEmpty()) {
    SliceInfoForRegistration valueQuery_instance;
    if (fromStringValue(sliceInfoRequestForRegistrationQuery.get(),
                        valueQuery_instance)) {
      sliceInfoRequestForRegistration = Pistache::Some(valueQuery_instance);
    }
  }
  auto sliceInfoRequestForPduSessionQuery =
      request.query().get("slice-info-request-for-pdu-session");
  Pistache::Optional<SliceInfoForPDUSession> sliceInfoRequestForPduSession;
  if (!sliceInfoRequestForPduSessionQuery.isEmpty()) {
    SliceInfoForPDUSession valueQuery_instance;
    if (fromStringValue(sliceInfoRequestForPduSessionQuery.get(),
                        valueQuery_instance)) {
      sliceInfoRequestForPduSession = Pistache::Some(valueQuery_instance);
    }
  }
  auto sliceInfoRequestForUeCuQuery =
      request.query().get("slice-info-request-for-ue-cu");
  Pistache::Optional<SliceInfoForUEConfigurationUpdate> sliceInfoRequestForUeCu;
  if (!sliceInfoRequestForUeCuQuery.isEmpty()) {
    SliceInfoForUEConfigurationUpdate valueQuery_instance;
    if (fromStringValue(sliceInfoRequestForUeCuQuery.get(),
                        valueQuery_instance)) {
      sliceInfoRequestForUeCu = Pistache::Some(valueQuery_instance);
    }
  }
  auto homePlmnIdQuery = request.query().get("home-plmn-id");
  Pistache::Optional<PlmnId> homePlmnId;
  if (!homePlmnIdQuery.isEmpty()) {
    PlmnId valueQuery_instance;
    if (fromStringValue(homePlmnIdQuery.get(), valueQuery_instance)) {
      homePlmnId = Pistache::Some(valueQuery_instance);
    }
  }
  auto taiQuery = request.query().get("tai");
  Pistache::Optional<Tai> tai;
  if (!taiQuery.isEmpty()) {
    Tai valueQuery_instance;
    if (fromStringValue(taiQuery.get(), valueQuery_instance)) {
      tai = Pistache::Some(valueQuery_instance);
    }
  }
  auto supportedFeaturesQuery = request.query().get("supported-features");
  Pistache::Optional<std::string> supportedFeatures;
  if (!supportedFeaturesQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(supportedFeaturesQuery.get(), valueQuery_instance)) {
      supportedFeatures = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->n_s_selection_get(nfType, nfId, sliceInfoRequestForRegistration,
                            sliceInfoRequestForPduSession,
                            sliceInfoRequestForUeCu, homePlmnId, tai,
                            supportedFeatures, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void NetworkSliceInformationDocumentApi::
    network_slice_information_document_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
