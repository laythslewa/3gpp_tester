/**
 * 3gpp-5glan-pp
 * API for 5G LAN Parameter Provision. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * 5GLanParameters.h
 *
 * Represents 5G LAN service related parameters that need to be provisioned.
 */

#ifndef 5GLanParameters_H_
#define 5GLanParameters_H_

#include "AaaUsage.h"
#include "AppDescriptor.h"
#include "Ipv6Addr.h"
#include "PduSessionType.h"
#include "Snssai.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents 5G LAN service related parameters that need to be provisioned.
/// </summary>
class 5GLanParameters {
public:
  5GLanParameters();
  virtual ~5GLanParameters();

  void validate();

  /////////////////////////////////////////////
  /// 5GLanParameters members

  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more
  /// information.
  /// </summary>
  std::string getExterGroupId() const;
  void setExterGroupId(std::string const &value);
  /// <summary>
  /// Contains the list of 5G VN Group members, each member is identified by
  /// GPSI. Any string value can be used as a key of the map.
  /// </summary>
  std::map<std::string, std::string> &getGpsis();
  void setGpsis(std::map<std::string, std::string> const &value);
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getAaaIpv4Addr() const;
  void setAaaIpv4Addr(std::string const &value);
  bool aaaIpv4AddrIsSet() const;
  void unsetAaaIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getAaaIpv6Addr() const;
  void setAaaIpv6Addr(Ipv6Addr const &value);
  bool aaaIpv6AddrIsSet() const;
  void unsetAaaIpv6Addr();
  /// <summary>
  ///
  /// </summary>
  std::vector<AaaUsage> &getAaaUsgs();
  void setAaaUsgs(std::vector<AaaUsage> const &value);
  bool aaaUsgsIsSet() const;
  void unsetAaaUsgs();
  /// <summary>
  /// String uniquely identifying MTC provider information.
  /// </summary>
  std::string getMtcProviderId() const;
  void setMtcProviderId(std::string const &value);
  bool mtcProviderIdIsSet() const;
  void unsetMtcProviderId();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  /// <summary>
  ///
  /// </summary>
  PduSessionType getSessionType() const;
  void setSessionType(PduSessionType const &value);
  /// <summary>
  /// Describes the operation systems and the corresponding applications for
  /// each operation systems. The key of map is osId.
  /// </summary>
  std::map<std::string, AppDescriptor> &getAppDesps();
  void setAppDesps(std::map<std::string, AppDescriptor> const &value);

  friend void to_json(nlohmann::json & j, const 5GLanParameters & o);
  friend void from_json(const nlohmann::json &j, 5GLanParameters & o);

protected:
  std::string m_ExterGroupId;

  std::map<std::string, std::string> m_Gpsis;

  std::string m_Dnn;

  std::string m_AaaIpv4Addr;
  bool m_AaaIpv4AddrIsSet;
  Ipv6Addr m_AaaIpv6Addr;
  bool m_AaaIpv6AddrIsSet;
  std::vector<AaaUsage> m_AaaUsgs;
  bool m_AaaUsgsIsSet;
  std::string m_MtcProviderId;
  bool m_MtcProviderIdIsSet;
  Snssai m_Snssai;

  PduSessionType m_SessionType;

  std::map<std::string, AppDescriptor> m_AppDesps;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* 5GLanParameters_H_ */
