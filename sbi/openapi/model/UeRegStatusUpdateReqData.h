/**
 * Namf_Communication
 * AMF Communication Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UeRegStatusUpdateReqData.h
 *
 * Data within a UE registration status update request to indicate a completion
 * of transferring at a target AMF
 */

#ifndef UeRegStatusUpdateReqData_H_
#define UeRegStatusUpdateReqData_H_

#include "SmfChangeInfo.h"
#include "UeContextTransferStatus.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within a UE registration status update request to indicate a completion
/// of transferring at a target AMF
/// </summary>
class UeRegStatusUpdateReqData {
public:
  UeRegStatusUpdateReqData();
  virtual ~UeRegStatusUpdateReqData();

  void validate();

  /////////////////////////////////////////////
  /// UeRegStatusUpdateReqData members

  /// <summary>
  ///
  /// </summary>
  UeContextTransferStatus getTransferStatus() const;
  void setTransferStatus(UeContextTransferStatus const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t> &getToReleaseSessionList();
  void setToReleaseSessionList(std::vector<int32_t> const value);
  bool toReleaseSessionListIsSet() const;
  void unsetToReleaseSessionList();
  /// <summary>
  ///
  /// </summary>
  bool isPcfReselectedInd() const;
  void setPcfReselectedInd(bool const value);
  bool pcfReselectedIndIsSet() const;
  void unsetPcfReselectedInd();
  /// <summary>
  ///
  /// </summary>
  std::vector<SmfChangeInfo> &getSmfChangeInfoList();
  void setSmfChangeInfoList(std::vector<SmfChangeInfo> const &value);
  bool smfChangeInfoListIsSet() const;
  void unsetSmfChangeInfoList();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getAnalyticsNotUsedList();
  void setAnalyticsNotUsedList(std::vector<std::string> const &value);
  bool analyticsNotUsedListIsSet() const;
  void unsetAnalyticsNotUsedList();

  friend void to_json(nlohmann::json &j, const UeRegStatusUpdateReqData &o);
  friend void from_json(const nlohmann::json &j, UeRegStatusUpdateReqData &o);

protected:
  UeContextTransferStatus m_TransferStatus;

  std::vector<int32_t> m_ToReleaseSessionList;
  bool m_ToReleaseSessionListIsSet;
  bool m_PcfReselectedInd;
  bool m_PcfReselectedIndIsSet;
  std::vector<SmfChangeInfo> m_SmfChangeInfoList;
  bool m_SmfChangeInfoListIsSet;
  std::vector<std::string> m_AnalyticsNotUsedList;
  bool m_AnalyticsNotUsedListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UeRegStatusUpdateReqData_H_ */
