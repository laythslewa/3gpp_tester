/**
 * Nbsf_Management
 * Binding Support Management Service API. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PCFBindingsCollectionApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

PCFBindingsCollectionApi::PCFBindingsCollectionApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void PCFBindingsCollectionApi::init() { setupRoutes(); }

void PCFBindingsCollectionApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Post(
      *router, base + "/pcfBindings",
      Routes::bind(&PCFBindingsCollectionApi::create_pcf_binding_handler,
                   this));
  Routes::Get(
      *router, base + "/pcfBindings",
      Routes::bind(&PCFBindingsCollectionApi::get_pcf_bindings_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &PCFBindingsCollectionApi::pcf_bindings_collection_api_default_handler,
      this));
}

void PCFBindingsCollectionApi::create_pcf_binding_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {

  // Getting the body param

  PcfBinding pcfBinding;

  try {
    nlohmann::json::parse(request.body()).get_to(pcfBinding);
    this->create_pcf_binding(pcfBinding, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void PCFBindingsCollectionApi::get_pcf_bindings_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {

  // Getting the query params
  auto ipv4AddrQuery = request.query().get("ipv4Addr");
  Pistache::Optional<std::string> ipv4Addr;
  if (!ipv4AddrQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(ipv4AddrQuery.get(), valueQuery_instance)) {
      ipv4Addr = Pistache::Some(valueQuery_instance);
    }
  }
  auto ipv6PrefixQuery = request.query().get("ipv6Prefix");
  Pistache::Optional<Ipv6Prefix> ipv6Prefix;
  if (!ipv6PrefixQuery.isEmpty()) {
    Ipv6Prefix valueQuery_instance;
    if (fromStringValue(ipv6PrefixQuery.get(), valueQuery_instance)) {
      ipv6Prefix = Pistache::Some(valueQuery_instance);
    }
  }
  auto macAddr48Query = request.query().get("macAddr48");
  Pistache::Optional<std::string> macAddr48;
  if (!macAddr48Query.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(macAddr48Query.get(), valueQuery_instance)) {
      macAddr48 = Pistache::Some(valueQuery_instance);
    }
  }
  auto dnnQuery = request.query().get("dnn");
  Pistache::Optional<std::string> dnn;
  if (!dnnQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(dnnQuery.get(), valueQuery_instance)) {
      dnn = Pistache::Some(valueQuery_instance);
    }
  }
  auto supiQuery = request.query().get("supi");
  Pistache::Optional<std::string> supi;
  if (!supiQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(supiQuery.get(), valueQuery_instance)) {
      supi = Pistache::Some(valueQuery_instance);
    }
  }
  auto gpsiQuery = request.query().get("gpsi");
  Pistache::Optional<std::string> gpsi;
  if (!gpsiQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(gpsiQuery.get(), valueQuery_instance)) {
      gpsi = Pistache::Some(valueQuery_instance);
    }
  }
  auto snssaiQuery = request.query().get("snssai");
  Pistache::Optional<Snssai> snssai;
  if (!snssaiQuery.isEmpty()) {
    Snssai valueQuery_instance;
    if (fromStringValue(snssaiQuery.get(), valueQuery_instance)) {
      snssai = Pistache::Some(valueQuery_instance);
    }
  }
  auto ipDomainQuery = request.query().get("ipDomain");
  Pistache::Optional<std::string> ipDomain;
  if (!ipDomainQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(ipDomainQuery.get(), valueQuery_instance)) {
      ipDomain = Pistache::Some(valueQuery_instance);
    }
  }
  auto suppFeatQuery = request.query().get("supp-feat");
  Pistache::Optional<std::string> suppFeat;
  if (!suppFeatQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(suppFeatQuery.get(), valueQuery_instance)) {
      suppFeat = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->get_pcf_bindings(ipv4Addr, ipv6Prefix, macAddr48, dnn, supi, gpsi,
                           snssai, ipDomain, suppFeat, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void PCFBindingsCollectionApi::pcf_bindings_collection_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
