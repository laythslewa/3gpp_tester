/**
 * Nudr_GroupIDmap
 * Unified Data Repository Service for NF-Group ID retrieval. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NFGroupIDsDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

NFGroupIDsDocumentApi::NFGroupIDsDocumentApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void NFGroupIDsDocumentApi::init() { setupRoutes(); }

void NFGroupIDsDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Get(
      *router, base + "/nf-group-ids",
      Routes::bind(&NFGroupIDsDocumentApi::get_nf_group_i_ds_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &NFGroupIDsDocumentApi::nf_group_i_ds_document_api_default_handler,
      this));
}

void NFGroupIDsDocumentApi::get_nf_group_i_ds_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {

  // Getting the query params
  auto nfTypeQuery = request.query().get("nf-type");
  Pistache::Optional<std::vector<NFType>> nfType;
  if (!nfTypeQuery.isEmpty()) {
    std::vector<NFType> valueQuery_instance;
    if (fromStringValue(nfTypeQuery.get(), valueQuery_instance)) {
      nfType = Pistache::Some(valueQuery_instance);
    }
  }
  auto subscriberIdQuery = request.query().get("subscriberId");
  Pistache::Optional<std::string> subscriberId;
  if (!subscriberIdQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(subscriberIdQuery.get(), valueQuery_instance)) {
      subscriberId = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->get_nf_group_i_ds(nfType, subscriberId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void NFGroupIDsDocumentApi::nf_group_i_ds_document_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
