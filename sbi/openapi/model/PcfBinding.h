/**
 * Nbsf_Management
 * Binding Support Management Service API. © 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PcfBinding.h
 *
 * Identifies an Individual PCF binding.
 */

#ifndef PcfBinding_H_
#define PcfBinding_H_

#include "BindingLevel.h"
#include "IpEndPoint.h"
#include "Ipv6Prefix.h"
#include "ParameterCombination.h"
#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Identifies an Individual PCF binding.
/// </summary>
class PcfBinding {
public:
  PcfBinding();
  virtual ~PcfBinding();

  void validate();

  /////////////////////////////////////////////
  /// PcfBinding members

  /// <summary>
  /// String identifying a Supi that shall contain either an IMSI, a network
  /// specific identifier, a Global Cable Identifier (GCI) or a Global Line
  /// Identifier (GLI) as specified in clause 2.2A of 3GPP TS 23.003. It shall
  /// be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;,
  /// where &lt;imsi&gt; shall be formatted according to clause 2.2 of 3GPP
  /// TS 23.003 that describes an IMSI.  - for a network specific identifier
  /// \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted according to
  /// clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI
  /// \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted
  /// according to clause 28.15.2 of 3GPP TS 23.003.  - for a GLI
  /// \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted
  /// according to clause 28.16.2 of 3GPP TS 23.003.To enable that the value is
  /// used as part of an URI, the string shall only contain characters allowed
  /// according to the \&quot;lower-with-hyphen\&quot; naming convention defined
  /// in 3GPP TS 29.501.
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getIpv4Addr() const;
  void setIpv4Addr(std::string const &value);
  bool ipv4AddrIsSet() const;
  void unsetIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Prefix getIpv6Prefix() const;
  void setIpv6Prefix(Ipv6Prefix const &value);
  bool ipv6PrefixIsSet() const;
  void unsetIpv6Prefix();
  /// <summary>
  /// The additional IPv6 Address Prefixes of the served UE.
  /// </summary>
  std::vector<Ipv6Prefix> &getAddIpv6Prefixes();
  void setAddIpv6Prefixes(std::vector<Ipv6Prefix> const &value);
  bool addIpv6PrefixesIsSet() const;
  void unsetAddIpv6Prefixes();
  /// <summary>
  ///
  /// </summary>
  std::string getIpDomain() const;
  void setIpDomain(std::string const &value);
  bool ipDomainIsSet() const;
  void unsetIpDomain();
  /// <summary>
  /// String identifying a MAC address formatted in the hexadecimal notation
  /// according to clause 1.1 and clause 2.1 of RFC 7042
  /// </summary>
  std::string getMacAddr48() const;
  void setMacAddr48(std::string const &value);
  bool macAddr48IsSet() const;
  void unsetMacAddr48();
  /// <summary>
  /// The additional MAC Addresses of the served UE.
  /// </summary>
  std::vector<std::string> &getAddMacAddrs();
  void setAddMacAddrs(std::vector<std::string> const &value);
  bool addMacAddrsIsSet() const;
  void unsetAddMacAddrs();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  /// <summary>
  /// Fully Qualified Domain Name
  /// </summary>
  std::string getPcfFqdn() const;
  void setPcfFqdn(std::string const &value);
  bool pcfFqdnIsSet() const;
  void unsetPcfFqdn();
  /// <summary>
  /// IP end points of the PCF hosting the Npcf_PolicyAuthorization service.
  /// </summary>
  std::vector<IpEndPoint> &getPcfIpEndPoints();
  void setPcfIpEndPoints(std::vector<IpEndPoint> const &value);
  bool pcfIpEndPointsIsSet() const;
  void unsetPcfIpEndPoints();
  /// <summary>
  /// string containing an FQDN or realm as defined in RFC 6733.
  /// </summary>
  std::string getPcfDiamHost() const;
  void setPcfDiamHost(std::string const &value);
  bool pcfDiamHostIsSet() const;
  void unsetPcfDiamHost();
  /// <summary>
  /// string containing an FQDN or realm as defined in RFC 6733.
  /// </summary>
  std::string getPcfDiamRealm() const;
  void setPcfDiamRealm(std::string const &value);
  bool pcfDiamRealmIsSet() const;
  void unsetPcfDiamRealm();
  /// <summary>
  /// Fully Qualified Domain Name
  /// </summary>
  std::string getPcfSmFqdn() const;
  void setPcfSmFqdn(std::string const &value);
  bool pcfSmFqdnIsSet() const;
  void unsetPcfSmFqdn();
  /// <summary>
  /// IP end points of the PCF hosting the Npcf_SMPolicyControl service.
  /// </summary>
  std::vector<IpEndPoint> &getPcfSmIpEndPoints();
  void setPcfSmIpEndPoints(std::vector<IpEndPoint> const &value);
  bool pcfSmIpEndPointsIsSet() const;
  void unsetPcfSmIpEndPoints();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getPcfId() const;
  void setPcfId(std::string const &value);
  bool pcfIdIsSet() const;
  void unsetPcfId();
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getPcfSetId() const;
  void setPcfSetId(std::string const &value);
  bool pcfSetIdIsSet() const;
  void unsetPcfSetId();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getRecoveryTime() const;
  void setRecoveryTime(std::string const &value);
  bool recoveryTimeIsSet() const;
  void unsetRecoveryTime();
  /// <summary>
  ///
  /// </summary>
  ParameterCombination getParaCom() const;
  void setParaCom(ParameterCombination const &value);
  bool paraComIsSet() const;
  void unsetParaCom();
  /// <summary>
  ///
  /// </summary>
  BindingLevel getBindLevel() const;
  void setBindLevel(BindingLevel const &value);
  bool bindLevelIsSet() const;
  void unsetBindLevel();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getIpv4FrameRouteList();
  void setIpv4FrameRouteList(std::vector<std::string> const &value);
  bool ipv4FrameRouteListIsSet() const;
  void unsetIpv4FrameRouteList();
  /// <summary>
  ///
  /// </summary>
  std::vector<Ipv6Prefix> &getIpv6FrameRouteList();
  void setIpv6FrameRouteList(std::vector<Ipv6Prefix> const &value);
  bool ipv6FrameRouteListIsSet() const;
  void unsetIpv6FrameRouteList();

  friend void to_json(nlohmann::json &j, const PcfBinding &o);
  friend void from_json(const nlohmann::json &j, PcfBinding &o);

protected:
  std::string m_Supi;
  bool m_SupiIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_Ipv4Addr;
  bool m_Ipv4AddrIsSet;
  Ipv6Prefix m_Ipv6Prefix;
  bool m_Ipv6PrefixIsSet;
  std::vector<Ipv6Prefix> m_AddIpv6Prefixes;
  bool m_AddIpv6PrefixesIsSet;
  std::string m_IpDomain;
  bool m_IpDomainIsSet;
  std::string m_MacAddr48;
  bool m_MacAddr48IsSet;
  std::vector<std::string> m_AddMacAddrs;
  bool m_AddMacAddrsIsSet;
  std::string m_Dnn;

  std::string m_PcfFqdn;
  bool m_PcfFqdnIsSet;
  std::vector<IpEndPoint> m_PcfIpEndPoints;
  bool m_PcfIpEndPointsIsSet;
  std::string m_PcfDiamHost;
  bool m_PcfDiamHostIsSet;
  std::string m_PcfDiamRealm;
  bool m_PcfDiamRealmIsSet;
  std::string m_PcfSmFqdn;
  bool m_PcfSmFqdnIsSet;
  std::vector<IpEndPoint> m_PcfSmIpEndPoints;
  bool m_PcfSmIpEndPointsIsSet;
  Snssai m_Snssai;

  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
  std::string m_PcfId;
  bool m_PcfIdIsSet;
  std::string m_PcfSetId;
  bool m_PcfSetIdIsSet;
  std::string m_RecoveryTime;
  bool m_RecoveryTimeIsSet;
  ParameterCombination m_ParaCom;
  bool m_ParaComIsSet;
  BindingLevel m_BindLevel;
  bool m_BindLevelIsSet;
  std::vector<std::string> m_Ipv4FrameRouteList;
  bool m_Ipv4FrameRouteListIsSet;
  std::vector<Ipv6Prefix> m_Ipv6FrameRouteList;
  bool m_Ipv6FrameRouteListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PcfBinding_H_ */
