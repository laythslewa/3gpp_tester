/**
 * 3gpp-nidd
 * API for non IP data delivery. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NiddConfigurationStatusNotification.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NiddConfigurationStatusNotification::NiddConfigurationStatusNotification() {
  m_NiddConfiguration = "";
  m_ExternalId = "";
  m_ExternalIdIsSet = false;
  m_Msisdn = "";
  m_MsisdnIsSet = false;
  m_RdsCapIndication = false;
  m_RdsCapIndicationIsSet = false;
  m_RdsPortIsSet = false;
}

NiddConfigurationStatusNotification::~NiddConfigurationStatusNotification() {}

void NiddConfigurationStatusNotification::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NiddConfigurationStatusNotification &o) {
  j = nlohmann::json();
  j["niddConfiguration"] = o.m_NiddConfiguration;
  if (o.externalIdIsSet())
    j["externalId"] = o.m_ExternalId;
  if (o.msisdnIsSet())
    j["msisdn"] = o.m_Msisdn;
  j["status"] = o.m_Status;
  if (o.rdsCapIndicationIsSet())
    j["rdsCapIndication"] = o.m_RdsCapIndication;
  if (o.rdsPortIsSet())
    j["rdsPort"] = o.m_RdsPort;
}

void from_json(const nlohmann::json &j,
               NiddConfigurationStatusNotification &o) {
  j.at("niddConfiguration").get_to(o.m_NiddConfiguration);
  if (j.find("externalId") != j.end()) {
    j.at("externalId").get_to(o.m_ExternalId);
    o.m_ExternalIdIsSet = true;
  }
  if (j.find("msisdn") != j.end()) {
    j.at("msisdn").get_to(o.m_Msisdn);
    o.m_MsisdnIsSet = true;
  }
  j.at("status").get_to(o.m_Status);
  if (j.find("rdsCapIndication") != j.end()) {
    j.at("rdsCapIndication").get_to(o.m_RdsCapIndication);
    o.m_RdsCapIndicationIsSet = true;
  }
  if (j.find("rdsPort") != j.end()) {
    j.at("rdsPort").get_to(o.m_RdsPort);
    o.m_RdsPortIsSet = true;
  }
}

std::string NiddConfigurationStatusNotification::getNiddConfiguration() const {
  return m_NiddConfiguration;
}
void NiddConfigurationStatusNotification::setNiddConfiguration(
    std::string const &value) {
  m_NiddConfiguration = value;
}
std::string NiddConfigurationStatusNotification::getExternalId() const {
  return m_ExternalId;
}
void NiddConfigurationStatusNotification::setExternalId(
    std::string const &value) {
  m_ExternalId = value;
  m_ExternalIdIsSet = true;
}
bool NiddConfigurationStatusNotification::externalIdIsSet() const {
  return m_ExternalIdIsSet;
}
void NiddConfigurationStatusNotification::unsetExternalId() {
  m_ExternalIdIsSet = false;
}
std::string NiddConfigurationStatusNotification::getMsisdn() const {
  return m_Msisdn;
}
void NiddConfigurationStatusNotification::setMsisdn(std::string const &value) {
  m_Msisdn = value;
  m_MsisdnIsSet = true;
}
bool NiddConfigurationStatusNotification::msisdnIsSet() const {
  return m_MsisdnIsSet;
}
void NiddConfigurationStatusNotification::unsetMsisdn() {
  m_MsisdnIsSet = false;
}
NiddStatus NiddConfigurationStatusNotification::getStatus() const {
  return m_Status;
}
void NiddConfigurationStatusNotification::setStatus(NiddStatus const &value) {
  m_Status = value;
}
bool NiddConfigurationStatusNotification::isRdsCapIndication() const {
  return m_RdsCapIndication;
}
void NiddConfigurationStatusNotification::setRdsCapIndication(
    bool const value) {
  m_RdsCapIndication = value;
  m_RdsCapIndicationIsSet = true;
}
bool NiddConfigurationStatusNotification::rdsCapIndicationIsSet() const {
  return m_RdsCapIndicationIsSet;
}
void NiddConfigurationStatusNotification::unsetRdsCapIndication() {
  m_RdsCapIndicationIsSet = false;
}
RdsPort NiddConfigurationStatusNotification::getRdsPort() const {
  return m_RdsPort;
}
void NiddConfigurationStatusNotification::setRdsPort(RdsPort const &value) {
  m_RdsPort = value;
  m_RdsPortIsSet = true;
}
bool NiddConfigurationStatusNotification::rdsPortIsSet() const {
  return m_RdsPortIsSet;
}
void NiddConfigurationStatusNotification::unsetRdsPort() {
  m_RdsPortIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
