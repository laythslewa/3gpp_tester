/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AddressList.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AddressList::AddressList() {
  m_Ipv4AddrsIsSet = false;
  m_Ipv6AddrsIsSet = false;
}

AddressList::~AddressList() {}

void AddressList::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AddressList &o) {
  j = nlohmann::json();
  if (o.ipv4AddrsIsSet() || !o.m_Ipv4Addrs.empty())
    j["ipv4Addrs"] = o.m_Ipv4Addrs;
  if (o.ipv6AddrsIsSet() || !o.m_Ipv6Addrs.empty())
    j["ipv6Addrs"] = o.m_Ipv6Addrs;
}

void from_json(const nlohmann::json &j, AddressList &o) {
  if (j.find("ipv4Addrs") != j.end()) {
    j.at("ipv4Addrs").get_to(o.m_Ipv4Addrs);
    o.m_Ipv4AddrsIsSet = true;
  }
  if (j.find("ipv6Addrs") != j.end()) {
    j.at("ipv6Addrs").get_to(o.m_Ipv6Addrs);
    o.m_Ipv6AddrsIsSet = true;
  }
}

std::vector<std::string> &AddressList::getIpv4Addrs() { return m_Ipv4Addrs; }
void AddressList::setIpv4Addrs(std::vector<std::string> const &value) {
  m_Ipv4Addrs = value;
  m_Ipv4AddrsIsSet = true;
}
bool AddressList::ipv4AddrsIsSet() const { return m_Ipv4AddrsIsSet; }
void AddressList::unsetIpv4Addrs() { m_Ipv4AddrsIsSet = false; }
std::vector<Ipv6Addr> &AddressList::getIpv6Addrs() { return m_Ipv6Addrs; }
void AddressList::setIpv6Addrs(std::vector<Ipv6Addr> const &value) {
  m_Ipv6Addrs = value;
  m_Ipv6AddrsIsSet = true;
}
bool AddressList::ipv6AddrsIsSet() const { return m_Ipv6AddrsIsSet; }
void AddressList::unsetIpv6Addrs() { m_Ipv6AddrsIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
