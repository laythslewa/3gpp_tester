/**
 * Namf_Communication
 * AMF Communication Service © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RegistrationContextContainer.h
 *
 * Registration Context Container used to send the UE context information, N1
 * message from UE, AN address etc during Registration with AMF re-allocation
 * procedure
 */

#ifndef RegistrationContextContainer_H_
#define RegistrationContextContainer_H_

#include "AccessType.h"
#include "AllowedNssai.h"
#include "CeModeBInd.h"
#include "ConfiguredSnssai.h"
#include "GlobalRanNodeId.h"
#include "Ipv6Addr.h"
#include "LteMInd.h"
#include "NpnAccessInfo.h"
#include "PlmnId.h"
#include "Snssai.h"
#include "UeContext.h"
#include "UserLocation.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Registration Context Container used to send the UE context information, N1
/// message from UE, AN address etc during Registration with AMF re-allocation
/// procedure
/// </summary>
class RegistrationContextContainer {
public:
  RegistrationContextContainer();
  virtual ~RegistrationContextContainer();

  void validate();

  /////////////////////////////////////////////
  /// RegistrationContextContainer members

  /// <summary>
  ///
  /// </summary>
  UeContext getUeContext() const;
  void setUeContext(UeContext const &value);
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getLocalTimeZone() const;
  void setLocalTimeZone(std::string const &value);
  bool localTimeZoneIsSet() const;
  void unsetLocalTimeZone();
  /// <summary>
  ///
  /// </summary>
  AccessType getAnType() const;
  void setAnType(AccessType const &value);
  /// <summary>
  ///
  /// </summary>
  int32_t getAnN2ApId() const;
  void setAnN2ApId(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  GlobalRanNodeId getRanNodeId() const;
  void setRanNodeId(GlobalRanNodeId const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getInitialAmfName() const;
  void setInitialAmfName(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  UserLocation getUserLocation() const;
  void setUserLocation(UserLocation const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getRrcEstCause() const;
  void setRrcEstCause(std::string const &value);
  bool rrcEstCauseIsSet() const;
  void unsetRrcEstCause();
  /// <summary>
  ///
  /// </summary>
  bool isUeContextRequest() const;
  void setUeContextRequest(bool const value);
  bool ueContextRequestIsSet() const;
  void unsetUeContextRequest();
  /// <summary>
  ///
  /// </summary>
  int32_t getInitialAmfN2ApId() const;
  void setInitialAmfN2ApId(int32_t const value);
  bool initialAmfN2ApIdIsSet() const;
  void unsetInitialAmfN2ApId();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getAnN2IPv4Addr() const;
  void setAnN2IPv4Addr(std::string const &value);
  bool anN2IPv4AddrIsSet() const;
  void unsetAnN2IPv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getAnN2IPv6Addr() const;
  void setAnN2IPv6Addr(Ipv6Addr const &value);
  bool anN2IPv6AddrIsSet() const;
  void unsetAnN2IPv6Addr();
  /// <summary>
  ///
  /// </summary>
  AllowedNssai getAllowedNssai() const;
  void setAllowedNssai(AllowedNssai const &value);
  bool allowedNssaiIsSet() const;
  void unsetAllowedNssai();
  /// <summary>
  ///
  /// </summary>
  std::vector<ConfiguredSnssai> &getConfiguredNssai();
  void setConfiguredNssai(std::vector<ConfiguredSnssai> const &value);
  bool configuredNssaiIsSet() const;
  void unsetConfiguredNssai();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getRejectedNssaiInPlmn();
  void setRejectedNssaiInPlmn(std::vector<Snssai> const &value);
  bool rejectedNssaiInPlmnIsSet() const;
  void unsetRejectedNssaiInPlmn();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getRejectedNssaiInTa();
  void setRejectedNssaiInTa(std::vector<Snssai> const &value);
  bool rejectedNssaiInTaIsSet() const;
  void unsetRejectedNssaiInTa();
  /// <summary>
  ///
  /// </summary>
  PlmnId getSelectedPlmnId() const;
  void setSelectedPlmnId(PlmnId const &value);
  bool selectedPlmnIdIsSet() const;
  void unsetSelectedPlmnId();
  /// <summary>
  ///
  /// </summary>
  bool isIabNodeInd() const;
  void setIabNodeInd(bool const value);
  bool iabNodeIndIsSet() const;
  void unsetIabNodeInd();
  /// <summary>
  ///
  /// </summary>
  CeModeBInd getCeModeBInd() const;
  void setCeModeBInd(CeModeBInd const &value);
  bool ceModeBIndIsSet() const;
  void unsetCeModeBInd();
  /// <summary>
  ///
  /// </summary>
  LteMInd getLteMInd() const;
  void setLteMInd(LteMInd const &value);
  bool lteMIndIsSet() const;
  void unsetLteMInd();
  /// <summary>
  ///
  /// </summary>
  bool isAuthenticatedInd() const;
  void setAuthenticatedInd(bool const value);
  bool authenticatedIndIsSet() const;
  void unsetAuthenticatedInd();
  /// <summary>
  ///
  /// </summary>
  NpnAccessInfo getNpnAccessInfo() const;
  void setNpnAccessInfo(NpnAccessInfo const &value);
  bool npnAccessInfoIsSet() const;
  void unsetNpnAccessInfo();

  friend void to_json(nlohmann::json &j, const RegistrationContextContainer &o);
  friend void from_json(const nlohmann::json &j,
                        RegistrationContextContainer &o);

protected:
  UeContext m_UeContext;

  std::string m_LocalTimeZone;
  bool m_LocalTimeZoneIsSet;
  AccessType m_AnType;

  int32_t m_AnN2ApId;

  GlobalRanNodeId m_RanNodeId;

  std::string m_InitialAmfName;

  UserLocation m_UserLocation;

  std::string m_RrcEstCause;
  bool m_RrcEstCauseIsSet;
  bool m_UeContextRequest;
  bool m_UeContextRequestIsSet;
  int32_t m_InitialAmfN2ApId;
  bool m_InitialAmfN2ApIdIsSet;
  std::string m_AnN2IPv4Addr;
  bool m_AnN2IPv4AddrIsSet;
  Ipv6Addr m_AnN2IPv6Addr;
  bool m_AnN2IPv6AddrIsSet;
  AllowedNssai m_AllowedNssai;
  bool m_AllowedNssaiIsSet;
  std::vector<ConfiguredSnssai> m_ConfiguredNssai;
  bool m_ConfiguredNssaiIsSet;
  std::vector<Snssai> m_RejectedNssaiInPlmn;
  bool m_RejectedNssaiInPlmnIsSet;
  std::vector<Snssai> m_RejectedNssaiInTa;
  bool m_RejectedNssaiInTaIsSet;
  PlmnId m_SelectedPlmnId;
  bool m_SelectedPlmnIdIsSet;
  bool m_IabNodeInd;
  bool m_IabNodeIndIsSet;
  CeModeBInd m_CeModeBInd;
  bool m_CeModeBIndIsSet;
  LteMInd m_LteMInd;
  bool m_LteMIndIsSet;
  bool m_AuthenticatedInd;
  bool m_AuthenticatedIndIsSet;
  NpnAccessInfo m_NpnAccessInfo;
  bool m_NpnAccessInfoIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* RegistrationContextContainer_H_ */
