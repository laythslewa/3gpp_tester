/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EventReportingRequirement.h
 *
 * Represents the type of reporting that the subscription requires.
 */

#ifndef EventReportingRequirement_H_
#define EventReportingRequirement_H_

#include "Accuracy.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the type of reporting that the subscription requires.
/// </summary>
class EventReportingRequirement {
public:
  EventReportingRequirement();
  virtual ~EventReportingRequirement();

  void validate();

  /////////////////////////////////////////////
  /// EventReportingRequirement members

  /// <summary>
  ///
  /// </summary>
  Accuracy getAccuracy() const;
  void setAccuracy(Accuracy const &value);
  bool accuracyIsSet() const;
  void unsetAccuracy();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getStartTs() const;
  void setStartTs(std::string const &value);
  bool startTsIsSet() const;
  void unsetStartTs();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getEndTs() const;
  void setEndTs(std::string const &value);
  bool endTsIsSet() const;
  void unsetEndTs();
  /// <summary>
  /// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP
  /// TS 23.502), expressed in percent.
  /// </summary>
  int32_t getSampRatio() const;
  void setSampRatio(int32_t const value);
  bool sampRatioIsSet() const;
  void unsetSampRatio();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getMaxObjectNbr() const;
  void setMaxObjectNbr(int32_t const value);
  bool maxObjectNbrIsSet() const;
  void unsetMaxObjectNbr();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getMaxSupiNbr() const;
  void setMaxSupiNbr(int32_t const value);
  bool maxSupiNbrIsSet() const;
  void unsetMaxSupiNbr();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getTimeAnaNeeded() const;
  void setTimeAnaNeeded(std::string const &value);
  bool timeAnaNeededIsSet() const;
  void unsetTimeAnaNeeded();

  friend void to_json(nlohmann::json &j, const EventReportingRequirement &o);
  friend void from_json(const nlohmann::json &j, EventReportingRequirement &o);

protected:
  Accuracy m_Accuracy;
  bool m_AccuracyIsSet;
  std::string m_StartTs;
  bool m_StartTsIsSet;
  std::string m_EndTs;
  bool m_EndTsIsSet;
  int32_t m_SampRatio;
  bool m_SampRatioIsSet;
  int32_t m_MaxObjectNbr;
  bool m_MaxObjectNbrIsSet;
  int32_t m_MaxSupiNbr;
  bool m_MaxSupiNbrIsSet;
  std::string m_TimeAnaNeeded;
  bool m_TimeAnaNeededIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* EventReportingRequirement_H_ */
