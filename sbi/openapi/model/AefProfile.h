/**
 * CAPIF_Routing_Info_API
 * API for Routing information. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AefProfile.h
 *
 * Represents the AEF profile data.
 */

#ifndef AefProfile_H_
#define AefProfile_H_

#include "DataFormat.h"
#include "InterfaceDescription.h"
#include "Protocol.h"
#include "SecurityMethod.h"
#include "Version.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the AEF profile data.
/// </summary>
class AefProfile {
public:
  AefProfile();
  virtual ~AefProfile();

  void validate();

  /////////////////////////////////////////////
  /// AefProfile members

  /// <summary>
  /// Identifier of the API exposing function
  /// </summary>
  std::string getAefId() const;
  void setAefId(std::string const &value);
  /// <summary>
  /// API version
  /// </summary>
  std::vector<Version> &getVersions();
  void setVersions(std::vector<Version> const &value);
  /// <summary>
  ///
  /// </summary>
  Protocol getProtocol() const;
  void setProtocol(Protocol const &value);
  bool protocolIsSet() const;
  void unsetProtocol();
  /// <summary>
  ///
  /// </summary>
  DataFormat getDataFormat() const;
  void setDataFormat(DataFormat const &value);
  bool dataFormatIsSet() const;
  void unsetDataFormat();
  /// <summary>
  /// Security methods supported by the AEF
  /// </summary>
  std::vector<SecurityMethod> &getSecurityMethods();
  void setSecurityMethods(std::vector<SecurityMethod> const &value);
  bool securityMethodsIsSet() const;
  void unsetSecurityMethods();
  /// <summary>
  /// Domain to which API belongs to
  /// </summary>
  std::string getDomainName() const;
  void setDomainName(std::string const &value);
  bool domainNameIsSet() const;
  void unsetDomainName();
  /// <summary>
  /// Interface details
  /// </summary>
  std::vector<InterfaceDescription> &getInterfaceDescriptions();
  void setInterfaceDescriptions(std::vector<InterfaceDescription> const &value);
  bool interfaceDescriptionsIsSet() const;
  void unsetInterfaceDescriptions();

  friend void to_json(nlohmann::json &j, const AefProfile &o);
  friend void from_json(const nlohmann::json &j, AefProfile &o);

protected:
  std::string m_AefId;

  std::vector<Version> m_Versions;

  Protocol m_Protocol;
  bool m_ProtocolIsSet;
  DataFormat m_DataFormat;
  bool m_DataFormatIsSet;
  std::vector<SecurityMethod> m_SecurityMethods;
  bool m_SecurityMethodsIsSet;
  std::string m_DomainName;
  bool m_DomainNameIsSet;
  std::vector<InterfaceDescription> m_InterfaceDescriptions;
  bool m_InterfaceDescriptionsIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AefProfile_H_ */
