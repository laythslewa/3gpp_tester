/**
 * 3gpp-bdt
 * API for BDT resouce management. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ExNotification.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ExNotification::ExNotification() {
  m_BdtRefId = "";
  m_LocationArea5GIsSet = false;
  m_TimeWindowIsSet = false;
  m_CandPoliciesIsSet = false;
}

ExNotification::~ExNotification() {}

void ExNotification::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ExNotification &o) {
  j = nlohmann::json();
  j["bdtRefId"] = o.m_BdtRefId;
  if (o.locationArea5GIsSet())
    j["locationArea5G"] = o.m_LocationArea5G;
  if (o.timeWindowIsSet())
    j["timeWindow"] = o.m_TimeWindow;
  if (o.candPoliciesIsSet() || !o.m_CandPolicies.empty())
    j["candPolicies"] = o.m_CandPolicies;
}

void from_json(const nlohmann::json &j, ExNotification &o) {
  j.at("bdtRefId").get_to(o.m_BdtRefId);
  if (j.find("locationArea5G") != j.end()) {
    j.at("locationArea5G").get_to(o.m_LocationArea5G);
    o.m_LocationArea5GIsSet = true;
  }
  if (j.find("timeWindow") != j.end()) {
    j.at("timeWindow").get_to(o.m_TimeWindow);
    o.m_TimeWindowIsSet = true;
  }
  if (j.find("candPolicies") != j.end()) {
    j.at("candPolicies").get_to(o.m_CandPolicies);
    o.m_CandPoliciesIsSet = true;
  }
}

std::string ExNotification::getBdtRefId() const { return m_BdtRefId; }
void ExNotification::setBdtRefId(std::string const &value) {
  m_BdtRefId = value;
}
LocationArea5G ExNotification::getLocationArea5G() const {
  return m_LocationArea5G;
}
void ExNotification::setLocationArea5G(LocationArea5G const &value) {
  m_LocationArea5G = value;
  m_LocationArea5GIsSet = true;
}
bool ExNotification::locationArea5GIsSet() const {
  return m_LocationArea5GIsSet;
}
void ExNotification::unsetLocationArea5G() { m_LocationArea5GIsSet = false; }
TimeWindow ExNotification::getTimeWindow() const { return m_TimeWindow; }
void ExNotification::setTimeWindow(TimeWindow const &value) {
  m_TimeWindow = value;
  m_TimeWindowIsSet = true;
}
bool ExNotification::timeWindowIsSet() const { return m_TimeWindowIsSet; }
void ExNotification::unsetTimeWindow() { m_TimeWindowIsSet = false; }
std::vector<TransferPolicy> &ExNotification::getCandPolicies() {
  return m_CandPolicies;
}
void ExNotification::setCandPolicies(std::vector<TransferPolicy> const &value) {
  m_CandPolicies = value;
  m_CandPoliciesIsSet = true;
}
bool ExNotification::candPoliciesIsSet() const { return m_CandPoliciesIsSet; }
void ExNotification::unsetCandPolicies() { m_CandPoliciesIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
