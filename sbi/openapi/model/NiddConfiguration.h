/**
 * 3gpp-nidd
 * API for non IP data delivery. © 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NiddConfiguration.h
 *
 * Represents the configuration for NIDD.
 */

#ifndef NiddConfiguration_H_
#define NiddConfiguration_H_

#include "NiddDownlinkDataTransfer.h"
#include "NiddStatus.h"
#include "PdnEstablishmentOptions.h"
#include "RdsPort.h"
#include "WebsockNotifConfig.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the configuration for NIDD.
/// </summary>
class NiddConfiguration {
public:
  NiddConfiguration();
  virtual ~NiddConfiguration();

  void validate();

  /////////////////////////////////////////////
  /// NiddConfiguration members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const &value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  /// Identifies the MTC Service Provider and/or MTC Application.
  /// </summary>
  std::string getMtcProviderId() const;
  void setMtcProviderId(std::string const &value);
  bool mtcProviderIdIsSet() const;
  void unsetMtcProviderId();
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clause 4.6.2 of 3GPP TS 23.682 for more information.
  /// </summary>
  std::string getExternalId() const;
  void setExternalId(std::string const &value);
  bool externalIdIsSet() const;
  void unsetExternalId();
  /// <summary>
  /// string formatted according to subclause 3.3 of 3GPP TS 23.003 that
  /// describes an MSISDN.
  /// </summary>
  std::string getMsisdn() const;
  void setMsisdn(std::string const &value);
  bool msisdnIsSet() const;
  void unsetMsisdn();
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more
  /// information.
  /// </summary>
  std::string getExternalGroupId() const;
  void setExternalGroupId(std::string const &value);
  bool externalGroupIdIsSet() const;
  void unsetExternalGroupId();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getDuration() const;
  void setDuration(std::string const &value);
  bool durationIsSet() const;
  void unsetDuration();
  /// <summary>
  /// The reliable data service (as defined in subclause 4.5.15.3 of 3GPP
  /// TS 23.682) to indicate if a reliable data service acknowledgment is
  /// enabled or not.
  /// </summary>
  bool isReliableDataService() const;
  void setReliableDataService(bool const value);
  bool reliableDataServiceIsSet() const;
  void unsetReliableDataService();
  /// <summary>
  /// Indicates the static port configuration that is used for reliable data
  /// transfer between specific applications using RDS (as defined in
  /// subclause 5.2.4 and 5.2.5 of 3GPP TS 24.250).
  /// </summary>
  std::vector<RdsPort> &getRdsPorts();
  void setRdsPorts(std::vector<RdsPort> const &value);
  bool rdsPortsIsSet() const;
  void unsetRdsPorts();
  /// <summary>
  ///
  /// </summary>
  PdnEstablishmentOptions getPdnEstablishmentOption() const;
  void setPdnEstablishmentOption(PdnEstablishmentOptions const &value);
  bool pdnEstablishmentOptionIsSet() const;
  void unsetPdnEstablishmentOption();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getNotificationDestination() const;
  void setNotificationDestination(std::string const &value);
  /// <summary>
  /// Set to true by the SCS/AS to request the SCEF to send a test notification
  /// as defined in subclause 5.2.5.3. Set to false or omitted otherwise.
  /// </summary>
  bool isRequestTestNotification() const;
  void setRequestTestNotification(bool const value);
  bool requestTestNotificationIsSet() const;
  void unsetRequestTestNotification();
  /// <summary>
  ///
  /// </summary>
  WebsockNotifConfig getWebsockNotifConfig() const;
  void setWebsockNotifConfig(WebsockNotifConfig const &value);
  bool websockNotifConfigIsSet() const;
  void unsetWebsockNotifConfig();
  /// <summary>
  /// The Maximum Packet Size is the maximum NIDD packet size that was
  /// transferred to the UE by the SCEF in the PCO, see subclause 4.5.14.1 of
  /// 3GPP TS 23.682. If no maximum packet size was provided to the UE by the
  /// SCEF, the SCEF sends a default configured max packet size to SCS/AS. Unit
  /// bit.
  /// </summary>
  int32_t getMaximumPacketSize() const;
  void setMaximumPacketSize(int32_t const value);
  bool maximumPacketSizeIsSet() const;
  void unsetMaximumPacketSize();
  /// <summary>
  /// The downlink data deliveries that needed to be executed by the SCEF. The
  /// cardinality of the property shall be 0..1 in the request and 0..N in the
  /// response (i.e. response may contain multiple buffered MT NIDD).
  /// </summary>
  std::vector<NiddDownlinkDataTransfer> &getNiddDownlinkDataTransfers();
  void setNiddDownlinkDataTransfers(
      std::vector<NiddDownlinkDataTransfer> const &value);
  bool niddDownlinkDataTransfersIsSet() const;
  void unsetNiddDownlinkDataTransfers();
  /// <summary>
  ///
  /// </summary>
  NiddStatus getStatus() const;
  void setStatus(NiddStatus const &value);
  bool statusIsSet() const;
  void unsetStatus();

  friend void to_json(nlohmann::json &j, const NiddConfiguration &o);
  friend void from_json(const nlohmann::json &j, NiddConfiguration &o);

protected:
  std::string m_Self;
  bool m_SelfIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::string m_MtcProviderId;
  bool m_MtcProviderIdIsSet;
  std::string m_ExternalId;
  bool m_ExternalIdIsSet;
  std::string m_Msisdn;
  bool m_MsisdnIsSet;
  std::string m_ExternalGroupId;
  bool m_ExternalGroupIdIsSet;
  std::string m_Duration;
  bool m_DurationIsSet;
  bool m_ReliableDataService;
  bool m_ReliableDataServiceIsSet;
  std::vector<RdsPort> m_RdsPorts;
  bool m_RdsPortsIsSet;
  PdnEstablishmentOptions m_PdnEstablishmentOption;
  bool m_PdnEstablishmentOptionIsSet;
  std::string m_NotificationDestination;

  bool m_RequestTestNotification;
  bool m_RequestTestNotificationIsSet;
  WebsockNotifConfig m_WebsockNotifConfig;
  bool m_WebsockNotifConfigIsSet;
  int32_t m_MaximumPacketSize;
  bool m_MaximumPacketSizeIsSet;
  std::vector<NiddDownlinkDataTransfer> m_NiddDownlinkDataTransfers;
  bool m_NiddDownlinkDataTransfersIsSet;
  NiddStatus m_Status;
  bool m_StatusIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* NiddConfiguration_H_ */
