/**
 * Unified Data Repository Service API file for policy data
 * The API version is defined in 3GPP TS 29.504 © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UePolicySet.h
 *
 * Contains the UE policy data for a given subscriber.
 */

#ifndef UePolicySet_H_
#define UePolicySet_H_

#include "PlmnRouteSelectionDescriptor.h"
#include "PresenceInfo.h"
#include "UePolicySection.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the UE policy data for a given subscriber.
/// </summary>
class UePolicySet {
public:
  UePolicySet();
  virtual ~UePolicySet();

  void validate();

  /////////////////////////////////////////////
  /// UePolicySet members

  /// <summary>
  /// Contains Presence reporting area information. The praId attribute within
  /// the PresenceInfo data type is the key of the map.
  /// </summary>
  std::map<std::string, PresenceInfo> &getPraInfos();
  void setPraInfos(std::map<std::string, PresenceInfo> const &value);
  bool praInfosIsSet() const;
  void unsetPraInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getSubscCats();
  void setSubscCats(std::vector<std::string> const &value);
  bool subscCatsIsSet() const;
  void unsetSubscCats();
  /// <summary>
  /// Contains the UE Policy Sections. The UE Policy Section Identifier is used
  /// as the key of the map.
  /// </summary>
  std::map<std::string, UePolicySection> &getUePolicySections();
  void setUePolicySections(std::map<std::string, UePolicySection> const &value);
  bool uePolicySectionsIsSet() const;
  void unsetUePolicySections();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getUpsis();
  void setUpsis(std::vector<std::string> const &value);
  bool upsisIsSet() const;
  void unsetUpsis();
  /// <summary>
  /// Contains allowed route selection descriptors per serving PLMN for a UE.
  /// The serving PLMN identifier is the key of the map.
  /// </summary>
  std::map<std::string, PlmnRouteSelectionDescriptor> &
  getAllowedRouteSelDescs();
  void setAllowedRouteSelDescs(
      std::map<std::string, PlmnRouteSelectionDescriptor> const &value);
  bool allowedRouteSelDescsIsSet() const;
  void unsetAllowedRouteSelDescs();
  /// <summary>
  ///
  /// </summary>
  bool isAndspInd() const;
  void setAndspInd(bool const value);
  bool andspIndIsSet() const;
  void unsetAndspInd();
  /// <summary>
  /// String representing a Permanent Equipment Identifier that may contain - an
  /// IMEI or IMEISV, as specified in clause 6.2 of 3GPP TS 23.003; a MAC
  /// address for a 5G-RG or FN-RG via wireline access, with an indication that
  /// this address cannot be trusted for regulatory purpose if this address
  /// cannot be used as an Equipment Identifier of the FN-RG, as specified in
  /// clause 4.7.7 of 3GPP TS23.316. Examples are imei-012345678901234 or
  /// imeisv-0123456789012345.
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const &value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getOsIds();
  void setOsIds(std::vector<std::string> const &value);
  bool osIdsIsSet() const;
  void unsetOsIds();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();

  friend void to_json(nlohmann::json &j, const UePolicySet &o);
  friend void from_json(const nlohmann::json &j, UePolicySet &o);

protected:
  std::map<std::string, PresenceInfo> m_PraInfos;
  bool m_PraInfosIsSet;
  std::vector<std::string> m_SubscCats;
  bool m_SubscCatsIsSet;
  std::map<std::string, UePolicySection> m_UePolicySections;
  bool m_UePolicySectionsIsSet;
  std::vector<std::string> m_Upsis;
  bool m_UpsisIsSet;
  std::map<std::string, PlmnRouteSelectionDescriptor> m_AllowedRouteSelDescs;
  bool m_AllowedRouteSelDescsIsSet;
  bool m_AndspInd;
  bool m_AndspIndIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  std::vector<std::string> m_OsIds;
  bool m_OsIdsIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* UePolicySet_H_ */
