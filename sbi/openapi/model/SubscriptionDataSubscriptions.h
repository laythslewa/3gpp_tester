/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SubscriptionDataSubscriptions.h
 *
 * A subscription to notifications.
 */

#ifndef SubscriptionDataSubscriptions_H_
#define SubscriptionDataSubscriptions_H_

#include "SdmSubscription.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// A subscription to notifications.
/// </summary>
class SubscriptionDataSubscriptions {
public:
  SubscriptionDataSubscriptions();
  virtual ~SubscriptionDataSubscriptions();

  void validate();

  /////////////////////////////////////////////
  /// SubscriptionDataSubscriptions members

  /// <summary>
  /// String represents the SUPI or GPSI
  /// </summary>
  std::string getUeId() const;
  void setUeId(std::string const &value);
  bool ueIdIsSet() const;
  void unsetUeId();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getCallbackReference() const;
  void setCallbackReference(std::string const &value);
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getOriginalCallbackReference() const;
  void setOriginalCallbackReference(std::string const &value);
  bool originalCallbackReferenceIsSet() const;
  void unsetOriginalCallbackReference();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getMonitoredResourceUris();
  void setMonitoredResourceUris(std::vector<std::string> const &value);
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getExpiry() const;
  void setExpiry(std::string const &value);
  bool expiryIsSet() const;
  void unsetExpiry();
  /// <summary>
  ///
  /// </summary>
  SdmSubscription getSdmSubscription() const;
  void setSdmSubscription(SdmSubscription const &value);
  bool sdmSubscriptionIsSet() const;
  void unsetSdmSubscription();
  /// <summary>
  ///
  /// </summary>
  std::string getSubscriptionId() const;
  void setSubscriptionId(std::string const &value);
  bool subscriptionIdIsSet() const;
  void unsetSubscriptionId();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupported_features();

  friend void to_json(nlohmann::json &j,
                      const SubscriptionDataSubscriptions &o);
  friend void from_json(const nlohmann::json &j,
                        SubscriptionDataSubscriptions &o);

protected:
  std::string m_UeId;
  bool m_UeIdIsSet;
  std::string m_CallbackReference;

  std::string m_OriginalCallbackReference;
  bool m_OriginalCallbackReferenceIsSet;
  std::vector<std::string> m_MonitoredResourceUris;

  std::string m_Expiry;
  bool m_ExpiryIsSet;
  SdmSubscription m_SdmSubscription;
  bool m_SdmSubscriptionIsSet;
  std::string m_SubscriptionId;
  bool m_SubscriptionIdIsSet;
  std::string m_Supported_features;
  bool m_Supported_featuresIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SubscriptionDataSubscriptions_H_ */
