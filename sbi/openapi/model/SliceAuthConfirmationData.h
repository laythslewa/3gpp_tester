/**
 * Nnssaaf_NSSAA
 * Network Slice-Specific Authentication and Authorization Service. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SliceAuthConfirmationData.h
 *
 *
 */

#ifndef SliceAuthConfirmationData_H_
#define SliceAuthConfirmationData_H_

#include "Snssai.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SliceAuthConfirmationData {
public:
  SliceAuthConfirmationData();
  virtual ~SliceAuthConfirmationData();

  void validate();

  /////////////////////////////////////////////
  /// SliceAuthConfirmationData members

  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  /// <summary>
  /// contains an EAP packet
  /// </summary>
  std::string getEapMessage() const;
  void setEapMessage(std::string const &value);

  friend void to_json(nlohmann::json &j, const SliceAuthConfirmationData &o);
  friend void from_json(const nlohmann::json &j, SliceAuthConfirmationData &o);

protected:
  std::string m_Gpsi;

  Snssai m_Snssai;

  std::string m_EapMessage;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SliceAuthConfirmationData_H_ */
