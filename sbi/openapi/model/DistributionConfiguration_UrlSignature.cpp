/**
 * M1_ContentHostingProvisioning
 * 5GMS AF M1 Content Hosting Provisioning API Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DistributionConfiguration_UrlSignature.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

DistributionConfiguration_UrlSignature::
    DistributionConfiguration_UrlSignature() {
  m_UrlPattern = "";
  m_TokenName = "";
  m_PassphraseName = "";
  m_Passphrase = "";
  m_TokenExpiryName = "";
  m_UseIPAddress = false;
  m_IpAddressName = "";
  m_IpAddressNameIsSet = false;
}

DistributionConfiguration_UrlSignature::
    ~DistributionConfiguration_UrlSignature() {}

void DistributionConfiguration_UrlSignature::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j,
             const DistributionConfiguration_UrlSignature &o) {
  j = nlohmann::json();
  j["urlPattern"] = o.m_UrlPattern;
  j["tokenName"] = o.m_TokenName;
  j["passphraseName"] = o.m_PassphraseName;
  j["passphrase"] = o.m_Passphrase;
  j["tokenExpiryName"] = o.m_TokenExpiryName;
  j["useIPAddress"] = o.m_UseIPAddress;
  if (o.ipAddressNameIsSet())
    j["ipAddressName"] = o.m_IpAddressName;
}

void from_json(const nlohmann::json &j,
               DistributionConfiguration_UrlSignature &o) {
  j.at("urlPattern").get_to(o.m_UrlPattern);
  j.at("tokenName").get_to(o.m_TokenName);
  j.at("passphraseName").get_to(o.m_PassphraseName);
  j.at("passphrase").get_to(o.m_Passphrase);
  j.at("tokenExpiryName").get_to(o.m_TokenExpiryName);
  j.at("useIPAddress").get_to(o.m_UseIPAddress);
  if (j.find("ipAddressName") != j.end()) {
    j.at("ipAddressName").get_to(o.m_IpAddressName);
    o.m_IpAddressNameIsSet = true;
  }
}

std::string DistributionConfiguration_UrlSignature::getUrlPattern() const {
  return m_UrlPattern;
}
void DistributionConfiguration_UrlSignature::setUrlPattern(
    std::string const &value) {
  m_UrlPattern = value;
}
std::string DistributionConfiguration_UrlSignature::getTokenName() const {
  return m_TokenName;
}
void DistributionConfiguration_UrlSignature::setTokenName(
    std::string const &value) {
  m_TokenName = value;
}
std::string DistributionConfiguration_UrlSignature::getPassphraseName() const {
  return m_PassphraseName;
}
void DistributionConfiguration_UrlSignature::setPassphraseName(
    std::string const &value) {
  m_PassphraseName = value;
}
std::string DistributionConfiguration_UrlSignature::getPassphrase() const {
  return m_Passphrase;
}
void DistributionConfiguration_UrlSignature::setPassphrase(
    std::string const &value) {
  m_Passphrase = value;
}
std::string DistributionConfiguration_UrlSignature::getTokenExpiryName() const {
  return m_TokenExpiryName;
}
void DistributionConfiguration_UrlSignature::setTokenExpiryName(
    std::string const &value) {
  m_TokenExpiryName = value;
}
bool DistributionConfiguration_UrlSignature::isUseIPAddress() const {
  return m_UseIPAddress;
}
void DistributionConfiguration_UrlSignature::setUseIPAddress(bool const value) {
  m_UseIPAddress = value;
}
std::string DistributionConfiguration_UrlSignature::getIpAddressName() const {
  return m_IpAddressName;
}
void DistributionConfiguration_UrlSignature::setIpAddressName(
    std::string const &value) {
  m_IpAddressName = value;
  m_IpAddressNameIsSet = true;
}
bool DistributionConfiguration_UrlSignature::ipAddressNameIsSet() const {
  return m_IpAddressNameIsSet;
}
void DistributionConfiguration_UrlSignature::unsetIpAddressName() {
  m_IpAddressNameIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
