/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmContext.h
 *
 * Complete SM Context
 */

#ifndef SmContext_H_
#define SmContext_H_

#include "Ambr.h"
#include "ChargingInformation.h"
#include "DnnSelectionMode.h"
#include "EpsBearerInfo.h"
#include "EpsPdnCnxInfo.h"
#include "IpAddress.h"
#include "Ipv6Prefix.h"
#include "MaxIntegrityProtectedDataRate.h"
#include "PduSessionType.h"
#include "QosFlowSetupItem.h"
#include "QosFlowTunnel.h"
#include "RedundantPduSessionInformation.h"
#include "RoamingChargingProfile.h"
#include "SbiBindingLevel.h"
#include "Snssai.h"
#include "TunnelInfo.h"
#include "UpSecurity.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Complete SM Context
/// </summary>
class SmContext {
public:
  SmContext();
  virtual ~SmContext();

  void validate();

  /////////////////////////////////////////////
  /// SmContext members

  /// <summary>
  /// Unsigned integer identifying a PDU session, within the range 0 to 255, as
  /// specified in clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU
  /// Session ID is allocated by the Core Network for UEs not supporting N1
  /// mode, reserved range 64 to 95 is used. PDU Session ID within the reserved
  /// range is only visible in the Core Network.
  /// </summary>
  int32_t getPduSessionId() const;
  void setPduSessionId(int32_t const value);
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getSelectedDnn() const;
  void setSelectedDnn(std::string const &value);
  bool selectedDnnIsSet() const;
  void unsetSelectedDnn();
  /// <summary>
  ///
  /// </summary>
  Snssai getSNssai() const;
  void setSNssai(Snssai const &value);
  /// <summary>
  ///
  /// </summary>
  Snssai getHplmnSnssai() const;
  void setHplmnSnssai(Snssai const &value);
  bool hplmnSnssaiIsSet() const;
  void unsetHplmnSnssai();
  /// <summary>
  ///
  /// </summary>
  PduSessionType getPduSessionType() const;
  void setPduSessionType(PduSessionType const &value);
  /// <summary>
  /// String identifying a Gpsi shall contain either an External Id or an
  /// MSISDN. It shall be formatted as follows -External Identifier&#x3D;
  /// \&quot;extid-&lt;extid&gt;, where &lt;extid&gt; shall be formatted
  /// according to clause 19.7.2 of 3GPP TS 23.003 that describes an External
  /// Identifier.
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const &value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getHSmfUri() const;
  void setHSmfUri(std::string const &value);
  bool hSmfUriIsSet() const;
  void unsetHSmfUri();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getSmfUri() const;
  void setSmfUri(std::string const &value);
  bool smfUriIsSet() const;
  void unsetSmfUri();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getPduSessionRef() const;
  void setPduSessionRef(std::string const &value);
  bool pduSessionRefIsSet() const;
  void unsetPduSessionRef();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getPcfId() const;
  void setPcfId(std::string const &value);
  bool pcfIdIsSet() const;
  void unsetPcfId();
  /// <summary>
  /// Identifier of a group of NFs.
  /// </summary>
  std::string getPcfGroupId() const;
  void setPcfGroupId(std::string const &value);
  bool pcfGroupIdIsSet() const;
  void unsetPcfGroupId();
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getPcfSetId() const;
  void setPcfSetId(std::string const &value);
  bool pcfSetIdIsSet() const;
  void unsetPcfSetId();
  /// <summary>
  ///
  /// </summary>
  DnnSelectionMode getSelMode() const;
  void setSelMode(DnnSelectionMode const &value);
  bool selModeIsSet() const;
  void unsetSelMode();
  /// <summary>
  /// Identifier of a group of NFs.
  /// </summary>
  std::string getUdmGroupId() const;
  void setUdmGroupId(std::string const &value);
  bool udmGroupIdIsSet() const;
  void unsetUdmGroupId();
  /// <summary>
  ///
  /// </summary>
  std::string getRoutingIndicator() const;
  void setRoutingIndicator(std::string const &value);
  bool routingIndicatorIsSet() const;
  void unsetRoutingIndicator();
  /// <summary>
  ///
  /// </summary>
  int32_t getHNwPubKeyId() const;
  void setHNwPubKeyId(int32_t const value);
  bool hNwPubKeyIdIsSet() const;
  void unsetHNwPubKeyId();
  /// <summary>
  ///
  /// </summary>
  Ambr getSessionAmbr() const;
  void setSessionAmbr(Ambr const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<QosFlowSetupItem> &getQosFlowsList();
  void setQosFlowsList(std::vector<QosFlowSetupItem> const &value);
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getHSmfInstanceId() const;
  void setHSmfInstanceId(std::string const &value);
  bool hSmfInstanceIdIsSet() const;
  void unsetHSmfInstanceId();
  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getSmfInstanceId() const;
  void setSmfInstanceId(std::string const &value);
  bool smfInstanceIdIsSet() const;
  void unsetSmfInstanceId();
  /// <summary>
  /// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the
  /// following string \&quot; set&lt;Set
  /// ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.
  /// &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition) &lt;NFType&gt; encoded as a value
  /// defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case
  /// characters &lt;Set ID&gt; encoded as a string of characters consisting of
  /// alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-)
  /// and that shall end with either an alphabetic character or a digit.
  /// </summary>
  std::string getPduSessionSmfSetId() const;
  void setPduSessionSmfSetId(std::string const &value);
  bool pduSessionSmfSetIdIsSet() const;
  void unsetPduSessionSmfSetId();
  /// <summary>
  /// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted
  /// as the following string  \&quot; set&lt;Set ID&gt;.sn&lt;Service
  /// Name&gt;.nfi&lt;NF Instance
  /// ID&gt;.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;&gt;\&quot;, or
  /// \&quot;set&lt;SetID&gt;.sn&lt;ServiceName&gt;.nfi&lt;NFInstanceID&gt;.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\&quot;
  /// with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\&quot;Mcc\&quot;
  /// data type definition)  &lt;MNC&gt; encoded as defined in clause 5.4.2
  /// (\&quot;Mnc\&quot; data type definition)  &lt;NID&gt; encoded as defined
  /// in clause 5.4.2 (\&quot;Nid\&quot; data type definition)
  /// &lt;NFInstanceId&gt; encoded as defined in clause 5.3.2
  /// &lt;ServiceName&gt; encoded as defined in 3GPP TS 29.510 &lt;Set ID&gt;
  /// encoded as a string of characters consisting of alphabetic characters (A-Z
  /// and a-z), digits (0-9) and/or the hyphen (-) and that shall end with
  /// either an alphabetic character or a digit.
  /// </summary>
  std::string getPduSessionSmfServiceSetId() const;
  void setPduSessionSmfServiceSetId(std::string const &value);
  bool pduSessionSmfServiceSetIdIsSet() const;
  void unsetPduSessionSmfServiceSetId();
  /// <summary>
  ///
  /// </summary>
  SbiBindingLevel getPduSessionSmfBinding() const;
  void setPduSessionSmfBinding(SbiBindingLevel const &value);
  bool pduSessionSmfBindingIsSet() const;
  void unsetPduSessionSmfBinding();
  /// <summary>
  ///
  /// </summary>
  bool isEnablePauseCharging() const;
  void setEnablePauseCharging(bool const value);
  bool enablePauseChargingIsSet() const;
  void unsetEnablePauseCharging();
  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getUeIpv4Address() const;
  void setUeIpv4Address(std::string const &value);
  bool ueIpv4AddressIsSet() const;
  void unsetUeIpv4Address();
  /// <summary>
  ///
  /// </summary>
  Ipv6Prefix getUeIpv6Prefix() const;
  void setUeIpv6Prefix(Ipv6Prefix const &value);
  bool ueIpv6PrefixIsSet() const;
  void unsetUeIpv6Prefix();
  /// <summary>
  ///
  /// </summary>
  EpsPdnCnxInfo getEpsPdnCnxInfo() const;
  void setEpsPdnCnxInfo(EpsPdnCnxInfo const &value);
  bool epsPdnCnxInfoIsSet() const;
  void unsetEpsPdnCnxInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<EpsBearerInfo> &getEpsBearerInfo();
  void setEpsBearerInfo(std::vector<EpsBearerInfo> const &value);
  bool epsBearerInfoIsSet() const;
  void unsetEpsBearerInfo();
  /// <summary>
  ///
  /// </summary>
  MaxIntegrityProtectedDataRate getMaxIntegrityProtectedDataRate() const;
  void
  setMaxIntegrityProtectedDataRate(MaxIntegrityProtectedDataRate const &value);
  bool maxIntegrityProtectedDataRateIsSet() const;
  void unsetMaxIntegrityProtectedDataRate();
  /// <summary>
  ///
  /// </summary>
  bool isAlwaysOnGranted() const;
  void setAlwaysOnGranted(bool const value);
  bool alwaysOnGrantedIsSet() const;
  void unsetAlwaysOnGranted();
  /// <summary>
  ///
  /// </summary>
  UpSecurity getUpSecurity() const;
  void setUpSecurity(UpSecurity const &value);
  bool upSecurityIsSet() const;
  void unsetUpSecurity();
  /// <summary>
  ///
  /// </summary>
  std::string getHSmfServiceInstanceId() const;
  void setHSmfServiceInstanceId(std::string const &value);
  bool hSmfServiceInstanceIdIsSet() const;
  void unsetHSmfServiceInstanceId();
  /// <summary>
  ///
  /// </summary>
  std::string getSmfServiceInstanceId() const;
  void setSmfServiceInstanceId(std::string const &value);
  bool smfServiceInstanceIdIsSet() const;
  void unsetSmfServiceInstanceId();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getRecoveryTime() const;
  void setRecoveryTime(std::string const &value);
  bool recoveryTimeIsSet() const;
  void unsetRecoveryTime();
  /// <summary>
  ///
  /// </summary>
  bool isForwardingInd() const;
  void setForwardingInd(bool const value);
  bool forwardingIndIsSet() const;
  void unsetForwardingInd();
  /// <summary>
  ///
  /// </summary>
  TunnelInfo getPsaTunnelInfo() const;
  void setPsaTunnelInfo(TunnelInfo const &value);
  bool psaTunnelInfoIsSet() const;
  void unsetPsaTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  std::string getChargingId() const;
  void setChargingId(std::string const &value);
  bool chargingIdIsSet() const;
  void unsetChargingId();
  /// <summary>
  ///
  /// </summary>
  ChargingInformation getChargingInfo() const;
  void setChargingInfo(ChargingInformation const &value);
  bool chargingInfoIsSet() const;
  void unsetChargingInfo();
  /// <summary>
  ///
  /// </summary>
  RoamingChargingProfile getRoamingChargingProfile() const;
  void setRoamingChargingProfile(RoamingChargingProfile const &value);
  bool roamingChargingProfileIsSet() const;
  void unsetRoamingChargingProfile();
  /// <summary>
  ///
  /// </summary>
  bool isNefExtBufSupportInd() const;
  void setNefExtBufSupportInd(bool const value);
  bool nefExtBufSupportIndIsSet() const;
  void unsetNefExtBufSupportInd();
  /// <summary>
  /// Represents information that identifies which IP pool or external server is
  /// used to allocate the IP address.
  /// </summary>
  int32_t getIpv6Index() const;
  void setIpv6Index(int32_t const value);
  bool ipv6IndexIsSet() const;
  void unsetIpv6Index();
  /// <summary>
  ///
  /// </summary>
  IpAddress getDnAaaAddress() const;
  void setDnAaaAddress(IpAddress const &value);
  bool dnAaaAddressIsSet() const;
  void unsetDnAaaAddress();
  /// <summary>
  ///
  /// </summary>
  RedundantPduSessionInformation getRedundantPduSessionInfo() const;
  void setRedundantPduSessionInfo(RedundantPduSessionInformation const &value);
  bool redundantPduSessionInfoIsSet() const;
  void unsetRedundantPduSessionInfo();
  /// <summary>
  ///
  /// </summary>
  QosFlowTunnel getRanTunnelInfo() const;
  void setRanTunnelInfo(QosFlowTunnel const &value);
  bool ranTunnelInfoIsSet() const;
  void unsetRanTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosFlowTunnel> &getAddRanTunnelInfo();
  void setAddRanTunnelInfo(std::vector<QosFlowTunnel> const &value);
  bool addRanTunnelInfoIsSet() const;
  void unsetAddRanTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  QosFlowTunnel getRedRanTunnelInfo() const;
  void setRedRanTunnelInfo(QosFlowTunnel const &value);
  bool redRanTunnelInfoIsSet() const;
  void unsetRedRanTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<QosFlowTunnel> &getAddRedRanTunnelInfo();
  void setAddRedRanTunnelInfo(std::vector<QosFlowTunnel> const &value);
  bool addRedRanTunnelInfoIsSet() const;
  void unsetAddRedRanTunnelInfo();
  /// <summary>
  ///
  /// </summary>
  bool isNspuSupportInd() const;
  void setNspuSupportInd(bool const value);
  bool nspuSupportIndIsSet() const;
  void unsetNspuSupportInd();

  friend void to_json(nlohmann::json &j, const SmContext &o);
  friend void from_json(const nlohmann::json &j, SmContext &o);

protected:
  int32_t m_PduSessionId;

  std::string m_Dnn;

  std::string m_SelectedDnn;
  bool m_SelectedDnnIsSet;
  Snssai m_SNssai;

  Snssai m_HplmnSnssai;
  bool m_HplmnSnssaiIsSet;
  PduSessionType m_PduSessionType;

  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_HSmfUri;
  bool m_HSmfUriIsSet;
  std::string m_SmfUri;
  bool m_SmfUriIsSet;
  std::string m_PduSessionRef;
  bool m_PduSessionRefIsSet;
  std::string m_PcfId;
  bool m_PcfIdIsSet;
  std::string m_PcfGroupId;
  bool m_PcfGroupIdIsSet;
  std::string m_PcfSetId;
  bool m_PcfSetIdIsSet;
  DnnSelectionMode m_SelMode;
  bool m_SelModeIsSet;
  std::string m_UdmGroupId;
  bool m_UdmGroupIdIsSet;
  std::string m_RoutingIndicator;
  bool m_RoutingIndicatorIsSet;
  int32_t m_HNwPubKeyId;
  bool m_HNwPubKeyIdIsSet;
  Ambr m_SessionAmbr;

  std::vector<QosFlowSetupItem> m_QosFlowsList;

  std::string m_HSmfInstanceId;
  bool m_HSmfInstanceIdIsSet;
  std::string m_SmfInstanceId;
  bool m_SmfInstanceIdIsSet;
  std::string m_PduSessionSmfSetId;
  bool m_PduSessionSmfSetIdIsSet;
  std::string m_PduSessionSmfServiceSetId;
  bool m_PduSessionSmfServiceSetIdIsSet;
  SbiBindingLevel m_PduSessionSmfBinding;
  bool m_PduSessionSmfBindingIsSet;
  bool m_EnablePauseCharging;
  bool m_EnablePauseChargingIsSet;
  std::string m_UeIpv4Address;
  bool m_UeIpv4AddressIsSet;
  Ipv6Prefix m_UeIpv6Prefix;
  bool m_UeIpv6PrefixIsSet;
  EpsPdnCnxInfo m_EpsPdnCnxInfo;
  bool m_EpsPdnCnxInfoIsSet;
  std::vector<EpsBearerInfo> m_EpsBearerInfo;
  bool m_EpsBearerInfoIsSet;
  MaxIntegrityProtectedDataRate m_MaxIntegrityProtectedDataRate;
  bool m_MaxIntegrityProtectedDataRateIsSet;
  bool m_AlwaysOnGranted;
  bool m_AlwaysOnGrantedIsSet;
  UpSecurity m_UpSecurity;
  bool m_UpSecurityIsSet;
  std::string m_HSmfServiceInstanceId;
  bool m_HSmfServiceInstanceIdIsSet;
  std::string m_SmfServiceInstanceId;
  bool m_SmfServiceInstanceIdIsSet;
  std::string m_RecoveryTime;
  bool m_RecoveryTimeIsSet;
  bool m_ForwardingInd;
  bool m_ForwardingIndIsSet;
  TunnelInfo m_PsaTunnelInfo;
  bool m_PsaTunnelInfoIsSet;
  std::string m_ChargingId;
  bool m_ChargingIdIsSet;
  ChargingInformation m_ChargingInfo;
  bool m_ChargingInfoIsSet;
  RoamingChargingProfile m_RoamingChargingProfile;
  bool m_RoamingChargingProfileIsSet;
  bool m_NefExtBufSupportInd;
  bool m_NefExtBufSupportIndIsSet;
  int32_t m_Ipv6Index;
  bool m_Ipv6IndexIsSet;
  IpAddress m_DnAaaAddress;
  bool m_DnAaaAddressIsSet;
  RedundantPduSessionInformation m_RedundantPduSessionInfo;
  bool m_RedundantPduSessionInfoIsSet;
  QosFlowTunnel m_RanTunnelInfo;
  bool m_RanTunnelInfoIsSet;
  std::vector<QosFlowTunnel> m_AddRanTunnelInfo;
  bool m_AddRanTunnelInfoIsSet;
  QosFlowTunnel m_RedRanTunnelInfo;
  bool m_RedRanTunnelInfoIsSet;
  std::vector<QosFlowTunnel> m_AddRedRanTunnelInfo;
  bool m_AddRedRanTunnelInfoIsSet;
  bool m_NspuSupportInd;
  bool m_NspuSupportIndIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SmContext_H_ */
