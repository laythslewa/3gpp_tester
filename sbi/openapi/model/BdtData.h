/**
 * Unified Data Repository Service API file for policy data
 * The API version is defined in 3GPP TS 29.504 © 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * BdtData.h
 *
 * Contains the background data transfer data.
 */

#ifndef BdtData_H_
#define BdtData_H_

#include "BdtPolicyStatus.h"
#include "NetworkAreaInfo.h"
#include "Snssai.h"
#include "TransferPolicy.h"
#include "UsageThreshold.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains the background data transfer data.
/// </summary>
class BdtData {
public:
  BdtData();
  virtual ~BdtData();

  void validate();

  /////////////////////////////////////////////
  /// BdtData members

  /// <summary>
  ///
  /// </summary>
  std::string getAspId() const;
  void setAspId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  TransferPolicy getTransPolicy() const;
  void setTransPolicy(TransferPolicy const &value);
  /// <summary>
  /// string identifying a BDT Reference ID as defined in subclause 5.3.3 of
  /// 3GPP TS 29.154.
  /// </summary>
  std::string getBdtRefId() const;
  void setBdtRefId(std::string const &value);
  bool bdtRefIdIsSet() const;
  void unsetBdtRefId();
  /// <summary>
  ///
  /// </summary>
  NetworkAreaInfo getNwAreaInfo() const;
  void setNwAreaInfo(NetworkAreaInfo const &value);
  bool nwAreaInfoIsSet() const;
  void unsetNwAreaInfo();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getNumOfUes() const;
  void setNumOfUes(int32_t const value);
  bool numOfUesIsSet() const;
  void unsetNumOfUes();
  /// <summary>
  ///
  /// </summary>
  UsageThreshold getVolPerUe() const;
  void setVolPerUe(UsageThreshold const &value);
  bool volPerUeIsSet() const;
  void unsetVolPerUe();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  /// Identify a traffic descriptor as defined in Figure 5.2.2 of 3GPP
  /// TS 24.526, octets v+5 to w.
  /// </summary>
  std::string getTrafficDes() const;
  void setTrafficDes(std::string const &value);
  bool trafficDesIsSet() const;
  void unsetTrafficDes();
  /// <summary>
  ///
  /// </summary>
  BdtPolicyStatus getBdtpStatus() const;
  void setBdtpStatus(BdtPolicyStatus const &value);
  bool bdtpStatusIsSet() const;
  void unsetBdtpStatus();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();

  friend void to_json(nlohmann::json &j, const BdtData &o);
  friend void from_json(const nlohmann::json &j, BdtData &o);

protected:
  std::string m_AspId;

  TransferPolicy m_TransPolicy;

  std::string m_BdtRefId;
  bool m_BdtRefIdIsSet;
  NetworkAreaInfo m_NwAreaInfo;
  bool m_NwAreaInfoIsSet;
  int32_t m_NumOfUes;
  bool m_NumOfUesIsSet;
  UsageThreshold m_VolPerUe;
  bool m_VolPerUeIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  std::string m_TrafficDes;
  bool m_TrafficDesIsSet;
  BdtPolicyStatus m_BdtpStatus;
  bool m_BdtpStatusIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* BdtData_H_ */
