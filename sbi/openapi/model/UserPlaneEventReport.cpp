/**
 * 3gpp-as-session-with-qos
 * API for setting us an AS session with required QoS. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UserPlaneEventReport.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UserPlaneEventReport::UserPlaneEventReport() {
  m_AccumulatedUsageIsSet = false;
  m_FlowIdsIsSet = false;
  m_AppliedQosRef = "";
  m_AppliedQosRefIsSet = false;
  m_QosMonReportsIsSet = false;
}

UserPlaneEventReport::~UserPlaneEventReport() {}

void UserPlaneEventReport::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UserPlaneEventReport &o) {
  j = nlohmann::json();
  j["event"] = o.m_Event;
  if (o.accumulatedUsageIsSet())
    j["accumulatedUsage"] = o.m_AccumulatedUsage;
  if (o.flowIdsIsSet() || !o.m_FlowIds.empty())
    j["flowIds"] = o.m_FlowIds;
  if (o.appliedQosRefIsSet())
    j["appliedQosRef"] = o.m_AppliedQosRef;
  if (o.qosMonReportsIsSet() || !o.m_QosMonReports.empty())
    j["qosMonReports"] = o.m_QosMonReports;
}

void from_json(const nlohmann::json &j, UserPlaneEventReport &o) {
  j.at("event").get_to(o.m_Event);
  if (j.find("accumulatedUsage") != j.end()) {
    j.at("accumulatedUsage").get_to(o.m_AccumulatedUsage);
    o.m_AccumulatedUsageIsSet = true;
  }
  if (j.find("flowIds") != j.end()) {
    j.at("flowIds").get_to(o.m_FlowIds);
    o.m_FlowIdsIsSet = true;
  }
  if (j.find("appliedQosRef") != j.end()) {
    j.at("appliedQosRef").get_to(o.m_AppliedQosRef);
    o.m_AppliedQosRefIsSet = true;
  }
  if (j.find("qosMonReports") != j.end()) {
    j.at("qosMonReports").get_to(o.m_QosMonReports);
    o.m_QosMonReportsIsSet = true;
  }
}

UserPlaneEvent UserPlaneEventReport::getEvent() const { return m_Event; }
void UserPlaneEventReport::setEvent(UserPlaneEvent const &value) {
  m_Event = value;
}
AccumulatedUsage UserPlaneEventReport::getAccumulatedUsage() const {
  return m_AccumulatedUsage;
}
void UserPlaneEventReport::setAccumulatedUsage(AccumulatedUsage const &value) {
  m_AccumulatedUsage = value;
  m_AccumulatedUsageIsSet = true;
}
bool UserPlaneEventReport::accumulatedUsageIsSet() const {
  return m_AccumulatedUsageIsSet;
}
void UserPlaneEventReport::unsetAccumulatedUsage() {
  m_AccumulatedUsageIsSet = false;
}
std::vector<int32_t> &UserPlaneEventReport::getFlowIds() { return m_FlowIds; }
void UserPlaneEventReport::setFlowIds(std::vector<int32_t> const value) {
  m_FlowIds = value;
  m_FlowIdsIsSet = true;
}
bool UserPlaneEventReport::flowIdsIsSet() const { return m_FlowIdsIsSet; }
void UserPlaneEventReport::unsetFlowIds() { m_FlowIdsIsSet = false; }
std::string UserPlaneEventReport::getAppliedQosRef() const {
  return m_AppliedQosRef;
}
void UserPlaneEventReport::setAppliedQosRef(std::string const &value) {
  m_AppliedQosRef = value;
  m_AppliedQosRefIsSet = true;
}
bool UserPlaneEventReport::appliedQosRefIsSet() const {
  return m_AppliedQosRefIsSet;
}
void UserPlaneEventReport::unsetAppliedQosRef() {
  m_AppliedQosRefIsSet = false;
}
std::vector<QosMonitoringReport> &UserPlaneEventReport::getQosMonReports() {
  return m_QosMonReports;
}
void UserPlaneEventReport::setQosMonReports(
    std::vector<QosMonitoringReport> const &value) {
  m_QosMonReports = value;
  m_QosMonReportsIsSet = true;
}
bool UserPlaneEventReport::qosMonReportsIsSet() const {
  return m_QosMonReportsIsSet;
}
void UserPlaneEventReport::unsetQosMonReports() {
  m_QosMonReportsIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
