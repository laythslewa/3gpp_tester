/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "QosSustainabilityExposure.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

QosSustainabilityExposure::QosSustainabilityExposure() {
  m_StartTs = "";
  m_EndTs = "";
  m_QosFlowRetThdIsSet = false;
  m_RanUeThrouThd = "";
  m_RanUeThrouThdIsSet = false;
  m_Confidence = 0;
  m_ConfidenceIsSet = false;
}

QosSustainabilityExposure::~QosSustainabilityExposure() {}

void QosSustainabilityExposure::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const QosSustainabilityExposure &o) {
  j = nlohmann::json();
  j["locArea"] = o.m_LocArea;
  j["startTs"] = o.m_StartTs;
  j["endTs"] = o.m_EndTs;
  if (o.qosFlowRetThdIsSet())
    j["qosFlowRetThd"] = o.m_QosFlowRetThd;
  if (o.ranUeThrouThdIsSet())
    j["ranUeThrouThd"] = o.m_RanUeThrouThd;
  if (o.confidenceIsSet())
    j["confidence"] = o.m_Confidence;
}

void from_json(const nlohmann::json &j, QosSustainabilityExposure &o) {
  j.at("locArea").get_to(o.m_LocArea);
  j.at("startTs").get_to(o.m_StartTs);
  j.at("endTs").get_to(o.m_EndTs);
  if (j.find("qosFlowRetThd") != j.end()) {
    j.at("qosFlowRetThd").get_to(o.m_QosFlowRetThd);
    o.m_QosFlowRetThdIsSet = true;
  }
  if (j.find("ranUeThrouThd") != j.end()) {
    j.at("ranUeThrouThd").get_to(o.m_RanUeThrouThd);
    o.m_RanUeThrouThdIsSet = true;
  }
  if (j.find("confidence") != j.end()) {
    j.at("confidence").get_to(o.m_Confidence);
    o.m_ConfidenceIsSet = true;
  }
}

LocationArea5G QosSustainabilityExposure::getLocArea() const {
  return m_LocArea;
}
void QosSustainabilityExposure::setLocArea(LocationArea5G const &value) {
  m_LocArea = value;
}
std::string QosSustainabilityExposure::getStartTs() const { return m_StartTs; }
void QosSustainabilityExposure::setStartTs(std::string const &value) {
  m_StartTs = value;
}
std::string QosSustainabilityExposure::getEndTs() const { return m_EndTs; }
void QosSustainabilityExposure::setEndTs(std::string const &value) {
  m_EndTs = value;
}
RetainabilityThreshold QosSustainabilityExposure::getQosFlowRetThd() const {
  return m_QosFlowRetThd;
}
void QosSustainabilityExposure::setQosFlowRetThd(
    RetainabilityThreshold const &value) {
  m_QosFlowRetThd = value;
  m_QosFlowRetThdIsSet = true;
}
bool QosSustainabilityExposure::qosFlowRetThdIsSet() const {
  return m_QosFlowRetThdIsSet;
}
void QosSustainabilityExposure::unsetQosFlowRetThd() {
  m_QosFlowRetThdIsSet = false;
}
std::string QosSustainabilityExposure::getRanUeThrouThd() const {
  return m_RanUeThrouThd;
}
void QosSustainabilityExposure::setRanUeThrouThd(std::string const &value) {
  m_RanUeThrouThd = value;
  m_RanUeThrouThdIsSet = true;
}
bool QosSustainabilityExposure::ranUeThrouThdIsSet() const {
  return m_RanUeThrouThdIsSet;
}
void QosSustainabilityExposure::unsetRanUeThrouThd() {
  m_RanUeThrouThdIsSet = false;
}
int32_t QosSustainabilityExposure::getConfidence() const {
  return m_Confidence;
}
void QosSustainabilityExposure::setConfidence(int32_t const value) {
  m_Confidence = value;
  m_ConfidenceIsSet = true;
}
bool QosSustainabilityExposure::confidenceIsSet() const {
  return m_ConfidenceIsSet;
}
void QosSustainabilityExposure::unsetConfidence() { m_ConfidenceIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
