/**
 * CAPIF_Security_API
 * API for CAPIF security management. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SecurityInformation.h
 *
 * Represents the interface details and the security method.
 */

#ifndef SecurityInformation_H_
#define SecurityInformation_H_

#include "InterfaceDescription.h"
#include "SecurityMethod.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the interface details and the security method.
/// </summary>
class SecurityInformation {
public:
  SecurityInformation();
  virtual ~SecurityInformation();

  void validate();

  /////////////////////////////////////////////
  /// SecurityInformation members

  /// <summary>
  ///
  /// </summary>
  InterfaceDescription getInterfaceDetails() const;
  void setInterfaceDetails(InterfaceDescription const &value);
  bool interfaceDetailsIsSet() const;
  void unsetInterfaceDetails();
  /// <summary>
  /// Identifier of the API exposing function
  /// </summary>
  std::string getAefId() const;
  void setAefId(std::string const &value);
  bool aefIdIsSet() const;
  void unsetAefId();
  /// <summary>
  /// Security methods preferred by the API invoker for the API interface.
  /// </summary>
  std::vector<SecurityMethod> &getPrefSecurityMethods();
  void setPrefSecurityMethods(std::vector<SecurityMethod> const &value);
  /// <summary>
  ///
  /// </summary>
  SecurityMethod getSelSecurityMethod() const;
  void setSelSecurityMethod(SecurityMethod const &value);
  bool selSecurityMethodIsSet() const;
  void unsetSelSecurityMethod();
  /// <summary>
  /// Authentication related information
  /// </summary>
  std::string getAuthenticationInfo() const;
  void setAuthenticationInfo(std::string const &value);
  bool authenticationInfoIsSet() const;
  void unsetAuthenticationInfo();
  /// <summary>
  /// Authorization related information
  /// </summary>
  std::string getAuthorizationInfo() const;
  void setAuthorizationInfo(std::string const &value);
  bool authorizationInfoIsSet() const;
  void unsetAuthorizationInfo();

  friend void to_json(nlohmann::json &j, const SecurityInformation &o);
  friend void from_json(const nlohmann::json &j, SecurityInformation &o);

protected:
  InterfaceDescription m_InterfaceDetails;
  bool m_InterfaceDetailsIsSet;
  std::string m_AefId;
  bool m_AefIdIsSet;
  std::vector<SecurityMethod> m_PrefSecurityMethods;

  SecurityMethod m_SelSecurityMethod;
  bool m_SelSecurityMethodIsSet;
  std::string m_AuthenticationInfo;
  bool m_AuthenticationInfoIsSet;
  std::string m_AuthorizationInfo;
  bool m_AuthorizationInfoIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SecurityInformation_H_ */
