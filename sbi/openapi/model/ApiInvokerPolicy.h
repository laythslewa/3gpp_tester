/**
 * CAPIF_Events_API
 * API for event subscription management. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ApiInvokerPolicy.h
 *
 * Represents the policy of an API Invoker.
 */

#ifndef ApiInvokerPolicy_H_
#define ApiInvokerPolicy_H_

#include "TimeRangeList.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents the policy of an API Invoker.
/// </summary>
class ApiInvokerPolicy {
public:
  ApiInvokerPolicy();
  virtual ~ApiInvokerPolicy();

  void validate();

  /////////////////////////////////////////////
  /// ApiInvokerPolicy members

  /// <summary>
  /// API invoker ID assigned by the CAPIF core function
  /// </summary>
  std::string getApiInvokerId() const;
  void setApiInvokerId(std::string const &value);
  /// <summary>
  /// Total number of invocations allowed on the service API by the API invoker.
  /// </summary>
  int32_t getAllowedTotalInvocations() const;
  void setAllowedTotalInvocations(int32_t const value);
  bool allowedTotalInvocationsIsSet() const;
  void unsetAllowedTotalInvocations();
  /// <summary>
  /// Invocations per second allowed on the service API by the API invoker.
  /// </summary>
  int32_t getAllowedInvocationsPerSecond() const;
  void setAllowedInvocationsPerSecond(int32_t const value);
  bool allowedInvocationsPerSecondIsSet() const;
  void unsetAllowedInvocationsPerSecond();
  /// <summary>
  /// The time ranges during which the invocations are allowed on the service
  /// API by the API invoker.
  /// </summary>
  std::vector<TimeRangeList> &getAllowedInvocationTimeRangeList();
  void
  setAllowedInvocationTimeRangeList(std::vector<TimeRangeList> const &value);
  bool allowedInvocationTimeRangeListIsSet() const;
  void unsetAllowedInvocationTimeRangeList();

  friend void to_json(nlohmann::json &j, const ApiInvokerPolicy &o);
  friend void from_json(const nlohmann::json &j, ApiInvokerPolicy &o);

protected:
  std::string m_ApiInvokerId;

  int32_t m_AllowedTotalInvocations;
  bool m_AllowedTotalInvocationsIsSet;
  int32_t m_AllowedInvocationsPerSecond;
  bool m_AllowedInvocationsPerSecondIsSet;
  std::vector<TimeRangeList> m_AllowedInvocationTimeRangeList;
  bool m_AllowedInvocationTimeRangeListIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ApiInvokerPolicy_H_ */
