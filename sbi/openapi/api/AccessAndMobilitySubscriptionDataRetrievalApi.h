/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AccessAndMobilitySubscriptionDataRetrievalApi.h
 *
 *
 */

#ifndef AccessAndMobilitySubscriptionDataRetrievalApi_H_
#define AccessAndMobilitySubscriptionDataRetrievalApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "AccessAndMobilitySubscriptionData.h"
#include "PlmnId.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class AccessAndMobilitySubscriptionDataRetrievalApi {
public:
  AccessAndMobilitySubscriptionDataRetrievalApi(
      std::shared_ptr<Pistache::Rest::Router>);
  virtual ~AccessAndMobilitySubscriptionDataRetrievalApi() {}
  void init();

  const std::string base = "/nudm-sdm/v2";

private:
  void setupRoutes();

  void get_am_data_handler(const Pistache::Rest::Request &request,
                           Pistache::Http::ResponseWriter response);
  void access_and_mobility_subscription_data_retrieval_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// retrieve a UE&#39;s Access and Mobility Subscription Data
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="supi">Identifier of the UE</param>
  /// <param name="supportedFeatures">Supported Features (optional, default to
  /// &quot;&quot;)</param> <param name="plmnId">serving PLMN ID (optional,
  /// default to PlmnId())</param> <param name="adjacentPlmns">list of PLMNs
  /// adjacent to the UE&#39;s serving PLMN (optional, default to
  /// std::vector&lt;PlmnId&gt;())</param> <param name="ifNoneMatch">Validator
  /// for conditional requests, as described in RFC 7232, 3.2 (optional, default
  /// to &quot;&quot;)</param> <param name="ifModifiedSince">Validator for
  /// conditional requests, as described in RFC 7232, 3.3 (optional, default to
  /// &quot;&quot;)</param>
  virtual void get_am_data(
      const std::string &supi,
      const Pistache::Optional<std::string> &supportedFeatures,
      const Pistache::Optional<PlmnId> &plmnId,
      const Pistache::Optional<std::vector<PlmnId>> &adjacentPlmns,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifNoneMatch,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifModifiedSince,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* AccessAndMobilitySubscriptionDataRetrievalApi_H_ */
