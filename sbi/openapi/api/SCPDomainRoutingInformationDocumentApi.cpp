/**
 * NRF NFDiscovery Service
 * NRF NFDiscovery Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SCPDomainRoutingInformationDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

SCPDomainRoutingInformationDocumentApi::SCPDomainRoutingInformationDocumentApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void SCPDomainRoutingInformationDocumentApi::init() { setupRoutes(); }

void SCPDomainRoutingInformationDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Get(*router, base + "/scp-domain-routing-info",
              Routes::bind(&SCPDomainRoutingInformationDocumentApi::
                               s_cp_domain_routing_info_get_handler,
                           this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &SCPDomainRoutingInformationDocumentApi::
          scp_domain_routing_information_document_api_default_handler,
      this));
}

void SCPDomainRoutingInformationDocumentApi::
    s_cp_domain_routing_info_get_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {

  // Getting the query params
  auto localQuery = request.query().get("local");
  Pistache::Optional<bool> local;
  if (!localQuery.isEmpty()) {
    bool valueQuery_instance;
    if (fromStringValue(localQuery.get(), valueQuery_instance)) {
      local = Pistache::Some(valueQuery_instance);
    }
  }

  // Getting the header params
  auto acceptEncoding = request.headers().tryGetRaw("Accept-Encoding");

  try {
    this->s_cp_domain_routing_info_get(local, acceptEncoding, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void SCPDomainRoutingInformationDocumentApi::
    scp_domain_routing_information_document_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
