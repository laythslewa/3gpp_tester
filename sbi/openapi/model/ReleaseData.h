/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ReleaseData.h
 *
 * Data within Release Request
 */

#ifndef ReleaseData_H_
#define ReleaseData_H_

#include "Cause.h"
#include "N4Information.h"
#include "NgApCause.h"
#include "SecondaryRatUsageInfo.h"
#include "SecondaryRatUsageReport.h"
#include "UserLocation.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data within Release Request
/// </summary>
class ReleaseData {
public:
  ReleaseData();
  virtual ~ReleaseData();

  void validate();

  /////////////////////////////////////////////
  /// ReleaseData members

  /// <summary>
  ///
  /// </summary>
  Cause getCause() const;
  void setCause(Cause const &value);
  bool causeIsSet() const;
  void unsetCause();
  /// <summary>
  ///
  /// </summary>
  NgApCause getNgApCause() const;
  void setNgApCause(NgApCause const &value);
  bool ngApCauseIsSet() const;
  void unsetNgApCause();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getR5gMmCauseValue() const;
  void setR5gMmCauseValue(int32_t const value);
  bool r5gMmCauseValueIsSet() const;
  void unsetr_5gMmCauseValue();
  /// <summary>
  ///
  /// </summary>
  UserLocation getUeLocation() const;
  void setUeLocation(UserLocation const &value);
  bool ueLocationIsSet() const;
  void unsetUeLocation();
  /// <summary>
  /// String with format \&quot;&lt;time-numoffset&gt;\&quot; optionally
  /// appended by \&quot;&lt;daylightSavingTime&gt;\&quot;, where -
  /// &lt;time-numoffset&gt; shall represent the time zone adjusted for daylight
  /// saving time and be encoded as time-numoffset as defined in clause 5.6 of
  /// IETF RFC 3339; - &lt;daylightSavingTime&gt; shall represent the adjustment
  /// that has been made and shall be encoded as \&quot;+1\&quot; or
  /// \&quot;+2\&quot; for a +1 or +2 hours adjustment. The example is for 8
  /// hours behind UTC, +1 hour adjustment for Daylight Saving Time.
  /// </summary>
  std::string getUeTimeZone() const;
  void setUeTimeZone(std::string const &value);
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();
  /// <summary>
  ///
  /// </summary>
  UserLocation getAddUeLocation() const;
  void setAddUeLocation(UserLocation const &value);
  bool addUeLocationIsSet() const;
  void unsetAddUeLocation();
  /// <summary>
  ///
  /// </summary>
  std::vector<SecondaryRatUsageReport> &getSecondaryRatUsageReport();
  void
  setSecondaryRatUsageReport(std::vector<SecondaryRatUsageReport> const &value);
  bool secondaryRatUsageReportIsSet() const;
  void unsetSecondaryRatUsageReport();
  /// <summary>
  ///
  /// </summary>
  std::vector<SecondaryRatUsageInfo> &getSecondaryRatUsageInfo();
  void
  setSecondaryRatUsageInfo(std::vector<SecondaryRatUsageInfo> const &value);
  bool secondaryRatUsageInfoIsSet() const;
  void unsetSecondaryRatUsageInfo();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4Info() const;
  void setN4Info(N4Information const &value);
  bool n4InfoIsSet() const;
  void unsetN4Info();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4InfoExt1() const;
  void setN4InfoExt1(N4Information const &value);
  bool n4InfoExt1IsSet() const;
  void unsetN4InfoExt1();
  /// <summary>
  ///
  /// </summary>
  N4Information getN4InfoExt2() const;
  void setN4InfoExt2(N4Information const &value);
  bool n4InfoExt2IsSet() const;
  void unsetN4InfoExt2();

  friend void to_json(nlohmann::json &j, const ReleaseData &o);
  friend void from_json(const nlohmann::json &j, ReleaseData &o);

protected:
  Cause m_Cause;
  bool m_CauseIsSet;
  NgApCause m_NgApCause;
  bool m_NgApCauseIsSet;
  int32_t m_r_5gMmCauseValue;
  bool m_r_5gMmCauseValueIsSet;
  UserLocation m_UeLocation;
  bool m_UeLocationIsSet;
  std::string m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  UserLocation m_AddUeLocation;
  bool m_AddUeLocationIsSet;
  std::vector<SecondaryRatUsageReport> m_SecondaryRatUsageReport;
  bool m_SecondaryRatUsageReportIsSet;
  std::vector<SecondaryRatUsageInfo> m_SecondaryRatUsageInfo;
  bool m_SecondaryRatUsageInfoIsSet;
  N4Information m_N4Info;
  bool m_N4InfoIsSet;
  N4Information m_N4InfoExt1;
  bool m_N4InfoExt1IsSet;
  N4Information m_N4InfoExt2;
  bool m_N4InfoExt2IsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* ReleaseData_H_ */
