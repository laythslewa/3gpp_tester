/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndirectDataForwardingTunnelInfo.h
 *
 * Indirect Data Forwarding Tunnel Information
 */

#ifndef IndirectDataForwardingTunnelInfo_H_
#define IndirectDataForwardingTunnelInfo_H_

#include "Ipv6Addr.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Indirect Data Forwarding Tunnel Information
/// </summary>
class IndirectDataForwardingTunnelInfo {
public:
  IndirectDataForwardingTunnelInfo();
  virtual ~IndirectDataForwardingTunnelInfo();

  void validate();

  /////////////////////////////////////////////
  /// IndirectDataForwardingTunnelInfo members

  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getIpv4Addr() const;
  void setIpv4Addr(std::string const &value);
  bool ipv4AddrIsSet() const;
  void unsetIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getIpv6Addr() const;
  void setIpv6Addr(Ipv6Addr const &value);
  bool ipv6AddrIsSet() const;
  void unsetIpv6Addr();
  /// <summary>
  /// GTP Tunnel Endpoint Identifier
  /// </summary>
  std::string getGtpTeid() const;
  void setGtpTeid(std::string const &value);
  /// <summary>
  /// Data Radio Bearer Identity
  /// </summary>
  int32_t getDrbId() const;
  void setDrbId(int32_t const value);
  bool drbIdIsSet() const;
  void unsetDrbId();
  /// <summary>
  /// indicates first, second or third additional indirect data forwarding
  /// tunnel
  /// </summary>
  int32_t getAdditionalTnlNb() const;
  void setAdditionalTnlNb(int32_t const value);
  bool additionalTnlNbIsSet() const;
  void unsetAdditionalTnlNb();

  friend void to_json(nlohmann::json &j,
                      const IndirectDataForwardingTunnelInfo &o);
  friend void from_json(const nlohmann::json &j,
                        IndirectDataForwardingTunnelInfo &o);

protected:
  std::string m_Ipv4Addr;
  bool m_Ipv4AddrIsSet;
  Ipv6Addr m_Ipv6Addr;
  bool m_Ipv6AddrIsSet;
  std::string m_GtpTeid;

  int32_t m_DrbId;
  bool m_DrbIdIsSet;
  int32_t m_AdditionalTnlNb;
  bool m_AdditionalTnlNbIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* IndirectDataForwardingTunnelInfo_H_ */
