/**
 * 3gpp-as-session-with-qos
 * API for setting us an AS session with required QoS. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "TscQosRequirement.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

TscQosRequirement::TscQosRequirement() {
  m_ReqGbrDl = "";
  m_ReqGbrDlIsSet = false;
  m_ReqGbrUl = "";
  m_ReqGbrUlIsSet = false;
  m_ReqMbrDl = "";
  m_ReqMbrDlIsSet = false;
  m_ReqMbrUl = "";
  m_ReqMbrUlIsSet = false;
  m_MaxTscBurstSize = 0;
  m_MaxTscBurstSizeIsSet = false;
  m_Req5Gsdelay = 0;
  m_Req5GsdelayIsSet = false;
  m_TscaiTimeDom = 0;
  m_TscaiTimeDomIsSet = false;
  m_TscaiInputDlIsSet = false;
  m_TscaiInputUlIsSet = false;
}

TscQosRequirement::~TscQosRequirement() {}

void TscQosRequirement::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const TscQosRequirement &o) {
  j = nlohmann::json();
  if (o.reqGbrDlIsSet())
    j["reqGbrDl"] = o.m_ReqGbrDl;
  if (o.reqGbrUlIsSet())
    j["reqGbrUl"] = o.m_ReqGbrUl;
  if (o.reqMbrDlIsSet())
    j["reqMbrDl"] = o.m_ReqMbrDl;
  if (o.reqMbrUlIsSet())
    j["reqMbrUl"] = o.m_ReqMbrUl;
  if (o.maxTscBurstSizeIsSet())
    j["maxTscBurstSize"] = o.m_MaxTscBurstSize;
  if (o.req5GsdelayIsSet())
    j["req5Gsdelay"] = o.m_Req5Gsdelay;
  if (o.tscaiTimeDomIsSet())
    j["tscaiTimeDom"] = o.m_TscaiTimeDom;
  if (o.tscaiInputDlIsSet())
    j["tscaiInputDl"] = o.m_TscaiInputDl;
  if (o.tscaiInputUlIsSet())
    j["tscaiInputUl"] = o.m_TscaiInputUl;
}

void from_json(const nlohmann::json &j, TscQosRequirement &o) {
  if (j.find("reqGbrDl") != j.end()) {
    j.at("reqGbrDl").get_to(o.m_ReqGbrDl);
    o.m_ReqGbrDlIsSet = true;
  }
  if (j.find("reqGbrUl") != j.end()) {
    j.at("reqGbrUl").get_to(o.m_ReqGbrUl);
    o.m_ReqGbrUlIsSet = true;
  }
  if (j.find("reqMbrDl") != j.end()) {
    j.at("reqMbrDl").get_to(o.m_ReqMbrDl);
    o.m_ReqMbrDlIsSet = true;
  }
  if (j.find("reqMbrUl") != j.end()) {
    j.at("reqMbrUl").get_to(o.m_ReqMbrUl);
    o.m_ReqMbrUlIsSet = true;
  }
  if (j.find("maxTscBurstSize") != j.end()) {
    j.at("maxTscBurstSize").get_to(o.m_MaxTscBurstSize);
    o.m_MaxTscBurstSizeIsSet = true;
  }
  if (j.find("req5Gsdelay") != j.end()) {
    j.at("req5Gsdelay").get_to(o.m_Req5Gsdelay);
    o.m_Req5GsdelayIsSet = true;
  }
  if (j.find("tscaiTimeDom") != j.end()) {
    j.at("tscaiTimeDom").get_to(o.m_TscaiTimeDom);
    o.m_TscaiTimeDomIsSet = true;
  }
  if (j.find("tscaiInputDl") != j.end()) {
    j.at("tscaiInputDl").get_to(o.m_TscaiInputDl);
    o.m_TscaiInputDlIsSet = true;
  }
  if (j.find("tscaiInputUl") != j.end()) {
    j.at("tscaiInputUl").get_to(o.m_TscaiInputUl);
    o.m_TscaiInputUlIsSet = true;
  }
}

std::string TscQosRequirement::getReqGbrDl() const { return m_ReqGbrDl; }
void TscQosRequirement::setReqGbrDl(std::string const &value) {
  m_ReqGbrDl = value;
  m_ReqGbrDlIsSet = true;
}
bool TscQosRequirement::reqGbrDlIsSet() const { return m_ReqGbrDlIsSet; }
void TscQosRequirement::unsetReqGbrDl() { m_ReqGbrDlIsSet = false; }
std::string TscQosRequirement::getReqGbrUl() const { return m_ReqGbrUl; }
void TscQosRequirement::setReqGbrUl(std::string const &value) {
  m_ReqGbrUl = value;
  m_ReqGbrUlIsSet = true;
}
bool TscQosRequirement::reqGbrUlIsSet() const { return m_ReqGbrUlIsSet; }
void TscQosRequirement::unsetReqGbrUl() { m_ReqGbrUlIsSet = false; }
std::string TscQosRequirement::getReqMbrDl() const { return m_ReqMbrDl; }
void TscQosRequirement::setReqMbrDl(std::string const &value) {
  m_ReqMbrDl = value;
  m_ReqMbrDlIsSet = true;
}
bool TscQosRequirement::reqMbrDlIsSet() const { return m_ReqMbrDlIsSet; }
void TscQosRequirement::unsetReqMbrDl() { m_ReqMbrDlIsSet = false; }
std::string TscQosRequirement::getReqMbrUl() const { return m_ReqMbrUl; }
void TscQosRequirement::setReqMbrUl(std::string const &value) {
  m_ReqMbrUl = value;
  m_ReqMbrUlIsSet = true;
}
bool TscQosRequirement::reqMbrUlIsSet() const { return m_ReqMbrUlIsSet; }
void TscQosRequirement::unsetReqMbrUl() { m_ReqMbrUlIsSet = false; }
int32_t TscQosRequirement::getMaxTscBurstSize() const {
  return m_MaxTscBurstSize;
}
void TscQosRequirement::setMaxTscBurstSize(int32_t const value) {
  m_MaxTscBurstSize = value;
  m_MaxTscBurstSizeIsSet = true;
}
bool TscQosRequirement::maxTscBurstSizeIsSet() const {
  return m_MaxTscBurstSizeIsSet;
}
void TscQosRequirement::unsetMaxTscBurstSize() {
  m_MaxTscBurstSizeIsSet = false;
}
int32_t TscQosRequirement::getReq5Gsdelay() const { return m_Req5Gsdelay; }
void TscQosRequirement::setReq5Gsdelay(int32_t const value) {
  m_Req5Gsdelay = value;
  m_Req5GsdelayIsSet = true;
}
bool TscQosRequirement::req5GsdelayIsSet() const { return m_Req5GsdelayIsSet; }
void TscQosRequirement::unsetReq5Gsdelay() { m_Req5GsdelayIsSet = false; }
int32_t TscQosRequirement::getTscaiTimeDom() const { return m_TscaiTimeDom; }
void TscQosRequirement::setTscaiTimeDom(int32_t const value) {
  m_TscaiTimeDom = value;
  m_TscaiTimeDomIsSet = true;
}
bool TscQosRequirement::tscaiTimeDomIsSet() const {
  return m_TscaiTimeDomIsSet;
}
void TscQosRequirement::unsetTscaiTimeDom() { m_TscaiTimeDomIsSet = false; }
TscaiInputContainer TscQosRequirement::getTscaiInputDl() const {
  return m_TscaiInputDl;
}
void TscQosRequirement::setTscaiInputDl(TscaiInputContainer const &value) {
  m_TscaiInputDl = value;
  m_TscaiInputDlIsSet = true;
}
bool TscQosRequirement::tscaiInputDlIsSet() const {
  return m_TscaiInputDlIsSet;
}
void TscQosRequirement::unsetTscaiInputDl() { m_TscaiInputDlIsSet = false; }
TscaiInputContainer TscQosRequirement::getTscaiInputUl() const {
  return m_TscaiInputUl;
}
void TscQosRequirement::setTscaiInputUl(TscaiInputContainer const &value) {
  m_TscaiInputUl = value;
  m_TscaiInputUlIsSet = true;
}
bool TscQosRequirement::tscaiInputUlIsSet() const {
  return m_TscaiInputUlIsSet;
}
void TscQosRequirement::unsetTscaiInputUl() { m_TscaiInputUlIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
