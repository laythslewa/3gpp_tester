/**
 * Common Data Types
 * Common Data Types for Service Based Interfaces. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.3.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NrLocationRm.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NrLocationRm::NrLocationRm() {
  m_AgeOfLocationInformation = 0;
  m_AgeOfLocationInformationIsSet = false;
  m_UeLocationTimestamp = "";
  m_UeLocationTimestampIsSet = false;
  m_GeographicalInformation = "";
  m_GeographicalInformationIsSet = false;
  m_GeodeticInformation = "";
  m_GeodeticInformationIsSet = false;
  m_GlobalGnbIdIsSet = false;
}

NrLocationRm::~NrLocationRm() {}

void NrLocationRm::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NrLocationRm &o) {
  j = nlohmann::json();
  j["tai"] = o.m_Tai;
  j["ncgi"] = o.m_Ncgi;
  if (o.ageOfLocationInformationIsSet())
    j["ageOfLocationInformation"] = o.m_AgeOfLocationInformation;
  if (o.ueLocationTimestampIsSet())
    j["ueLocationTimestamp"] = o.m_UeLocationTimestamp;
  if (o.geographicalInformationIsSet())
    j["geographicalInformation"] = o.m_GeographicalInformation;
  if (o.geodeticInformationIsSet())
    j["geodeticInformation"] = o.m_GeodeticInformation;
  if (o.globalGnbIdIsSet())
    j["globalGnbId"] = o.m_GlobalGnbId;
}

void from_json(const nlohmann::json &j, NrLocationRm &o) {
  j.at("tai").get_to(o.m_Tai);
  j.at("ncgi").get_to(o.m_Ncgi);
  if (j.find("ageOfLocationInformation") != j.end()) {
    j.at("ageOfLocationInformation").get_to(o.m_AgeOfLocationInformation);
    o.m_AgeOfLocationInformationIsSet = true;
  }
  if (j.find("ueLocationTimestamp") != j.end()) {
    j.at("ueLocationTimestamp").get_to(o.m_UeLocationTimestamp);
    o.m_UeLocationTimestampIsSet = true;
  }
  if (j.find("geographicalInformation") != j.end()) {
    j.at("geographicalInformation").get_to(o.m_GeographicalInformation);
    o.m_GeographicalInformationIsSet = true;
  }
  if (j.find("geodeticInformation") != j.end()) {
    j.at("geodeticInformation").get_to(o.m_GeodeticInformation);
    o.m_GeodeticInformationIsSet = true;
  }
  if (j.find("globalGnbId") != j.end()) {
    j.at("globalGnbId").get_to(o.m_GlobalGnbId);
    o.m_GlobalGnbIdIsSet = true;
  }
}

Tai NrLocationRm::getTai() const { return m_Tai; }
void NrLocationRm::setTai(Tai const &value) { m_Tai = value; }
Ncgi NrLocationRm::getNcgi() const { return m_Ncgi; }
void NrLocationRm::setNcgi(Ncgi const &value) { m_Ncgi = value; }
int32_t NrLocationRm::getAgeOfLocationInformation() const {
  return m_AgeOfLocationInformation;
}
void NrLocationRm::setAgeOfLocationInformation(int32_t const value) {
  m_AgeOfLocationInformation = value;
  m_AgeOfLocationInformationIsSet = true;
}
bool NrLocationRm::ageOfLocationInformationIsSet() const {
  return m_AgeOfLocationInformationIsSet;
}
void NrLocationRm::unsetAgeOfLocationInformation() {
  m_AgeOfLocationInformationIsSet = false;
}
std::string NrLocationRm::getUeLocationTimestamp() const {
  return m_UeLocationTimestamp;
}
void NrLocationRm::setUeLocationTimestamp(std::string const &value) {
  m_UeLocationTimestamp = value;
  m_UeLocationTimestampIsSet = true;
}
bool NrLocationRm::ueLocationTimestampIsSet() const {
  return m_UeLocationTimestampIsSet;
}
void NrLocationRm::unsetUeLocationTimestamp() {
  m_UeLocationTimestampIsSet = false;
}
std::string NrLocationRm::getGeographicalInformation() const {
  return m_GeographicalInformation;
}
void NrLocationRm::setGeographicalInformation(std::string const &value) {
  m_GeographicalInformation = value;
  m_GeographicalInformationIsSet = true;
}
bool NrLocationRm::geographicalInformationIsSet() const {
  return m_GeographicalInformationIsSet;
}
void NrLocationRm::unsetGeographicalInformation() {
  m_GeographicalInformationIsSet = false;
}
std::string NrLocationRm::getGeodeticInformation() const {
  return m_GeodeticInformation;
}
void NrLocationRm::setGeodeticInformation(std::string const &value) {
  m_GeodeticInformation = value;
  m_GeodeticInformationIsSet = true;
}
bool NrLocationRm::geodeticInformationIsSet() const {
  return m_GeodeticInformationIsSet;
}
void NrLocationRm::unsetGeodeticInformation() {
  m_GeodeticInformationIsSet = false;
}
GlobalRanNodeId NrLocationRm::getGlobalGnbId() const { return m_GlobalGnbId; }
void NrLocationRm::setGlobalGnbId(GlobalRanNodeId const &value) {
  m_GlobalGnbId = value;
  m_GlobalGnbIdIsSet = true;
}
bool NrLocationRm::globalGnbIdIsSet() const { return m_GlobalGnbIdIsSet; }
void NrLocationRm::unsetGlobalGnbId() { m_GlobalGnbIdIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
