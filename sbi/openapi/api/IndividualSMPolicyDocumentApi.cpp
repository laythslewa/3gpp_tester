/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualSMPolicyDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

IndividualSMPolicyDocumentApi::IndividualSMPolicyDocumentApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void IndividualSMPolicyDocumentApi::init() { setupRoutes(); }

void IndividualSMPolicyDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Post(
      *router, base + "/sm-policies/:smPolicyId/delete",
      Routes::bind(&IndividualSMPolicyDocumentApi::delete_sm_policy_handler,
                   this));
  Routes::Get(*router, base + "/sm-policies/:smPolicyId",
              Routes::bind(
                  &IndividualSMPolicyDocumentApi::get_sm_policy_handler, this));
  Routes::Post(
      *router, base + "/sm-policies/:smPolicyId/update",
      Routes::bind(&IndividualSMPolicyDocumentApi::update_sm_policy_handler,
                   this));

  // Default handler, called when a route is not found
  router->addCustomHandler(
      Routes::bind(&IndividualSMPolicyDocumentApi::
                       individual_sm_policy_document_api_default_handler,
                   this));
}

void IndividualSMPolicyDocumentApi::delete_sm_policy_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto smPolicyId = request.param(":smPolicyId").as<std::string>();

  // Getting the body param

  SmPolicyDeleteData smPolicyDeleteData;

  try {
    nlohmann::json::parse(request.body()).get_to(smPolicyDeleteData);
    this->delete_sm_policy(smPolicyId, smPolicyDeleteData, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualSMPolicyDocumentApi::get_sm_policy_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto smPolicyId = request.param(":smPolicyId").as<std::string>();

  try {
    this->get_sm_policy(smPolicyId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void IndividualSMPolicyDocumentApi::update_sm_policy_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto smPolicyId = request.param(":smPolicyId").as<std::string>();

  // Getting the body param

  SmPolicyUpdateContextData smPolicyUpdateContextData;

  try {
    nlohmann::json::parse(request.body()).get_to(smPolicyUpdateContextData);
    this->update_sm_policy(smPolicyId, smPolicyUpdateContextData, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void IndividualSMPolicyDocumentApi::
    individual_sm_policy_document_api_default_handler(
        const Pistache::Rest::Request &,
        Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
