/**
 * Npcf_EventExposure
 * PCF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PcEventNotification.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PcEventNotification::PcEventNotification() {
  m_AccTypeIsSet = false;
  m_AddAccessInfoIsSet = false;
  m_RelAccessInfoIsSet = false;
  m_AnGwAddrIsSet = false;
  m_RatTypeIsSet = false;
  m_PlmnIdIsSet = false;
  m_SatBackhaulCategoryIsSet = false;
  m_ServAreaResIsSet = false;
  m_Supi = "";
  m_SupiIsSet = false;
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_TimeStamp = "";
  m_PduSessionInfoIsSet = false;
  m_RepServicesIsSet = false;
}

PcEventNotification::~PcEventNotification() {}

void PcEventNotification::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PcEventNotification &o) {
  j = nlohmann::json();
  j["event"] = o.m_Event;
  if (o.accTypeIsSet())
    j["accType"] = o.m_AccType;
  if (o.addAccessInfoIsSet())
    j["addAccessInfo"] = o.m_AddAccessInfo;
  if (o.relAccessInfoIsSet())
    j["relAccessInfo"] = o.m_RelAccessInfo;
  if (o.anGwAddrIsSet())
    j["anGwAddr"] = o.m_AnGwAddr;
  if (o.ratTypeIsSet())
    j["ratType"] = o.m_RatType;
  if (o.plmnIdIsSet())
    j["plmnId"] = o.m_PlmnId;
  if (o.satBackhaulCategoryIsSet())
    j["satBackhaulCategory"] = o.m_SatBackhaulCategory;
  if (o.servAreaResIsSet())
    j["servAreaRes"] = o.m_ServAreaRes;
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  j["timeStamp"] = o.m_TimeStamp;
  if (o.pduSessionInfoIsSet())
    j["pduSessionInfo"] = o.m_PduSessionInfo;
  if (o.repServicesIsSet())
    j["repServices"] = o.m_RepServices;
}

void from_json(const nlohmann::json &j, PcEventNotification &o) {
  j.at("event").get_to(o.m_Event);
  if (j.find("accType") != j.end()) {
    j.at("accType").get_to(o.m_AccType);
    o.m_AccTypeIsSet = true;
  }
  if (j.find("addAccessInfo") != j.end()) {
    j.at("addAccessInfo").get_to(o.m_AddAccessInfo);
    o.m_AddAccessInfoIsSet = true;
  }
  if (j.find("relAccessInfo") != j.end()) {
    j.at("relAccessInfo").get_to(o.m_RelAccessInfo);
    o.m_RelAccessInfoIsSet = true;
  }
  if (j.find("anGwAddr") != j.end()) {
    j.at("anGwAddr").get_to(o.m_AnGwAddr);
    o.m_AnGwAddrIsSet = true;
  }
  if (j.find("ratType") != j.end()) {
    j.at("ratType").get_to(o.m_RatType);
    o.m_RatTypeIsSet = true;
  }
  if (j.find("plmnId") != j.end()) {
    j.at("plmnId").get_to(o.m_PlmnId);
    o.m_PlmnIdIsSet = true;
  }
  if (j.find("satBackhaulCategory") != j.end()) {
    j.at("satBackhaulCategory").get_to(o.m_SatBackhaulCategory);
    o.m_SatBackhaulCategoryIsSet = true;
  }
  if (j.find("servAreaRes") != j.end()) {
    j.at("servAreaRes").get_to(o.m_ServAreaRes);
    o.m_ServAreaResIsSet = true;
  }
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  j.at("timeStamp").get_to(o.m_TimeStamp);
  if (j.find("pduSessionInfo") != j.end()) {
    j.at("pduSessionInfo").get_to(o.m_PduSessionInfo);
    o.m_PduSessionInfoIsSet = true;
  }
  if (j.find("repServices") != j.end()) {
    j.at("repServices").get_to(o.m_RepServices);
    o.m_RepServicesIsSet = true;
  }
}

PcEvent PcEventNotification::getEvent() const { return m_Event; }
void PcEventNotification::setEvent(PcEvent const &value) { m_Event = value; }
AccessType PcEventNotification::getAccType() const { return m_AccType; }
void PcEventNotification::setAccType(AccessType const &value) {
  m_AccType = value;
  m_AccTypeIsSet = true;
}
bool PcEventNotification::accTypeIsSet() const { return m_AccTypeIsSet; }
void PcEventNotification::unsetAccType() { m_AccTypeIsSet = false; }
AdditionalAccessInfo PcEventNotification::getAddAccessInfo() const {
  return m_AddAccessInfo;
}
void PcEventNotification::setAddAccessInfo(AdditionalAccessInfo const &value) {
  m_AddAccessInfo = value;
  m_AddAccessInfoIsSet = true;
}
bool PcEventNotification::addAccessInfoIsSet() const {
  return m_AddAccessInfoIsSet;
}
void PcEventNotification::unsetAddAccessInfo() { m_AddAccessInfoIsSet = false; }
AdditionalAccessInfo PcEventNotification::getRelAccessInfo() const {
  return m_RelAccessInfo;
}
void PcEventNotification::setRelAccessInfo(AdditionalAccessInfo const &value) {
  m_RelAccessInfo = value;
  m_RelAccessInfoIsSet = true;
}
bool PcEventNotification::relAccessInfoIsSet() const {
  return m_RelAccessInfoIsSet;
}
void PcEventNotification::unsetRelAccessInfo() { m_RelAccessInfoIsSet = false; }
AnGwAddress PcEventNotification::getAnGwAddr() const { return m_AnGwAddr; }
void PcEventNotification::setAnGwAddr(AnGwAddress const &value) {
  m_AnGwAddr = value;
  m_AnGwAddrIsSet = true;
}
bool PcEventNotification::anGwAddrIsSet() const { return m_AnGwAddrIsSet; }
void PcEventNotification::unsetAnGwAddr() { m_AnGwAddrIsSet = false; }
RatType PcEventNotification::getRatType() const { return m_RatType; }
void PcEventNotification::setRatType(RatType const &value) {
  m_RatType = value;
  m_RatTypeIsSet = true;
}
bool PcEventNotification::ratTypeIsSet() const { return m_RatTypeIsSet; }
void PcEventNotification::unsetRatType() { m_RatTypeIsSet = false; }
PlmnIdNid PcEventNotification::getPlmnId() const { return m_PlmnId; }
void PcEventNotification::setPlmnId(PlmnIdNid const &value) {
  m_PlmnId = value;
  m_PlmnIdIsSet = true;
}
bool PcEventNotification::plmnIdIsSet() const { return m_PlmnIdIsSet; }
void PcEventNotification::unsetPlmnId() { m_PlmnIdIsSet = false; }
SatelliteBackhaulCategory PcEventNotification::getSatBackhaulCategory() const {
  return m_SatBackhaulCategory;
}
void PcEventNotification::setSatBackhaulCategory(
    SatelliteBackhaulCategory const &value) {
  m_SatBackhaulCategory = value;
  m_SatBackhaulCategoryIsSet = true;
}
bool PcEventNotification::satBackhaulCategoryIsSet() const {
  return m_SatBackhaulCategoryIsSet;
}
void PcEventNotification::unsetSatBackhaulCategory() {
  m_SatBackhaulCategoryIsSet = false;
}
ServiceAreaRestriction PcEventNotification::getServAreaRes() const {
  return m_ServAreaRes;
}
void PcEventNotification::setServAreaRes(ServiceAreaRestriction const &value) {
  m_ServAreaRes = value;
  m_ServAreaResIsSet = true;
}
bool PcEventNotification::servAreaResIsSet() const {
  return m_ServAreaResIsSet;
}
void PcEventNotification::unsetServAreaRes() { m_ServAreaResIsSet = false; }
std::string PcEventNotification::getSupi() const { return m_Supi; }
void PcEventNotification::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool PcEventNotification::supiIsSet() const { return m_SupiIsSet; }
void PcEventNotification::unsetSupi() { m_SupiIsSet = false; }
std::string PcEventNotification::getGpsi() const { return m_Gpsi; }
void PcEventNotification::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool PcEventNotification::gpsiIsSet() const { return m_GpsiIsSet; }
void PcEventNotification::unsetGpsi() { m_GpsiIsSet = false; }
std::string PcEventNotification::getTimeStamp() const { return m_TimeStamp; }
void PcEventNotification::setTimeStamp(std::string const &value) {
  m_TimeStamp = value;
}
PduSessionInformation PcEventNotification::getPduSessionInfo() const {
  return m_PduSessionInfo;
}
void PcEventNotification::setPduSessionInfo(
    PduSessionInformation const &value) {
  m_PduSessionInfo = value;
  m_PduSessionInfoIsSet = true;
}
bool PcEventNotification::pduSessionInfoIsSet() const {
  return m_PduSessionInfoIsSet;
}
void PcEventNotification::unsetPduSessionInfo() {
  m_PduSessionInfoIsSet = false;
}
ServiceIdentification PcEventNotification::getRepServices() const {
  return m_RepServices;
}
void PcEventNotification::setRepServices(ServiceIdentification const &value) {
  m_RepServices = value;
  m_RepServicesIsSet = true;
}
bool PcEventNotification::repServicesIsSet() const {
  return m_RepServicesIsSet;
}
void PcEventNotification::unsetRepServices() { m_RepServicesIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
