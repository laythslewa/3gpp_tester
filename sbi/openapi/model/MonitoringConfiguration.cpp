/**
 * Nhss_EE
 * HSS Event Exposure Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MonitoringConfiguration.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

MonitoringConfiguration::MonitoringConfiguration() {
  m_ImmediateFlag = false;
  m_ImmediateFlagIsSet = false;
  m_LocationReportingConfigurationIsSet = false;
  m_LossConnectivityConfigurationIsSet = false;
  m_ReachabilityForDataConfigurationIsSet = false;
  m_PduSessionStatusCfgIsSet = false;
}

MonitoringConfiguration::~MonitoringConfiguration() {}

void MonitoringConfiguration::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const MonitoringConfiguration &o) {
  j = nlohmann::json();
  j["eventType"] = o.m_EventType;
  if (o.immediateFlagIsSet())
    j["immediateFlag"] = o.m_ImmediateFlag;
  if (o.locationReportingConfigurationIsSet())
    j["locationReportingConfiguration"] = o.m_LocationReportingConfiguration;
  if (o.lossConnectivityConfigurationIsSet())
    j["lossConnectivityConfiguration"] = o.m_LossConnectivityConfiguration;
  if (o.reachabilityForDataConfigurationIsSet())
    j["reachabilityForDataConfiguration"] =
        o.m_ReachabilityForDataConfiguration;
  if (o.pduSessionStatusCfgIsSet())
    j["pduSessionStatusCfg"] = o.m_PduSessionStatusCfg;
}

void from_json(const nlohmann::json &j, MonitoringConfiguration &o) {
  j.at("eventType").get_to(o.m_EventType);
  if (j.find("immediateFlag") != j.end()) {
    j.at("immediateFlag").get_to(o.m_ImmediateFlag);
    o.m_ImmediateFlagIsSet = true;
  }
  if (j.find("locationReportingConfiguration") != j.end()) {
    j.at("locationReportingConfiguration")
        .get_to(o.m_LocationReportingConfiguration);
    o.m_LocationReportingConfigurationIsSet = true;
  }
  if (j.find("lossConnectivityConfiguration") != j.end()) {
    j.at("lossConnectivityConfiguration")
        .get_to(o.m_LossConnectivityConfiguration);
    o.m_LossConnectivityConfigurationIsSet = true;
  }
  if (j.find("reachabilityForDataConfiguration") != j.end()) {
    j.at("reachabilityForDataConfiguration")
        .get_to(o.m_ReachabilityForDataConfiguration);
    o.m_ReachabilityForDataConfigurationIsSet = true;
  }
  if (j.find("pduSessionStatusCfg") != j.end()) {
    j.at("pduSessionStatusCfg").get_to(o.m_PduSessionStatusCfg);
    o.m_PduSessionStatusCfgIsSet = true;
  }
}

EventType MonitoringConfiguration::getEventType() const { return m_EventType; }
void MonitoringConfiguration::setEventType(EventType const &value) {
  m_EventType = value;
}
bool MonitoringConfiguration::isImmediateFlag() const {
  return m_ImmediateFlag;
}
void MonitoringConfiguration::setImmediateFlag(bool const value) {
  m_ImmediateFlag = value;
  m_ImmediateFlagIsSet = true;
}
bool MonitoringConfiguration::immediateFlagIsSet() const {
  return m_ImmediateFlagIsSet;
}
void MonitoringConfiguration::unsetImmediateFlag() {
  m_ImmediateFlagIsSet = false;
}
LocationReportingConfiguration
MonitoringConfiguration::getLocationReportingConfiguration() const {
  return m_LocationReportingConfiguration;
}
void MonitoringConfiguration::setLocationReportingConfiguration(
    LocationReportingConfiguration const &value) {
  m_LocationReportingConfiguration = value;
  m_LocationReportingConfigurationIsSet = true;
}
bool MonitoringConfiguration::locationReportingConfigurationIsSet() const {
  return m_LocationReportingConfigurationIsSet;
}
void MonitoringConfiguration::unsetLocationReportingConfiguration() {
  m_LocationReportingConfigurationIsSet = false;
}
LossConnectivityConfiguration
MonitoringConfiguration::getLossConnectivityConfiguration() const {
  return m_LossConnectivityConfiguration;
}
void MonitoringConfiguration::setLossConnectivityConfiguration(
    LossConnectivityConfiguration const &value) {
  m_LossConnectivityConfiguration = value;
  m_LossConnectivityConfigurationIsSet = true;
}
bool MonitoringConfiguration::lossConnectivityConfigurationIsSet() const {
  return m_LossConnectivityConfigurationIsSet;
}
void MonitoringConfiguration::unsetLossConnectivityConfiguration() {
  m_LossConnectivityConfigurationIsSet = false;
}
ReachabilityForDataConfiguration
MonitoringConfiguration::getReachabilityForDataConfiguration() const {
  return m_ReachabilityForDataConfiguration;
}
void MonitoringConfiguration::setReachabilityForDataConfiguration(
    ReachabilityForDataConfiguration const &value) {
  m_ReachabilityForDataConfiguration = value;
  m_ReachabilityForDataConfigurationIsSet = true;
}
bool MonitoringConfiguration::reachabilityForDataConfigurationIsSet() const {
  return m_ReachabilityForDataConfigurationIsSet;
}
void MonitoringConfiguration::unsetReachabilityForDataConfiguration() {
  m_ReachabilityForDataConfigurationIsSet = false;
}
PduSessionStatusCfg MonitoringConfiguration::getPduSessionStatusCfg() const {
  return m_PduSessionStatusCfg;
}
void MonitoringConfiguration::setPduSessionStatusCfg(
    PduSessionStatusCfg const &value) {
  m_PduSessionStatusCfg = value;
  m_PduSessionStatusCfgIsSet = true;
}
bool MonitoringConfiguration::pduSessionStatusCfgIsSet() const {
  return m_PduSessionStatusCfgIsSet;
}
void MonitoringConfiguration::unsetPduSessionStatusCfg() {
  m_PduSessionStatusCfgIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
