/**
 * 3gpp-cp-parameter-provisioning
 * API for provisioning communication pattern parameters. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CpParameterSet.h
 *
 * Represents an offered communication pattern parameter set.
 */

#ifndef CpParameterSet_H_
#define CpParameterSet_H_

#include "BatteryIndication.h"
#include "CommunicationIndicator.h"
#include "ScheduledCommunicationTime.h"
#include "ScheduledCommunicationType.h"
#include "StationaryIndication.h"
#include "TrafficProfile.h"
#include "UmtLocationArea5G.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents an offered communication pattern parameter set.
/// </summary>
class CpParameterSet {
public:
  CpParameterSet();
  virtual ~CpParameterSet();

  void validate();

  /////////////////////////////////////////////
  /// CpParameterSet members

  /// <summary>
  /// SCS/AS-chosen correlator provided by the SCS/AS in the request to create a
  /// resource fo CP parameter set(s).
  /// </summary>
  std::string getSetId() const;
  void setSetId(std::string const &value);
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const &value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getValidityTime() const;
  void setValidityTime(std::string const &value);
  bool validityTimeIsSet() const;
  void unsetValidityTime();
  /// <summary>
  ///
  /// </summary>
  CommunicationIndicator getPeriodicCommunicationIndicator() const;
  void setPeriodicCommunicationIndicator(CommunicationIndicator const &value);
  bool periodicCommunicationIndicatorIsSet() const;
  void unsetPeriodicCommunicationIndicator();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getCommunicationDurationTime() const;
  void setCommunicationDurationTime(int32_t const value);
  bool communicationDurationTimeIsSet() const;
  void unsetCommunicationDurationTime();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getPeriodicTime() const;
  void setPeriodicTime(int32_t const value);
  bool periodicTimeIsSet() const;
  void unsetPeriodicTime();
  /// <summary>
  ///
  /// </summary>
  ScheduledCommunicationTime getScheduledCommunicationTime() const;
  void setScheduledCommunicationTime(ScheduledCommunicationTime const &value);
  bool scheduledCommunicationTimeIsSet() const;
  void unsetScheduledCommunicationTime();
  /// <summary>
  ///
  /// </summary>
  ScheduledCommunicationType getScheduledCommunicationType() const;
  void setScheduledCommunicationType(ScheduledCommunicationType const &value);
  bool scheduledCommunicationTypeIsSet() const;
  void unsetScheduledCommunicationType();
  /// <summary>
  ///
  /// </summary>
  StationaryIndication getStationaryIndication() const;
  void setStationaryIndication(StationaryIndication const &value);
  bool stationaryIndicationIsSet() const;
  void unsetStationaryIndication();
  /// <summary>
  ///
  /// </summary>
  std::vector<BatteryIndication> &getBatteryInds();
  void setBatteryInds(std::vector<BatteryIndication> const &value);
  bool batteryIndsIsSet() const;
  void unsetBatteryInds();
  /// <summary>
  ///
  /// </summary>
  TrafficProfile getTrafficProfile() const;
  void setTrafficProfile(TrafficProfile const &value);
  bool trafficProfileIsSet() const;
  void unsetTrafficProfile();
  /// <summary>
  /// Identifies the UE&#39;s expected geographical movement. The attribute is
  /// only applicable in 5G.
  /// </summary>
  std::vector<UmtLocationArea5G> &getExpectedUmts();
  void setExpectedUmts(std::vector<UmtLocationArea5G> const &value);
  bool expectedUmtsIsSet() const;
  void unsetExpectedUmts();
  /// <summary>
  /// integer between and including 1 and 7 denoting a weekday. 1 shall indicate
  /// Monday, and the subsequent weekdays shall be indicated with the next
  /// higher numbers. 7 shall indicate Sunday.
  /// </summary>
  int32_t getExpectedUmtDays() const;
  void setExpectedUmtDays(int32_t const value);
  bool expectedUmtDaysIsSet() const;
  void unsetExpectedUmtDays();

  friend void to_json(nlohmann::json &j, const CpParameterSet &o);
  friend void from_json(const nlohmann::json &j, CpParameterSet &o);

protected:
  std::string m_SetId;

  std::string m_Self;
  bool m_SelfIsSet;
  std::string m_ValidityTime;
  bool m_ValidityTimeIsSet;
  CommunicationIndicator m_PeriodicCommunicationIndicator;
  bool m_PeriodicCommunicationIndicatorIsSet;
  int32_t m_CommunicationDurationTime;
  bool m_CommunicationDurationTimeIsSet;
  int32_t m_PeriodicTime;
  bool m_PeriodicTimeIsSet;
  ScheduledCommunicationTime m_ScheduledCommunicationTime;
  bool m_ScheduledCommunicationTimeIsSet;
  ScheduledCommunicationType m_ScheduledCommunicationType;
  bool m_ScheduledCommunicationTypeIsSet;
  StationaryIndication m_StationaryIndication;
  bool m_StationaryIndicationIsSet;
  std::vector<BatteryIndication> m_BatteryInds;
  bool m_BatteryIndsIsSet;
  TrafficProfile m_TrafficProfile;
  bool m_TrafficProfileIsSet;
  std::vector<UmtLocationArea5G> m_ExpectedUmts;
  bool m_ExpectedUmtsIsSet;
  int32_t m_ExpectedUmtDays;
  bool m_ExpectedUmtDaysIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* CpParameterSet_H_ */
