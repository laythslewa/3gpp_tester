/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeInitiatedResourceRequest.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

UeInitiatedResourceRequest::UeInitiatedResourceRequest() {
  m_PccRuleId = "";
  m_PccRuleIdIsSet = false;
  m_Precedence = 0;
  m_PrecedenceIsSet = false;
  m_ReqQosIsSet = false;
}

UeInitiatedResourceRequest::~UeInitiatedResourceRequest() {}

void UeInitiatedResourceRequest::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UeInitiatedResourceRequest &o) {
  j = nlohmann::json();
  if (o.pccRuleIdIsSet())
    j["pccRuleId"] = o.m_PccRuleId;
  j["ruleOp"] = o.m_RuleOp;
  if (o.precedenceIsSet())
    j["precedence"] = o.m_Precedence;
  j["packFiltInfo"] = o.m_PackFiltInfo;
  if (o.reqQosIsSet())
    j["reqQos"] = o.m_ReqQos;
}

void from_json(const nlohmann::json &j, UeInitiatedResourceRequest &o) {
  if (j.find("pccRuleId") != j.end()) {
    j.at("pccRuleId").get_to(o.m_PccRuleId);
    o.m_PccRuleIdIsSet = true;
  }
  j.at("ruleOp").get_to(o.m_RuleOp);
  if (j.find("precedence") != j.end()) {
    j.at("precedence").get_to(o.m_Precedence);
    o.m_PrecedenceIsSet = true;
  }
  j.at("packFiltInfo").get_to(o.m_PackFiltInfo);
  if (j.find("reqQos") != j.end()) {
    j.at("reqQos").get_to(o.m_ReqQos);
    o.m_ReqQosIsSet = true;
  }
}

std::string UeInitiatedResourceRequest::getPccRuleId() const {
  return m_PccRuleId;
}
void UeInitiatedResourceRequest::setPccRuleId(std::string const &value) {
  m_PccRuleId = value;
  m_PccRuleIdIsSet = true;
}
bool UeInitiatedResourceRequest::pccRuleIdIsSet() const {
  return m_PccRuleIdIsSet;
}
void UeInitiatedResourceRequest::unsetPccRuleId() { m_PccRuleIdIsSet = false; }
RuleOperation UeInitiatedResourceRequest::getRuleOp() const { return m_RuleOp; }
void UeInitiatedResourceRequest::setRuleOp(RuleOperation const &value) {
  m_RuleOp = value;
}
int32_t UeInitiatedResourceRequest::getPrecedence() const {
  return m_Precedence;
}
void UeInitiatedResourceRequest::setPrecedence(int32_t const value) {
  m_Precedence = value;
  m_PrecedenceIsSet = true;
}
bool UeInitiatedResourceRequest::precedenceIsSet() const {
  return m_PrecedenceIsSet;
}
void UeInitiatedResourceRequest::unsetPrecedence() {
  m_PrecedenceIsSet = false;
}
std::vector<PacketFilterInfo> &UeInitiatedResourceRequest::getPackFiltInfo() {
  return m_PackFiltInfo;
}
void UeInitiatedResourceRequest::setPackFiltInfo(
    std::vector<PacketFilterInfo> const &value) {
  m_PackFiltInfo = value;
}
RequestedQos UeInitiatedResourceRequest::getReqQos() const { return m_ReqQos; }
void UeInitiatedResourceRequest::setReqQos(RequestedQos const &value) {
  m_ReqQos = value;
  m_ReqQosIsSet = true;
}
bool UeInitiatedResourceRequest::reqQosIsSet() const { return m_ReqQosIsSet; }
void UeInitiatedResourceRequest::unsetReqQos() { m_ReqQosIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
