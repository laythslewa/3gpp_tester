/**
 * Nucmf_Provisioning
 * UCMF_Provisioning Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * RacsFailureReport.h
 *
 * Represents a radio capability data provisioning failure report.
 */

#ifndef RacsFailureReport_H_
#define RacsFailureReport_H_

#include "RacsFailureCode.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Represents a radio capability data provisioning failure report.
/// </summary>
class RacsFailureReport {
public:
  RacsFailureReport();
  virtual ~RacsFailureReport();

  void validate();

  /////////////////////////////////////////////
  /// RacsFailureReport members

  /// <summary>
  /// Identifies the RACS ID(s) for which the RACS data are not provisioned
  /// successfully.
  /// </summary>
  std::vector<std::string> &getRacsIds();
  void setRacsIds(std::vector<std::string> const &value);
  /// <summary>
  ///
  /// </summary>
  RacsFailureCode getFailureCode() const;
  void setFailureCode(RacsFailureCode const &value);

  friend void to_json(nlohmann::json &j, const RacsFailureReport &o);
  friend void from_json(const nlohmann::json &j, RacsFailureReport &o);

protected:
  std::vector<std::string> m_RacsIds;

  RacsFailureCode m_FailureCode;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* RacsFailureReport_H_ */
