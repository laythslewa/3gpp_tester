/**
 * Nudm_UEAU
 * UDM UE Authentication Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * GetAuthDataForFNRGApi.h
 *
 *
 */

#ifndef GetAuthDataForFNRGApi_H_
#define GetAuthDataForFNRGApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "PlmnId.h"
#include "ProblemDetails.h"
#include "RgAuthCtx.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class GetAuthDataForFNRGApi {
public:
  GetAuthDataForFNRGApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~GetAuthDataForFNRGApi() {}
  void init();

  const std::string base = "/nudm-ueau/v1";

private:
  void setupRoutes();

  void get_rg_auth_data_handler(const Pistache::Rest::Request &request,
                                Pistache::Http::ResponseWriter response);
  void get_auth_data_for_fnrg_api_default_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Get authentication data for the FN-RG
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="supiOrSuci">SUPI or SUCI of the user</param>
  /// <param name="authenticatedInd">Authenticated indication</param>
  /// <param name="supportedFeatures">Supported Features (optional, default to
  /// &quot;&quot;)</param> <param name="plmnId">serving PLMN ID (optional,
  /// default to PlmnId())</param> <param name="ifNoneMatch">Validator for
  /// conditional requests, as described in RFC 7232, 3.2 (optional, default to
  /// &quot;&quot;)</param> <param name="ifModifiedSince">Validator for
  /// conditional requests, as described in RFC 7232, 3.3 (optional, default to
  /// &quot;&quot;)</param>
  virtual void get_rg_auth_data(
      const std::string &supiOrSuci,
      const Pistache::Optional<bool> &authenticatedInd,
      const Pistache::Optional<std::string> &supportedFeatures,
      const Pistache::Optional<PlmnId> &plmnId,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifNoneMatch,
      const Pistache::Optional<Pistache::Http::Header::Raw> &ifModifiedSince,
      Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* GetAuthDataForFNRGApi_H_ */
