/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SdmSubscription.h
 *
 *
 */

#ifndef SdmSubscription_H_
#define SdmSubscription_H_

#include "ContextInfo.h"
#include "PlmnId.h"
#include "ServiceName.h"
#include "Snssai.h"
#include "SubscriptionDataSets.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class SdmSubscription {
public:
  SdmSubscription();
  virtual ~SdmSubscription();

  void validate();

  /////////////////////////////////////////////
  /// SdmSubscription members

  /// <summary>
  /// String uniquely identifying a NF instance. The format of the NF Instance
  /// ID shall be a Universally Unique Identifier (UUID) version 4, as described
  /// in IETF RFC 4122.
  /// </summary>
  std::string getNfInstanceId() const;
  void setNfInstanceId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  bool isImplicitUnsubscribe() const;
  void setImplicitUnsubscribe(bool const value);
  bool implicitUnsubscribeIsSet() const;
  void unsetImplicitUnsubscribe();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getExpires() const;
  void setExpires(std::string const &value);
  bool expiresIsSet() const;
  void unsetExpires();
  /// <summary>
  /// String providing an URI formatted according to RFC 3986
  /// </summary>
  std::string getCallbackReference() const;
  void setCallbackReference(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  ServiceName getAmfServiceName() const;
  void setAmfServiceName(ServiceName const &value);
  bool amfServiceNameIsSet() const;
  void unsetAmfServiceName();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getMonitoredResourceUris();
  void setMonitoredResourceUris(std::vector<std::string> const &value);
  /// <summary>
  ///
  /// </summary>
  Snssai getSingleNssai() const;
  void setSingleNssai(Snssai const &value);
  bool singleNssaiIsSet() const;
  void unsetSingleNssai();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  std::string getSubscriptionId() const;
  void setSubscriptionId(std::string const &value);
  bool subscriptionIdIsSet() const;
  void unsetSubscriptionId();
  /// <summary>
  ///
  /// </summary>
  PlmnId getPlmnId() const;
  void setPlmnId(PlmnId const &value);
  bool plmnIdIsSet() const;
  void unsetPlmnId();
  /// <summary>
  ///
  /// </summary>
  bool isImmediateReport() const;
  void setImmediateReport(bool const value);
  bool immediateReportIsSet() const;
  void unsetImmediateReport();
  /// <summary>
  ///
  /// </summary>
  SubscriptionDataSets getReport() const;
  void setReport(SubscriptionDataSets const &value);
  bool reportIsSet() const;
  void unsetReport();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  ContextInfo getContextInfo() const;
  void setContextInfo(ContextInfo const &value);
  bool contextInfoIsSet() const;
  void unsetContextInfo();

  friend void to_json(nlohmann::json &j, const SdmSubscription &o);
  friend void from_json(const nlohmann::json &j, SdmSubscription &o);

protected:
  std::string m_NfInstanceId;

  bool m_ImplicitUnsubscribe;
  bool m_ImplicitUnsubscribeIsSet;
  std::string m_Expires;
  bool m_ExpiresIsSet;
  std::string m_CallbackReference;

  ServiceName m_AmfServiceName;
  bool m_AmfServiceNameIsSet;
  std::vector<std::string> m_MonitoredResourceUris;

  Snssai m_SingleNssai;
  bool m_SingleNssaiIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  std::string m_SubscriptionId;
  bool m_SubscriptionIdIsSet;
  PlmnId m_PlmnId;
  bool m_PlmnIdIsSet;
  bool m_ImmediateReport;
  bool m_ImmediateReportIsSet;
  SubscriptionDataSets m_Report;
  bool m_ReportIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  ContextInfo m_ContextInfo;
  bool m_ContextInfoIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* SdmSubscription_H_ */
