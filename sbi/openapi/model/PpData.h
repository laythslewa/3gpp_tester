/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PpData.h
 *
 *
 */

#ifndef PpData_H_
#define PpData_H_

#include "AcsInfoRm.h"
#include "CommunicationCharacteristics.h"
#include "EcRestriction.h"
#include "EcsServerAddr.h"
#include "ExpectedUeBehaviour.h"
#include "LcsPrivacy.h"
#include "SorInfo.h"
#include <nlohmann/json.hpp>
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class PpData {
public:
  PpData();
  virtual ~PpData();

  void validate();

  /////////////////////////////////////////////
  /// PpData members

  /// <summary>
  ///
  /// </summary>
  CommunicationCharacteristics getCommunicationCharacteristics() const;
  void
  setCommunicationCharacteristics(CommunicationCharacteristics const &value);
  bool communicationCharacteristicsIsSet() const;
  void unsetCommunicationCharacteristics();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  ExpectedUeBehaviour getExpectedUeBehaviourParameters() const;
  void setExpectedUeBehaviourParameters(ExpectedUeBehaviour const &value);
  bool expectedUeBehaviourParametersIsSet() const;
  void unsetExpectedUeBehaviourParameters();
  /// <summary>
  ///
  /// </summary>
  EcRestriction getEcRestriction() const;
  void setEcRestriction(EcRestriction const &value);
  bool ecRestrictionIsSet() const;
  void unsetEcRestriction();
  /// <summary>
  ///
  /// </summary>
  AcsInfoRm getAcsInfo() const;
  void setAcsInfo(AcsInfoRm const &value);
  bool acsInfoIsSet() const;
  void unsetAcsInfo();
  /// <summary>
  /// String representing the STN-SR as defined in clause 18.6 of 3GPP TS 23.003
  /// with the OpenAPI \&quot;nullable&#x3D; true\&quot; property.
  /// </summary>
  std::string getStnSr() const;
  void setStnSr(std::string const &value);
  bool stnSrIsSet() const;
  void unsetStnSr();
  /// <summary>
  ///
  /// </summary>
  LcsPrivacy getLcsPrivacy() const;
  void setLcsPrivacy(LcsPrivacy const &value);
  bool lcsPrivacyIsSet() const;
  void unsetLcsPrivacy();
  /// <summary>
  ///
  /// </summary>
  SorInfo getSorInfo() const;
  void setSorInfo(SorInfo const &value);
  bool sorInfoIsSet() const;
  void unsetSorInfo();
  /// <summary>
  ///
  /// </summary>
  EcsServerAddr getEcsServerAddr() const;
  void setEcsServerAddr(EcsServerAddr const &value);
  bool ecsServerAddrIsSet() const;
  void unsetEcsServerAddr();

  friend void to_json(nlohmann::json &j, const PpData &o);
  friend void from_json(const nlohmann::json &j, PpData &o);

protected:
  CommunicationCharacteristics m_CommunicationCharacteristics;
  bool m_CommunicationCharacteristicsIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  ExpectedUeBehaviour m_ExpectedUeBehaviourParameters;
  bool m_ExpectedUeBehaviourParametersIsSet;
  EcRestriction m_EcRestriction;
  bool m_EcRestrictionIsSet;
  AcsInfoRm m_AcsInfo;
  bool m_AcsInfoIsSet;
  std::string m_StnSr;
  bool m_StnSrIsSet;
  LcsPrivacy m_LcsPrivacy;
  bool m_LcsPrivacyIsSet;
  SorInfo m_SorInfo;
  bool m_SorInfoIsSet;
  EcsServerAddr m_EcsServerAddr;
  bool m_EcsServerAddrIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PpData_H_ */
