/**
 * Nucmf_UECapabilityManagement
 * Nucmf_UECapabilityManagement Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DicEntryCreateData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

DicEntryCreateData::DicEntryCreateData() {
  m_TypeAllocationCode = "";
  m_UeRadioCapability5GSIsSet = false;
  m_UeRadioCapabilityEPSIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

DicEntryCreateData::~DicEntryCreateData() {}

void DicEntryCreateData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const DicEntryCreateData &o) {
  j = nlohmann::json();
  j["typeAllocationCode"] = o.m_TypeAllocationCode;
  if (o.ueRadioCapability5GSIsSet())
    j["ueRadioCapability5GS"] = o.m_UeRadioCapability5GS;
  if (o.ueRadioCapabilityEPSIsSet())
    j["ueRadioCapabilityEPS"] = o.m_UeRadioCapabilityEPS;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, DicEntryCreateData &o) {
  j.at("typeAllocationCode").get_to(o.m_TypeAllocationCode);
  if (j.find("ueRadioCapability5GS") != j.end()) {
    j.at("ueRadioCapability5GS").get_to(o.m_UeRadioCapability5GS);
    o.m_UeRadioCapability5GSIsSet = true;
  }
  if (j.find("ueRadioCapabilityEPS") != j.end()) {
    j.at("ueRadioCapabilityEPS").get_to(o.m_UeRadioCapabilityEPS);
    o.m_UeRadioCapabilityEPSIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

std::string DicEntryCreateData::getTypeAllocationCode() const {
  return m_TypeAllocationCode;
}
void DicEntryCreateData::setTypeAllocationCode(std::string const &value) {
  m_TypeAllocationCode = value;
}
RefToBinaryData DicEntryCreateData::getUeRadioCapability5GS() const {
  return m_UeRadioCapability5GS;
}
void DicEntryCreateData::setUeRadioCapability5GS(RefToBinaryData const &value) {
  m_UeRadioCapability5GS = value;
  m_UeRadioCapability5GSIsSet = true;
}
bool DicEntryCreateData::ueRadioCapability5GSIsSet() const {
  return m_UeRadioCapability5GSIsSet;
}
void DicEntryCreateData::unsetUeRadioCapability5GS() {
  m_UeRadioCapability5GSIsSet = false;
}
RefToBinaryData DicEntryCreateData::getUeRadioCapabilityEPS() const {
  return m_UeRadioCapabilityEPS;
}
void DicEntryCreateData::setUeRadioCapabilityEPS(RefToBinaryData const &value) {
  m_UeRadioCapabilityEPS = value;
  m_UeRadioCapabilityEPSIsSet = true;
}
bool DicEntryCreateData::ueRadioCapabilityEPSIsSet() const {
  return m_UeRadioCapabilityEPSIsSet;
}
void DicEntryCreateData::unsetUeRadioCapabilityEPS() {
  m_UeRadioCapabilityEPSIsSet = false;
}
std::string DicEntryCreateData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void DicEntryCreateData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool DicEntryCreateData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void DicEntryCreateData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
