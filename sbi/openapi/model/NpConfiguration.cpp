/**
 * 3gpp-network-parameter-configuration
 * API for network parameter configuration. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NpConfiguration.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NpConfiguration::NpConfiguration() {
  m_Self = "";
  m_SelfIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_MtcProviderId = "";
  m_MtcProviderIdIsSet = false;
  m_ExternalId = "";
  m_ExternalIdIsSet = false;
  m_Msisdn = "";
  m_MsisdnIsSet = false;
  m_ExternalGroupId = "";
  m_ExternalGroupIdIsSet = false;
  m_MaximumLatency = 0;
  m_MaximumLatencyIsSet = false;
  m_MaximumResponseTime = 0;
  m_MaximumResponseTimeIsSet = false;
  m_SuggestedNumberOfDlPackets = 0;
  m_SuggestedNumberOfDlPacketsIsSet = false;
  m_GroupReportingGuardTime = 0;
  m_GroupReportingGuardTimeIsSet = false;
  m_NotificationDestination = "";
  m_NotificationDestinationIsSet = false;
  m_RequestTestNotification = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet = false;
  m_ValidityTime = "";
  m_ValidityTimeIsSet = false;
}

NpConfiguration::~NpConfiguration() {}

void NpConfiguration::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NpConfiguration &o) {
  j = nlohmann::json();
  if (o.selfIsSet())
    j["self"] = o.m_Self;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.mtcProviderIdIsSet())
    j["mtcProviderId"] = o.m_MtcProviderId;
  if (o.externalIdIsSet())
    j["externalId"] = o.m_ExternalId;
  if (o.msisdnIsSet())
    j["msisdn"] = o.m_Msisdn;
  if (o.externalGroupIdIsSet())
    j["externalGroupId"] = o.m_ExternalGroupId;
  if (o.maximumLatencyIsSet())
    j["maximumLatency"] = o.m_MaximumLatency;
  if (o.maximumResponseTimeIsSet())
    j["maximumResponseTime"] = o.m_MaximumResponseTime;
  if (o.suggestedNumberOfDlPacketsIsSet())
    j["suggestedNumberOfDlPackets"] = o.m_SuggestedNumberOfDlPackets;
  if (o.groupReportingGuardTimeIsSet())
    j["groupReportingGuardTime"] = o.m_GroupReportingGuardTime;
  if (o.notificationDestinationIsSet())
    j["notificationDestination"] = o.m_NotificationDestination;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  if (o.validityTimeIsSet())
    j["validityTime"] = o.m_ValidityTime;
}

void from_json(const nlohmann::json &j, NpConfiguration &o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("mtcProviderId") != j.end()) {
    j.at("mtcProviderId").get_to(o.m_MtcProviderId);
    o.m_MtcProviderIdIsSet = true;
  }
  if (j.find("externalId") != j.end()) {
    j.at("externalId").get_to(o.m_ExternalId);
    o.m_ExternalIdIsSet = true;
  }
  if (j.find("msisdn") != j.end()) {
    j.at("msisdn").get_to(o.m_Msisdn);
    o.m_MsisdnIsSet = true;
  }
  if (j.find("externalGroupId") != j.end()) {
    j.at("externalGroupId").get_to(o.m_ExternalGroupId);
    o.m_ExternalGroupIdIsSet = true;
  }
  if (j.find("maximumLatency") != j.end()) {
    j.at("maximumLatency").get_to(o.m_MaximumLatency);
    o.m_MaximumLatencyIsSet = true;
  }
  if (j.find("maximumResponseTime") != j.end()) {
    j.at("maximumResponseTime").get_to(o.m_MaximumResponseTime);
    o.m_MaximumResponseTimeIsSet = true;
  }
  if (j.find("suggestedNumberOfDlPackets") != j.end()) {
    j.at("suggestedNumberOfDlPackets").get_to(o.m_SuggestedNumberOfDlPackets);
    o.m_SuggestedNumberOfDlPacketsIsSet = true;
  }
  if (j.find("groupReportingGuardTime") != j.end()) {
    j.at("groupReportingGuardTime").get_to(o.m_GroupReportingGuardTime);
    o.m_GroupReportingGuardTimeIsSet = true;
  }
  if (j.find("notificationDestination") != j.end()) {
    j.at("notificationDestination").get_to(o.m_NotificationDestination);
    o.m_NotificationDestinationIsSet = true;
  }
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  if (j.find("validityTime") != j.end()) {
    j.at("validityTime").get_to(o.m_ValidityTime);
    o.m_ValidityTimeIsSet = true;
  }
}

std::string NpConfiguration::getSelf() const { return m_Self; }
void NpConfiguration::setSelf(std::string const &value) {
  m_Self = value;
  m_SelfIsSet = true;
}
bool NpConfiguration::selfIsSet() const { return m_SelfIsSet; }
void NpConfiguration::unsetSelf() { m_SelfIsSet = false; }
std::string NpConfiguration::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void NpConfiguration::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool NpConfiguration::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void NpConfiguration::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::string NpConfiguration::getMtcProviderId() const {
  return m_MtcProviderId;
}
void NpConfiguration::setMtcProviderId(std::string const &value) {
  m_MtcProviderId = value;
  m_MtcProviderIdIsSet = true;
}
bool NpConfiguration::mtcProviderIdIsSet() const {
  return m_MtcProviderIdIsSet;
}
void NpConfiguration::unsetMtcProviderId() { m_MtcProviderIdIsSet = false; }
std::string NpConfiguration::getExternalId() const { return m_ExternalId; }
void NpConfiguration::setExternalId(std::string const &value) {
  m_ExternalId = value;
  m_ExternalIdIsSet = true;
}
bool NpConfiguration::externalIdIsSet() const { return m_ExternalIdIsSet; }
void NpConfiguration::unsetExternalId() { m_ExternalIdIsSet = false; }
std::string NpConfiguration::getMsisdn() const { return m_Msisdn; }
void NpConfiguration::setMsisdn(std::string const &value) {
  m_Msisdn = value;
  m_MsisdnIsSet = true;
}
bool NpConfiguration::msisdnIsSet() const { return m_MsisdnIsSet; }
void NpConfiguration::unsetMsisdn() { m_MsisdnIsSet = false; }
std::string NpConfiguration::getExternalGroupId() const {
  return m_ExternalGroupId;
}
void NpConfiguration::setExternalGroupId(std::string const &value) {
  m_ExternalGroupId = value;
  m_ExternalGroupIdIsSet = true;
}
bool NpConfiguration::externalGroupIdIsSet() const {
  return m_ExternalGroupIdIsSet;
}
void NpConfiguration::unsetExternalGroupId() { m_ExternalGroupIdIsSet = false; }
int32_t NpConfiguration::getMaximumLatency() const { return m_MaximumLatency; }
void NpConfiguration::setMaximumLatency(int32_t const value) {
  m_MaximumLatency = value;
  m_MaximumLatencyIsSet = true;
}
bool NpConfiguration::maximumLatencyIsSet() const {
  return m_MaximumLatencyIsSet;
}
void NpConfiguration::unsetMaximumLatency() { m_MaximumLatencyIsSet = false; }
int32_t NpConfiguration::getMaximumResponseTime() const {
  return m_MaximumResponseTime;
}
void NpConfiguration::setMaximumResponseTime(int32_t const value) {
  m_MaximumResponseTime = value;
  m_MaximumResponseTimeIsSet = true;
}
bool NpConfiguration::maximumResponseTimeIsSet() const {
  return m_MaximumResponseTimeIsSet;
}
void NpConfiguration::unsetMaximumResponseTime() {
  m_MaximumResponseTimeIsSet = false;
}
int32_t NpConfiguration::getSuggestedNumberOfDlPackets() const {
  return m_SuggestedNumberOfDlPackets;
}
void NpConfiguration::setSuggestedNumberOfDlPackets(int32_t const value) {
  m_SuggestedNumberOfDlPackets = value;
  m_SuggestedNumberOfDlPacketsIsSet = true;
}
bool NpConfiguration::suggestedNumberOfDlPacketsIsSet() const {
  return m_SuggestedNumberOfDlPacketsIsSet;
}
void NpConfiguration::unsetSuggestedNumberOfDlPackets() {
  m_SuggestedNumberOfDlPacketsIsSet = false;
}
int32_t NpConfiguration::getGroupReportingGuardTime() const {
  return m_GroupReportingGuardTime;
}
void NpConfiguration::setGroupReportingGuardTime(int32_t const value) {
  m_GroupReportingGuardTime = value;
  m_GroupReportingGuardTimeIsSet = true;
}
bool NpConfiguration::groupReportingGuardTimeIsSet() const {
  return m_GroupReportingGuardTimeIsSet;
}
void NpConfiguration::unsetGroupReportingGuardTime() {
  m_GroupReportingGuardTimeIsSet = false;
}
std::string NpConfiguration::getNotificationDestination() const {
  return m_NotificationDestination;
}
void NpConfiguration::setNotificationDestination(std::string const &value) {
  m_NotificationDestination = value;
  m_NotificationDestinationIsSet = true;
}
bool NpConfiguration::notificationDestinationIsSet() const {
  return m_NotificationDestinationIsSet;
}
void NpConfiguration::unsetNotificationDestination() {
  m_NotificationDestinationIsSet = false;
}
bool NpConfiguration::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void NpConfiguration::setRequestTestNotification(bool const value) {
  m_RequestTestNotification = value;
  m_RequestTestNotificationIsSet = true;
}
bool NpConfiguration::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void NpConfiguration::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig NpConfiguration::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void NpConfiguration::setWebsockNotifConfig(WebsockNotifConfig const &value) {
  m_WebsockNotifConfig = value;
  m_WebsockNotifConfigIsSet = true;
}
bool NpConfiguration::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void NpConfiguration::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
std::string NpConfiguration::getValidityTime() const { return m_ValidityTime; }
void NpConfiguration::setValidityTime(std::string const &value) {
  m_ValidityTime = value;
  m_ValidityTimeIsSet = true;
}
bool NpConfiguration::validityTimeIsSet() const { return m_ValidityTimeIsSet; }
void NpConfiguration::unsetValidityTime() { m_ValidityTimeIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
