/**
 * 3gpp-ecr-control
 * API for enhanced converage restriction control. Â© 2021, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ECRData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ECRData::ECRData() {
  m_SupportedFeatures = "";
  m_VisitedPlmnIdIsSet = false;
  m_EcrDataWbsIsSet = false;
  m_RestrictedPlmnIdsIsSet = false;
  m_AllowedPlmnIdsIsSet = false;
}

ECRData::~ECRData() {}

void ECRData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ECRData &o) {
  j = nlohmann::json();
  j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.visitedPlmnIdIsSet())
    j["visitedPlmnId"] = o.m_VisitedPlmnId;
  if (o.ecrDataWbsIsSet() || !o.m_EcrDataWbs.empty())
    j["ecrDataWbs"] = o.m_EcrDataWbs;
  if (o.restrictedPlmnIdsIsSet() || !o.m_RestrictedPlmnIds.empty())
    j["restrictedPlmnIds"] = o.m_RestrictedPlmnIds;
  if (o.allowedPlmnIdsIsSet() || !o.m_AllowedPlmnIds.empty())
    j["allowedPlmnIds"] = o.m_AllowedPlmnIds;
}

void from_json(const nlohmann::json &j, ECRData &o) {
  j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
  if (j.find("visitedPlmnId") != j.end()) {
    j.at("visitedPlmnId").get_to(o.m_VisitedPlmnId);
    o.m_VisitedPlmnIdIsSet = true;
  }
  if (j.find("ecrDataWbs") != j.end()) {
    j.at("ecrDataWbs").get_to(o.m_EcrDataWbs);
    o.m_EcrDataWbsIsSet = true;
  }
  if (j.find("restrictedPlmnIds") != j.end()) {
    j.at("restrictedPlmnIds").get_to(o.m_RestrictedPlmnIds);
    o.m_RestrictedPlmnIdsIsSet = true;
  }
  if (j.find("allowedPlmnIds") != j.end()) {
    j.at("allowedPlmnIds").get_to(o.m_AllowedPlmnIds);
    o.m_AllowedPlmnIdsIsSet = true;
  }
}

std::string ECRData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void ECRData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
}
PlmnId ECRData::getVisitedPlmnId() const { return m_VisitedPlmnId; }
void ECRData::setVisitedPlmnId(PlmnId const &value) {
  m_VisitedPlmnId = value;
  m_VisitedPlmnIdIsSet = true;
}
bool ECRData::visitedPlmnIdIsSet() const { return m_VisitedPlmnIdIsSet; }
void ECRData::unsetVisitedPlmnId() { m_VisitedPlmnIdIsSet = false; }
std::vector<PlmnEcRestrictionDataWb> &ECRData::getEcrDataWbs() {
  return m_EcrDataWbs;
}
void ECRData::setEcrDataWbs(std::vector<PlmnEcRestrictionDataWb> const &value) {
  m_EcrDataWbs = value;
  m_EcrDataWbsIsSet = true;
}
bool ECRData::ecrDataWbsIsSet() const { return m_EcrDataWbsIsSet; }
void ECRData::unsetEcrDataWbs() { m_EcrDataWbsIsSet = false; }
std::vector<PlmnId> &ECRData::getRestrictedPlmnIds() {
  return m_RestrictedPlmnIds;
}
void ECRData::setRestrictedPlmnIds(std::vector<PlmnId> const &value) {
  m_RestrictedPlmnIds = value;
  m_RestrictedPlmnIdsIsSet = true;
}
bool ECRData::restrictedPlmnIdsIsSet() const {
  return m_RestrictedPlmnIdsIsSet;
}
void ECRData::unsetRestrictedPlmnIds() { m_RestrictedPlmnIdsIsSet = false; }
std::vector<PlmnId> &ECRData::getAllowedPlmnIds() { return m_AllowedPlmnIds; }
void ECRData::setAllowedPlmnIds(std::vector<PlmnId> const &value) {
  m_AllowedPlmnIds = value;
  m_AllowedPlmnIdsIsSet = true;
}
bool ECRData::allowedPlmnIdsIsSet() const { return m_AllowedPlmnIdsIsSet; }
void ECRData::unsetAllowedPlmnIds() { m_AllowedPlmnIdsIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
