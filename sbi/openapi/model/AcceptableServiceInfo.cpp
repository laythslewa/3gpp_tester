/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AcceptableServiceInfo.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AcceptableServiceInfo::AcceptableServiceInfo() {
  m_AccBwMedCompsIsSet = false;
  m_MarBwUl = "";
  m_MarBwUlIsSet = false;
  m_MarBwDl = "";
  m_MarBwDlIsSet = false;
}

AcceptableServiceInfo::~AcceptableServiceInfo() {}

void AcceptableServiceInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AcceptableServiceInfo &o) {
  j = nlohmann::json();
  if (o.accBwMedCompsIsSet() || !o.m_AccBwMedComps.empty())
    j["accBwMedComps"] = o.m_AccBwMedComps;
  if (o.marBwUlIsSet())
    j["marBwUl"] = o.m_MarBwUl;
  if (o.marBwDlIsSet())
    j["marBwDl"] = o.m_MarBwDl;
}

void from_json(const nlohmann::json &j, AcceptableServiceInfo &o) {
  if (j.find("accBwMedComps") != j.end()) {
    j.at("accBwMedComps").get_to(o.m_AccBwMedComps);
    o.m_AccBwMedCompsIsSet = true;
  }
  if (j.find("marBwUl") != j.end()) {
    j.at("marBwUl").get_to(o.m_MarBwUl);
    o.m_MarBwUlIsSet = true;
  }
  if (j.find("marBwDl") != j.end()) {
    j.at("marBwDl").get_to(o.m_MarBwDl);
    o.m_MarBwDlIsSet = true;
  }
}

std::map<std::string, MediaComponent> &
AcceptableServiceInfo::getAccBwMedComps() {
  return m_AccBwMedComps;
}
void AcceptableServiceInfo::setAccBwMedComps(
    std::map<std::string, MediaComponent> const &value) {
  m_AccBwMedComps = value;
  m_AccBwMedCompsIsSet = true;
}
bool AcceptableServiceInfo::accBwMedCompsIsSet() const {
  return m_AccBwMedCompsIsSet;
}
void AcceptableServiceInfo::unsetAccBwMedComps() {
  m_AccBwMedCompsIsSet = false;
}
std::string AcceptableServiceInfo::getMarBwUl() const { return m_MarBwUl; }
void AcceptableServiceInfo::setMarBwUl(std::string const &value) {
  m_MarBwUl = value;
  m_MarBwUlIsSet = true;
}
bool AcceptableServiceInfo::marBwUlIsSet() const { return m_MarBwUlIsSet; }
void AcceptableServiceInfo::unsetMarBwUl() { m_MarBwUlIsSet = false; }
std::string AcceptableServiceInfo::getMarBwDl() const { return m_MarBwDl; }
void AcceptableServiceInfo::setMarBwDl(std::string const &value) {
  m_MarBwDl = value;
  m_MarBwDlIsSet = true;
}
bool AcceptableServiceInfo::marBwDlIsSet() const { return m_MarBwDlIsSet; }
void AcceptableServiceInfo::unsetMarBwDl() { m_MarBwDlIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
