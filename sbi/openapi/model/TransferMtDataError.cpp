/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "TransferMtDataError.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

TransferMtDataError::TransferMtDataError() {
  m_Type = "";
  m_TypeIsSet = false;
  m_Title = "";
  m_TitleIsSet = false;
  m_Status = 0;
  m_StatusIsSet = false;
  m_Detail = "";
  m_DetailIsSet = false;
  m_Instance = "";
  m_InstanceIsSet = false;
  m_Cause = "";
  m_CauseIsSet = false;
  m_InvalidParamsIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_AccessTokenErrorIsSet = false;
  m_AccessTokenRequestIsSet = false;
  m_NrfId = "";
  m_NrfIdIsSet = false;
  m_MaxWaitingTime = 0;
  m_MaxWaitingTimeIsSet = false;
}

TransferMtDataError::~TransferMtDataError() {}

void TransferMtDataError::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const TransferMtDataError &o) {
  j = nlohmann::json();
  if (o.typeIsSet())
    j["type"] = o.m_Type;
  if (o.titleIsSet())
    j["title"] = o.m_Title;
  if (o.statusIsSet())
    j["status"] = o.m_Status;
  if (o.detailIsSet())
    j["detail"] = o.m_Detail;
  if (o.instanceIsSet())
    j["instance"] = o.m_Instance;
  if (o.causeIsSet())
    j["cause"] = o.m_Cause;
  if (o.invalidParamsIsSet() || !o.m_InvalidParams.empty())
    j["invalidParams"] = o.m_InvalidParams;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.accessTokenErrorIsSet())
    j["accessTokenError"] = o.m_AccessTokenError;
  if (o.accessTokenRequestIsSet())
    j["accessTokenRequest"] = o.m_AccessTokenRequest;
  if (o.nrfIdIsSet())
    j["nrfId"] = o.m_NrfId;
  if (o.maxWaitingTimeIsSet())
    j["maxWaitingTime"] = o.m_MaxWaitingTime;
}

void from_json(const nlohmann::json &j, TransferMtDataError &o) {
  if (j.find("type") != j.end()) {
    j.at("type").get_to(o.m_Type);
    o.m_TypeIsSet = true;
  }
  if (j.find("title") != j.end()) {
    j.at("title").get_to(o.m_Title);
    o.m_TitleIsSet = true;
  }
  if (j.find("status") != j.end()) {
    j.at("status").get_to(o.m_Status);
    o.m_StatusIsSet = true;
  }
  if (j.find("detail") != j.end()) {
    j.at("detail").get_to(o.m_Detail);
    o.m_DetailIsSet = true;
  }
  if (j.find("instance") != j.end()) {
    j.at("instance").get_to(o.m_Instance);
    o.m_InstanceIsSet = true;
  }
  if (j.find("cause") != j.end()) {
    j.at("cause").get_to(o.m_Cause);
    o.m_CauseIsSet = true;
  }
  if (j.find("invalidParams") != j.end()) {
    j.at("invalidParams").get_to(o.m_InvalidParams);
    o.m_InvalidParamsIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("accessTokenError") != j.end()) {
    j.at("accessTokenError").get_to(o.m_AccessTokenError);
    o.m_AccessTokenErrorIsSet = true;
  }
  if (j.find("accessTokenRequest") != j.end()) {
    j.at("accessTokenRequest").get_to(o.m_AccessTokenRequest);
    o.m_AccessTokenRequestIsSet = true;
  }
  if (j.find("nrfId") != j.end()) {
    j.at("nrfId").get_to(o.m_NrfId);
    o.m_NrfIdIsSet = true;
  }
  if (j.find("maxWaitingTime") != j.end()) {
    j.at("maxWaitingTime").get_to(o.m_MaxWaitingTime);
    o.m_MaxWaitingTimeIsSet = true;
  }
}

std::string TransferMtDataError::getType() const { return m_Type; }
void TransferMtDataError::setType(std::string const &value) {
  m_Type = value;
  m_TypeIsSet = true;
}
bool TransferMtDataError::typeIsSet() const { return m_TypeIsSet; }
void TransferMtDataError::unsetType() { m_TypeIsSet = false; }
std::string TransferMtDataError::getTitle() const { return m_Title; }
void TransferMtDataError::setTitle(std::string const &value) {
  m_Title = value;
  m_TitleIsSet = true;
}
bool TransferMtDataError::titleIsSet() const { return m_TitleIsSet; }
void TransferMtDataError::unsetTitle() { m_TitleIsSet = false; }
int32_t TransferMtDataError::getStatus() const { return m_Status; }
void TransferMtDataError::setStatus(int32_t const value) {
  m_Status = value;
  m_StatusIsSet = true;
}
bool TransferMtDataError::statusIsSet() const { return m_StatusIsSet; }
void TransferMtDataError::unsetStatus() { m_StatusIsSet = false; }
std::string TransferMtDataError::getDetail() const { return m_Detail; }
void TransferMtDataError::setDetail(std::string const &value) {
  m_Detail = value;
  m_DetailIsSet = true;
}
bool TransferMtDataError::detailIsSet() const { return m_DetailIsSet; }
void TransferMtDataError::unsetDetail() { m_DetailIsSet = false; }
std::string TransferMtDataError::getInstance() const { return m_Instance; }
void TransferMtDataError::setInstance(std::string const &value) {
  m_Instance = value;
  m_InstanceIsSet = true;
}
bool TransferMtDataError::instanceIsSet() const { return m_InstanceIsSet; }
void TransferMtDataError::unsetInstance() { m_InstanceIsSet = false; }
std::string TransferMtDataError::getCause() const { return m_Cause; }
void TransferMtDataError::setCause(std::string const &value) {
  m_Cause = value;
  m_CauseIsSet = true;
}
bool TransferMtDataError::causeIsSet() const { return m_CauseIsSet; }
void TransferMtDataError::unsetCause() { m_CauseIsSet = false; }
std::vector<InvalidParam> &TransferMtDataError::getInvalidParams() {
  return m_InvalidParams;
}
void TransferMtDataError::setInvalidParams(
    std::vector<InvalidParam> const &value) {
  m_InvalidParams = value;
  m_InvalidParamsIsSet = true;
}
bool TransferMtDataError::invalidParamsIsSet() const {
  return m_InvalidParamsIsSet;
}
void TransferMtDataError::unsetInvalidParams() { m_InvalidParamsIsSet = false; }
std::string TransferMtDataError::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void TransferMtDataError::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool TransferMtDataError::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void TransferMtDataError::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
AccessTokenErr TransferMtDataError::getAccessTokenError() const {
  return m_AccessTokenError;
}
void TransferMtDataError::setAccessTokenError(AccessTokenErr const &value) {
  m_AccessTokenError = value;
  m_AccessTokenErrorIsSet = true;
}
bool TransferMtDataError::accessTokenErrorIsSet() const {
  return m_AccessTokenErrorIsSet;
}
void TransferMtDataError::unsetAccessTokenError() {
  m_AccessTokenErrorIsSet = false;
}
AccessTokenReq TransferMtDataError::getAccessTokenRequest() const {
  return m_AccessTokenRequest;
}
void TransferMtDataError::setAccessTokenRequest(AccessTokenReq const &value) {
  m_AccessTokenRequest = value;
  m_AccessTokenRequestIsSet = true;
}
bool TransferMtDataError::accessTokenRequestIsSet() const {
  return m_AccessTokenRequestIsSet;
}
void TransferMtDataError::unsetAccessTokenRequest() {
  m_AccessTokenRequestIsSet = false;
}
std::string TransferMtDataError::getNrfId() const { return m_NrfId; }
void TransferMtDataError::setNrfId(std::string const &value) {
  m_NrfId = value;
  m_NrfIdIsSet = true;
}
bool TransferMtDataError::nrfIdIsSet() const { return m_NrfIdIsSet; }
void TransferMtDataError::unsetNrfId() { m_NrfIdIsSet = false; }
int32_t TransferMtDataError::getMaxWaitingTime() const {
  return m_MaxWaitingTime;
}
void TransferMtDataError::setMaxWaitingTime(int32_t const value) {
  m_MaxWaitingTime = value;
  m_MaxWaitingTimeIsSet = true;
}
bool TransferMtDataError::maxWaitingTimeIsSet() const {
  return m_MaxWaitingTimeIsSet;
}
void TransferMtDataError::unsetMaxWaitingTime() {
  m_MaxWaitingTimeIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
