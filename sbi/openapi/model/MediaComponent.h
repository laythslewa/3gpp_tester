/**
 * Npcf_PolicyAuthorization Service API
 * PCF Policy Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MediaComponent.h
 *
 * Identifies a media component.
 */

#ifndef MediaComponent_H_
#define MediaComponent_H_

#include "AfRoutingRequirement.h"
#include "FlowStatus.h"
#include "MediaSubComponent.h"
#include "MediaType.h"
#include "PreemptionCapability.h"
#include "PreemptionVulnerability.h"
#include "PrioritySharingIndicator.h"
#include "ReservPriority.h"
#include "TscaiInputContainer.h"
#include "TsnQosContainer.h"
#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Identifies a media component.
/// </summary>
class MediaComponent {
public:
  MediaComponent();
  virtual ~MediaComponent();

  void validate();

  /////////////////////////////////////////////
  /// MediaComponent members

  /// <summary>
  /// Contains an AF application identifier.
  /// </summary>
  std::string getAfAppId() const;
  void setAfAppId(std::string const &value);
  bool afAppIdIsSet() const;
  void unsetAfAppId();
  /// <summary>
  ///
  /// </summary>
  AfRoutingRequirement getAfRoutReq() const;
  void setAfRoutReq(AfRoutingRequirement const &value);
  bool afRoutReqIsSet() const;
  void unsetAfRoutReq();
  /// <summary>
  ///
  /// </summary>
  std::string getQosReference() const;
  void setQosReference(std::string const &value);
  bool qosReferenceIsSet() const;
  void unsetQosReference();
  /// <summary>
  ///
  /// </summary>
  bool isDisUeNotif() const;
  void setDisUeNotif(bool const value);
  bool disUeNotifIsSet() const;
  void unsetDisUeNotif();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getAltSerReqs();
  void setAltSerReqs(std::vector<std::string> const &value);
  bool altSerReqsIsSet() const;
  void unsetAltSerReqs();
  /// <summary>
  /// Represents the content version of some content.
  /// </summary>
  int32_t getContVer() const;
  void setContVer(int32_t const value);
  bool contVerIsSet() const;
  void unsetContVer();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getCodecs();
  void setCodecs(std::vector<std::string> const &value);
  bool codecsIsSet() const;
  void unsetCodecs();
  /// <summary>
  /// string with format \&quot;float\&quot; as defined in OpenAPI.
  /// </summary>
  float getDesMaxLatency() const;
  void setDesMaxLatency(float const value);
  bool desMaxLatencyIsSet() const;
  void unsetDesMaxLatency();
  /// <summary>
  /// string with format \&quot;float\&quot; as defined in OpenAPI.
  /// </summary>
  float getDesMaxLoss() const;
  void setDesMaxLoss(float const value);
  bool desMaxLossIsSet() const;
  void unsetDesMaxLoss();
  /// <summary>
  ///
  /// </summary>
  std::string getFlusId() const;
  void setFlusId(std::string const &value);
  bool flusIdIsSet() const;
  void unsetFlusId();
  /// <summary>
  ///
  /// </summary>
  FlowStatus getFStatus() const;
  void setFStatus(FlowStatus const &value);
  bool fStatusIsSet() const;
  void unsetFStatus();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getMarBwDl() const;
  void setMarBwDl(std::string const &value);
  bool marBwDlIsSet() const;
  void unsetMarBwDl();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getMarBwUl() const;
  void setMarBwUl(std::string const &value);
  bool marBwUlIsSet() const;
  void unsetMarBwUl();
  /// <summary>
  /// This data type is defined in the same way as the
  /// \&quot;PacketLossRate\&quot; data type, but with the OpenAPI
  /// \&quot;nullable&#x3D; true\&quot; property
  /// </summary>
  int32_t getMaxPacketLossRateDl() const;
  void setMaxPacketLossRateDl(int32_t const value);
  bool maxPacketLossRateDlIsSet() const;
  void unsetMaxPacketLossRateDl();
  /// <summary>
  /// This data type is defined in the same way as the
  /// \&quot;PacketLossRate\&quot; data type, but with the OpenAPI
  /// \&quot;nullable&#x3D; true\&quot; property
  /// </summary>
  int32_t getMaxPacketLossRateUl() const;
  void setMaxPacketLossRateUl(int32_t const value);
  bool maxPacketLossRateUlIsSet() const;
  void unsetMaxPacketLossRateUl();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getMaxSuppBwDl() const;
  void setMaxSuppBwDl(std::string const &value);
  bool maxSuppBwDlIsSet() const;
  void unsetMaxSuppBwDl();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getMaxSuppBwUl() const;
  void setMaxSuppBwUl(std::string const &value);
  bool maxSuppBwUlIsSet() const;
  void unsetMaxSuppBwUl();
  /// <summary>
  ///
  /// </summary>
  int32_t getMedCompN() const;
  void setMedCompN(int32_t const value);
  /// <summary>
  /// Contains the requested bitrate and filters for the set of service data
  /// flows identified by their common flow identifier. The key of the map is
  /// the fNum attribute.
  /// </summary>
  std::map<std::string, MediaSubComponent> &getMedSubComps();
  void setMedSubComps(std::map<std::string, MediaSubComponent> const &value);
  bool medSubCompsIsSet() const;
  void unsetMedSubComps();
  /// <summary>
  ///
  /// </summary>
  MediaType getMedType() const;
  void setMedType(MediaType const &value);
  bool medTypeIsSet() const;
  void unsetMedType();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getMinDesBwDl() const;
  void setMinDesBwDl(std::string const &value);
  bool minDesBwDlIsSet() const;
  void unsetMinDesBwDl();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getMinDesBwUl() const;
  void setMinDesBwUl(std::string const &value);
  bool minDesBwUlIsSet() const;
  void unsetMinDesBwUl();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getMirBwDl() const;
  void setMirBwDl(std::string const &value);
  bool mirBwDlIsSet() const;
  void unsetMirBwDl();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getMirBwUl() const;
  void setMirBwUl(std::string const &value);
  bool mirBwUlIsSet() const;
  void unsetMirBwUl();
  /// <summary>
  ///
  /// </summary>
  PreemptionCapability getPreemptCap() const;
  void setPreemptCap(PreemptionCapability const &value);
  bool preemptCapIsSet() const;
  void unsetPreemptCap();
  /// <summary>
  ///
  /// </summary>
  PreemptionVulnerability getPreemptVuln() const;
  void setPreemptVuln(PreemptionVulnerability const &value);
  bool preemptVulnIsSet() const;
  void unsetPreemptVuln();
  /// <summary>
  ///
  /// </summary>
  PrioritySharingIndicator getPrioSharingInd() const;
  void setPrioSharingInd(PrioritySharingIndicator const &value);
  bool prioSharingIndIsSet() const;
  void unsetPrioSharingInd();
  /// <summary>
  ///
  /// </summary>
  ReservPriority getResPrio() const;
  void setResPrio(ReservPriority const &value);
  bool resPrioIsSet() const;
  void unsetResPrio();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getRrBw() const;
  void setRrBw(std::string const &value);
  bool rrBwIsSet() const;
  void unsetRrBw();
  /// <summary>
  /// String representing a bit rate that shall be formatted as follows.
  /// </summary>
  std::string getRsBw() const;
  void setRsBw(std::string const &value);
  bool rsBwIsSet() const;
  void unsetRsBw();
  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 32-bit integer.
  /// </summary>
  int32_t getSharingKeyDl() const;
  void setSharingKeyDl(int32_t const value);
  bool sharingKeyDlIsSet() const;
  void unsetSharingKeyDl();
  /// <summary>
  /// Integer where the allowed values correspond to the value range of an
  /// unsigned 32-bit integer.
  /// </summary>
  int32_t getSharingKeyUl() const;
  void setSharingKeyUl(int32_t const value);
  bool sharingKeyUlIsSet() const;
  void unsetSharingKeyUl();
  /// <summary>
  ///
  /// </summary>
  TsnQosContainer getTsnQos() const;
  void setTsnQos(TsnQosContainer const &value);
  bool tsnQosIsSet() const;
  void unsetTsnQos();
  /// <summary>
  ///
  /// </summary>
  TscaiInputContainer getTscaiInputDl() const;
  void setTscaiInputDl(TscaiInputContainer const &value);
  bool tscaiInputDlIsSet() const;
  void unsetTscaiInputDl();
  /// <summary>
  ///
  /// </summary>
  TscaiInputContainer getTscaiInputUl() const;
  void setTscaiInputUl(TscaiInputContainer const &value);
  bool tscaiInputUlIsSet() const;
  void unsetTscaiInputUl();
  /// <summary>
  /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
  /// </summary>
  int32_t getTscaiTimeDom() const;
  void setTscaiTimeDom(int32_t const value);
  bool tscaiTimeDomIsSet() const;
  void unsetTscaiTimeDom();

  friend void to_json(nlohmann::json &j, const MediaComponent &o);
  friend void from_json(const nlohmann::json &j, MediaComponent &o);

protected:
  std::string m_AfAppId;
  bool m_AfAppIdIsSet;
  AfRoutingRequirement m_AfRoutReq;
  bool m_AfRoutReqIsSet;
  std::string m_QosReference;
  bool m_QosReferenceIsSet;
  bool m_DisUeNotif;
  bool m_DisUeNotifIsSet;
  std::vector<std::string> m_AltSerReqs;
  bool m_AltSerReqsIsSet;
  int32_t m_ContVer;
  bool m_ContVerIsSet;
  std::vector<std::string> m_Codecs;
  bool m_CodecsIsSet;
  float m_DesMaxLatency;
  bool m_DesMaxLatencyIsSet;
  float m_DesMaxLoss;
  bool m_DesMaxLossIsSet;
  std::string m_FlusId;
  bool m_FlusIdIsSet;
  FlowStatus m_FStatus;
  bool m_FStatusIsSet;
  std::string m_MarBwDl;
  bool m_MarBwDlIsSet;
  std::string m_MarBwUl;
  bool m_MarBwUlIsSet;
  int32_t m_MaxPacketLossRateDl;
  bool m_MaxPacketLossRateDlIsSet;
  int32_t m_MaxPacketLossRateUl;
  bool m_MaxPacketLossRateUlIsSet;
  std::string m_MaxSuppBwDl;
  bool m_MaxSuppBwDlIsSet;
  std::string m_MaxSuppBwUl;
  bool m_MaxSuppBwUlIsSet;
  int32_t m_MedCompN;

  std::map<std::string, MediaSubComponent> m_MedSubComps;
  bool m_MedSubCompsIsSet;
  MediaType m_MedType;
  bool m_MedTypeIsSet;
  std::string m_MinDesBwDl;
  bool m_MinDesBwDlIsSet;
  std::string m_MinDesBwUl;
  bool m_MinDesBwUlIsSet;
  std::string m_MirBwDl;
  bool m_MirBwDlIsSet;
  std::string m_MirBwUl;
  bool m_MirBwUlIsSet;
  PreemptionCapability m_PreemptCap;
  bool m_PreemptCapIsSet;
  PreemptionVulnerability m_PreemptVuln;
  bool m_PreemptVulnIsSet;
  PrioritySharingIndicator m_PrioSharingInd;
  bool m_PrioSharingIndIsSet;
  ReservPriority m_ResPrio;
  bool m_ResPrioIsSet;
  std::string m_RrBw;
  bool m_RrBwIsSet;
  std::string m_RsBw;
  bool m_RsBwIsSet;
  int32_t m_SharingKeyDl;
  bool m_SharingKeyDlIsSet;
  int32_t m_SharingKeyUl;
  bool m_SharingKeyUlIsSet;
  TsnQosContainer m_TsnQos;
  bool m_TsnQosIsSet;
  TscaiInputContainer m_TscaiInputDl;
  bool m_TscaiInputDlIsSet;
  TscaiInputContainer m_TscaiInputUl;
  bool m_TscaiInputUlIsSet;
  int32_t m_TscaiTimeDom;
  bool m_TscaiTimeDomIsSet;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* MediaComponent_H_ */
