/**
 * 3gpp-time-sync-exposure
 * API for time synchronization exposure. © 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CapabilityRequest.h
 *
 * Contains requested parameters for time synchronization capability.
 */

#ifndef CapabilityRequest_H_
#define CapabilityRequest_H_

#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Contains requested parameters for time synchronization capability.
/// </summary>
class CapabilityRequest {
public:
  CapabilityRequest();
  virtual ~CapabilityRequest();

  void validate();

  /////////////////////////////////////////////
  /// CapabilityRequest members

  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more
  /// information.
  /// </summary>
  std::string getExterGroupId() const;
  void setExterGroupId(std::string const &value);
  bool exterGroupIdIsSet() const;
  void unsetExterGroupId();
  /// <summary>
  /// Contains a list of UE for which the time synchronization capabilities is
  /// requested.
  /// </summary>
  std::map<std::string, std::string> &getGpsis();
  void setGpsis(std::map<std::string, std::string> const &value);
  bool gpsisIsSet() const;
  void unsetGpsis();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);

  friend void to_json(nlohmann::json &j, const CapabilityRequest &o);
  friend void from_json(const nlohmann::json &j, CapabilityRequest &o);

protected:
  std::string m_ExterGroupId;
  bool m_ExterGroupIdIsSet;
  std::map<std::string, std::string> m_Gpsis;
  bool m_GpsisIsSet;
  std::string m_SuppFeat;
};

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* CapabilityRequest_H_ */
