/**
 * Unified Data Repository Service API file for subscription data
 * Unified Data Repository Service (subscription data). The API version is
 * defined in 3GPP TS 29.504. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: -
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PpDataEntry.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PpDataEntry::PpDataEntry() {
  m_CommunicationCharacteristicsIsSet = false;
  m_ReferenceId = 0;
  m_ReferenceIdIsSet = false;
  m_ValidityTime = "";
  m_ValidityTimeIsSet = false;
  m_MtcProviderInformation = "";
  m_MtcProviderInformationIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

PpDataEntry::~PpDataEntry() {}

void PpDataEntry::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PpDataEntry &o) {
  j = nlohmann::json();
  if (o.communicationCharacteristicsIsSet())
    j["communicationCharacteristics"] = o.m_CommunicationCharacteristics;
  if (o.referenceIdIsSet())
    j["referenceId"] = o.m_ReferenceId;
  if (o.validityTimeIsSet())
    j["validityTime"] = o.m_ValidityTime;
  if (o.mtcProviderInformationIsSet())
    j["mtcProviderInformation"] = o.m_MtcProviderInformation;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, PpDataEntry &o) {
  if (j.find("communicationCharacteristics") != j.end()) {
    j.at("communicationCharacteristics")
        .get_to(o.m_CommunicationCharacteristics);
    o.m_CommunicationCharacteristicsIsSet = true;
  }
  if (j.find("referenceId") != j.end()) {
    j.at("referenceId").get_to(o.m_ReferenceId);
    o.m_ReferenceIdIsSet = true;
  }
  if (j.find("validityTime") != j.end()) {
    j.at("validityTime").get_to(o.m_ValidityTime);
    o.m_ValidityTimeIsSet = true;
  }
  if (j.find("mtcProviderInformation") != j.end()) {
    j.at("mtcProviderInformation").get_to(o.m_MtcProviderInformation);
    o.m_MtcProviderInformationIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

CommunicationCharacteristicsAF
PpDataEntry::getCommunicationCharacteristics() const {
  return m_CommunicationCharacteristics;
}
void PpDataEntry::setCommunicationCharacteristics(
    CommunicationCharacteristicsAF const &value) {
  m_CommunicationCharacteristics = value;
  m_CommunicationCharacteristicsIsSet = true;
}
bool PpDataEntry::communicationCharacteristicsIsSet() const {
  return m_CommunicationCharacteristicsIsSet;
}
void PpDataEntry::unsetCommunicationCharacteristics() {
  m_CommunicationCharacteristicsIsSet = false;
}
int32_t PpDataEntry::getReferenceId() const { return m_ReferenceId; }
void PpDataEntry::setReferenceId(int32_t const value) {
  m_ReferenceId = value;
  m_ReferenceIdIsSet = true;
}
bool PpDataEntry::referenceIdIsSet() const { return m_ReferenceIdIsSet; }
void PpDataEntry::unsetReferenceId() { m_ReferenceIdIsSet = false; }
std::string PpDataEntry::getValidityTime() const { return m_ValidityTime; }
void PpDataEntry::setValidityTime(std::string const &value) {
  m_ValidityTime = value;
  m_ValidityTimeIsSet = true;
}
bool PpDataEntry::validityTimeIsSet() const { return m_ValidityTimeIsSet; }
void PpDataEntry::unsetValidityTime() { m_ValidityTimeIsSet = false; }
std::string PpDataEntry::getMtcProviderInformation() const {
  return m_MtcProviderInformation;
}
void PpDataEntry::setMtcProviderInformation(std::string const &value) {
  m_MtcProviderInformation = value;
  m_MtcProviderInformationIsSet = true;
}
bool PpDataEntry::mtcProviderInformationIsSet() const {
  return m_MtcProviderInformationIsSet;
}
void PpDataEntry::unsetMtcProviderInformation() {
  m_MtcProviderInformationIsSet = false;
}
std::string PpDataEntry::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void PpDataEntry::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool PpDataEntry::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void PpDataEntry::unsetSupportedFeatures() { m_SupportedFeaturesIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
