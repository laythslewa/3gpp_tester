/**
 * LMF Location
 * LMF Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "LocContextData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

LocContextData::LocContextData() {
  m_AmfId = "";
  m_LocationQoSIsSet = false;
  m_SupportedGADShapesIsSet = false;
  m_Supi = "";
  m_SupiIsSet = false;
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_HgmlcCallBackURI = "";
  m_LdrReference = "";
  m_PeriodicEventInfoIsSet = false;
  m_AreaEventInfoIsSet = false;
  m_MotionEventInfoIsSet = false;
  m_EventReportingStatusIsSet = false;
  m_UeLocationInfoIsSet = false;
  m_CIoT5GSOptimisation = false;
  m_CIoT5GSOptimisationIsSet = false;
  m_EcgiIsSet = false;
  m_NcgiIsSet = false;
  m_GuamiIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

LocContextData::~LocContextData() {}

void LocContextData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const LocContextData &o) {
  j = nlohmann::json();
  j["amfId"] = o.m_AmfId;
  if (o.locationQoSIsSet())
    j["locationQoS"] = o.m_LocationQoS;
  if (o.supportedGADShapesIsSet() || !o.m_SupportedGADShapes.empty())
    j["supportedGADShapes"] = o.m_SupportedGADShapes;
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  j["ldrType"] = o.m_LdrType;
  j["hgmlcCallBackURI"] = o.m_HgmlcCallBackURI;
  j["ldrReference"] = o.m_LdrReference;
  if (o.periodicEventInfoIsSet())
    j["periodicEventInfo"] = o.m_PeriodicEventInfo;
  if (o.areaEventInfoIsSet())
    j["areaEventInfo"] = o.m_AreaEventInfo;
  if (o.motionEventInfoIsSet())
    j["motionEventInfo"] = o.m_MotionEventInfo;
  j["eventReportMessage"] = o.m_EventReportMessage;
  if (o.eventReportingStatusIsSet())
    j["eventReportingStatus"] = o.m_EventReportingStatus;
  if (o.ueLocationInfoIsSet())
    j["ueLocationInfo"] = o.m_UeLocationInfo;
  if (o.cIoT5GSOptimisationIsSet())
    j["cIoT5GSOptimisation"] = o.m_CIoT5GSOptimisation;
  if (o.ecgiIsSet())
    j["ecgi"] = o.m_Ecgi;
  if (o.ncgiIsSet())
    j["ncgi"] = o.m_Ncgi;
  if (o.guamiIsSet())
    j["guami"] = o.m_Guami;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, LocContextData &o) {
  j.at("amfId").get_to(o.m_AmfId);
  if (j.find("locationQoS") != j.end()) {
    j.at("locationQoS").get_to(o.m_LocationQoS);
    o.m_LocationQoSIsSet = true;
  }
  if (j.find("supportedGADShapes") != j.end()) {
    j.at("supportedGADShapes").get_to(o.m_SupportedGADShapes);
    o.m_SupportedGADShapesIsSet = true;
  }
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  j.at("ldrType").get_to(o.m_LdrType);
  j.at("hgmlcCallBackURI").get_to(o.m_HgmlcCallBackURI);
  j.at("ldrReference").get_to(o.m_LdrReference);
  if (j.find("periodicEventInfo") != j.end()) {
    j.at("periodicEventInfo").get_to(o.m_PeriodicEventInfo);
    o.m_PeriodicEventInfoIsSet = true;
  }
  if (j.find("areaEventInfo") != j.end()) {
    j.at("areaEventInfo").get_to(o.m_AreaEventInfo);
    o.m_AreaEventInfoIsSet = true;
  }
  if (j.find("motionEventInfo") != j.end()) {
    j.at("motionEventInfo").get_to(o.m_MotionEventInfo);
    o.m_MotionEventInfoIsSet = true;
  }
  j.at("eventReportMessage").get_to(o.m_EventReportMessage);
  if (j.find("eventReportingStatus") != j.end()) {
    j.at("eventReportingStatus").get_to(o.m_EventReportingStatus);
    o.m_EventReportingStatusIsSet = true;
  }
  if (j.find("ueLocationInfo") != j.end()) {
    j.at("ueLocationInfo").get_to(o.m_UeLocationInfo);
    o.m_UeLocationInfoIsSet = true;
  }
  if (j.find("cIoT5GSOptimisation") != j.end()) {
    j.at("cIoT5GSOptimisation").get_to(o.m_CIoT5GSOptimisation);
    o.m_CIoT5GSOptimisationIsSet = true;
  }
  if (j.find("ecgi") != j.end()) {
    j.at("ecgi").get_to(o.m_Ecgi);
    o.m_EcgiIsSet = true;
  }
  if (j.find("ncgi") != j.end()) {
    j.at("ncgi").get_to(o.m_Ncgi);
    o.m_NcgiIsSet = true;
  }
  if (j.find("guami") != j.end()) {
    j.at("guami").get_to(o.m_Guami);
    o.m_GuamiIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

std::string LocContextData::getAmfId() const { return m_AmfId; }
void LocContextData::setAmfId(std::string const &value) { m_AmfId = value; }
LocationQoS LocContextData::getLocationQoS() const { return m_LocationQoS; }
void LocContextData::setLocationQoS(LocationQoS const &value) {
  m_LocationQoS = value;
  m_LocationQoSIsSet = true;
}
bool LocContextData::locationQoSIsSet() const { return m_LocationQoSIsSet; }
void LocContextData::unsetLocationQoS() { m_LocationQoSIsSet = false; }
std::vector<SupportedGADShapes> &LocContextData::getSupportedGADShapes() {
  return m_SupportedGADShapes;
}
void LocContextData::setSupportedGADShapes(
    std::vector<SupportedGADShapes> const &value) {
  m_SupportedGADShapes = value;
  m_SupportedGADShapesIsSet = true;
}
bool LocContextData::supportedGADShapesIsSet() const {
  return m_SupportedGADShapesIsSet;
}
void LocContextData::unsetSupportedGADShapes() {
  m_SupportedGADShapesIsSet = false;
}
std::string LocContextData::getSupi() const { return m_Supi; }
void LocContextData::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool LocContextData::supiIsSet() const { return m_SupiIsSet; }
void LocContextData::unsetSupi() { m_SupiIsSet = false; }
std::string LocContextData::getGpsi() const { return m_Gpsi; }
void LocContextData::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool LocContextData::gpsiIsSet() const { return m_GpsiIsSet; }
void LocContextData::unsetGpsi() { m_GpsiIsSet = false; }
LdrType LocContextData::getLdrType() const { return m_LdrType; }
void LocContextData::setLdrType(LdrType const &value) { m_LdrType = value; }
std::string LocContextData::getHgmlcCallBackURI() const {
  return m_HgmlcCallBackURI;
}
void LocContextData::setHgmlcCallBackURI(std::string const &value) {
  m_HgmlcCallBackURI = value;
}
std::string LocContextData::getLdrReference() const { return m_LdrReference; }
void LocContextData::setLdrReference(std::string const &value) {
  m_LdrReference = value;
}
PeriodicEventInfo LocContextData::getPeriodicEventInfo() const {
  return m_PeriodicEventInfo;
}
void LocContextData::setPeriodicEventInfo(PeriodicEventInfo const &value) {
  m_PeriodicEventInfo = value;
  m_PeriodicEventInfoIsSet = true;
}
bool LocContextData::periodicEventInfoIsSet() const {
  return m_PeriodicEventInfoIsSet;
}
void LocContextData::unsetPeriodicEventInfo() {
  m_PeriodicEventInfoIsSet = false;
}
AreaEventInfo LocContextData::getAreaEventInfo() const {
  return m_AreaEventInfo;
}
void LocContextData::setAreaEventInfo(AreaEventInfo const &value) {
  m_AreaEventInfo = value;
  m_AreaEventInfoIsSet = true;
}
bool LocContextData::areaEventInfoIsSet() const { return m_AreaEventInfoIsSet; }
void LocContextData::unsetAreaEventInfo() { m_AreaEventInfoIsSet = false; }
MotionEventInfo LocContextData::getMotionEventInfo() const {
  return m_MotionEventInfo;
}
void LocContextData::setMotionEventInfo(MotionEventInfo const &value) {
  m_MotionEventInfo = value;
  m_MotionEventInfoIsSet = true;
}
bool LocContextData::motionEventInfoIsSet() const {
  return m_MotionEventInfoIsSet;
}
void LocContextData::unsetMotionEventInfo() { m_MotionEventInfoIsSet = false; }
EventReportMessage LocContextData::getEventReportMessage() const {
  return m_EventReportMessage;
}
void LocContextData::setEventReportMessage(EventReportMessage const &value) {
  m_EventReportMessage = value;
}
EventReportingStatus LocContextData::getEventReportingStatus() const {
  return m_EventReportingStatus;
}
void LocContextData::setEventReportingStatus(
    EventReportingStatus const &value) {
  m_EventReportingStatus = value;
  m_EventReportingStatusIsSet = true;
}
bool LocContextData::eventReportingStatusIsSet() const {
  return m_EventReportingStatusIsSet;
}
void LocContextData::unsetEventReportingStatus() {
  m_EventReportingStatusIsSet = false;
}
UELocationInfo LocContextData::getUeLocationInfo() const {
  return m_UeLocationInfo;
}
void LocContextData::setUeLocationInfo(UELocationInfo const &value) {
  m_UeLocationInfo = value;
  m_UeLocationInfoIsSet = true;
}
bool LocContextData::ueLocationInfoIsSet() const {
  return m_UeLocationInfoIsSet;
}
void LocContextData::unsetUeLocationInfo() { m_UeLocationInfoIsSet = false; }
bool LocContextData::isCIoT5GSOptimisation() const {
  return m_CIoT5GSOptimisation;
}
void LocContextData::setCIoT5GSOptimisation(bool const value) {
  m_CIoT5GSOptimisation = value;
  m_CIoT5GSOptimisationIsSet = true;
}
bool LocContextData::cIoT5GSOptimisationIsSet() const {
  return m_CIoT5GSOptimisationIsSet;
}
void LocContextData::unsetCIoT5GSOptimisation() {
  m_CIoT5GSOptimisationIsSet = false;
}
Ecgi LocContextData::getEcgi() const { return m_Ecgi; }
void LocContextData::setEcgi(Ecgi const &value) {
  m_Ecgi = value;
  m_EcgiIsSet = true;
}
bool LocContextData::ecgiIsSet() const { return m_EcgiIsSet; }
void LocContextData::unsetEcgi() { m_EcgiIsSet = false; }
Ncgi LocContextData::getNcgi() const { return m_Ncgi; }
void LocContextData::setNcgi(Ncgi const &value) {
  m_Ncgi = value;
  m_NcgiIsSet = true;
}
bool LocContextData::ncgiIsSet() const { return m_NcgiIsSet; }
void LocContextData::unsetNcgi() { m_NcgiIsSet = false; }
Guami LocContextData::getGuami() const { return m_Guami; }
void LocContextData::setGuami(Guami const &value) {
  m_Guami = value;
  m_GuamiIsSet = true;
}
bool LocContextData::guamiIsSet() const { return m_GuamiIsSet; }
void LocContextData::unsetGuami() { m_GuamiIsSet = false; }
std::string LocContextData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void LocContextData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool LocContextData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void LocContextData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
