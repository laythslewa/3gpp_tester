/**
 * LMF Location
 * LMF Location Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA,
 * ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "InputData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

InputData::InputData() {
  m_ExternalClientTypeIsSet = false;
  m_CorrelationID = "";
  m_CorrelationIDIsSet = false;
  m_AmfId = "";
  m_AmfIdIsSet = false;
  m_LocationQoSIsSet = false;
  m_SupportedGADShapesIsSet = false;
  m_Supi = "";
  m_SupiIsSet = false;
  m_Pei = "";
  m_PeiIsSet = false;
  m_Gpsi = "";
  m_GpsiIsSet = false;
  m_EcgiIsSet = false;
  m_EcgiOnSecondNodeIsSet = false;
  m_NcgiIsSet = false;
  m_NcgiOnSecondNodeIsSet = false;
  m_PriorityIsSet = false;
  m_VelocityRequestedIsSet = false;
  m_UeLcsCapIsSet = false;
  m_LcsServiceType = 0;
  m_LcsServiceTypeIsSet = false;
  m_LdrTypeIsSet = false;
  m_HgmlcCallBackURI = "";
  m_HgmlcCallBackURIIsSet = false;
  m_VgmlcAddress = "";
  m_VgmlcAddressIsSet = false;
  m_LdrReference = "";
  m_LdrReferenceIsSet = false;
  m_PeriodicEventInfoIsSet = false;
  m_AreaEventInfoIsSet = false;
  m_MotionEventInfoIsSet = false;
  m_ReportingAccessTypesIsSet = false;
  m_UeConnectivityStatesIsSet = false;
  m_UeLocationServiceIndIsSet = false;
  m_MoAssistanceDataTypesIsSet = false;
  m_LppMessageIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

InputData::~InputData() {}

void InputData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const InputData &o) {
  j = nlohmann::json();
  if (o.externalClientTypeIsSet())
    j["externalClientType"] = o.m_ExternalClientType;
  if (o.correlationIDIsSet())
    j["correlationID"] = o.m_CorrelationID;
  if (o.amfIdIsSet())
    j["amfId"] = o.m_AmfId;
  if (o.locationQoSIsSet())
    j["locationQoS"] = o.m_LocationQoS;
  if (o.supportedGADShapesIsSet() || !o.m_SupportedGADShapes.empty())
    j["supportedGADShapes"] = o.m_SupportedGADShapes;
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  if (o.peiIsSet())
    j["pei"] = o.m_Pei;
  if (o.gpsiIsSet())
    j["gpsi"] = o.m_Gpsi;
  if (o.ecgiIsSet())
    j["ecgi"] = o.m_Ecgi;
  if (o.ecgiOnSecondNodeIsSet())
    j["ecgiOnSecondNode"] = o.m_EcgiOnSecondNode;
  if (o.ncgiIsSet())
    j["ncgi"] = o.m_Ncgi;
  if (o.ncgiOnSecondNodeIsSet())
    j["ncgiOnSecondNode"] = o.m_NcgiOnSecondNode;
  if (o.priorityIsSet())
    j["priority"] = o.m_Priority;
  if (o.velocityRequestedIsSet())
    j["velocityRequested"] = o.m_VelocityRequested;
  if (o.ueLcsCapIsSet())
    j["ueLcsCap"] = o.m_UeLcsCap;
  if (o.lcsServiceTypeIsSet())
    j["lcsServiceType"] = o.m_LcsServiceType;
  if (o.ldrTypeIsSet())
    j["ldrType"] = o.m_LdrType;
  if (o.hgmlcCallBackURIIsSet())
    j["hgmlcCallBackURI"] = o.m_HgmlcCallBackURI;
  if (o.vgmlcAddressIsSet())
    j["vgmlcAddress"] = o.m_VgmlcAddress;
  if (o.ldrReferenceIsSet())
    j["ldrReference"] = o.m_LdrReference;
  if (o.periodicEventInfoIsSet())
    j["periodicEventInfo"] = o.m_PeriodicEventInfo;
  if (o.areaEventInfoIsSet())
    j["areaEventInfo"] = o.m_AreaEventInfo;
  if (o.motionEventInfoIsSet())
    j["motionEventInfo"] = o.m_MotionEventInfo;
  if (o.reportingAccessTypesIsSet() || !o.m_ReportingAccessTypes.empty())
    j["reportingAccessTypes"] = o.m_ReportingAccessTypes;
  if (o.ueConnectivityStatesIsSet())
    j["ueConnectivityStates"] = o.m_UeConnectivityStates;
  if (o.ueLocationServiceIndIsSet())
    j["ueLocationServiceInd"] = o.m_UeLocationServiceInd;
  if (o.moAssistanceDataTypesIsSet())
    j["moAssistanceDataTypes"] = o.m_MoAssistanceDataTypes;
  if (o.lppMessageIsSet())
    j["lppMessage"] = o.m_LppMessage;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, InputData &o) {
  if (j.find("externalClientType") != j.end()) {
    j.at("externalClientType").get_to(o.m_ExternalClientType);
    o.m_ExternalClientTypeIsSet = true;
  }
  if (j.find("correlationID") != j.end()) {
    j.at("correlationID").get_to(o.m_CorrelationID);
    o.m_CorrelationIDIsSet = true;
  }
  if (j.find("amfId") != j.end()) {
    j.at("amfId").get_to(o.m_AmfId);
    o.m_AmfIdIsSet = true;
  }
  if (j.find("locationQoS") != j.end()) {
    j.at("locationQoS").get_to(o.m_LocationQoS);
    o.m_LocationQoSIsSet = true;
  }
  if (j.find("supportedGADShapes") != j.end()) {
    j.at("supportedGADShapes").get_to(o.m_SupportedGADShapes);
    o.m_SupportedGADShapesIsSet = true;
  }
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("pei") != j.end()) {
    j.at("pei").get_to(o.m_Pei);
    o.m_PeiIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("ecgi") != j.end()) {
    j.at("ecgi").get_to(o.m_Ecgi);
    o.m_EcgiIsSet = true;
  }
  if (j.find("ecgiOnSecondNode") != j.end()) {
    j.at("ecgiOnSecondNode").get_to(o.m_EcgiOnSecondNode);
    o.m_EcgiOnSecondNodeIsSet = true;
  }
  if (j.find("ncgi") != j.end()) {
    j.at("ncgi").get_to(o.m_Ncgi);
    o.m_NcgiIsSet = true;
  }
  if (j.find("ncgiOnSecondNode") != j.end()) {
    j.at("ncgiOnSecondNode").get_to(o.m_NcgiOnSecondNode);
    o.m_NcgiOnSecondNodeIsSet = true;
  }
  if (j.find("priority") != j.end()) {
    j.at("priority").get_to(o.m_Priority);
    o.m_PriorityIsSet = true;
  }
  if (j.find("velocityRequested") != j.end()) {
    j.at("velocityRequested").get_to(o.m_VelocityRequested);
    o.m_VelocityRequestedIsSet = true;
  }
  if (j.find("ueLcsCap") != j.end()) {
    j.at("ueLcsCap").get_to(o.m_UeLcsCap);
    o.m_UeLcsCapIsSet = true;
  }
  if (j.find("lcsServiceType") != j.end()) {
    j.at("lcsServiceType").get_to(o.m_LcsServiceType);
    o.m_LcsServiceTypeIsSet = true;
  }
  if (j.find("ldrType") != j.end()) {
    j.at("ldrType").get_to(o.m_LdrType);
    o.m_LdrTypeIsSet = true;
  }
  if (j.find("hgmlcCallBackURI") != j.end()) {
    j.at("hgmlcCallBackURI").get_to(o.m_HgmlcCallBackURI);
    o.m_HgmlcCallBackURIIsSet = true;
  }
  if (j.find("vgmlcAddress") != j.end()) {
    j.at("vgmlcAddress").get_to(o.m_VgmlcAddress);
    o.m_VgmlcAddressIsSet = true;
  }
  if (j.find("ldrReference") != j.end()) {
    j.at("ldrReference").get_to(o.m_LdrReference);
    o.m_LdrReferenceIsSet = true;
  }
  if (j.find("periodicEventInfo") != j.end()) {
    j.at("periodicEventInfo").get_to(o.m_PeriodicEventInfo);
    o.m_PeriodicEventInfoIsSet = true;
  }
  if (j.find("areaEventInfo") != j.end()) {
    j.at("areaEventInfo").get_to(o.m_AreaEventInfo);
    o.m_AreaEventInfoIsSet = true;
  }
  if (j.find("motionEventInfo") != j.end()) {
    j.at("motionEventInfo").get_to(o.m_MotionEventInfo);
    o.m_MotionEventInfoIsSet = true;
  }
  if (j.find("reportingAccessTypes") != j.end()) {
    j.at("reportingAccessTypes").get_to(o.m_ReportingAccessTypes);
    o.m_ReportingAccessTypesIsSet = true;
  }
  if (j.find("ueConnectivityStates") != j.end()) {
    j.at("ueConnectivityStates").get_to(o.m_UeConnectivityStates);
    o.m_UeConnectivityStatesIsSet = true;
  }
  if (j.find("ueLocationServiceInd") != j.end()) {
    j.at("ueLocationServiceInd").get_to(o.m_UeLocationServiceInd);
    o.m_UeLocationServiceIndIsSet = true;
  }
  if (j.find("moAssistanceDataTypes") != j.end()) {
    j.at("moAssistanceDataTypes").get_to(o.m_MoAssistanceDataTypes);
    o.m_MoAssistanceDataTypesIsSet = true;
  }
  if (j.find("lppMessage") != j.end()) {
    j.at("lppMessage").get_to(o.m_LppMessage);
    o.m_LppMessageIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

ExternalClientType InputData::getExternalClientType() const {
  return m_ExternalClientType;
}
void InputData::setExternalClientType(ExternalClientType const &value) {
  m_ExternalClientType = value;
  m_ExternalClientTypeIsSet = true;
}
bool InputData::externalClientTypeIsSet() const {
  return m_ExternalClientTypeIsSet;
}
void InputData::unsetExternalClientType() { m_ExternalClientTypeIsSet = false; }
std::string InputData::getCorrelationID() const { return m_CorrelationID; }
void InputData::setCorrelationID(std::string const &value) {
  m_CorrelationID = value;
  m_CorrelationIDIsSet = true;
}
bool InputData::correlationIDIsSet() const { return m_CorrelationIDIsSet; }
void InputData::unsetCorrelationID() { m_CorrelationIDIsSet = false; }
std::string InputData::getAmfId() const { return m_AmfId; }
void InputData::setAmfId(std::string const &value) {
  m_AmfId = value;
  m_AmfIdIsSet = true;
}
bool InputData::amfIdIsSet() const { return m_AmfIdIsSet; }
void InputData::unsetAmfId() { m_AmfIdIsSet = false; }
LocationQoS InputData::getLocationQoS() const { return m_LocationQoS; }
void InputData::setLocationQoS(LocationQoS const &value) {
  m_LocationQoS = value;
  m_LocationQoSIsSet = true;
}
bool InputData::locationQoSIsSet() const { return m_LocationQoSIsSet; }
void InputData::unsetLocationQoS() { m_LocationQoSIsSet = false; }
std::vector<SupportedGADShapes> &InputData::getSupportedGADShapes() {
  return m_SupportedGADShapes;
}
void InputData::setSupportedGADShapes(
    std::vector<SupportedGADShapes> const &value) {
  m_SupportedGADShapes = value;
  m_SupportedGADShapesIsSet = true;
}
bool InputData::supportedGADShapesIsSet() const {
  return m_SupportedGADShapesIsSet;
}
void InputData::unsetSupportedGADShapes() { m_SupportedGADShapesIsSet = false; }
std::string InputData::getSupi() const { return m_Supi; }
void InputData::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool InputData::supiIsSet() const { return m_SupiIsSet; }
void InputData::unsetSupi() { m_SupiIsSet = false; }
std::string InputData::getPei() const { return m_Pei; }
void InputData::setPei(std::string const &value) {
  m_Pei = value;
  m_PeiIsSet = true;
}
bool InputData::peiIsSet() const { return m_PeiIsSet; }
void InputData::unsetPei() { m_PeiIsSet = false; }
std::string InputData::getGpsi() const { return m_Gpsi; }
void InputData::setGpsi(std::string const &value) {
  m_Gpsi = value;
  m_GpsiIsSet = true;
}
bool InputData::gpsiIsSet() const { return m_GpsiIsSet; }
void InputData::unsetGpsi() { m_GpsiIsSet = false; }
Ecgi InputData::getEcgi() const { return m_Ecgi; }
void InputData::setEcgi(Ecgi const &value) {
  m_Ecgi = value;
  m_EcgiIsSet = true;
}
bool InputData::ecgiIsSet() const { return m_EcgiIsSet; }
void InputData::unsetEcgi() { m_EcgiIsSet = false; }
Ecgi InputData::getEcgiOnSecondNode() const { return m_EcgiOnSecondNode; }
void InputData::setEcgiOnSecondNode(Ecgi const &value) {
  m_EcgiOnSecondNode = value;
  m_EcgiOnSecondNodeIsSet = true;
}
bool InputData::ecgiOnSecondNodeIsSet() const {
  return m_EcgiOnSecondNodeIsSet;
}
void InputData::unsetEcgiOnSecondNode() { m_EcgiOnSecondNodeIsSet = false; }
Ncgi InputData::getNcgi() const { return m_Ncgi; }
void InputData::setNcgi(Ncgi const &value) {
  m_Ncgi = value;
  m_NcgiIsSet = true;
}
bool InputData::ncgiIsSet() const { return m_NcgiIsSet; }
void InputData::unsetNcgi() { m_NcgiIsSet = false; }
Ncgi InputData::getNcgiOnSecondNode() const { return m_NcgiOnSecondNode; }
void InputData::setNcgiOnSecondNode(Ncgi const &value) {
  m_NcgiOnSecondNode = value;
  m_NcgiOnSecondNodeIsSet = true;
}
bool InputData::ncgiOnSecondNodeIsSet() const {
  return m_NcgiOnSecondNodeIsSet;
}
void InputData::unsetNcgiOnSecondNode() { m_NcgiOnSecondNodeIsSet = false; }
LcsPriority InputData::getPriority() const { return m_Priority; }
void InputData::setPriority(LcsPriority const &value) {
  m_Priority = value;
  m_PriorityIsSet = true;
}
bool InputData::priorityIsSet() const { return m_PriorityIsSet; }
void InputData::unsetPriority() { m_PriorityIsSet = false; }
VelocityRequested InputData::getVelocityRequested() const {
  return m_VelocityRequested;
}
void InputData::setVelocityRequested(VelocityRequested const &value) {
  m_VelocityRequested = value;
  m_VelocityRequestedIsSet = true;
}
bool InputData::velocityRequestedIsSet() const {
  return m_VelocityRequestedIsSet;
}
void InputData::unsetVelocityRequested() { m_VelocityRequestedIsSet = false; }
UeLcsCapability InputData::getUeLcsCap() const { return m_UeLcsCap; }
void InputData::setUeLcsCap(UeLcsCapability const &value) {
  m_UeLcsCap = value;
  m_UeLcsCapIsSet = true;
}
bool InputData::ueLcsCapIsSet() const { return m_UeLcsCapIsSet; }
void InputData::unsetUeLcsCap() { m_UeLcsCapIsSet = false; }
int32_t InputData::getLcsServiceType() const { return m_LcsServiceType; }
void InputData::setLcsServiceType(int32_t const value) {
  m_LcsServiceType = value;
  m_LcsServiceTypeIsSet = true;
}
bool InputData::lcsServiceTypeIsSet() const { return m_LcsServiceTypeIsSet; }
void InputData::unsetLcsServiceType() { m_LcsServiceTypeIsSet = false; }
LdrType InputData::getLdrType() const { return m_LdrType; }
void InputData::setLdrType(LdrType const &value) {
  m_LdrType = value;
  m_LdrTypeIsSet = true;
}
bool InputData::ldrTypeIsSet() const { return m_LdrTypeIsSet; }
void InputData::unsetLdrType() { m_LdrTypeIsSet = false; }
std::string InputData::getHgmlcCallBackURI() const {
  return m_HgmlcCallBackURI;
}
void InputData::setHgmlcCallBackURI(std::string const &value) {
  m_HgmlcCallBackURI = value;
  m_HgmlcCallBackURIIsSet = true;
}
bool InputData::hgmlcCallBackURIIsSet() const {
  return m_HgmlcCallBackURIIsSet;
}
void InputData::unsetHgmlcCallBackURI() { m_HgmlcCallBackURIIsSet = false; }
std::string InputData::getVgmlcAddress() const { return m_VgmlcAddress; }
void InputData::setVgmlcAddress(std::string const &value) {
  m_VgmlcAddress = value;
  m_VgmlcAddressIsSet = true;
}
bool InputData::vgmlcAddressIsSet() const { return m_VgmlcAddressIsSet; }
void InputData::unsetVgmlcAddress() { m_VgmlcAddressIsSet = false; }
std::string InputData::getLdrReference() const { return m_LdrReference; }
void InputData::setLdrReference(std::string const &value) {
  m_LdrReference = value;
  m_LdrReferenceIsSet = true;
}
bool InputData::ldrReferenceIsSet() const { return m_LdrReferenceIsSet; }
void InputData::unsetLdrReference() { m_LdrReferenceIsSet = false; }
PeriodicEventInfo InputData::getPeriodicEventInfo() const {
  return m_PeriodicEventInfo;
}
void InputData::setPeriodicEventInfo(PeriodicEventInfo const &value) {
  m_PeriodicEventInfo = value;
  m_PeriodicEventInfoIsSet = true;
}
bool InputData::periodicEventInfoIsSet() const {
  return m_PeriodicEventInfoIsSet;
}
void InputData::unsetPeriodicEventInfo() { m_PeriodicEventInfoIsSet = false; }
AreaEventInfo InputData::getAreaEventInfo() const { return m_AreaEventInfo; }
void InputData::setAreaEventInfo(AreaEventInfo const &value) {
  m_AreaEventInfo = value;
  m_AreaEventInfoIsSet = true;
}
bool InputData::areaEventInfoIsSet() const { return m_AreaEventInfoIsSet; }
void InputData::unsetAreaEventInfo() { m_AreaEventInfoIsSet = false; }
MotionEventInfo InputData::getMotionEventInfo() const {
  return m_MotionEventInfo;
}
void InputData::setMotionEventInfo(MotionEventInfo const &value) {
  m_MotionEventInfo = value;
  m_MotionEventInfoIsSet = true;
}
bool InputData::motionEventInfoIsSet() const { return m_MotionEventInfoIsSet; }
void InputData::unsetMotionEventInfo() { m_MotionEventInfoIsSet = false; }
std::vector<ReportingAccessType> &InputData::getReportingAccessTypes() {
  return m_ReportingAccessTypes;
}
void InputData::setReportingAccessTypes(
    std::vector<ReportingAccessType> const &value) {
  m_ReportingAccessTypes = value;
  m_ReportingAccessTypesIsSet = true;
}
bool InputData::reportingAccessTypesIsSet() const {
  return m_ReportingAccessTypesIsSet;
}
void InputData::unsetReportingAccessTypes() {
  m_ReportingAccessTypesIsSet = false;
}
UeConnectivityState InputData::getUeConnectivityStates() const {
  return m_UeConnectivityStates;
}
void InputData::setUeConnectivityStates(UeConnectivityState const &value) {
  m_UeConnectivityStates = value;
  m_UeConnectivityStatesIsSet = true;
}
bool InputData::ueConnectivityStatesIsSet() const {
  return m_UeConnectivityStatesIsSet;
}
void InputData::unsetUeConnectivityStates() {
  m_UeConnectivityStatesIsSet = false;
}
UeLocationServiceInd InputData::getUeLocationServiceInd() const {
  return m_UeLocationServiceInd;
}
void InputData::setUeLocationServiceInd(UeLocationServiceInd const &value) {
  m_UeLocationServiceInd = value;
  m_UeLocationServiceIndIsSet = true;
}
bool InputData::ueLocationServiceIndIsSet() const {
  return m_UeLocationServiceIndIsSet;
}
void InputData::unsetUeLocationServiceInd() {
  m_UeLocationServiceIndIsSet = false;
}
LcsBroadcastAssistanceTypesData InputData::getMoAssistanceDataTypes() const {
  return m_MoAssistanceDataTypes;
}
void InputData::setMoAssistanceDataTypes(
    LcsBroadcastAssistanceTypesData const &value) {
  m_MoAssistanceDataTypes = value;
  m_MoAssistanceDataTypesIsSet = true;
}
bool InputData::moAssistanceDataTypesIsSet() const {
  return m_MoAssistanceDataTypesIsSet;
}
void InputData::unsetMoAssistanceDataTypes() {
  m_MoAssistanceDataTypesIsSet = false;
}
RefToBinaryData InputData::getLppMessage() const { return m_LppMessage; }
void InputData::setLppMessage(RefToBinaryData const &value) {
  m_LppMessage = value;
  m_LppMessageIsSet = true;
}
bool InputData::lppMessageIsSet() const { return m_LppMessageIsSet; }
void InputData::unsetLppMessage() { m_LppMessageIsSet = false; }
std::string InputData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void InputData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool InputData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void InputData::unsetSupportedFeatures() { m_SupportedFeaturesIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
