/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AmfEventMode.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AmfEventMode::AmfEventMode() {
  m_MaxReports = 0;
  m_MaxReportsIsSet = false;
  m_Expiry = "";
  m_ExpiryIsSet = false;
  m_RepPeriod = 0;
  m_RepPeriodIsSet = false;
  m_SampRatio = 0;
  m_SampRatioIsSet = false;
  m_PartitioningCriteriaIsSet = false;
  m_NotifFlagIsSet = false;
}

AmfEventMode::~AmfEventMode() {}

void AmfEventMode::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const AmfEventMode &o) {
  j = nlohmann::json();
  j["trigger"] = o.m_Trigger;
  if (o.maxReportsIsSet())
    j["maxReports"] = o.m_MaxReports;
  if (o.expiryIsSet())
    j["expiry"] = o.m_Expiry;
  if (o.repPeriodIsSet())
    j["repPeriod"] = o.m_RepPeriod;
  if (o.sampRatioIsSet())
    j["sampRatio"] = o.m_SampRatio;
  if (o.partitioningCriteriaIsSet() || !o.m_PartitioningCriteria.empty())
    j["partitioningCriteria"] = o.m_PartitioningCriteria;
  if (o.notifFlagIsSet())
    j["notifFlag"] = o.m_NotifFlag;
}

void from_json(const nlohmann::json &j, AmfEventMode &o) {
  j.at("trigger").get_to(o.m_Trigger);
  if (j.find("maxReports") != j.end()) {
    j.at("maxReports").get_to(o.m_MaxReports);
    o.m_MaxReportsIsSet = true;
  }
  if (j.find("expiry") != j.end()) {
    j.at("expiry").get_to(o.m_Expiry);
    o.m_ExpiryIsSet = true;
  }
  if (j.find("repPeriod") != j.end()) {
    j.at("repPeriod").get_to(o.m_RepPeriod);
    o.m_RepPeriodIsSet = true;
  }
  if (j.find("sampRatio") != j.end()) {
    j.at("sampRatio").get_to(o.m_SampRatio);
    o.m_SampRatioIsSet = true;
  }
  if (j.find("partitioningCriteria") != j.end()) {
    j.at("partitioningCriteria").get_to(o.m_PartitioningCriteria);
    o.m_PartitioningCriteriaIsSet = true;
  }
  if (j.find("notifFlag") != j.end()) {
    j.at("notifFlag").get_to(o.m_NotifFlag);
    o.m_NotifFlagIsSet = true;
  }
}

AmfEventTrigger AmfEventMode::getTrigger() const { return m_Trigger; }
void AmfEventMode::setTrigger(AmfEventTrigger const &value) {
  m_Trigger = value;
}
int32_t AmfEventMode::getMaxReports() const { return m_MaxReports; }
void AmfEventMode::setMaxReports(int32_t const value) {
  m_MaxReports = value;
  m_MaxReportsIsSet = true;
}
bool AmfEventMode::maxReportsIsSet() const { return m_MaxReportsIsSet; }
void AmfEventMode::unsetMaxReports() { m_MaxReportsIsSet = false; }
std::string AmfEventMode::getExpiry() const { return m_Expiry; }
void AmfEventMode::setExpiry(std::string const &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}
bool AmfEventMode::expiryIsSet() const { return m_ExpiryIsSet; }
void AmfEventMode::unsetExpiry() { m_ExpiryIsSet = false; }
int32_t AmfEventMode::getRepPeriod() const { return m_RepPeriod; }
void AmfEventMode::setRepPeriod(int32_t const value) {
  m_RepPeriod = value;
  m_RepPeriodIsSet = true;
}
bool AmfEventMode::repPeriodIsSet() const { return m_RepPeriodIsSet; }
void AmfEventMode::unsetRepPeriod() { m_RepPeriodIsSet = false; }
int32_t AmfEventMode::getSampRatio() const { return m_SampRatio; }
void AmfEventMode::setSampRatio(int32_t const value) {
  m_SampRatio = value;
  m_SampRatioIsSet = true;
}
bool AmfEventMode::sampRatioIsSet() const { return m_SampRatioIsSet; }
void AmfEventMode::unsetSampRatio() { m_SampRatioIsSet = false; }
std::vector<PartitioningCriteria> &AmfEventMode::getPartitioningCriteria() {
  return m_PartitioningCriteria;
}
void AmfEventMode::setPartitioningCriteria(
    std::vector<PartitioningCriteria> const &value) {
  m_PartitioningCriteria = value;
  m_PartitioningCriteriaIsSet = true;
}
bool AmfEventMode::partitioningCriteriaIsSet() const {
  return m_PartitioningCriteriaIsSet;
}
void AmfEventMode::unsetPartitioningCriteria() {
  m_PartitioningCriteriaIsSet = false;
}
NotificationFlag AmfEventMode::getNotifFlag() const { return m_NotifFlag; }
void AmfEventMode::setNotifFlag(NotificationFlag const &value) {
  m_NotifFlag = value;
  m_NotifFlagIsSet = true;
}
bool AmfEventMode::notifFlagIsSet() const { return m_NotifFlagIsSet; }
void AmfEventMode::unsetNotifFlag() { m_NotifFlagIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
