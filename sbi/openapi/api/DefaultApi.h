/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2020, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DefaultApi.h
 *
 *
 */

#ifndef DefaultApi_H_
#define DefaultApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "ChargingDataRequest.h"
#include "ChargingDataResponse.h"
#include "ProblemDetails.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class DefaultApi {
public:
  DefaultApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~DefaultApi() {}
  void init();

  const std::string base = "/nchf-offlineonlycharging/v1";

private:
  void setupRoutes();

  void offlinechargingdata_offline_charging_data_ref_release_post_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void offlinechargingdata_offline_charging_data_ref_update_post_handler(
      const Pistache::Rest::Request &request,
      Pistache::Http::ResponseWriter response);
  void
  offlinechargingdata_post_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response);
  void default_api_default_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="offlineChargingDataRef">a unique identifier for a charging
  /// data resource in a PLMN</param> <param name="chargingDataRequest"></param>
  virtual void offlinechargingdata_offline_charging_data_ref_release_post(
      const std::string &offlineChargingDataRef,
      const ChargingDataRequest &chargingDataRequest,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="offlineChargingDataRef">a unique identifier for a charging
  /// data resource in a PLMN</param> <param name="chargingDataRequest"></param>
  virtual void offlinechargingdata_offline_charging_data_ref_update_post(
      const std::string &offlineChargingDataRef,
      const ChargingDataRequest &chargingDataRequest,
      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="chargingDataRequest"></param>
  virtual void
  offlinechargingdata_post(const ChargingDataRequest &chargingDataRequest,
                           Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* DefaultApi_H_ */
