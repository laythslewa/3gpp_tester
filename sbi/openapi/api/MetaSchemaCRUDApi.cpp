/**
 * Nudsf_DataRepository
 * Nudsf Data Repository Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MetaSchemaCRUDApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

MetaSchemaCRUDApi::MetaSchemaCRUDApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void MetaSchemaCRUDApi::init() { setupRoutes(); }

void MetaSchemaCRUDApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Put(
      *router, base + "/:realmId/:storageId/meta-schemas/:schemaId",
      Routes::bind(&MetaSchemaCRUDApi::create_or_modify_meta_schema_handler,
                   this));
  Routes::Delete(
      *router, base + "/:realmId/:storageId/meta-schemas/:schemaId",
      Routes::bind(&MetaSchemaCRUDApi::delete_meta_schema_handler, this));
  Routes::Get(*router, base + "/:realmId/:storageId/meta-schemas/:schemaId",
              Routes::bind(&MetaSchemaCRUDApi::get_meta_schema_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &MetaSchemaCRUDApi::meta_schema_crud_api_default_handler, this));
}

void MetaSchemaCRUDApi::create_or_modify_meta_schema_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto realmId = request.param(":realmId").as<std::string>();
  auto storageId = request.param(":storageId").as<std::string>();
  auto schemaId = request.param(":schemaId").as<std::string>();

  // Getting the body param

  MetaSchema metaSchema;

  // Getting the query params
  auto getPreviousQuery = request.query().get("get-previous");
  Pistache::Optional<bool> getPrevious;
  if (!getPreviousQuery.isEmpty()) {
    bool valueQuery_instance;
    if (fromStringValue(getPreviousQuery.get(), valueQuery_instance)) {
      getPrevious = Pistache::Some(valueQuery_instance);
    }
  }
  auto supportedFeaturesQuery = request.query().get("supported-features");
  Pistache::Optional<std::string> supportedFeatures;
  if (!supportedFeaturesQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(supportedFeaturesQuery.get(), valueQuery_instance)) {
      supportedFeatures = Pistache::Some(valueQuery_instance);
    }
  }

  // Getting the header params
  auto ifNoneMatch = request.headers().tryGetRaw("If-None-Match");
  auto ifMatch = request.headers().tryGetRaw("If-Match");

  try {
    nlohmann::json::parse(request.body()).get_to(metaSchema);
    this->create_or_modify_meta_schema(realmId, storageId, schemaId, metaSchema,
                                       ifNoneMatch, ifMatch, getPrevious,
                                       supportedFeatures, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void MetaSchemaCRUDApi::delete_meta_schema_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto realmId = request.param(":realmId").as<std::string>();
  auto storageId = request.param(":storageId").as<std::string>();
  auto schemaId = request.param(":schemaId").as<std::string>();

  // Getting the query params
  auto getPreviousQuery = request.query().get("get-previous");
  Pistache::Optional<bool> getPrevious;
  if (!getPreviousQuery.isEmpty()) {
    bool valueQuery_instance;
    if (fromStringValue(getPreviousQuery.get(), valueQuery_instance)) {
      getPrevious = Pistache::Some(valueQuery_instance);
    }
  }
  auto supportedFeaturesQuery = request.query().get("supported-features");
  Pistache::Optional<std::string> supportedFeatures;
  if (!supportedFeaturesQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(supportedFeaturesQuery.get(), valueQuery_instance)) {
      supportedFeatures = Pistache::Some(valueQuery_instance);
    }
  }

  // Getting the header params
  auto ifMatch = request.headers().tryGetRaw("If-Match");

  try {
    this->delete_meta_schema(realmId, storageId, schemaId, ifMatch, getPrevious,
                             supportedFeatures, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void MetaSchemaCRUDApi::get_meta_schema_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto realmId = request.param(":realmId").as<std::string>();
  auto storageId = request.param(":storageId").as<std::string>();
  auto schemaId = request.param(":schemaId").as<std::string>();

  // Getting the query params
  auto supportedFeaturesQuery = request.query().get("supported-features");
  Pistache::Optional<std::string> supportedFeatures;
  if (!supportedFeaturesQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(supportedFeaturesQuery.get(), valueQuery_instance)) {
      supportedFeatures = Pistache::Some(valueQuery_instance);
    }
  }

  // Getting the header params
  auto ifNoneMatch = request.headers().tryGetRaw("If-None-Match");
  auto ifModifiedSince = request.headers().tryGetRaw("If-Modified-Since");

  try {
    this->get_meta_schema(realmId, storageId, schemaId, ifNoneMatch,
                          ifModifiedSince, supportedFeatures, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void MetaSchemaCRUDApi::meta_schema_crud_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
