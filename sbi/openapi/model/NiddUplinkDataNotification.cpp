/**
 * 3gpp-nidd
 * API for non IP data delivery. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NiddUplinkDataNotification.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

NiddUplinkDataNotification::NiddUplinkDataNotification() {
  m_NiddConfiguration = "";
  m_ExternalId = "";
  m_ExternalIdIsSet = false;
  m_Msisdn = "";
  m_MsisdnIsSet = false;
  m_Data = "";
  m_ReliableDataService = false;
  m_ReliableDataServiceIsSet = false;
  m_RdsPortIsSet = false;
}

NiddUplinkDataNotification::~NiddUplinkDataNotification() {}

void NiddUplinkDataNotification::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const NiddUplinkDataNotification &o) {
  j = nlohmann::json();
  j["niddConfiguration"] = o.m_NiddConfiguration;
  if (o.externalIdIsSet())
    j["externalId"] = o.m_ExternalId;
  if (o.msisdnIsSet())
    j["msisdn"] = o.m_Msisdn;
  j["data"] = o.m_Data;
  if (o.reliableDataServiceIsSet())
    j["reliableDataService"] = o.m_ReliableDataService;
  if (o.rdsPortIsSet())
    j["rdsPort"] = o.m_RdsPort;
}

void from_json(const nlohmann::json &j, NiddUplinkDataNotification &o) {
  j.at("niddConfiguration").get_to(o.m_NiddConfiguration);
  if (j.find("externalId") != j.end()) {
    j.at("externalId").get_to(o.m_ExternalId);
    o.m_ExternalIdIsSet = true;
  }
  if (j.find("msisdn") != j.end()) {
    j.at("msisdn").get_to(o.m_Msisdn);
    o.m_MsisdnIsSet = true;
  }
  j.at("data").get_to(o.m_Data);
  if (j.find("reliableDataService") != j.end()) {
    j.at("reliableDataService").get_to(o.m_ReliableDataService);
    o.m_ReliableDataServiceIsSet = true;
  }
  if (j.find("rdsPort") != j.end()) {
    j.at("rdsPort").get_to(o.m_RdsPort);
    o.m_RdsPortIsSet = true;
  }
}

std::string NiddUplinkDataNotification::getNiddConfiguration() const {
  return m_NiddConfiguration;
}
void NiddUplinkDataNotification::setNiddConfiguration(
    std::string const &value) {
  m_NiddConfiguration = value;
}
std::string NiddUplinkDataNotification::getExternalId() const {
  return m_ExternalId;
}
void NiddUplinkDataNotification::setExternalId(std::string const &value) {
  m_ExternalId = value;
  m_ExternalIdIsSet = true;
}
bool NiddUplinkDataNotification::externalIdIsSet() const {
  return m_ExternalIdIsSet;
}
void NiddUplinkDataNotification::unsetExternalId() {
  m_ExternalIdIsSet = false;
}
std::string NiddUplinkDataNotification::getMsisdn() const { return m_Msisdn; }
void NiddUplinkDataNotification::setMsisdn(std::string const &value) {
  m_Msisdn = value;
  m_MsisdnIsSet = true;
}
bool NiddUplinkDataNotification::msisdnIsSet() const { return m_MsisdnIsSet; }
void NiddUplinkDataNotification::unsetMsisdn() { m_MsisdnIsSet = false; }
std::string NiddUplinkDataNotification::getData() const { return m_Data; }
void NiddUplinkDataNotification::setData(std::string const &value) {
  m_Data = value;
}
bool NiddUplinkDataNotification::isReliableDataService() const {
  return m_ReliableDataService;
}
void NiddUplinkDataNotification::setReliableDataService(bool const value) {
  m_ReliableDataService = value;
  m_ReliableDataServiceIsSet = true;
}
bool NiddUplinkDataNotification::reliableDataServiceIsSet() const {
  return m_ReliableDataServiceIsSet;
}
void NiddUplinkDataNotification::unsetReliableDataService() {
  m_ReliableDataServiceIsSet = false;
}
RdsPort NiddUplinkDataNotification::getRdsPort() const { return m_RdsPort; }
void NiddUplinkDataNotification::setRdsPort(RdsPort const &value) {
  m_RdsPort = value;
  m_RdsPortIsSet = true;
}
bool NiddUplinkDataNotification::rdsPortIsSet() const { return m_RdsPortIsSet; }
void NiddUplinkDataNotification::unsetRdsPort() { m_RdsPortIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
