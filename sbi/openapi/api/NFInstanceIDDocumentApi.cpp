/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NFInstanceIDDocumentApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

NFInstanceIDDocumentApi::NFInstanceIDDocumentApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void NFInstanceIDDocumentApi::init() { setupRoutes(); }

void NFInstanceIDDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Delete(
      *router, base + "/nssai-availability/:nfId",
      Routes::bind(&NFInstanceIDDocumentApi::n_ssai_availability_delete_handler,
                   this));
  Routes::Patch(
      *router, base + "/nssai-availability/:nfId",
      Routes::bind(&NFInstanceIDDocumentApi::n_ssai_availability_patch_handler,
                   this));
  Routes::Put(
      *router, base + "/nssai-availability/:nfId",
      Routes::bind(&NFInstanceIDDocumentApi::n_ssai_availability_put_handler,
                   this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &NFInstanceIDDocumentApi::nf_instance_id_document_api_default_handler,
      this));
}

void NFInstanceIDDocumentApi::n_ssai_availability_delete_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto nfId = request.param(":nfId").as<std::string>();

  try {
    this->n_ssai_availability_delete(nfId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void NFInstanceIDDocumentApi::n_ssai_availability_patch_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto nfId = request.param(":nfId").as<std::string>();

  // Getting the body param
  std::vector<PatchItem> patchItem;

  // Getting the header params
  auto contentEncoding = request.headers().tryGetRaw("Content-Encoding");
  auto acceptEncoding = request.headers().tryGetRaw("Accept-Encoding");

  try {
    nlohmann::json::parse(request.body()).get_to(patchItem);
    this->n_ssai_availability_patch(nfId, patchItem, contentEncoding,
                                    acceptEncoding, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void NFInstanceIDDocumentApi::n_ssai_availability_put_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto nfId = request.param(":nfId").as<std::string>();

  // Getting the body param

  NssaiAvailabilityInfo nssaiAvailabilityInfo;

  // Getting the header params
  auto contentEncoding = request.headers().tryGetRaw("Content-Encoding");
  auto acceptEncoding = request.headers().tryGetRaw("Accept-Encoding");

  try {
    nlohmann::json::parse(request.body()).get_to(nssaiAvailabilityInfo);
    this->n_ssai_availability_put(nfId, nssaiAvailabilityInfo, contentEncoding,
                                  acceptEncoding, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void NFInstanceIDDocumentApi::nf_instance_id_document_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
